<office:document office:mimetype="application/vnd.oasis.opendocument.text" office:version="1.2" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"><office:body><office:text><text:h text:outline-level="1">Préface de David Bruant</text:h><text:p>Cette section est en cours de rédaction.</text:p><text:p></text:p><text:h text:outline-level="1">Avant-propos</text:h><text:p>Node.js&amp;#160;– appelons-le Node dès à présent&amp;#160;– est né dans le cerveau de Ryan Dahl, ancien étudiant sans le sou et au parcours informatique atypique.<text:line-break/>Son talent a été de s&amp;#8217;obstiner à résoudre un problème d&amp;#8217;expérience utilisateur fréquent sur le web&amp;#160;: l&amp;#8217;attente devant un navigateur web figé.<text:line-break/>Son but&amp;#160;? Rendre possible et facile la création de barres de progression dans les navigateurs Web.</text:p><text:p>J&amp;#8217;ai utilisé Node pour la première fois en 2010, par curiosité.<text:line-break/>On en était alors qu&amp;#8217;à la version 0.4.<text:line-break/>Pouvoir créer mon propre serveur HTTP me semblait étrange, moi qui étais un habitué du duo PHP et Apache.<text:line-break/>L&amp;#8217;effet wahou était pourtant là&amp;#160;: une installation en quelques secondes, quelques lignes de JavaScript et j&amp;#8217;avais une API REST câblée avec une base de données CouchDB pour impressionner mes collègues de l&amp;#8217;agence Clever Age.</text:p><text:p>Je bascule dans un contexte startup fin 2011&amp;#160;: nous sommes quatre développeurs avec des bagages différents.<text:line-break/>Nous partons sur Node que notre hébergeur Alwaysdata installe sans encombre.<text:line-break/>Nous avions la sensation de progresser rapidement.<text:line-break/>Nous allions réellement vite.<text:line-break/>JavaScript était devenu notre langue commune grâce à Node.</text:p><text:p>Depuis, de nombreuses entreprises ont communiqué sur leur adoption de Node&amp;#160;:  Paypal, LinkedIn, eBay, Airbnb, British Gaz, Allociné, The New York Times, Yahoo!, Microsoft, Mozilla, Flickr ou encore Twitter.<text:line-break/>Leur utilisation couvre aussi bien l&amp;#8217;outillage métier que les transactions bancaires, des serveurs LDAP, des web services ou des sites web.</text:p><text:p>Pourtant, nombre d&amp;#8217;ouvrages et de ressources se focalisent uniquement sur le dernier framework ou librairie à la mode en passant à côté de l&amp;#8217;essentiel.</text:p><text:h text:outline-level="2">Pourquoi ce livre ?</text:h><text:p>Node est un environnement plaisant et agréable à utiliser, c&amp;#8217;est ce que j&amp;#8217;aime et aspire à partager avec vous au cours des prochaines pages de cet ouvrage.</text:p><text:p>Node est mon outil de travail principal depuis 2011.<text:line-break/>Outillage, tests, API, applications, prototypes et automatisation.<text:line-break/>Sa simplicité, son architecture et l&amp;#8217;emphase sur la modularité m&amp;#8217;ont fait progresser dans l&amp;#8217;usage de JavaScript ainsi que sur la compréhension bas-niveau des systèmes d&amp;#8217;exploitation.</text:p><text:p>Je souhaite offrir un contenu moins technique que d&amp;#8217;ordinaire, plus pratique et encourageant la bidouille&amp;#160;: le livre lui-même peut être installé avec Node, lu et pratiqué dans un shell.</text:p><text:p>Je souhaite aussi partager les principes clés de Node et de la programmation JavaScript.<text:line-break/>Ces principes traversent le temps et vous donneront, je l&amp;#8217;espère, un appétit et des bases plus solides pour créer de petits programmes, faire un prototype rapide ou déployer une application complète.</text:p><text:p>Enfin, l&amp;#8217;écriture de ce livre est également pour moi l&amp;#8217;occasion d&amp;#8217;apprendre de mes pairs, de leurs heures d&amp;#8217;expérience en tant que formateurs, d&amp;#8217;explorer des sujets qui me font peur et sur lesquels je ne me sens pas à l&amp;#8217;aise.</text:p><text:p>Indirectement, je veux déconstruire la posture de l&amp;#8217;expert et du lecteur en ouvrant le contenu pendant le processus d&amp;#8217;écriture, dans un endroit où éditeur, lecteurs et auteurs apprennent les uns des autres.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">À qui s&amp;#8217;adresse cet ouvrage ?</text:h><text:p>Réponse courte&amp;#160;: à tout le monde. Vraiment.</text:p><text:p>Réponse informelle&amp;#160;: à toute personne curieuse ou souhaitant apprendre ou s&amp;#8217;améliorer en programmation, sans forcément trop savoir par où commencer.<text:line-break/>Je crois fermement qu&amp;#8217;apprendre à programmer n&amp;#8217;implique pas de faire de la programmation son métier ni de pratiquer sans erreur&amp;#160;– on peut avoir envie de découvrir par plaisir, par envie de comprendre ses pairs ou pour engager une conversation avec ses collègues.</text:p><text:p>Réponse formelle&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* à des personnes dont la programmation est le métier mais pratiquant peu ou pas assez JavaScript&amp;#160;;,* à des personnes adeptes du développement front-end et cherchant à mieux s&amp;#8217;outiller&amp;#160;;,* à des personnes non-techniques qui chercheraient à prototyper une idée d&amp;#8217;application dans le cadre d&amp;#8217;un projet perso ou d&amp;#8217;une startup&amp;#160;;,* à des personnes souhaitant introduire de nouvelles pratiques dans leur équipe&amp;#160;;,* à des personnes cherchant à faire de JavaScript une<text:line-break/>langue commune entre le back-end et le front-end de leurs applications.<text:line-break/></text:p><text:h text:outline-level="2">Structure de l&amp;#8217;ouvrage</text:h><text:p>Cet ouvrage a été conçu pour être lu dans deux ordres&amp;#160;:<text:line-break/>séquentiel, comme une histoire et transversal, en fonction de vos envies.</text:p><text:p>Cette édition se compose de neuf chapitres&amp;#160;:</text:p><text:p>Des annexes complètent l&amp;#8217;ouvrage avec une sélection de modules npm<text:line-break/>et des exemples de design patterns.<text:line-break/>De quoi élargir notre perception et écrire du code plus robuste.</text:p><text:p>Cet ouvrage est également consultable sur cinq supports&amp;#160;:</text:p><text:p>Le contenu de cet ouvrage est géré grâce à la plate-forme collaborative GitHub.<text:line-break/>Cette plate-forme me permet d&amp;#8217;obtenir des retours, idées et suggestions.</text:p><text:p><text:line-break/><text:line-break/>1. Histoire, écosystème et gouvernance<text:line-break/>Nous apprendrons d&amp;#8217;où vient Node et qui sont les acteurs participant à son histoire.,1. Installer, mettre à jour et développer<text:line-break/>Nous apprendrons à être autonome pour installer Node.js<text:line-break/>sur notre ordinateur ou un serveur, se tenir au courant<text:line-break/>des mises à jour et jongler entre différentes versions.<text:line-break/>Ce sera aussi l&amp;#8217;occasion de découvrir des outils confortables<text:line-break/>pour écrire du code.,1. Jouer avec JavaScript<text:line-break/>Nous apprendrons à comprendre les différences entre<text:line-break/>JavaScript, ECMAScript, le DOM et Node.js.<text:line-break/>Ce sera aussi l&amp;#8217;occasion de revoir les bases du langage<text:line-break/>pour se sentir plus à l&amp;#8217;aise.,1. Jouer avec Node.js<text:line-break/>Nous apprendrons à manipuler des scripts et des modules Node.js&amp;#160;:<text:line-break/>les notres, ceux fournis par Node et ceux de la communauté.,1. Jouer avec npm<text:line-break/>Nous apprendrons à tirer parti de l&amp;#8217;outil livré par défaut avec Node.js.<text:line-break/>Ce sera l&amp;#8217;occasion de s&amp;#8217;amuser à créer nos propres<text:line-break/>outils dignes d&amp;#8217;artisans du logiciel.,1. Déployer notre code<text:line-break/>Nous apprendrons à déployer notre code le plus tôt possible pour célébrer notre premier programme&amp;#160;!,1. Créer une application web<text:line-break/>Nous apprendrons à créer une application web en partant de zéro,<text:line-break/>en utilisant un framework puis en parlant à une base de données.<text:line-break/>Bienvenue dans l&amp;#8217;odyssée d&amp;#8217;une requête HTTP&amp;#160;!,1. Créer un outil en ligne de commande<text:line-break/>Nous apprendrons à rendre du code métier fonctionnel dans un terminal.<text:line-break/>La ligne de commande ne paraîtra plus aussi austère après ça.,1. Créer une application front-end<text:line-break/>Nous apprendrons à utiliser la richesse de l&amp;#8217;écosystème npm<text:line-break/>et à profiter des modules pour écrire des<text:line-break/>applications front-end de qualité.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* livre, le format par excellence&amp;#160;— vendu en librairie et sur Internet&amp;#160;;,* e-book, idéal si vous disposez d&amp;#8217;une liseuse numérique&amp;#160;;,* web, idéal pour bénéficier d&amp;#8217;exemples interactifs, des exemples vidéo et d&amp;#8217;un contenu à jour&amp;#160;;,* npm, idéal pour apprendre Node.js par la pratique&amp;#160;;,* source, idéal pour proposer ou corriger le contenu et apprendre comment l&amp;#8217;ouvrage est constitué.<text:line-break/><text:line-break/><text:line-break/>* github.com/oncletom/nodebook<text:line-break/></text:p><text:h text:outline-level="2">Remerciements</text:h><text:p>Cet ouvrage a été rédigé sur près de quatre années&amp;#160;– longue est la liste<text:line-break/>exhaustive des personnes à remercier.<text:line-break/>Longue aussi est la liste de celles et ceux à qui je dois m&amp;#8217;excuser pour mes<text:line-break/>sautes d&amp;#8217;humeur, mes absences ou mes passages à vide.<text:line-break/>Écrire est une activité que je trouve éprouvante et nécessite une attention<text:line-break/>particulière vis à vis de moi-même pour ne pas (trop) en souffrir.</text:p><text:p>Mes premiers remerciements vont à Noémie.<text:line-break/>Ta joie, tes encouragements et ta présence sont essentiels à mon équilibre.<text:line-break/>Ils me donnent confiance, m&amp;#8217;inspirent et atténuent les peurs qui me paralysent.</text:p><text:p>Je remercie Karine, Laurène, Elsa et Alexandre d&amp;#8217;Eyrolles pour cette opportunité.<text:line-break/>Je trouve que vous avez fait preuve d&amp;#8217;une patience et d&amp;#8217;une confiance<text:line-break/>infinies malgré tous ces rebondissements.</text:p><text:p>Je tiens à remercier mes anciens collègues de BBC R&amp;amp;D pour leur soutien,<text:line-break/>leur confiance et leur tolérance aux jeux de mots.<text:line-break/>Olivier, Sean, Katie, Chris N et Chris L&amp;#160;: c&amp;#8217;était un plaisir et un honneur<text:line-break/>d&amp;#8217;être à vos côtés.</text:p><text:p>Certain·e·s d&amp;#8217;entre vous m&amp;#8217;ont beaucoup aidé de par leurs conseils, leurs relectures et leurs encouragements.<text:line-break/>Alors un grand merci Stéphane, Frank, Thierry, Boris, Béa, Efi, Alexandra, Thomas, Xavier, Bastien, Nicolas C, n1k0 et Loic.</text:p><text:p>J&amp;#8217;ai organisé une résidence d&amp;#8217;écriture itinérante de janvier à mars 2017.<text:line-break/>On m&amp;#8217;a hébergé, nourri et parfois blanchi.<text:line-break/>Merci beaucoup beaucoup Maxime W, Brice F, Nicolas F, les gens du Yelloworking à Aix, Antoine F, les gens de la Coop à Grenoble, Cédric et Hélyette, Agnès, les gens de Mix-IT, les gens de la Cordée à Lyon, Maxime L, les gens de la Myne à Villeurbane, Clément D et Quentin A, les gens de Clever Cloud, Thomas M et Lilian M, les gens du ByteClub, Alexis J, les gens de Matlo, les gens du Fab Lab 127°, Arnaud R, Ismaël H et les gens de BetaGouv.</text:p><text:p>Bonne lecture,</text:p><text:p>—&amp;#160;Thomas Parisot • oncletom.io</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Histoire, écosystème et gouvernance</text:h><text:p>Node.js génère beaucoup de discussions, d&amp;#8217;intérêts et d&amp;#8217;envies.</text:p><text:p>Dans ce chapitre, nous allons faire le point sur ce qu&amp;#8217;est Node.js pour mieux comprendre dans quel cambouis nous allons plonger les mains.</text:p><text:p>Node.js est-il un langage de programmation&amp;#160;?<text:line-break/>Node.js est-il un framework JavaScript&amp;#160;?<text:line-break/>Qu&amp;#8217;en restera-t-il une fois la frénésie retombée&amp;#160;?</text:p><text:p>Ce chapitre permet de comprendre pourquoi Node a émergé et comment.<text:line-break/>Surtout, il vous permettra de comprendre les choix techniques<text:line-break/>à l&amp;#8217;origine des fondations de Node et ce que l&amp;#8217;utiliser<text:line-break/>peut vous apporter, que ce soit dans un contexte personnel ou professionnel.</text:p><text:h text:outline-level="2">Node.js : un environnement d&amp;#8217;exécution JavaScript</text:h><text:p>Node.js n&amp;#8217;est pas un langage de programmation. Node.js n&amp;#8217;est pas non plus un framework JavaScript. Node.js est un environnement d&amp;#8217;exécution JavaScript.<text:line-break/>La différence entre ces trois désignations peut sembler subtile, futile voire inutile mais le terme environnement est la véritable nature de Node.</text:p><text:p>Exécuter du JavaScript côté serveur n&amp;#8217;est pas une révolution.<text:line-break/>L&amp;#8217;entreprise Netscape s&amp;#8217;y est déjà essayée au début des années 1990 avec Netscape Enterprise Server, juste après l&amp;#8217;avoir introduit dans son navigateur web Netscape Navigator.</text:p><text:p>En 1997, Netscape s&amp;#8217;est attelée à créer Rhino (www.mozilla.org/rhino/), un environnement d&amp;#8217;exécution JavaScript tournant sous Java disponible sous licence libre.<text:line-break/>Rhino était un des projets liés à la réécriture de Netscape Navigator en Java.<text:line-break/>Si Netscape a depuis fermé ses portes, Rhino a permis l&amp;#8217;émergence de projets utiles aux développeurs web.</text:p><text:p>Entre temps le langage JavaScript évolue, le Web 2.0 émerge des cendres de la première bulle Internet et d&amp;#8217;autres initiatives émergent dans les années 2000 comme APE (Ajax Push Engine, ape-project.org/).<text:line-break/>Elles mettent également en œuvre JavaScript côté serveur.<text:line-break/>JavaScript était surtout un choix logique de partage de code entre client et serveur pour Comet, le précurseur des WebSockets.</text:p><text:p>Comet est un terme regroupant les différentes tentatives techniques permettant à un serveur web d&amp;#8217;envoyer des données à un client sans que celui-ci ne les ait demandées initialement.</text:p><text:p>Parmi ces techniques, on retrouve le long polling, consistant à conserver une connexion Ajax ouverte pendant la durée de vie d&amp;#8217;une page web.</text:p><text:p>WebSockets est un protocole basé sur TCP.</text:p><text:p>Il permet de maintenir une connexion HTTP active entre un client et un serveur et d&amp;#8217;y faire transiter les données de manière bidirectionnelle.</text:p><text:p>Ce protocole sera probablement rendu obsolète par HTTP/2&amp;#160;— le successeur d&amp;#8217;HTTP/1.1.<text:line-break/>HTTP/2 a été initié par Google sous le nom de protocole<text:line-break/>SPDY (prononcer speedy).</text:p><text:p>Rhino est toujours utile dès qu&amp;#8217;un projet Java implique du JavaScript.</text:p><text:p>Google l&amp;#8217;utilise comme environnement d&amp;#8217;exécution de ses Apps Scripts.<text:line-break/>Ces scripts permettent à tout un chacun de développer des extensions et des interactions supplémentaires pour les documents Google Drive.</text:p><text:p>Rhino est également employé dans yuicompressor (yui.github.io/yuicompressor/), un optimiseur CSS et JavaScript créé par Yahoo.<text:line-break/>yuicompressor a été surpassé par Closure Compiler (developers.google.com/closure/compiler/) et UglifyJS (npmjs.com/uglify-js).<text:line-break/>Ce dernier est écrit en JavaScript et repose sur Node.<text:line-break/>La boucle est bouclée.</text:p><text:p>Node représente un environnement d&amp;#8217;exécution (runtime), un ensemble d&amp;#8217;API JavaScript ainsi qu&amp;#8217;une machine virtuelle (VM) JavaScript performante (parseur, interpréteur et compilateur) pouvant accéder à des ressources système telles que des fichiers (filesystem) ou des connexions réseau (sockets).</text:p><text:p>Typiquement, une personne développant en Node écrit du code se basant sur les API à disposition.<text:line-break/>Ce code est lu par le runtime Node qui le transmet à la VM JavaScript. Enfin, la VM traduit le programme en langage machine (bytecode) avant que le programme soit effectivement exécuté par le processeur.</text:p><text:p>Pour comprendre comment Node a opté pour cette approche, retournons en 2009, lorsque son créateur Ryan Dahl cherchait à résoudre élégamment un problème de performance de programmation.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Bref historique</text:h><text:p>En 2006, Ryan Dahl est un étudiant américain en troisième année de doctorat de mathématiques.<text:line-break/>Si son but initial était de devenir professeur de mathématiques, il prend la décision de ne pas terminer sa thèse et d&amp;#8217;entreprendre un voyage au Chili.</text:p><text:p>Alors qu&amp;#8217;il cherche à effectuer des petits boulots, il y rencontre une autre personne développant des sites web.<text:line-break/>Ruby on Rails connaît un succès grandissant et attire son attention.<text:line-break/>Alors que Ryan envisageait d&amp;#8217;utiliser Rails, il découvre avec horreur la lenteur du framework et cherche à en découvrir les causes.</text:p><text:p>Ryan débute alors sa quête des applications web performantes et découvre Mongrel, un serveur HTTP écrit en Ruby.<text:line-break/>Il est séduit par deux choses&amp;#160;:</text:p><text:p>La quête initiale se dirige alors sur la possibilité de créer un serveur web non bloquant.<text:line-break/>En d&amp;#8217;autres termes, un serveur capable dans un même processus de traiter d&amp;#8217;autres requêtes en attendant de renvoyer la réponse initiale.</text:p><text:p>Nous sommes alors en 2008 et le site de partage de photos Flickr innove avec un nouveau système de téléversement d&amp;#8217;images&amp;#160;: une barre de progression représentant le statut du téléversement remplace alors la page figée&amp;#160;– effet  inhérent à l&amp;#8217;envoi de fichiers depuis un formulaire HTML.</text:p><text:p>L&amp;#8217;équipe d&amp;#8217;ingénierie de Flickr explique comment elle a contourné le problème de l&amp;#8217;upload via un formulaire classique&amp;#160;; problème qui gelait la fenêtre du navigateur pendant la durée du téléversement.</text:p><text:p>C&amp;#8217;est le déclic pour Ryan&amp;#160;: Mongrel avait déjà un plug-in pour cette fonctionnalité mais il souhaitait simplifier davantage le travail pour les développeurs.<text:line-break/>Il reproduit le mécanisme avec succès en C.<text:line-break/>Les développeurs web jugeant la solution trop complexe, Ryan tente la même approche avec d&amp;#8217;autres langages, comme Python, Lua ou même Haskell.<text:line-break/>Il se heurte au sempiternel problème des ressources bloquantes des différents interpréteurs.</text:p><text:p>Le deuxième déclic se produit en janvier 2009 lorsque JavaScript émerge dans une discussion entre développeurs.<text:line-break/>Eurêka&amp;#160;!<text:line-break/>La machine virtuelle JavaScript V8 de Google a été libérée en open source depuis quelques mois et Apple, Microsoft, Mozilla et Google se livrent à une course à la performance de leur machine virtuelle respective.<text:line-break/>En ligne de mire, rendre la navigation sur mobile et sur ordinateur plus rapide et moins gourmande en ressources.</text:p><text:p>Ryan admet que JavaScript dispose des caractéristiques idéales même s&amp;#8217;il n&amp;#8217;est pas un adepte du langage&amp;#160;: fonctions anonymes, closures et l&amp;#8217;event loop (dans le DOM en tous cas).<text:line-break/>Il manque juste aux machines virtuelles JavaScript la capacité d&amp;#8217;accéder à des sockets, au système de fichiers et à d&amp;#8217;autres fonctions système.</text:p><text:p>Ryan quitte alors son travail, s&amp;#8217;inspire de ses travaux de modules non bloquants pour Nginx et s&amp;#8217;affaire pendant six mois à marier JavaScript, V8 et l&amp;#8217;environnement du système d&amp;#8217;exploitation.<text:line-break/>De ces efforts naît Node.js.<text:line-break/>Il effectue une démonstration de serveur IRC écrit en 400 lignes de JavaScript lors de la conférence JSConf.eu 2009 qui suscite l&amp;#8217;enthousiasme et attire l&amp;#8217;attention.</text:p><text:p>L&amp;#8217;entreprise américaine Joyent l&amp;#8217;embauche à plein temps pour continuer le développement de Node.<text:line-break/>Ils pressentent que Node répondra à leurs projets de datacenter et d&amp;#8217;hébergement.</text:p><text:p>Node et sa communauté sont nés et ont continué à prospérer depuis lors.<text:line-break/>Pour une simple affaire de barre de progression et une obsession de perception de rapidité.</text:p><text:p>En 2018, l&amp;#8217;avenir de Node est au beau fixe avec plus de 2&amp;#160;000 contributeurs<text:line-break/>et plus de 712&amp;#160;000 modules publics hébergés sur le registre npm.</text:p><text:p>La vidéo suivante est une vidéoconférence donnée par Ryan Dahl, le créateur de Node, au cours de l&amp;#8217;année 2011.<text:line-break/>C&amp;#8217;est la première fois qu&amp;#8217;il intervient pour expliquer son parcours et la genèse du projet.</text:p><text:p>Peut-être un élément qui figurera dans les livres d&amp;#8217;histoire&amp;#160;!</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* la possibilité d&amp;#8217;inclure un serveur HTTP comme librairie applicative&amp;#160;;,* la simplicité de fonctionnement&amp;#160;: recevoir une requête HTTP et décider soi-même de la réponse à apporter.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* wp.me/p2DMyG-ok<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* www.youtube.com/watch?v=SAc0vQCC6UQ<text:line-break/></text:p><text:h text:outline-level="2">Les raisons du succès</text:h><text:p>La tension et l&amp;#8217;attention autour de JavaScript sont énormes en 2009.<text:line-break/>La mode du tout Ajax et des mashups s&amp;#8217;est estompée mais une chose en est ressortie&amp;#160;: JavaScript n&amp;#8217;a plus à rougir ni à être relégué au rang de sous-langage.<text:line-break/>Les initiatives JSLint, CommonJS et les good parts de Douglas Crockford sont pour beaucoup dans la création de code élégant.</text:p><text:p>D&amp;#8217;un autre côté, les entreprises développant des navigateurs web se livrent à une féroce compétition d&amp;#8217;optimisation.<text:line-break/>Google, Mozilla et Apple ont besoin de navigateurs rapides pour améliorer leurs parts de marché sur les ordinateurs mais aussi les téléphones et tablettes.<text:line-break/>On peut considérer que JavaScript est à cette époque le langage de programmation bénéficiant du plus grand investissement financier et humain en R&amp;amp;D.</text:p><text:p>La communauté JavaScript accueille avec ferveur Node lors<text:line-break/>de la conférence JSConf Europe en 2009.<text:line-break/>Elle contribue à son amélioration et à la création d&amp;#8217;un écosystème<text:line-break/>de modules réutilisables.</text:p><text:p>Il faudra attendre la création de npm au tout début 2010.<text:line-break/>npm a pour but d&amp;#8217;héberger des modules Node et de faciliter<text:line-break/>leur installation.<text:line-break/>Dès lors, une simple commande suffit pour inclure du code écrit par<text:line-break/>d&amp;#8217;autres personnes dans nos projets.</text:p><text:p>npm devient une pierre angulaire.<text:line-break/>À tel point qu&amp;#8217;il est inclus dans l&amp;#8217;installation de Node<text:line-break/>à partir de la version 0.6.3 en novembre 2011.<text:line-break/>La communauté Node fait le reste du travail<text:line-break/>en constituant un écosystème de modules riche et varié&amp;#160;:<text:line-break/>frameworks web, drivers de bases de données,<text:line-break/>serveurs HTTP, serveurs WebSockets, préprocesseurs CSS,<text:line-break/>CoffeeScript, parseurs, proxy, serveurs de log, modules de tests,<text:line-break/>langages de templating, etc.</text:p><text:p>Malgré ses défauts de jeunesse, Node réussit le tour<text:line-break/>de force de la performance&amp;#160;: la recette de l&amp;#8217;accès non-bloquant<text:line-break/>a-t-elle fonctionné&amp;#160;?<text:line-break/>À en croire les personnes ayant migré vers Node pour ces raisons,<text:line-break/>la réponse est oui.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Pourquoi éviter Node.js ?</text:h><text:p>Il est tentant de vouloir suivre un chemin populaire,<text:line-break/>d&amp;#8217;adopter le dernier outil ou framework à la mode.</text:p><text:p>J&amp;#8217;ai pourtant envie d&amp;#8217;écrire qu&amp;#8217;il n&amp;#8217;est pas forcément nécessaire<text:line-break/>de passer à Node.</text:p><text:p>Si votre équipe dispose déjà de fortes compétences,<text:line-break/>d&amp;#8217;aisance et de productivité dans un autre langage,<text:line-break/>il n&amp;#8217;y a pas de raison de passer à Node.<text:line-break/>Cette équipe a tout intérêt à capitaliser sur ses<text:line-break/>connaissances pour être efficace et minimiser la dette technique<text:line-break/>de ses applications.</text:p><text:p>L&amp;#8217;offre logicielle est également à prendre en compte&amp;#160;: CMS,<text:line-break/>systèmes e-commerce ou autre application prête à l&amp;#8217;emploi<text:line-break/>que la communauté Node n&amp;#8217;offrirait pas à ce jour.</text:p><text:p>Un facteur important et souvent oublié est l&amp;#8217;acceptation et la compréhension de l&amp;#8217;utilisation de Node par une ou plusieurs équipes.<text:line-break/>Il est alors plus intéressant de comprendre les raisons<text:line-break/>d&amp;#8217;un blocage que de forcer ou d&amp;#8217;imposer Node.<text:line-break/>Cela peut être simple&amp;#160;: balayer des idées reçues,<text:line-break/>animer un atelier technique ou inviter un·e expert·e<text:line-break/>pour répondre aux questions, interrogations et utilité d&amp;#8217;un tel changement.</text:p><text:p>Node ne vous aidera probablement pas si vous cherchez<text:line-break/>à réaliser des choses contre-productives pour JavaScript.<text:line-break/>Je pense à des opérations mathématiques de très haute précision,<text:line-break/>du machine learning avancé ou du calcul scientifique poussé par exemple.<text:line-break/>Difficile d&amp;#8217;égaler la richesse fonctionnelle de Python<text:line-break/>et de ses librairies SciPy, NumPy ou scikit-learn.<text:line-break/>Difficile aussi d&amp;#8217;égaler la finesse de gestion de mémoire de C++ ou de Rust.</text:p><text:p>Node ne va pas résoudre les problèmes par magie.<text:line-break/>Cela reste avant tout une affaire de compétences et d&amp;#8217;expérience.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Pourquoi choisir Node.js ?</text:h><text:p>Node est un choix de langage principal tout à fait viable.</text:p><text:p>Il est préférable que ce choix soit une volonté partagée entre membres d&amp;#8217;une équipe.<text:line-break/>Que ce choix soit motivé par ce que Node apporte et simplifie pour vous.</text:p><text:p>Node est tout désigné pour créer des applications à nombreuses actions concurrentes.<text:line-break/>Autrement dit, dès qu&amp;#8217;une application ou programme fait appel à des accès réseau, aux fichiers ou au système.</text:p><text:p>Node est également adapté pour transformer des flux importants de données<text:line-break/>en utilisant peu de mémoire.<text:line-break/>Cela concerne aussi bien la lecture de fichiers CSV, JSON ou XML de plusieurs gigaoctets.</text:p><text:p>Le mécanisme de module de Node encourage à respecter le principe de responsabilité unique.<text:line-break/>Nos applications peuvent être modulaires et autonomes au lieu d&amp;#8217;être lourdes et monolithiques.</text:p><text:p>Les développeurs et développeuses verront dans Node leur compagnon idéal pour compiler, générer, assembler et minifier leurs applications front-end.<text:line-break/>Le bénéfice évident est le partage d&amp;#8217;un outillage CSS, JavaScript et HTML<text:line-break/>entre équipes, par projet.</text:p><text:p>Conséquence directe, Node offre l&amp;#8217;opportunité d&amp;#8217;unifier vos équipes de développement front-end et back-end.<text:line-break/>Node devient un environnement commun, un langage partagé entre les individus.<text:line-break/>Ils peuvent se focaliser sur des fonctionnalités indistinctement de la cible, que ce soit pour le web, un serveur ou une API.</text:p><text:p>Node est un environnement adapté à l&amp;#8217;apprentissage et l&amp;#8217;amélioration de nos connaissances en JavaScript.<text:line-break/>On peut désormais penser sur du long terme, en se souciant moins de devoir supporter de vieilles versions de Node ou de navigateurs web tant il est facile de passer d&amp;#8217;une version du langage à une autre.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">L&amp;#8217;écosystème des acteurs</text:h><text:p>La majorité des développements initiaux de Node est financée par Joyent,<text:line-break/>à commencer par l&amp;#8217;embauche de Ryan Dahl.</text:p><text:p>L&amp;#8217;écosystème des acteurs se diversifie avec le temps.<text:line-break/>Avec de nouveaux employés chez Joyent.<text:line-break/>Puis avec des contributeurs externes qui voyaient un avenir prometteur dans le projet.<text:line-break/>S&amp;#8217;ensuivent des entreprises privées comme IBM ou PayPal qui sponsorisent le projet ou le salaire de contributeurs.</text:p><text:h text:outline-level="3">Joyent</text:h><text:p>Joyent est une entreprise américaine fondée en 2004.<text:line-break/>Elle proposait à l&amp;#8217;origine des services de collaborations<text:line-break/>en ligne&amp;#160;: documents, calendriers, e-mails, etc.</text:p><text:p>Elle se lance sur le marché de l&amp;#8217;hébergement fin 2005<text:line-break/>par le biais d&amp;#8217;une acquisition-fusion.<text:line-break/>Parmi ses clients, on peut dénombrer le site de Ruby on Rails<text:line-break/>(société Basecamp), WordPress.com (société Automattic) ou<text:line-break/>encore le site historique A List Apart.</text:p><text:p>En 2009, Joyent se spécialise dans les infrastructures et<text:line-break/>plate-formes à la demande et à haute performance.<text:line-break/>L&amp;#8217;entreprise se concentre sur des solutions dites temps réel<text:line-break/>pour les réseaux sociaux, applications mobiles et compagnies<text:line-break/>de jeux vidéo en ligne.</text:p><text:p>En avril 2011, Joyent dépose la marque Node.js ainsi que son logo.</text:p><text:p>En février 2015, Joyent transfère la gestion de Node à la Node.js Foundation.<text:line-break/>La société Joyent reste propriétaire de la marque Node.js<text:line-break/>et de son logo.</text:p><text:p>Ryan Dahl, alors développeur actif de Node, annonce le dépôt de marque par l&amp;#8217;entreprise Joyent sur le blog officiel du projet Node.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* nodejs.org/en/blog/uncategorized/trademark/<text:line-break/></text:p><text:h text:outline-level="3">npm</text:h><text:p>npm est une dénomination qui abrite plusieurs concepts&amp;#160;: un outil en ligne de commande, un registre de modules ainsi qu&amp;#8217;une entreprise privée à but lucratif (npm, Inc).</text:p><text:p>npm est originellement un module Node créé par Isaacs Schlueter.<text:line-break/>Ce module permet d&amp;#8217;installer des modules tiers et de les lier sous forme d&amp;#8217;un arbre de dépendances.<text:line-break/>Il est l’équivalent de Rubygems (rubygems.org/) pour Ruby, de CPAN (www.cpan.org/) pour Perl ou encore de pypi (pypi.python.org/pypi) pour Python.</text:p><text:p>Nous reviendrons plus en détail sur son utilisation dans le chapitre 5 Utiliser des modules tiers.</text:p><text:p>npm désigne également le registre principal qui héberge les modules des communautés Node&amp;#160;: www.npmjs.com/.</text:p><text:p>npm est installé par défaut avec Node depuis la version 0.6.3, sortie en novembre 2011.<text:line-break/>Auparavant, il fallait installer le module npm séparément.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* nodejs.org/en/blog/release/v0.6.3/<text:line-break/></text:p><text:h text:outline-level="3">npm, Inc.</text:h><text:p>Isaacs Schlueter a été embauché par Joyent en septembre 2010.<text:line-break/>Il a succédé à Ryan Dahl dans la gestion du projet Node de<text:line-break/>janvier 2012 jusqu’à janvier 2014.</text:p><text:p>npm, Inc est une entreprise privée américaine fondée en janvier 2014 par Isaacs Schlueter, directement après son départ de Joyent.<text:line-break/>Le but de npm, Inc est de fournir des solutions professionnelles basées sur npm.<text:line-break/>L&amp;#8217;entreprise souhaite en parallèle soutenir l’effort open source<text:line-break/>et les coûts d’infrastructure du registre npm.</text:p><text:p>Elle lève 2,6 millions de dollars en février 2014 pour élaborer une nouvelle architecture du registre npm.<text:line-break/>Ce financement a également pour vocation la mise en place d&amp;#8217;une stratégie commerciale basée sur les modules privés et les solutions professionnelles.</text:p><text:p>La société npm, Inc détient la marque npm, npm, Inc et le logo npm.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">io.js</text:h><text:p>io.js est un fork de Node initié par la communauté Node en décembre 2014.<text:line-break/>La raison&amp;#160;? La main-mise de Joyent sur les développements et la communication erratique du projet.</text:p><text:p>Les objectifs initiaux du projet io.js sont doubles&amp;#160;:</text:p><text:p>Le projet io.js connait une fin heureuse en 2015&amp;#160;:<text:line-break/>les efforts du projet et de sa communauté auront abouti à<text:line-break/>la création de la Node.js Foundation et<text:line-break/>du Node.js Advisory Board, respectivement l&amp;#8217;organe<text:line-break/>de gestion du projet et le groupe d&amp;#8217;individus en charge<text:line-break/>de la gestion du projet Node.</text:p><text:p>L&amp;#8217;annonce de la sortie de Node v4 et de la création de la Node.js Foundation<text:line-break/>est consultable à cette adresse&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>* offrir à la communauté Node une gestion transparente, inclusive et ouverte&amp;#160;;,* fournir un environnement technique plus moderne, une version de v8 plus récente ainsi qu&amp;#8217;une intégration rapide des nouvelles fonctionnalités ECMAScript.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* nodejs.org/en/blog/announcements/foundation-v4-announce/<text:line-break/></text:p><text:h text:outline-level="3">Node.js Foundation</text:h><text:p>La Node.js Foundation est l&amp;#8217;un des organes officiels de gouvernance du projet Node depuis juin 2015.<text:line-break/>Cette fondation est une organisation à but non lucratif.<text:line-break/>Elle fait elle-même partie de la Linux Foundation, au même titre que des projets comme Open Container, Let&amp;#8217;s Encrypt ou Xen.</text:p><text:p>La tâche première de la fondation a été d&amp;#8217;opérer la fusion entre la base de code de Node et d'io.js en septembre 2015.<text:line-break/>Cela donne lieu à la sortie de Node v4.0.0.</text:p><text:p>La fondation fait partie intégrante de la gouvernance du projet Node.</text:p><text:p>foundation.nodejs.org</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Nodejitsu</text:h><text:p>Nodejitsu est une entreprise privée américaine fondée en 2010.<text:line-break/>Elle vise à fournir des solutions professionnelles autour de Node en tant que Platform as a Service (PaaS) ainsi qu&amp;#8217;avec des dépôts npm privés.<text:line-break/>Son activité en fait un concurrent direct de Joyent et de npm, Inc..</text:p><text:p>Nodejitsu démontre un investissement fort dans la communauté Node en contribuant à plusieurs centaines de modules.<text:line-break/>La société prend en charge l&amp;#8217;hébergement du registre npm de 2010 jusqu&amp;#8217;en décembre 2013.</text:p><text:p>En 2013, Nodejitsu lance l&amp;#8217;initiative controversée scalenpm (voir l&amp;#8217;encadré ci-après).<text:line-break/>Elle vise à collecter des fonds pour améliorer la performance<text:line-break/>et la stabilité du registre npm (www.npmjs.com/).<text:line-break/>Nodejitsu attise les tensions avec la compagnie npm, Inc.<text:line-break/>en tentant de lui couper l&amp;#8217;herbe sous le pied.<text:line-break/>Ce ne sera pas un succès.</text:p><text:p>En février 2015, la société américaine GoDaddy rachète Nodejitsu,<text:line-break/>absorbe son équipe et met fin à ses activités commerciales.</text:p><text:p>L&amp;#8217;initiative #scalenpm a réuni quelque 326 000 $ auprès<text:line-break/>d&amp;#8217;entreprises privées et de la communauté Node.</text:p><text:p>Son effort se poursuit dans le but de fournir une meilleure instrumentation et<text:line-break/>une architecture résistant à la montée en puissance de l&amp;#8217;utilisation des modules npm.</text:p><text:p>Cette initiative a suscité une controverse dans la mesure où l’opération s’est<text:line-break/>déroulée lors de la naissance de npm, Inc et du dépôt de marque associé mais<text:line-break/>sans entente apparente entre les deux parties.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/,* twitter.com/hashtag/scalenpm<text:line-break/></text:p><text:h text:outline-level="3">Node Security Platform</text:h><text:p>Le Node Security Platform (nodesecurity.io/&amp;#160;— anciennement Node Security Project) est un projet à but lucratif soutenu par la société américaine &amp;amp;yet (andyet.com/).<text:line-break/>Il a été initié au début de l&amp;#8217;année 2013.</text:p><text:p>Son but est triple&amp;#160;:</text:p><text:p>Le projet met à disposition des services et des modules<text:line-break/>tout en cherchant à impliquer la communauté Node dans le processus.<text:line-break/>Cela concerne aussi bien la déclaration des vulnérabilités<text:line-break/>que leur résolution ou l&amp;#8217;éducation des développeurs à la sécurité.</text:p><text:p>Nous aborderons le sujet de la sécurité tout au long de cet ouvrage&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>1. auditer la sécurité de tous les modules npm&amp;#160;;,1. communiquer les failles auprès des auteurs de modules&amp;#160;;,1. permettre à quiconque de savoir si un module donné dépend de modules vulnérables.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* au Chapitre 4&amp;#160;: mettre à jour Node en cas de failles de sécurité&amp;#160;;,* au Chapitre 6&amp;#160;: surveiller la santé d&amp;#8217;une application en production&amp;#160;;,* au Chapitre 7&amp;#160;: identifier les opérations à risques dans une application web.<text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Gouvernance du projet</text:h><text:p>Node a connu une forte croissance depuis 2012.<text:line-break/>La gouvernance du projet open source a été effectuée<text:line-break/>par la société Joyent.<text:line-break/>Ses agissements et la direction donnée au projet ont régulièrement<text:line-break/>fait grincer des dents.<text:line-break/>Notamment en entretenant un climat d&amp;#8217;incertitude sur<text:line-break/>la pérennité à long terme, si Node venait à ne plus<text:line-break/>répondre aux intérêts commerciaux de Joyent.</text:p><text:p>Des voix se sont élevées pour critiquer l&amp;#8217;absence d&amp;#8217;une<text:line-break/>organisation ouverte, commercialement neutre et<text:line-break/>ouverte aux contributeurs externes.<text:line-break/>Cela a mené à la création d&amp;#8217;un fork de Node&amp;#160;: io.js.</text:p><text:p>La réconciliation entre le projet Node et io.js a sérieusement assaini<text:line-break/>les rapports de gouvernance.<text:line-break/>Cela a également apporté une direction et des opportunités plus claires<text:line-break/>de contribuer à la direction du projet.</text:p><text:p>Depuis juin 2015, la gérance du projet est garantie par plusieurs entités&amp;#160;:</text:p><text:p>Le Technical Steering Committee réfère ses intentions d&amp;#8217;actions<text:line-break/>au Board.<text:line-break/>Son fonctionnement est régi par une charte co-signée avec le Board.<text:line-break/>Ce comité est composé de contributeurs et de collaborateurs individuels.</text:p><text:p>github.com/nodejs/TSC</text:p><text:p>Le Technical Steering Committee était autrefois dissocié d&amp;#8217;une autre entité, le Core Technical Committee.<text:line-break/>Les conflits de gouvernance ayant résulté dans la création du fork ayo.js ont mené à la fusion des deux comités.</text:p><text:p>L&amp;#8217;objectif recherché était de rapprocher gouvernance et décisions techniques<text:line-break/>tout en réduisant les opportunités d&amp;#8217;abus de pouvoir par les membres<text:line-break/>techniques éminents.</text:p><text:p>github.com/nodejs/CTC</text:p><text:p>À l&amp;#8217;inverse, le Board géré par la Node.js Foundation est composé essentiellement d&amp;#8217;acteurs de l&amp;#8217;industrie&amp;#160;— dont Google,<text:line-break/>IBM, Joyent et PayPal.<text:line-break/>Certains membres émérites ou choisis par le Board sont des individus<text:line-break/>agissant en leur nom propre.</text:p><text:p>github.com/nodejs/board</text:p><text:p>Les participant·e·s du Technical Steering Committee ont une obligation<text:line-break/>de régularité, de présence et de vote aux différents rendez-vous<text:line-break/>organisés par le comité.<text:line-break/>Ce mécanisme a été choisi afin de préserver la vitalité du projet.</text:p><text:p>Un quota d&amp;#8217;appartenance à une même entreprise a été mis en place<text:line-break/>pour maintenir une diversité de représentation.<text:line-break/>Dans une moindre mesure, ce mécanisme vise à réduire les possibles conflits<text:line-break/>d&amp;#8217;intérêt ou une prise en otage du projet Node comme a pu le faire<text:line-break/>Joyent avant l&amp;#8217;apparition de ce modèle de gouvernance.</text:p><text:p>Les documents clés régissant le fonctionnement du projet Node<text:line-break/>sont répartis dans les dépôts GitHub des différents acteurs&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* le Technical Steering Committee (TSC)&amp;#160;: planning, décisions techniques, direction du projet, documentation et qualité du projet&amp;#160;;,* le Node.js Foundation Board&amp;#160;: évangélisation, relations commerciales&amp;#160;;,* le Node.js Foundation Community Committee (CommComm)&amp;#160;: relation avec la communauté, onboarding.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* github.com/nodejs/node/blob/master/GOVERNANCE.md,* github.com/nodejs/TSC/blob/master/TSC-Charter.md,* github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md,* github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md<text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>Nous venons d&amp;#8217;en apprendre davantage sur les origines de Node, les différentes parties prenantes dans son développement mais aussi sa philosophie&amp;#160;— de conception, de distribution et d&amp;#8217;évolution.</text:p><text:p>Nous allons voir dans le prochain chapitre comment installer un environnement fonctionnel pour développer et exécuter des programmes Node.</text:p><text:p><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* Comprendre ce qu&amp;#8217;est Node.js,* Savoir qui assure la gouvernance de Node.js,* Décider si Node.js et JavaScript peuvent compléter ou remplacer le langage de programmation de votre entreprise/organisation,* Pourquoi autant de hype&amp;#160;?<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Installer, mettre à jour et développer</text:h><text:p>Selon que tu sois débutant·e ou confirmé·e, il y aura une manière<text:line-break/>d&amp;#8217;installer Node qui te correspond.</text:p><text:p>Ce chapitre contient tout ce qu&amp;#8217;il faut savoir pour utiliser Node sur notre ordinateur et se préparer à développer notre premier programme.</text:p><text:p>Nous avons vu dans le premier chapitre<text:line-break/>que Node est un environnement d&amp;#8217;exécution JavaScript.</text:p><text:p>Certains systèmes d&amp;#8217;exploitation embarquent l&amp;#8217;environnement d&amp;#8217;exécution Node.<text:line-break/>D&amp;#8217;autres ne le font pas.<text:line-break/>Et d&amp;#8217;autres embarquent Node mais dans une version trop ancienne.<text:line-break/>Voire avec une configuration exotique dont il est difficile de connaître les tenants et aboutissants.<text:line-break/>Idéalement, on voudrait pouvoir installer la version de Node de notre choix sur notre ordinateur.</text:p><text:p>Les éditeurs de code nous facilitent la vie en rendant le code lisible<text:line-break/>en ajoutant de la couleur et des repères visuels.<text:line-break/>Ces logiciels nous invitent à piocher dans leur bibliothèque d&amp;#8217;extensions<text:line-break/>pour en faire un outil qui nous ressemble.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>Il n&amp;#8217;est pas nécessaire d&amp;#8217;avoir suivi des études d&amp;#8217;informatique<text:line-break/>pour vouloir s&amp;#8217;essayer à la programmation.<text:line-break/>Cela n&amp;#8217;implique pas non plus d&amp;#8217;en faire son métier.</text:p><text:p>Que l&amp;#8217;on se qualifie de débutant·e, confirmé·e ou expert·e,<text:line-break/>il y a un petit rituel auquel on coupera difficilement&amp;#160;:</text:p><text:p>Si l&amp;#8217;idée est de jouer avec du code rapidement,<text:line-break/>sans rien installer et avec le premier ordinateur qui vous passe sous la main,<text:line-break/>je vous invite à aller directement à la section Sans installation, dans un navigateur web ci-après.</text:p><text:p>Les sections qui suivent ont pour intention de vous aider à créer<text:line-break/>un environnement Node à jour sur votre ordinateur.<text:line-break/>Ce contenu s&amp;#8217;applique également à un serveur destiné à héberger vos applications Node.</text:p><text:h text:outline-level="2">Installer Node.js</text:h><text:p>Il y a plusieurs manières d&amp;#8217;installer Node sur une machine.<text:line-break/>Elles sont toutes correctes.<text:line-break/>Certaines manières sont plus adaptées que d&amp;#8217;autres,<text:line-break/>selon votre aisance avec un terminal<text:line-break/>et selon le besoin de jongler rapidement entre différentes versions de Node.</text:p><text:p>Les installeurs permettent d&amp;#8217;installer Node facilement, en quelques clics et sans toucher à un terminal.</text:p><text:p>Si vous utilisez un installeur correspondant à une version plus récente de Node,<text:line-break/>cette nouvelle version sera utilisée dans tous vos projets Node.</text:p><text:p>C&amp;#8217;est la solution la plus simple pour installer Node.</text:p><text:h text:outline-level="3">Sans installation, dans un navigateur web</text:h><text:p>Il est facile de s&amp;#8217;essayer à Node juste avec un navigateur web moderne comme Firefox, Microsoft Edge ou Chrome.<text:line-break/>Des services en ligne combinent un éditeur de texte<text:line-break/>ainsi qu&amp;#8217;un environnement d&amp;#8217;exécution Node à distance.</text:p><text:p>Nous brosserons le portrait de 3 services différents<text:line-break/>de part leurs fonctionnalités et leur rapidité de prise en main&amp;#160;:<text:line-break/>RunKit, Codenvy et Cloud9.</text:p><text:p>RunKit (runkit.com) est de loin le service le plus simple.<text:line-break/>Il s&amp;#8217;articule autour d&amp;#8217;un concept de bac à sable,<text:line-break/>notre code ne sera pas plus long qu&amp;#8217;un fichier.<text:line-break/>Pour créer un nouveau bac à sable,<text:line-break/>il suffit de se rendre sur runkit.com/new.</text:p><text:p>Codenvy (codenvy.io) est un service basé sur le<text:line-break/>logiciel open source Eclipse et édité par la compagnie Red Hat.<text:line-break/>L&amp;#8217;interface est organisée exactement comme un des éditeurs de texte abordé plus loin dans ce chapitre.</text:p><text:p>Le processus de création de projet est relativement intuitif<text:line-break/>et il est très facile d&amp;#8217;importer du code hébergé en ligne, sur GitHub<text:line-break/>notamment.<text:line-break/>La configuration minimale d&amp;#8217;un projet est gratuite tandis que<text:line-break/>les fonctionnalités avancées et le travail en équipe sont payantes.</text:p><text:p>Enfin, Cloud9 (c9.io) est un service propriétaire<text:line-break/>édité par la compagnie Amazon Web Services (AWS, aws.amazon.com).<text:line-break/>Ce service intègre des fonctionnalités similaires à celles de Codenvy<text:line-break/>(éditeur en ligne, configuration de machine)<text:line-break/>et s&amp;#8217;intègre de manière poussée avec les autres services d&amp;#8217;AWS,<text:line-break/>dont EC2 et Lambda (voir le chapitre 6).<text:line-break/>Le service est entièrement gratuit.<text:line-break/>C&amp;#8217;est la consommation de ressources qui est payante, à l&amp;#8217;heure,<text:line-break/>en fonction du dimensionnement des ressources demandées.</text:p><text:p>Cloud9 a peu d&amp;#8217;opinions sur la manière dont votre environnement<text:line-break/>doit être configuré.<text:line-break/>Tout devra être configuré, des accès à votre compte GitHub<text:line-break/>y compris la version de Node à installer.</text:p><text:p>Ça tombe bien, nvm est préinstallé sur chaque espace de travail.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Plusieurs versions sur la même machine (nvm)</text:h><text:p>nvm est l&amp;#8217;acronyme de Node Version Manager.<text:line-break/>Ce logiciel permet d&amp;#8217;installer plusieurs versions de Node sur un même ordinateur.<text:line-break/>Si vous êtes sous Windows, nvm-windows offre exactement<text:line-break/>les mêmes fonctionnalités (voir encadré ci-après).</text:p><text:p>Si vous venez d&amp;#8217;un autre univers de programmation,<text:line-break/>nvm est l&amp;#8217;équivalent de rvm ou rbenv dans le monde Ruby, de phpenv dans<text:line-break/>le monde PHP ou encore de virtualenv pour Python.</text:p><text:p>Le programme s&amp;#8217;obtient à cette adresse&amp;#160;: github.com/creationix/nvm.</text:p><text:p>nvm ne fonctionne pas sur les ordinateurs équipés de Windows.<text:line-break/>Il existe trois autres alternatives&amp;#160;: nvm-windows, _nvmw et nodist.</text:p><text:p>nvm-windows offre les mêmes fonctionnalités que son équivalent pour Linux et macOS nvm.<text:line-break/>Il est facile à installer et ne demande pas de privilège système particulier pour fonctionner.</text:p><text:p>Deux autres alternatives sont à essayer si nvm-windows pose problème&amp;#160;:</text:p><text:p>nvm et Node peuvent s&amp;#8217;installer encore plus facilement sous macOS si vous utilisez le logiciel Homebrew.</text:p><text:p>Rendez-vous dans la section macOS pour en savoir plus.</text:p><text:p>Une fois installé, vous serez libre d&amp;#8217;installer les versions exactes de Node qui vous intéressent en appelant la commande nvm dans un terminal.</text:p><text:p>Dans l&amp;#8217;exemple précédent,<text:line-break/>la première ligne est responsable de l&amp;#8217;installation de la version de Node la plus récente dans la branche 10.x.<text:line-break/>La deuxième ligne est quant à elle responsable de signaler que l&amp;#8217;on veut en faire notre version par défaut sur cet ordinateur.</text:p><text:p>On pourra retrouver à tout moment les versions installées en utilisant la commande nvm ls.</text:p><text:p>L&amp;#8217;exemple précédent détaille 2 choses&amp;#160;:</text:p><text:p>Taper nvm use stable nous fera basculer vers la branche 9.3.<text:line-break/>C&amp;#8217;est l&amp;#8217;équivalent de saisir nvm use v9.3.0 ou nvm use v9 si on a la flemme de tout écrire.<text:line-break/>De même, taper nvm use default ou nvm use v10 nous fera basculer vers la branche la version v10.3.0.</text:p><text:p>Vous pouvez saisir la commande nvm --help à tout moment pour obtenir de l&amp;#8217;aide sur la syntaxe des commandes.<text:line-break/>J&amp;#8217;utilise principalement ces commandes&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* github.com/coreybutler/nvm-windows<text:line-break/><text:line-break/><text:line-break/>* github.com/hakobera/nvmw,* github.com/marcelklehr/nodist<text:line-break/><text:line-break/>----<text:line-break/>$ curl -L https://github.com/creationix/nvm/raw/v0.33.11/install.sh | bash<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ nvm install v10<text:line-break/>$ nvm alias default v10<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ nvm ls<text:line-break/>-&amp;gt;       v10.3.0<text:line-break/>         v9.3.0<text:line-break/>         system<text:line-break/>default -&amp;gt; v10 (-&amp;gt; v10.3.0)<text:line-break/>node -&amp;gt; stable (-&amp;gt; v9.3.0)<text:line-break/>stable -&amp;gt; 9.3 (-&amp;gt; v9.3.0) (default)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. la liste des versions de Node installées sur le système&amp;#160;;,1. la liste des alias, et à quelle version de Node ils correspondent.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* nvm install&amp;#160;: installe ou met à jour une version de Node&amp;#160;;,* nvm ls&amp;#160;: liste les versions installées de Node&amp;#160;;,* nvm use&amp;#160;: bascule vers une version donnée de Node&amp;#160;;,* nvm alias &amp;lt;nom&amp;gt; &amp;lt;version&amp;gt;&amp;#160;: crée un alias nommé vers une version de Node&amp;#160;;,* nvm run &amp;lt;version&amp;gt; &amp;lt;script&amp;gt;&amp;#160;: exécute un script Node dans une version donnée de Node.<text:line-break/></text:p><text:h text:outline-level="3">Distributions Linux : Debian/Ubuntu et RedHat/CentOS</text:h><text:p>Les distributions Linux et Debian listent Node dans leurs paquets officiels.<text:line-break/>Un simple apt-get install nodejs et ça fonctionne&amp;#160;!<text:line-break/>Ou presque car bien souvent on écopera d&amp;#8217;une vieille version de Node.</text:p><text:p>Des paquets officiels pour Debian, Ubuntu, Mint, RedHat Enterprise Linux (RHEL)<text:line-break/>et CentOS sont maintenus sur github.com/nodesource/distributions.</text:p><text:p>L&amp;#8217;installation de node 10.x sous Ubuntu et Mint devient aussi simple que les<text:line-break/>deux commandes suivantes&amp;#160;:</text:p><text:p>Pour Debian, il faudra se mettre en root et ensuite saisir ces commandes&amp;#160;:</text:p><text:p>Pour RHEL et CentOS, il faudra se mettre en root et saisir cette commande&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -<text:line-break/>$ sudo apt-get install -y nodejs<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl -sL https://deb.nodesource.com/setup_10.x | bash -<text:line-break/>$ apt-get install -y nodejs<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl -sL https://rpm.nodesource.com/setup_8.x | bash -<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Distributions Linux : les autres</text:h><text:p>Des paquets officiels pour d&amp;#8217;autres distributions que Debian, Ubuntu et Mint sont maintenus et accessibles par le biais des gestionnaires de paquets habituels&amp;#160;:</text:p><text:p>La liste à jour est maintenue sur cette page du site officiel de Node nodejs.org/fr/download/package-manager.</text:p><text:p>À noter que vous pouvez aussi utiliser nvm pour gérer vos versions de Node indépendamment du cycle de vie de votre système d&amp;#8217;exploitation Linux.</text:p><text:p><text:line-break/>* Gentoo&amp;#160;: emerge nodejs,* Ubuntu &amp;gt;= 12.04, Debian &amp;gt;= jessie, Mint&amp;#160;: voir ci-après,* Fedora &amp;gt;= 18&amp;#160;: sudo yum install nodejs npm,* Red Hat Enterprise et CentOS&amp;#160;: sudo yum install nodejs npm --enablerepo=epel,* Arch Linux&amp;#160;: pacman -S nodejs,* FreeBSD, OpenBSD&amp;#160;: pkg install node<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">macOS</text:h><text:p>Un installeur officiel pour macOS est fourni sur le site de Node à l&amp;#8217;adresse nodejs.org/fr/download/.</text:p><text:p>nvm est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</text:p><text:p>Il est toutefois possible d&amp;#8217;installer Node et nvm via le gestionnaire de paquets Homebrew.<text:line-break/>Homebrew (brew.sh/) est un logiciel open source populaire.<text:line-break/>Il aide à installer des logiciels qui ne sont pas distribués via le Mac App Store.</text:p><text:p>L&amp;#8217;installation de Homebrew se fait en deux étapes&amp;#160;:</text:p><text:p>Pour installer nvm, il suffira alors de faire&amp;#160;:</text:p><text:p>Ou pour installer une seule version de Node, la plus récente&amp;#160;:</text:p><text:p>Vous pouvez obtenir des options d&amp;#8217;installations et de configuration en tapant brew info nvm et/ou brew info node.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. l&amp;#8217;installation des Command Line Tools pour compiler des logiciels depuis leur code source&amp;#160;;,1. l&amp;#8217;installation de Homebrew en elle-même.<text:line-break/><text:line-break/>----<text:line-break/>$ xcode-select --install<text:line-break/>$ BREWRL=https://raw.githubusercontent.com/Homebrew/install/master/install \<text:line-break/>   /usr/bin/ruby -e "$(curl -fsSL $BREWRL)"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ brew install nvm<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ brew install node<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Windows</text:h><text:p>Un installeur officiel pour Windows est fourni sur le site de Node à l&amp;#8217;adresse nodejs.org/fr/download/.</text:p><text:p>nvm-windows est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</text:p><text:p>L&amp;#8217;installeur officiel créera plusieurs raccourcis dans le dossier Node.js du menu Démarrer&amp;#160;:</text:p><text:p>Le menu créé par l&amp;#8217;installeur contient deux icônes que nous utiliserons tout au long de la lecture de cet ouvrage&amp;#160;:</text:p><text:p>Si vous utilisez déjà un gestionnaire de paquet comme Scoop (scoop.sh/) ou Chocolatey (chocolatey.org/),<text:line-break/>le chemin d&amp;#8217;installation vers Node s&amp;#8217;en trouvera réduit à une simple commande&amp;#160;:</text:p><text:p>Node n&amp;#8217;est pas compatible avec les versions antérieures à Windows Vista.<text:line-break/>Cela inclut Windows XP.</text:p><text:p>Mieux vaudra utiliser un service en ligne pour essayer Node en toute<text:line-break/>sécurité sur votre ordinateur ou passer à Linux pour lui redonner une seconde<text:line-break/>vie en toute sécurité&amp;#160;!</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* Node.js&amp;#160;: un terminal pour jouer avec JavaScript et voir les résultats que Node va interpréter&amp;#160;;,* Node.js command prompt&amp;#160;: un terminal pour exécuter nos programmes écrits en JavaScript.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/># Avec Scoop<text:line-break/>$ scoop install nodejs<text:line-break/><text:line-break/># Avec Chocolatey<text:line-break/>$ choco install nodejs<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Raspberry Pi</text:h><text:p>Des binaires sont disponibles pour les microcontrôleurs fonctionnant avec des processeurs ARMv6, ARMv7 et ARMv8.<text:line-break/>Ces microcontrôleurs sont au cœur de ce que l&amp;#8217;on appelle Internet des Objets (Internet of Things, IoT).<text:line-break/>Ces petits ordinateurs consomment peu d&amp;#8217;énergie,<text:line-break/>disposent d&amp;#8217;une connectique pour se relier à Internet<text:line-break/>et s&amp;#8217;interfacent avec toutes sortes de capteurs.</text:p><text:p>Un paquet deb est également proposé pour les utilisateurs du système d&amp;#8217;exploitation Raspbian (www.raspbian.org/).<text:line-break/>Les instructions d&amp;#8217;installation sont identiques à celles décrites<text:line-break/>dans la section précédente relative aux distributions Linux&amp;#160;: Debian et Ubuntu.</text:p><text:p>Tous les binaires et les instructions d&amp;#8217;installation sont disponibles sur nodejs.org/fr/download/.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ curl -SLO https://nodejs.org/dist/v10.3.0/node-v10.3.0-linux-arm64.tar.xz<text:line-break/>$ tar -xJf "node-v10.3.0-linux-arm64.tar.xz" -C /usr/local --strip-components=1<text:line-break/>$ ln -s /usr/local/bin/node /usr/local/bin/nodejs<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Compiler depuis les sources</text:h><text:p>Certaines situations exigeront que vous compiliez Node.<text:line-break/>C&amp;#8217;est le cas si vous cherchez à travailler au plus près du système sur lequel vous comptez déployer vos applications Node.<text:line-break/>Je pense par exemple à des architectures processeur ARM, PowerPC, IBM System/390 ou bien à des systèmes Android, OpenBSD ou AIX.</text:p><text:p>La compilation manuelle est également intéressante pour régler plus finement certains aspects grand public de Node&amp;#160;:<text:line-break/>rendre le binaire indépendant des librairies système (statique),<text:line-break/>le module http/2,<text:line-break/>les langues et fuseaux horaires fonctionnelles avec l&amp;#8217;API ECMA 402 Intl,<text:line-break/>les options de sécurité liées à OpenSSL,<text:line-break/>mais aussi l&amp;#8217;intégration avec des profileurs et débogueurs externes<text:line-break/>(type XCode, GNU Debugger, Intel VTune).</text:p><text:p>La compilation manuelle requiert la présence de GCC 4.9+, de Python 2.6+ et de GNU Make 3.81+.<text:line-break/>Les instructions de compilation varient d&amp;#8217;un système d&amp;#8217;exploitation à l&amp;#8217;autre.<text:line-break/>Consultez les dépendances et instructions complètes à<text:line-break/>cette adresse github.com/nodejs/node/blob/master/BUILDING.md.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ curl -sS https://nodejs.org/dist/v10.3.0/node-v10.3.0.tar.gz \<text:line-break/>  | tar -zxf -<text:line-break/>$ cd node-v10.3.0<text:line-break/>$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Images Docker</text:h><text:p>Docker (docker.com) est un outil open source dit d&amp;#8217;applications en conteneur.<text:line-break/>Une de ses qualités principales est d&amp;#8217;isoler l&amp;#8217;exécution d&amp;#8217;applications de leur environnement d&amp;#8217;exécution.<text:line-break/>Une image Docker décrit la recette d&amp;#8217;installation d&amp;#8217;une application.<text:line-break/>L&amp;#8217;environnement d&amp;#8217;exécution Docker fait office de passe-plat avec le système d&amp;#8217;exploitation.<text:line-break/>Une image Docker fonctionne ainsi de la même manière qu&amp;#8217;elle soit exécutée sous Linux, macOS ou encore Windows.</text:p><text:p>Les installeurs et instructions d&amp;#8217;installation de Docker se trouvent à l&amp;#8217;adresse docker.com/community-edition.</text:p><text:p>Une fois Docker installé, on peut exécuter une image officielle pour Node v10&amp;#160;:</text:p><text:p>Docker télécharge l&amp;#8217;image node:10 et exécute la commande node --version dans un contexte isolé du système d&amp;#8217;exploitation.</text:p><text:p>Pour lancer un terminal Node dans Docker, il faudrait saisir cette commande&amp;#160;:</text:p><text:p>Plusieurs variantes d&amp;#8217;images Node se trouvent à notre disposition&amp;#160;:</text:p><text:p>L&amp;#8217;intégralité des versions et architectures supportées est disponible sur<text:line-break/>le catalogue Docker Hub&amp;#160;: hub.docker.com/_/node/.<text:line-break/>Nous nous repencherons dessus dans la section<text:line-break/>déploiement d&amp;#8217;une image Docker du<text:line-break/>chapitre 6.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ docker run -ti --rm node:10 node --version<text:line-break/>v10.3.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ docker run -ti --rm node:10 node<text:line-break/>&amp;gt; 2+2<text:line-break/>4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@4230 {list_context: "dlist", text: "_standard_ (`node:{v}`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4232 {list_context: "dlist", text: "base Linux Debian pour tout type d'applications Node{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4246 {list_context: "dlist", text: "_Debian_ (`node:{v}-wheezy`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4248 {list_context: "dlist", text: "idem que _standard_ mais sur des bases Debian différentes, comme _Wheezy_, _Stretch_, etc.{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4262 {list_context: "dlist", text: "_Alpine_ (`node:{v}-alpine`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4264 {list_context: "dlist", text: "distribution spécialement créée pour Docker ([URL]#http://alpinelinux.org#){nbsp}— elle pèse quelques Mo à peine{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4278 {list_context: "dlist", text: "_allégée_ (`node:{v}-slim`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4280 {list_context: "dlist", text: "base Linux Debian sans outillage parfois nécessaires à des modules Node{nbsp}— utile si vous souhaitez économiser de l'espace disque.", blocks: 0}><text:line-break/></text:p><text:p><text:line-break/>* si vous vous êtes déjà servi·e d&amp;#8217;un terminal&amp;#160;: je recommande d&amp;#8217;utiliser nvm&amp;#160;;,* si vous ne vous êtes jamais servi·e d&amp;#8217;un terminal&amp;#160;: il est plus simple d&amp;#8217;utiliser un installeur depuis le site officiel de Node&amp;#160;;,* si vous souhaitez maitriser les options d&amp;#8217;installation&amp;#160;: il serait logique de compiler depuis les sources et/ou d&amp;#8217;utiliser Docker&amp;#160;;,* si rien de tout ça ne vous parle&amp;#160;: des services en ligne rendent Node accessible depuis un simple navigateur web.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Utiliser Node.js avec un terminal (shell)</text:h><text:p>La section précédente nous a permis d&amp;#8217;installer l&amp;#8217;environnement d&amp;#8217;exécution Node sur notre machine.<text:line-break/>Il se peut aussi que vous ayez privilégié l&amp;#8217;utilisation d&amp;#8217;un service en ligne.</text:p><text:p>Nous allons nous assurer dans cette section que nous pouvons<text:line-break/>voir nos premiers résultats d&amp;#8217;une interaction avec Node.</text:p><text:p>Le terminal est notre compagnon pour dialoguer avec le système d&amp;#8217;exploitation.<text:line-break/>L&amp;#8217;invite de commande est son nom véritable.<text:line-break/>Ce nom nous donne un indice sur la fonction de ce type de logiciel&amp;#160;:<text:line-break/>inviter l&amp;#8217;utilisateur à saisir des commandes pour obtenir des résultats calculés par un ordinateur.</text:p><text:p>L&amp;#8217;histoire des invites de commande remonte au temps où les ordinateurs<text:line-break/>étaient plus volumineux que nos logements.<text:line-break/>Une époque lointaine où les ordinateurs étaient véritablement et physiquement distants des claviers qui les interrogeaient.</text:p><text:p>fr.wikipedia.org/wiki/Terminal_informatique</text:p><text:p>Une application de type terminal sert également à communiquer avec<text:line-break/>Node quand celui-ci est installé sur un ordinateur.</text:p><text:p>La majorité des systèmes d&amp;#8217;exploitation embarquent un logiciel utilitaire permettant d&amp;#8217;ouvrir un terminal.<text:line-break/>Cela vaut également pour les services en ligne offrant la fonctionnalité d'éditeur de code.</text:p><text:p>Voici une liste non exhaustive d&amp;#8217;applications de type terminal&amp;#160;:</text:p><text:p>Maintenant que nous avons installé Node et compris comment<text:line-break/>y accéder depuis notre système d&amp;#8217;exploitation ou navigateur web,<text:line-break/>attaquons-nous au dernier morceau du puzzle&amp;#160;:<text:line-break/>avec quel logiciel écrire du code JavaScript pour nos applications Node&amp;#160;?</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@4372 {list_context: "dlist", text: "macOS", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4374 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@4406 {list_context: "dlist", text: "Linux", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4408 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@4440 {list_context: "dlist", text: "Windows", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4442 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Choisir un éditeur de texte</text:h><text:p>Programmer pour Node revient dans la majorité des cas à écrire du JavaScript.<text:line-break/>À cela s&amp;#8217;ajoutent le HTML et le CSS dans le cas d&amp;#8217;applications ou de sites web.</text:p><text:p>À la base, si un éditeur de texte suffit pour écrire du code,<text:line-break/>prenons le temps de regarder ce qui pourrait nous apporter un peu de confort<text:line-break/>dans le processus d&amp;#8217;écriture.</text:p><text:p>Les logiciels présentés ci-après couvrent bon nombre de fonctionnalités<text:line-break/>qui améliorent de près ou de loin notre capacité à écrire du code de qualité.<text:line-break/>Parmi ces fonctionnalités, on peut retrouver la coloration syntaxique,<text:line-break/>l&amp;#8217;inspection dynamique, le débogage, des astuces de productivité et<text:line-break/>d&amp;#8217;intégration à l&amp;#8217;écosystème Node.</text:p><text:p>Cette sélection a pour intention de vous aider à piocher au plus près<text:line-break/>de vos goûts.<text:line-break/>Le meilleur logiciel sera celui qui vous plaira.<text:line-break/>Rien n&amp;#8217;empêche d&amp;#8217;en changer par la suite.</text:p><text:h text:outline-level="3">Atom</text:h><text:p>Atom (atom.io) est un éditeur de code open-source,<text:line-break/>multilingue et multi plate-forme dont le développement a été initié<text:line-break/>par la société commerciale GitHub (github.com).<text:line-break/>Le logiciel est basé sur Electron, un environnement d&amp;#8217;exécution<text:line-break/>d&amp;#8217;applications de bureau reposant sur les technologies web et sur Node&amp;#160;!</text:p><text:p>Atom offre un écosystème d&amp;#8217;extensions pour étendre les fonctionnalités de l&amp;#8217;éditeur.<text:line-break/>On retrouvera des extensions dédiées à l&amp;#8217;auto-complétion,<text:line-break/>un débogueur Node intégré (pour exécuter nos programmes sans changer de fenêtre)<text:line-break/>mais aussi une vérification syntaxique sur mesure.</text:p><text:p>L&amp;#8217;ensemble des extensions d&amp;#8217;Atom sont disponibles sur atom.io/packages&amp;#160;;<text:line-break/>voici cependant une liste d&amp;#8217;extensions que j&amp;#8217;utilise au quotidien&amp;#160;:</text:p><text:p>Chaque extension peut être ajoutée à nos favoris sur le site atom.io.<text:line-break/>L&amp;#8217;intention peut être de signaler notre appréciation d&amp;#8217;une extension<text:line-break/>mais aussi de retrouver plus tard celles qui nous plaisent.</text:p><text:p>Et ça tombe bien, le logiciel nous offre une commande à saisir<text:line-break/>dans un terminal pour installer toutes les extensions<text:line-break/>ajoutées à nos favoris&amp;#160;!</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@4532 {list_context: "dlist", text: "minimap ([URL]#https://atom.io/packages/minimap#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4534 {list_context: "dlist", text: "Une prévisualisation de l'intégralité du code source d'un fichier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4548 {list_context: "dlist", text: "file-icons ([URL]#https://atom.io/packages/file-icons#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4550 {list_context: "dlist", text: "Une manière plus agréable de visualiser les différents types de fichiers\nen fonction de leur icône.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4566 {list_context: "dlist", text: "pigments ([URL]#https://atom.io/packages/pigments#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4568 {list_context: "dlist", text: "Affiche les couleurs en marge et dans le code source.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4582 {list_context: "dlist", text: "language-babel ([URL]#https://atom.io/packages/language-babel#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4584 {list_context: "dlist", text: "Coloration syntaxique de tous les langages compris par l'outil\nBabel ([URL]#https://babeljs.io#){nbsp}; dont les versions modernes\nde JavaScript, JSX, GraphQL, etc.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4602 {list_context: "dlist", text: "emmet ([URL]#https://atom.io/packages/emmet#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4604 {list_context: "dlist", text: "Génère du HTML à partir d'une écriture sous forme de sélecteur CSS.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4618 {list_context: "dlist", text: "linter-eslint ([URL]#https://atom.io/packages/linter-eslint#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4620 {list_context: "dlist", text: "Vérification syntaxique basée sur les règles projet du module\nESLint ([URL]#https://eslint.org#, voir\nl'&lt;&lt;../appendix-a/index.adoc#eslint,annexe A, eslint>>).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4638 {list_context: "dlist", text: "atom-ternjs ([URL]#https://atom.io/packages/atom-ternjs#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4640 {list_context: "dlist", text: "Autocomplétion pour JavaScript, Node et d'autres librairies\npopulaires comme jQuery, chai et underscore.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4656 {list_context: "dlist", text: "editorconfig ([URL]#https://atom.io/packages/editorconfig#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4658 {list_context: "dlist", text: "Adapte les réglages d'indentation et autres styles d'écriture de code\ndocumentés dans chaque projet.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4674 {list_context: "dlist", text: "language-sass ([URL]#https://atom.io/packages/language-sass#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4676 {list_context: "dlist", text: "Support du langage Sass.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4690 {list_context: "dlist", text: "markdown-writer ([URL]#https://atom.io/packages/markdown-writer#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4692 {list_context: "dlist", text: "Raccourcis et aides pour formatter du texte au format Markdown.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4706 {list_context: "dlist", text: "autocomplete-modules ([URL]#https://atom.io/packages/autocomplete-modules#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4708 {list_context: "dlist", text: "Étend l'autocomplétion lors des appels aux\n&lt;&lt;../chapter-05/index.adoc#,modules npm>> (voir Chapitre 5).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4724 {list_context: "dlist", text: "linter-sass-lint ([URL]#https://atom.io/packages/linter-sass-lint#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4726 {list_context: "dlist", text: "Vérification syntaxique des fichiers Sass.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4740 {list_context: "dlist", text: "node-debugger ([URL]#https://atom.io/packages/node-debugger#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4742 {list_context: "dlist", text: "Intégration du débogueur Node.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4756 {list_context: "dlist", text: "tablr ([URL]#https://atom.io/packages/tablr#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4758 {list_context: "dlist", text: "Éditeur de fichiers CSV.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4772 {list_context: "dlist", text: "linter-markdown ([URL]#https://atom.io/packages/linter-markdown#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4774 {list_context: "dlist", text: "Vérification syntaxique des fichiers Markdown.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4788 {list_context: "dlist", text: "node-resolver ([URL]#https://atom.io/packages/node-resolver#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@4790 {list_context: "dlist", text: "Navigation au sein des &lt;&lt;../chapter-05/index.adoc#,modules npm>>\nen cliquant sur leurs méthodes ou propriétés.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ apm stars --install<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Visual Studio Code</text:h><text:p>Visual Studio Code (code.visualstudio.com)<text:line-break/>est un éditeur de code open-source, multilingue et multi plate-forme<text:line-break/>dont le développement a été initié par la société Microsoft.<text:line-break/>Le logiciel est basé sur Electron, un environnement d&amp;#8217;exécution<text:line-break/>d&amp;#8217;applications de bureau reposant sur les technologies web et sur Node&amp;#160;!</text:p><text:p>Le système IntelliSense est un de ses atouts principaux.<text:line-break/>Il se sert du contexte disponible pour offrir une auto-complétion<text:line-break/>et des bulles d&amp;#8217;aide pertinentes.<text:line-break/>C&amp;#8217;est un éditeur parfaitement adapté au développement d&amp;#8217;applications Node<text:line-break/>grâce à des fonctionnalités natives comme l&amp;#8217;exécution, le débogage,<text:line-break/>la gestion de tâches et le versionnement&amp;#160;– du code et des modules npm.</text:p><text:p>Visual Studio Code offre également un écosystème d&amp;#8217;extensions pour<text:line-break/>étendre les fonctionnalités de l&amp;#8217;éditeur.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* marketplace.visualstudio.com/VSCode,* code.visualstudio.com/Docs/runtimes/nodejs<text:line-break/></text:p><text:h text:outline-level="3">WebStorm</text:h><text:p>WebStorm (www.jetbrains.com/webstorm/) est un environnement de développement (IDE) payant dédié au développement Web<text:line-break/>HTML5, JavaScript et Node.<text:line-break/>Le logiciel est commercialisé par la société JetBrains.<text:line-break/>Cette société est renommée pour ses IDE Pycharm (pour Python),<text:line-break/>PhpStorm (pour PHP) et IntelliJ IDEA (pour Java).</text:p><text:p>WebStorm est compatible Windows, Linux et macOS.<text:line-break/>Ses forces résident dans sa relative légèreté,<text:line-break/>une auto-complétion intelligente prenant en compte la résolution<text:line-break/>des modules CommonJS et AMD, une intégration des outils populaires<text:line-break/>dans l&amp;#8217;écosystème Node (npm, eslint, Mocha, Karma, Bower, etc.)<text:line-break/>ainsi qu&amp;#8217;un débogage avancé.</text:p><text:p>Le téléchargement de WebStorm inclut une période d&amp;#8217;essai de 30 jours.<text:line-break/>La tarification du produit varie selon que vous soyez un individu ou<text:line-break/>une entreprise et que le paiement se fasse mensuellement ou annuellement.</text:p><text:p>Vous pouvez demander à bénéficier d&amp;#8217;une licence gratuite sous réserve<text:line-break/>d&amp;#8217;une preuve de contribution à un ou plusieurs projets open source.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* www.jetbrains.com/buy/opensource/<text:line-break/></text:p><text:h text:outline-level="3">Visual Studio IDE</text:h><text:p>Visual Studio (www.visualstudio.com/vs/)<text:line-break/>est un environnement de développement (IDE) édité par Microsoft.<text:line-break/>Visual Studio était historiquement dédié au développement applicatif<text:line-break/>Windows (Visual Basic, Visual C++).<text:line-break/>Ce logiciel gère aujourd&amp;#8217;hui bien plus de langages,<text:line-break/>dont C#, HTML, CSS, JavaScript, ASP.Net.<text:line-break/>Il est surtout extensible, ce qui permet de lui ajouter le<text:line-break/>support de Python ou encore Node, entre autres.</text:p><text:p>Visual Studio est compatible Windows uniquement.<text:line-break/>Il existe en plusieurs éditions dont la Community Edition.<text:line-break/>Cette édition est gratuite, elle.</text:p><text:p>Afin de bénéficier de l&amp;#8217;intégration complète de l&amp;#8217;écosystème Node,<text:line-break/>il est nécessaire d&amp;#8217;installer l&amp;#8217;extension Node.js Tools for Visual Studio<text:line-break/>(aussi nommée NTVS).<text:line-break/>Elle est gratuite, open source et disponible à cette adresse<text:line-break/>www.visualstudio.com/vs/node-js/.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Quand mettre à jour Node.js ?</text:h><text:p>Le développement de Node continue pendant que vous lisez ces lignes.<text:line-break/>Les sections suivantes présentent les différentes raisons<text:line-break/>pour lesquelles de nouvelles versions de Node sont distribuées.</text:p><text:p>Quelle que soit la raison, le processus de mise à jour est identique<text:line-break/>que pour l'installation de Node&amp;#160;:</text:p><text:h text:outline-level="3">Mises à jour de sécurité</text:h><text:p>Node n&amp;#8217;est pas exempt de bugs.<text:line-break/>Il y a une catégorie de bugs qui nécessite d&amp;#8217;être réactif&amp;#160;:<text:line-break/>les failles de sécurité.<text:line-break/>Ces failles offrent une surface d&amp;#8217;attaque à des personnes<text:line-break/>mal intentionnées.<text:line-break/>Elles seraient tentées d&amp;#8217;accéder sans permission à des serveurs,<text:line-break/>et donc aux données qu&amp;#8217;ils contiennent.</text:p><text:p>L&amp;#8217;impact peut être faible pour un site perso à condition de ne pas laisser<text:line-break/>trainer de mots de passe ici et là.<text:line-break/>Cela peut se révéler beaucoup plus fâcheux pour un site e-commerce<text:line-break/>ou une entreprise dont la santé serait mise en jeu.</text:p><text:p>L&amp;#8217;équipe de Node livre des versions corrigeant les failles de sécurité<text:line-break/>aussitôt qu&amp;#8217;elle le peut.<text:line-break/>La faille n&amp;#8217;est d&amp;#8217;ailleurs pas révélée avant que le correctif<text:line-break/>soit disponible, par mesure de précaution.</text:p><text:p>Que faire si la faille de sécurité affecte la version de Node installée sur&amp;#160;:</text:p><text:p>Les versions de Node qui corrigent des failles de sécurité ou des bugs connus<text:line-break/>n&amp;#8217;ont quasiment aucune chance de casser une application existante.<text:line-break/>On les appelle les versions patch.<text:line-break/>Une version patch est, par exemple, lorsque la version actuelle<text:line-break/>de Node est la v10.0.0 et que la nouvelle version est la v10.0.1.</text:p><text:p>Plusieurs ressources sont à notre disposition pour se tenir informé·e&amp;#160;:</text:p><text:p>Un groupe de travail veille à maintenir et améliorer la sécurité de Node.<text:line-break/>Ces personnes se chargent d&amp;#8217;être proactives dans la détection<text:line-break/>de failles dans l&amp;#8217;architecture de Node mais aussi dans<text:line-break/>l&amp;#8217;intégration de code tiers, comme la brique OpenSSL<text:line-break/>ou le module npm.</text:p><text:p>github.com/nodejs/security-wg</text:p><text:p>Le chapitre 6 décrit<text:line-break/>comment se maintenir à jour sur les<text:line-break/>alertes de sécurité de nos<text:line-break/>applications Node.<text:line-break/>Celles-ci peuvent être vulnérables du fait des modules npm dont elles<text:line-break/>sont dépendantes&amp;#160;— en plus des vulnérabilités de Node.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* notre ordinateur de développement&amp;#160;: c&amp;#8217;est peu risqué - sauf à ce qu&amp;#8217;un module tiers exploite cette faille&amp;#160;;,* notre site web&amp;#160;: redéployer aussitôt le site en question avec une version corrigeant la faille.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@5092 {list_context: "dlist", text: "Liste de diffusion ([URL]#https://groups.google.com/group/nodejs-sec#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5094 {list_context: "dlist", text: "Pour recevoir l'alerte par email (moins d'un email par mois).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5108 {list_context: "dlist", text: "Blog Node.js ([URL]#https://nodejs.org/en/blog/vulnerability/#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5110 {list_context: "dlist", text: "Une page web à consulter avec un navigateur web.\nLes mêmes messages sont relayés sur la _liste de diffusion_\nmentionnée précédemment.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5128 {list_context: "dlist", text: "Fil RSS du blog Node.js ([URL]#https://nodejs.org/en/feed/vulnerability.xml#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5130 {list_context: "dlist", text: "La même chose que le point précédent mais auquel on peut souscrire\navec un lecteur RSS comme _Feedly_ ou _Mozilla Thunderbird_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5146 {list_context: "dlist", text: "Compte Twitter @nodesecurity ([URL]#https://twitter.com/nodesecurity#)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5148 {list_context: "dlist", text: "Annonce des informations liées à la sécurité générale de Node\net de son écosystème.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Versions mineures</text:h><text:p>Les versions mineures de Node sont des versions qui ajoutent de<text:line-break/>nouvelles fonctionnalités à Node.<text:line-break/>Ces nouvelles fonctionnalités n&amp;#8217;ont quasiment aucune chance de<text:line-break/>casser une application existante.</text:p><text:p>Une version mineure est, par exemple, lorsque la version actuelle<text:line-break/>de Node est la v10.0.3 et que la nouvelle version est la v10.1.0.<text:line-break/>Les versions mineures sortent une petite dizaine de fois par an.<text:line-break/>Une migration ne demande pas nécessairement d&amp;#8217;investir beaucoup de temps pour adapter et tester nos applications Node.</text:p><text:p>Que faire en cas de sortie d&amp;#8217;une version mineure sur&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* notre ordinateur de développement&amp;#160;: on peut migrer si l&amp;#8217;on veut tester<text:line-break/>ou bénéficier des nouvelles fonctionnalités de cette version&amp;#160;;,* notre site web&amp;#160;: pas d&amp;#8217;action immédiate requise&amp;#160;;<text:line-break/>on peut migrer si l&amp;#8217;on veut bénéficier des nouvelles fonctionnalités<text:line-break/>de cette version.<text:line-break/></text:p><text:h text:outline-level="3">Versions majeures</text:h><text:p>Les versions majeures de Node sont des versions qui ajoutent de<text:line-break/>nouvelles fonctionnalités à Node.<text:line-break/>En revanche, ces versions peuvent être amenées à changer des comportements<text:line-break/>qui casseraient une application existante.</text:p><text:p>Une version majeure est, par exemple, lorsque la version actuelle<text:line-break/>de Node est la v10.3.0 et que la nouvelle version est la v11.0.0.<text:line-break/>Les versions majeures sortent 2 fois par an.<text:line-break/>Une migration peut demander d&amp;#8217;investir un certain temps pour adapter<text:line-break/>et tester nos applications Node.</text:p><text:p>Que faire en cas de sortie d&amp;#8217;une version majeure sur&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* notre ordinateur de développement&amp;#160;: on cherchera à prendre du temps<text:line-break/>pour tester nos applications sur cette version<text:line-break/>et s&amp;#8217;assurer de leur bon fonctionnement&amp;#160;;,* notre site web&amp;#160;: pas d&amp;#8217;action immédiate requise.<text:line-break/></text:p><text:h text:outline-level="3">Comprendre le cycle de vie produit</text:h><text:p>Le développement de la plate-forme Node prend soin de ne pas<text:line-break/>aller trop vite ni d&amp;#8217;altérer la stabilité des applications et des<text:line-break/>outils en fonctionnement.<text:line-break/>Il sort au maximum deux versions majeures par an.<text:line-break/>Parmi ces deux versions, une version majeure est supportée à long terme (Long Term Support, LTS).</text:p><text:p>La notion de version supportée à long terme (LTS)<text:line-break/>a été introduit pour donner un repère de stabilité.<text:line-break/>On sait qu&amp;#8217;on peut compter dessus sans se poser de question.<text:line-break/>Les versions qui ne sont pas supportées à long terme sont à voir<text:line-break/>comme un coup d&amp;#8217;essai, dans l&amp;#8217;anticipation d&amp;#8217;une migration<text:line-break/>vers une version suivante, supportée à long terme, elle.</text:p><text:p>Le calendrier des sorties de Node est tenu à jour à l&amp;#8217;adresse ci-après.<text:line-break/>Référez-vous à ce calendrier pour des informations à jour sur<text:line-break/>les prochaines versions et l&amp;#8217;arrêt de maintenance d&amp;#8217;anciennes versions.</text:p><text:p>Si on récapitule&amp;#160;:</text:p><text:p>Les patchs de sécurité ne concernent que les versions en développement, supportées ou en maintenance.</text:p><text:p>Cette planification garantit une plate-forme et un ensemble de<text:line-break/>fonctionnalités stables de manière prédictible,<text:line-break/>à la fois pour les projets reposant sur Node mais aussi<text:line-break/>pour l&amp;#8217;écosystème de contributeurs de modules npm.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* github.com/nodejs/Release<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@5322 {list_context: "dlist", text: "Les versions *impaires* (v5, v7, etc.)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5324 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@5356 {list_context: "dlist", text: "Les versions *paires* (_LTS_, {nodeCurrentversion}, etc.)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5358 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* si vous aviez utilisé un installeur&amp;#160;: téléchargez et installez-en<text:line-break/>la nouvelle version&amp;#160;;,* si vous aviez utilisé un gestionnaire de version&amp;#160;: téléchargez la<text:line-break/>nouvelle version et faites-en la nouvelle version par défaut&amp;#160;;,* si vous aviez compilé depuis les sources&amp;#160;: téléchargez les sources<text:line-break/>de la nouvelle version et compilez à nouveau&amp;#160;;,* si vous aviez utilisé une image Docker&amp;#160;: téléchargez la nouvelle<text:line-break/>version en ayant recourt à la commande docker pull node:&amp;lt;version&amp;gt;.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>Nous sommes désormais en mesure d&amp;#8217;installer et mettre à jour Node<text:line-break/>sur notre ordinateur.<text:line-break/>Nous savons aussi avec quel(s) logiciel(s) développer nos applications.<text:line-break/>Nous savons aussi où nous informer pour savoir quand faire nos mises à jour,<text:line-break/>pour corriger des problèmes de sécurité et bénéficier des nouvelles<text:line-break/>fonctionnalités du langage.</text:p><text:p>Le prochain chapitre nous amènera à reprendre les bases du<text:line-break/>langage JavaScript en jouant avec le terminal Node.<text:line-break/>On découvrira également les différences entre JavaScript, ECMAScript et Node.</text:p><text:p><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* Installer Node.js sur son ordinateur,* Choisir un éditeur de code pour écrire nos programmes,* Déterminer quand migrer vers une nouvelle version de Node.js<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. installer Node.js pour voir le résultat de nos programmes écrits en JavaScript&amp;#160;;,1. installer un éditeur de code pour écrire nos programmes JavaScript plus confortablement.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Jouer avec JavaScript</text:h><text:p>Programmer une application Node c&amp;#8217;est aussi<text:line-break/>l&amp;#8217;occasion d&amp;#8217;apprendre JavaScript.<text:line-break/>Ou de se mettre à jour ou de redécouvrir le langage.</text:p><text:p>Ce chapitre explique ce qu&amp;#8217;il faut pour<text:line-break/>comprendre comment fonctionne JavaScript.<text:line-break/>Nous utiliserons une approche par l&amp;#8217;exemple.</text:p><text:p>JavaScript est souvent raillé.<text:line-break/>Parce que ce n&amp;#8217;est pas un vrai langage.<text:line-break/>Parce qu&amp;#8217;il a été créé en 6 jours.<text:line-break/>Parce qu&amp;#8217;il n&amp;#8217;est pas orienté objet.</text:p><text:p>JavaScript est un langage expressif qui a énormément gagné en maturité<text:line-break/>depuis les années 2010.<text:line-break/>Il se révèle parfaitement opérationnel dès lors que l&amp;#8217;on s&amp;#8217;intéresse<text:line-break/>à ses fonctionnalités, sans faire de hors-piste.</text:p><text:p>Les types de données et les méthodes de manipulations qu&amp;#8217;elles nous offrent<text:line-break/>permettent d&amp;#8217;écrire un code plus simple, à lire et à produire.<text:line-break/>Certaines structures de données nous aident à mieux organiser nos données<text:line-break/>ainsi qu&amp;#8217;à mieux les traiter.</text:p><text:h text:outline-level="2">Qu&amp;#8217;est-ce que JavaScript ?</text:h><text:p>Au lieu d&amp;#8217;écrire plusieurs paragraphes expliquant ce qu&amp;#8217;est et<text:line-break/>ce que n&amp;#8217;est pas JavaScript, regardons ensemble<text:line-break/>un bloc de code contenant plusieurs expressions écrites<text:line-break/>en JavaScript&amp;#160;:</text:p><text:p>Ce que l&amp;#8217;on peut comprendre de l&amp;#8217;exemple de code ci-dessus,<text:line-break/>c&amp;#8217;est que JavaScript permet de s&amp;#8217;interfacer avec plusieurs choses&amp;#160;:</text:p><text:p>ECMAScript correspond à l&amp;#8217;ensemble des expressions du langage.<text:line-break/>Ces expressions sont étendues par des interfaces de programmation (API).<text:line-break/>Ces interfaces nous permettent de communiquer avec les documents web, les navigateurs web ou les systèmes informatiques.</text:p><text:p>JavaScript a été inventé en 1995 par Brendan Eich alors qu&amp;#8217;il était employé de la société Netscape Communications.<text:line-break/>Microsoft lui emboîte le pas en incluant JavaScript dans son logiciel Internet Explorer, alors en version 3.<text:line-break/>Pour des raisons de droits de marque, il y est dénommé JScript.</text:p><text:p>La spécification est ensuite validée par l&amp;#8217;organisme Ecma International en juin 1997 sous le nom d&amp;#8217;ECMAScript, standard ECMA-262.</text:p><text:p>L&amp;#8217;utilisation du terme JavaScript est resté dans le vocabulaire courant. Mais c&amp;#8217;est bien d&amp;#8217;ECMAScript dont on parle, vraiment.</text:p><text:p>Adobe Flash utilise un dérivé d&amp;#8217;ECMAScript&amp;#160;: ActionScript.<text:line-break/>Bien des machines virtuelles sont capables d&amp;#8217;interpréter partiellement ou<text:line-break/>intégralement ECMAScript&amp;#160;: Rhino, Konq, BESEN en Object Pascal ou encore<text:line-break/>Esprima qui est elle-même écrite en ECMAScript.</text:p><text:p>Si d&amp;#8217;autres langages de programmation se cantonnent<text:line-break/>soit au côté client (VBScript, ActionScript, Elm)<text:line-break/>soit au côté serveur (Ruby, Python, Haskell),<text:line-break/>JavaScript a débuté côté client pour s&amp;#8217;étendre au côté serveur.<text:line-break/>Ce à quoi se réfère l&amp;#8217;expression anglophone full stack.</text:p><text:p>Le langage ECMAScript&amp;#160;— appelons-le ainsi à partir de maintenant&amp;#160;—<text:line-break/>a évolué au fil du temps.<text:line-break/>Il s&amp;#8217;est enrichi au fur et à mesure de nouvelles fonctionnalités,<text:line-break/>de sucres syntaxiques (raccourcis d&amp;#8217;écriture)<text:line-break/>et de rigueur aussi, pour corriger des défauts de design.</text:p><text:p>Le comité de travail TC39 (Technical Committee,<text:line-break/>github.com/tc39) est en charge de l&amp;#8217;évolution<text:line-break/>du langage, standardisé sous le doux sobriquet de standard ECMA-262.<text:line-break/>À charge ensuite aux différents implémenteurs de suivre les changements<text:line-break/>et de les incorporer dans leurs machines virtuelles.</text:p><text:p>Node se base sur la machine virtuelle V8 de Google pour interpréter les expressions ECMAScript.<text:line-break/>De fait, Node comprend les mêmes expressions ECMAScript que V8.</text:p><text:p>Nous verrons un peu plus tard dans ce chapitre comment suivre la<text:line-break/>compatibilité de Node avec ECMAScript.<text:line-break/>Intéressons-nous à l&amp;#8217;évolution du langage, et ce que ça nous apporte.</text:p><text:h text:outline-level="3">ECMAScript 5 (aka ES5)</text:h><text:p>ECMAScript a été standardisé dans sa version 5 en décembre 2009.<text:line-break/>La révision 5.1 de juin 2011 est une correction mineure de la spécification.</text:p><text:p>Il s&amp;#8217;agit d&amp;#8217;une évolution majeure dans l&amp;#8217;histoire du langage.<text:line-break/>La précédente version&amp;#160;— ECMAScript 3&amp;#160;— était âgée de dix ans.</text:p><text:p>ECMAScript 5 limite drastiquement certains effets indésirables du langage<text:line-break/>grâce au mode strict.<text:line-break/>De nouvelles méthodes de manipulation de tableaux et d&amp;#8217;objets voient le jour<text:line-break/>ainsi qu&amp;#8217;un support natif du format de données JSON.</text:p><text:p>La standardisation de cette version d&amp;#8217;ECMAScript a contribué à redorer<text:line-break/>l&amp;#8217;image du langage mais aussi à faire émerger de nouvelles pratiques<text:line-break/>de programmation.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@5794 {list_context: "dlist", text: "Table de compatibilité", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5796 {list_context: "dlist", text: "[URL]#https://kangax.github.io/compat-table/es5/#", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5810 {list_context: "dlist", text: "Spécification", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5812 {list_context: "dlist", text: "[URL]#https://www.ecma-international.org/ecma-262/5.1/#", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">ECMAScript 2015 (aka ES6 puis ES2015)</text:h><text:p>La spécification ECMAScript 2015 (ES2015) a été publiée en juin 2015.<text:line-break/>Elle succède à ECMAScript 5 après 6 années de gestation.<text:line-break/>Cette version a successivement été appelée ECMAScript Harmony, ECMAScript 6, puis ECMAScript 2015.</text:p><text:p>Le processus de standardisation a mis 6 années pour aboutir,<text:line-break/>mais cette fois-ci, les choses se sont déroulées différemment.<text:line-break/>De nombreuses idées ont été piochées dans le langage<text:line-break/>CoffeeScript (coffeescript.org).<text:line-break/>Et surtout, un nouveau type d&amp;#8217;outillage s&amp;#8217;est formé pour commencer<text:line-break/>à utiliser ce JavaScript du futur avec les compilateurs<text:line-break/>traceur de Google dès 2011 (github.com/google/traceur-compiler)<text:line-break/>puis le projet indépendant 6to5 dès 2014.<text:line-break/>6to5 a été renommé en babel (babeljs.io)<text:line-break/>et son instigateur a par la suite été embauché par Facebook.</text:p><text:p>La pratique de compiler du JavaScript en JavaScript était en rupture<text:line-break/>avec ce qui se faisait précédemment&amp;#160;:<text:line-break/>attendre qu&amp;#8217;une fonctionnalité soit adoptée par un dénominateur commun<text:line-break/>de navigateurs web pour s&amp;#8217;en servir.<text:line-break/>Cette fois-ci, on pouvait se servir du futur, dès aujourd&amp;#8217;hui.</text:p><text:p>De fait, il n&amp;#8217;y a pas eu à attendre 6 ans et l&amp;#8217;implémentation<text:line-break/>par les différents implémenteurs pour profiter de ce<text:line-break/>qu&amp;#8217;il y avait de meilleur.</text:p><text:p>Le prix à payer&amp;#160;? Un ticket d&amp;#8217;entrée plus élevé lié à la maitrise<text:line-break/>de l&amp;#8217;outillage associé.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@5882 {list_context: "dlist", text: "Table de compatibilité (navigateurs web)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5884 {list_context: "dlist", text: "[URL]#https://kangax.github.io/compat-table/es6/#", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5898 {list_context: "dlist", text: "Table de compatibilité (Node.js)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5900 {list_context: "dlist", text: "[URL]#https://node.green/#", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5914 {list_context: "dlist", text: "Spécification", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5916 {list_context: "dlist", text: "[URL]#https://www.ecma-international.org/ecma-262/6.0/#", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">ECMAScript 2016, etc. (aka ES2016)</text:h><text:p>Depuis la sortie d&amp;#8217;ECMAScript 2015, l&amp;#8217;intention est de publier une<text:line-break/>nouvelle spécification par an.<text:line-break/>L&amp;#8217;envie était de travailler fonctionnalité par fonctionnalité<text:line-break/>et de ne pas attendre trop longtemps avant de les ratifier.<text:line-break/>En conséquent, les nouvelles versions annuelles sont beaucoup plus<text:line-break/>incrémentales.<text:line-break/>Elles se font moins attendre et contiennent moins de grands bouleversements.</text:p><text:p>Les fonctionnalités en cours de préparation sont listées<text:line-break/>dans ce dépôt GitHub&amp;#160;: github.com/tc39/proposals.<text:line-break/>Le dernier stade avant la validation d&amp;#8217;une fonctionnalité est le stage 3.<text:line-break/>Dès qu&amp;#8217;une fonctionnalité passe en stage 4, elle est incluse<text:line-break/>dans la prochaine version d&amp;#8217;ECMAScript<text:line-break/>—&amp;#160;_ECMAScript 2018_ une fois l&amp;#8217;année 2018 terminée.</text:p><text:p>Les fonctionnalités approuvées sont consignées dans ce document&amp;#160;:<text:line-break/>github.com/tc39/proposals/blob/master/finished-proposals.md.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:p><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>// On concatène 2 chaînes de caractères 1<text:line-break/>const baseUrl = 'https://oncletom.io/node.js';<text:line-break/>const filePath = `${baseUrl}/package.json`;<text:line-break/><text:line-break/>// On affiche un message au clic sur la page 2<text:line-break/>const docBody = document.querySelector('body');<text:line-break/>docBody.addEventListener('click', () =&amp;gt; alert('Hello World!'));<text:line-break/><text:line-break/>// On affiche des informations contenues dans un fichier distant 3<text:line-break/>fetch(filePath)<text:line-break/>  .then(response =&amp;gt; response.json())<text:line-break/>  .then(pkg =&amp;gt; console.log(`${pkg.name}@${pkg.version}`));<text:line-break/><text:line-break/>// On liste le contenu du répertoire utilisateur 4<text:line-break/>const {homedir} = require('os');<text:line-break/>const fs = require('fs');<text:line-break/>fs.readdir(homedir(), (err, files) =&amp;gt; {<text:line-break/>  err ? console.error(err) : console.log(files);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@5640 {list_context: "colist", text: "Code JavaScript standard.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5650 {list_context: "colist", text: "Code JavaScript pour manipuler la DOM API (documents web).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5660 {list_context: "colist", text: "Code JavaScript pour manipuler des Web API (fonctionnalités des navigateurs web).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@5670 {list_context: "colist", text: "Code JavaScript pour manipuler Node.js.", blocks: 0}><text:line-break/><text:line-break/>1. des documents web représentés par le Document Object Model (DOM)&amp;#160;;,1. des navigateurs web au travers des Web API&amp;#160;;,1. des systèmes informatiques avec Node.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Les éléments de base du langage</text:h><text:p>ECMAScript permet de manipuler différents types de données.<text:line-break/>Cette section s&amp;#8217;intéresse à décrire les notions nécessaires<text:line-break/>pour s&amp;#8217;approprier le reste des exemples de l&amp;#8217;ouvrage.<text:line-break/>On apprendra notamment à manipuler des variables, à faire<text:line-break/>des boucles sur des collections et à faire la différence<text:line-break/>entre un objet et une fonction.</text:p><text:p>Mais qu&amp;#8217;entend-t-on par type de données&amp;#160;?<text:line-break/>Faisons-nous notre propre idée avec une suite d&amp;#8217;exemples.<text:line-break/>Ces notions seront développées dans le reste du chapitre,<text:line-break/>pour mieux comprendre ce que l&amp;#8217;on peut en faire.</text:p><text:p>Une valeur entourée de guillemets est considérée<text:line-break/>par l&amp;#8217;interpréteur ECMAScript comme une chaîne de caractères, du texte.</text:p><text:p>Ces guillemets peuvent être des guillemets simples ('),<text:line-break/>des guillemets doubles (") ou des guillemets obliques (`).</text:p><text:p>On peut effectuer des opérations d&amp;#8217;identification ou d&amp;#8217;assemblage avec une<text:line-break/>valeur de type chaîne de caractères.</text:p><text:p>ECMAScript considère les entiers (3 dans cet exemple)<text:line-break/>et les nombres flottants (12.3 dans cet exemple) comme des nombres.<text:line-break/>Il ne fait pas de distinction entre les deux.</text:p><text:p>On peut effectuer des opérations mathématiques entre plusieurs<text:line-break/>valeurs de type nombre.</text:p><text:p>ECMAScript considère deux valeurs pour signifier vrai ou faux,<text:line-break/>respectivement true et false.</text:p><text:p>On peut effectuer des opérations logiques avec une<text:line-break/>valeur de type booléen.</text:p><text:p>On utilise null pour signifier l&amp;#8217;absence de valeur.</text:p><text:p>La valeur undefined est utilisée pour signifier<text:line-break/>qu&amp;#8217;une valeur est inconnue.<text:line-break/>Rares sont les cas où on choisira ce type de données par nous-même.</text:p><text:p>Il existe trois autres types de données qui se basent sur ces types<text:line-break/>dits primitifs.<text:line-break/>Ces autres types sont destinés à ranger, classer et<text:line-break/>à exprimer de nouvelles valeurs en fonction d&amp;#8217;autres.</text:p><text:p>Un tableau se déclare en encadrant une suite de valeurs entre crochets<text:line-break/>([ et ]).<text:line-break/>Un tableau peut contenir n&amp;#8217;importe quel type de valeurs,<text:line-break/>et autant que nécessaire.<text:line-break/>L&amp;#8217;ordre des valeurs a généralement une importance.</text:p><text:p>On peut effectuer des opérations de tri et de sélection avec un<text:line-break/>tableau de valeurs.</text:p><text:p>Un objet se déclare en encadrant une suite de paires de valeurs<text:line-break/>entre accolade ({ et }).<text:line-break/>Une clé désigne une valeur, qui peut être de n&amp;#8217;importe quel type.<text:line-break/>Un objet fonctionne comme un dictionnaire&amp;#160;: on associe une valeur<text:line-break/>à un intitulé, un label.<text:line-break/>L&amp;#8217;ordre des valeurs n&amp;#8217;a généralement pas d&amp;#8217;importance.</text:p><text:p>On peut effectuer des opérations de sélection avec un<text:line-break/>objet de valeurs.</text:p><text:p>Une fonction accepte des arguments, de n&amp;#8217;importe quel type et<text:line-break/>autant que nécessaire.<text:line-break/>Une fonction peut être déclarée et être exécutée (dernière ligne de l&amp;#8217;exemple précédent).</text:p><text:p>Une fonction retourne un résultat explicite avec le<text:line-break/>mot-clé return.<text:line-break/>Dans le cas contraire, ECMAScript considère<text:line-break/>que la valeur retournée équivaut implicitement à undefined.</text:p><text:p>On peut effectuer des opérations de transformation avec une fonction.</text:p><text:p>Les fonctions sont destinées à être appelées, pour effectuer<text:line-break/>des traitements répétitifs.<text:line-break/>Dès que l&amp;#8217;on sent que l&amp;#8217;on doit écrire deux fois la même chose,<text:line-break/>on l&amp;#8217;écrit dans une fonction et on l&amp;#8217;appelle deux fois.</text:p><text:h text:outline-level="3">Les variables</text:h><text:p>Les variables servent à ranger des valeurs.<text:line-break/>On peut ainsi les réutiliser plus tard, les transmettre et prendre<text:line-break/>des décisions en fonction de ce qu&amp;#8217;elles contiennent.</text:p><text:p>Les variables nous aident à donner du sens à notre code,<text:line-break/>à le rendre intelligible par d&amp;#8217;autres personnes<text:line-break/>ainsi qu&amp;#8217;à nommer des choses comme on le ferait dans notre quotidien.</text:p><text:p>À votre avis, combien vaut le prix du livre calculé dans<text:line-break/>l&amp;#8217;exemple précédent&amp;#160;?<text:line-break/>Il suffirait de suivre le chemin que prend la nouvelle valeur<text:line-break/>rangée dans la clé price de l&amp;#8217;objet book, calculée par la fonction<text:line-break/>double à qui on passe la valeur contenue dans la variable base_price.</text:p><text:p>Le mot-clé const nous a servi à déclarer des variables.<text:line-break/>On ne peut étiqueter une variable avec le même nom qu&amp;#8217;une seule fois.<text:line-break/>L&amp;#8217;exemple suivant générera une erreur si on déclare deux fois la même variable avec const&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const book = {<text:line-break/>  title: 'Node.js',<text:line-break/>  isbn: '978-2212139938',<text:line-break/>  published: true<text:line-break/>};<text:line-break/><text:line-break/>const base_price = 13;<text:line-break/><text:line-break/>function double(value) {<text:line-break/>  return value * 2;<text:line-break/>}<text:line-break/><text:line-break/>book.price = double(base_price);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const base_price = 13;<text:line-break/>const base_price = 14;<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Instructions</text:h><text:p>Des instructions nous servent à suivre, éviter ou répéter<text:line-break/>des chemins dans notre code.</text:p><text:p>L&amp;#8217;instruction if nous aide à exécuter du code qui remplit une condition.<text:line-break/>Cette condition peut être une valeur ou une expression.<text:line-break/>Cette expression est interprétée pour savoir à quel booléen<text:line-break/>elle correspond.</text:p><text:p>L&amp;#8217;exemple précédent vérifie que les deux conditions sont remplies<text:line-break/>(opérateur &amp;amp;&amp;amp;) pour afficher un message en conséquent.</text:p><text:p>On notera au passage que book.title n&amp;#8217;est pas un booléen.<text:line-break/>ECMAScript regarde dans ce cas que la chaîne de caractères<text:line-break/>contient au moins 1 caractère.<text:line-break/>On expliquera ce comportement plus en détail dans la section manipuler des booléens.</text:p><text:p>L&amp;#8217;instruction if peut être complétée avec l&amp;#8217;instruction else<text:line-break/>pour exécuter du code qui répondrait au cas contraire.<text:line-break/>On peut imbriquer plusieurs else if à la suite.</text:p><text:p>Notre exemple n&amp;#8217;empruntera qu&amp;#8217;un seul des chemins, mais on peut<text:line-break/>constater qu&amp;#8217;on pourrait en emprunter un autre<text:line-break/>en modifiant la valeur des clés title et published.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const book = {<text:line-break/>  title: 'Node.js',<text:line-break/>  published: true<text:line-break/>};<text:line-break/><text:line-break/>if (book.published &amp;amp;&amp;amp; book.title) {<text:line-break/>  console.log('Le livre est publié (et a un titre)');<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const book = {<text:line-break/>  title: 'Node.js',<text:line-break/>  published: true<text:line-break/>};<text:line-break/><text:line-break/>if (book.published &amp;amp;&amp;amp; book.title) {<text:line-break/>  console.log('Le livre est publié avec un titre.');<text:line-break/>}<text:line-break/>else if (book.published) {<text:line-break/>  console.log('Le livre est publié (sans titre).');<text:line-break/>}<text:line-break/>else {<text:line-break/>  console.log('Le livre n\'est pas publié.');<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Portée (scope)</text:h><text:p>La portée est un concept très présent dans ECMAScript.<text:line-break/>On y fait souvent référence en parlant de variable globale et<text:line-break/>de variable locale.<text:line-break/>On peut y sentir une notion de frontière d&amp;#8217;accès à la valeur<text:line-break/>d&amp;#8217;une variable.</text:p><text:p>Ce que nous dit l&amp;#8217;exemple précédent,<text:line-break/>c&amp;#8217;est que la variable secret de type fonction a une portée globale<text:line-break/>au script en question.<text:line-break/>Qu&amp;#8217;en-est-il de la variable mot encapsulée dans cette fonction&amp;#160;?</text:p><text:p>On pourrait le résumer ainsi&amp;#160;:<text:line-break/>la variable mot est définie dans la fonction secret<text:line-break/>et n&amp;#8217;est donc pas accessible en dehors de la portée de la fonction.<text:line-break/>À l&amp;#8217;inverse, ce qui est défini en dehors d&amp;#8217;une fonction<text:line-break/>est accessible à l&amp;#8217;intérieur d&amp;#8217;une fonction.</text:p><text:p>La portée de la variable mot est locale à la fonction secret.</text:p><text:p>Dans le précédent exemple, nous illustrons la portée globale de la variable<text:line-break/>year.<text:line-break/>Elle est définie un cran au-dessus des fonctions next et nextYear.<text:line-break/>On peut y accéder, comme en atteste le code de la fonction nextYear.</text:p><text:p>À l&amp;#8217;inverse, la variable value a une portée locale<text:line-break/>—&amp;#160;elle est passée en paramètre de la fonction next.<text:line-break/>ECMAScript génèrera une erreur si on tente<text:line-break/>d&amp;#8217;y accéder en dehors de sa portée.</text:p><text:p>La portée est délimitée par les fonctions.<text:line-break/>En l&amp;#8217;absence de fonction, la portée maximale est celle du module (script) dans lequel la variable est déclarée.</text:p><text:p>Il existe un deuxième type de portée&amp;#160;: la portée lexicale.<text:line-break/>L&amp;#8217;exemple suivant servira à illustrer la nature de sa délimitation.</text:p><text:p>Le mot-clé const crée une variable certes,<text:line-break/>mais une variable dont la portée est lexicale.<text:line-break/>La portée lexicale est délimitée par le bloc d&amp;#8217;instructions<text:line-break/>dans lequel la variable est déclarée.</text:p><text:p>Ainsi la variable price n&amp;#8217;existe que dans le cadre du bloc if.</text:p><text:p>L&amp;#8217;utilisation de la portée lexicale sert déclarer<text:line-break/>des variables sans polluer le reste du script,<text:line-break/>pour que son existence soit oubliée aussitôt le bloc exécuté.</text:p><text:p><text:line-break/>----<text:line-break/>function secret(){<text:line-break/>  const mot = 'devinette';<text:line-break/><text:line-break/>  return 'None shall pass';<text:line-break/>}<text:line-break/><text:line-break/>console.log(secret());<text:line-break/>console.log(mot);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const year = 2018;<text:line-break/><text:line-break/>function next(value) {<text:line-break/>  return value + 1;<text:line-break/>}<text:line-break/><text:line-break/>function nextYear() {<text:line-break/>  return next(year);<text:line-break/>}<text:line-break/><text:line-break/>console.log(year);<text:line-break/>console.log(nextYear());<text:line-break/>console.log(value);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const book = {<text:line-break/>  title: 'Node.js',<text:line-break/>  published: true<text:line-break/>};<text:line-break/><text:line-break/>if (book.published) {<text:line-break/>  const price = 32;<text:line-break/><text:line-break/>  console.log(`Le livre ${book.title} coûte ${price}€.`);<text:line-break/>}<text:line-break/><text:line-break/>console.log(`Le livre ${book.title} coûte ${price}€.`);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'Node.js'<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>3<text:line-break/><text:line-break/>12.3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>true<text:line-break/><text:line-break/>false<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>null<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>undefined<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur primitives.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>[2, 'C', 2, 'G']<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  title: 'Node.js',<text:line-break/>  isbn: '978-2212139938',<text:line-break/>  published: true<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>function double(value) {<text:line-break/>  return value * 2;<text:line-break/>}<text:line-break/><text:line-break/>double(3);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler du texte</text:h><text:p>Il est commun d&amp;#8217;avoir à manipuler des chaînes de caractères.<text:line-break/>Pour stocker des URL, des titres, des identifiants,<text:line-break/>des tweets voire des textes longs.</text:p><text:p>On peut utiliser n&amp;#8217;importe quel caractère&amp;#160;: lettres, chiffres,<text:line-break/>caractères accentués, émojis et même des sinogrammes ou des kanjis.<text:line-break/>Autrement dit, il n&amp;#8217;y a pas de limite.<text:line-break/>Les environnements d&amp;#8217;exécution se représentent les caractères au format<text:line-break/>UTF-16 (tables de stockage Unicode sur 16 bits de données).</text:p><text:p>Il est fréquent d&amp;#8217;avoir à concaténer des chaînes de caractères,<text:line-break/>ou à les composer à partir d&amp;#8217;une autre variable.</text:p><text:p>Toute chaîne de caractères offre un ensemble<text:line-break/>d&amp;#8217;attributs (.quelque-chose)<text:line-break/>et de méthodes (.autre-chose()) pour en savoir plus<text:line-break/>sur la chaine mais aussi pour la manipuler.</text:p><text:p>Par exemple, on peut connaître la longueur d&amp;#8217;une chaîne via son attribut length.</text:p><text:p>On peut aussi accéder à un caractère spécifique en utilisant<text:line-break/>la chaîne comme un tableau, ou en utilisant une méthode dédiée&amp;#160;:</text:p><text:p>Deux autres fonctions transforment<text:line-break/>un texte en lettres minuscules et majuscules&amp;#160;:</text:p><text:p>D&amp;#8217;autres fonctions nettoient ou complètent les espaces autour,<text:line-break/>au début ou à la fin d&amp;#8217;une chaîne de caractères&amp;#160;:</text:p><text:p>Dans cet exemple, la méthode padEnd complète jusqu&amp;#8217;à 11 caractères,<text:line-break/>avec le caractère X.<text:line-break/>La méthode padStart fait la même chose mais avec le début de la chaîne.</text:p><text:p>indexOf retourne la position de la première occurrence<text:line-break/>dans une chaîne.<text:line-break/>Si la valeur n&amp;#8217;est pas trouvée, elle renvoie la valeur -1.<text:line-break/>À l&amp;#8217;inverse, lastIndexOf retournera la dernière occurrence trouvée&amp;#160;:</text:p><text:h text:outline-level="3">Expressions régulières (RegExp)</text:h><text:p>Si indexOf et lastIndexOf identifient des caractères exacts,<text:line-break/>comment faire lorsque l&amp;#8217;on souhaite chercher de manière approximative,<text:line-break/>plusieurs fois et selon certaines conditions&amp;#160;?</text:p><text:p>Les expressions régulières (RegExp, pour Regular Expressions)<text:line-break/>entrent en jeu dans ces cas plus avancés.<text:line-break/>Leur mécanisme décrit des motifs à identifier.<text:line-break/>Plusieurs méthodes servent ensuite à tester, identifier et remplacer<text:line-break/>ces motifs au sein d&amp;#8217;une chaîne de caractères.</text:p><text:p>La syntaxe d&amp;#8217;expressions régulières est inspirée de celle du langage<text:line-break/>de programmation Perl (www.perl.org) dans sa version 5.</text:p><text:p>Une expression régulière est décrite le plus souvent en tant que motif<text:line-break/>encadré par les caractères / (slash), suffixé d&amp;#8217;options exprimées sous forme de lettres&amp;#160;:</text:p><text:p>Cet exemple utilise l&amp;#8217;option i mais il en existe plusieurs&amp;#160;:</text:p><text:p>Illustrons leur utilisation en identifiant du texte répondant (match)<text:line-break/>à une expression régulière (/&amp;#8230;&amp;#8203;/)&amp;#160;:</text:p><text:p>Des éléments de syntaxe complètent les options pour<text:line-break/>identifier des motifs au sein de chaînes de caractères&amp;#160;:</text:p><text:p>D&amp;#8217;autres opérateurs délimitent notre recherche&amp;#160;:</text:p><text:p>On notera qu&amp;#8217;il faut faire attention à ce que l&amp;#8217;on regarde dans les résultats&amp;#160;:<text:line-break/>le format de résultat varie selon qu&amp;#8217;on utilise ou non des groupes de capture,<text:line-break/>selon qu&amp;#8217;on utilise l&amp;#8217;option globale ou multi-ligne.</text:p><text:p>Des classes de caractère servent de raccourcis pour désigner<text:line-break/>plusieurs caractères à la fois&amp;#160;:</text:p><text:p>Les alternatives de classes en majuscules sont des négations.<text:line-break/>\W pour "tout sauf un caractère de mot", \S pour "tout sauf un caractère<text:line-break/>d&amp;#8217;espacement", etc.</text:p><text:p>La méthode test est pratique si la seule chose qui vous intéresse<text:line-break/>est de tester si une chaîne correspond à un motif&amp;#160;:</text:p><text:p>Enfin, la méthode replace est très utile pour transformer des chaînes de<text:line-break/>caractères, surtout en combinaison avec les groupes de capture&amp;#160;:</text:p><text:p>D&amp;#8217;ailleurs le second argument accepte une fonction<text:line-break/>pour procéder à des remplacements dynamiques&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>/[a-z]+.js/i<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7048 {list_context: "dlist", text: "insensible à la casse (`i`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7050 {list_context: "dlist", text: "On souhaite identifier du contenu, peu importe s'il est en majuscules ou non{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7064 {list_context: "dlist", text: "multi-ligne (`m`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7066 {list_context: "dlist", text: "La recherche s'effectue sur _toutes_ les lignes{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7080 {list_context: "dlist", text: "global (`g`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7082 {list_context: "dlist", text: "La recherche identifie _tous_ les résultats{nbsp}— au lieu d'un seul et le premier{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7098 {list_context: "dlist", text: "unicode (`u`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7100 {list_context: "dlist", text: "À utiliser si le motif de recherche exprime des séquences de caractères\nUnicode sous la forme `\\u{....}` (voir les _classes de caractères_ ci-après).", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const text = 'I ♥ Node.js &amp;amp; Anode';<text:line-break/><text:line-break/>console.log(text.match(/node/i));   1<text:line-break/>console.log(text.match(/ode/g));    2<text:line-break/>console.log(text.match(/node/ig));  3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7150 {list_context: "colist", text: "identifie et affiche `Node`, l'occurrence contenue dans le mot `Node.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7160 {list_context: "colist", text: "affiche 2 fois `ode`{nbsp}— les occurrences contenues dans le mot `Node.js` et `Anode`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7170 {list_context: "colist", text: "affiche `Node` et `node` en combinant les deux options `i` et `g`{nbsp}— les occurrences contenues dans le mot `Node.js` et `Anode`.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7182 {list_context: "dlist", text: "ensemble de caractères (entre `[` et `]`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7184 {list_context: "dlist", text: "Liste l'ensemble des caractères recherchés.\nLe caractère `-` correspond à une plage de caractère. +\nExemple `[a-d]` correspond à `[abcd]`, donc _a_ ou _b_ ou _c_ ou _d_){nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7202 {list_context: "dlist", text: "nombre de caractères (entre `{` et `}`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7204 {list_context: "dlist", text: "Répète un caractère ou ensemble de caractères,\n_exactement_ (`{2}`{nbsp}— exactement 2)\n_au moins_ (`{2,}`{nbsp}— au moins 2)\nou _entre_ (`{1,2}`{nbsp}— entre 1 et 2 fois){nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7224 {list_context: "dlist", text: "nombre de caractères (`?`, `+` et `*`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7226 {list_context: "dlist", text: "Version raccourcie du nombre de caractères pour des besoins usuels{nbsp}:\n_0 ou 1 caractère_ avec `?`,\n_1 caractère et plus_ avec `+` et\n_0 caractère et plus_ avec `*`.", blocks: 0}><text:line-break/>----<text:line-break/>const paris15 = '75015 Paris';<text:line-break/>const avray = '92410 Ville-d\'Avray';<text:line-break/><text:line-break/>// test du code postal uniquement<text:line-break/>console.log(paris15.match(/[0-9]{2}/));          1<text:line-break/>console.log(paris15.match(/[0-9]{2,5}/));        2<text:line-break/><text:line-break/>// test du code postal et de la ville<text:line-break/>console.log(paris15.match(/[0-9]{5} [a-zA-Z]+/)); 3<text:line-break/>console.log(paris15.match(/[0-9]{5} [a-z]+/i));   4<text:line-break/><text:line-break/>// test sur un nom de ville composé<text:line-break/>console.log(avray.match(/[0-9]{5} [a-z]+/i));     5<text:line-break/>console.log(avray.match(/[0-9]{5} [a-z'-]+/i));   6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7284 {list_context: "colist", text: "Affiche `[\"75\"]`{nbsp}— les 2 premiers caractères numériques de la chaîne.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7294 {list_context: "colist", text: "Affiche `[\"75015\"]`{nbsp}– les 5 premiers caractères numériques (satisfait la condition `5` de _entre 2 et 5_ de `{2,5}`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7304 {list_context: "colist", text: "Affiche `[\"75015 Paris\"]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7314 {list_context: "colist", text: "Affiche `[\"75015 Paris\"]`{nbsp}— l'option `i` nous permet de nous passer de l'ensemble `A-Z`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7324 {list_context: "colist", text: "Affiche `[\"92410 Ville\"]`{nbsp}— capture les caractères jusqu'à ce que la condition ne soit plus remplie en rencontrant le _trait d'union_ (`-`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7334 {list_context: "colist", text: "Affiche `[\"92410 Ville-d'Avray\"]`.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7346 {list_context: "dlist", text: "début et fin de chaîne (`^` et `$`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7348 {list_context: "dlist", text: "Symbolise le début (`^`) ou la fin (`$`) d'une chaîne de caractères. +\nQuand l'option multi-ligne (`m`) est utilisée, les notions de _début_\net de _fin_ s'appliquent au niveau de la _ligne_{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7366 {list_context: "dlist", text: "limite de mot (`\\b`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7368 {list_context: "dlist", text: "Symbolise tout caractère ne faisant pas partie d'un mot, y compris le début ou la fin d'une chaîne{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7382 {list_context: "dlist", text: "ou (`|`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7384 {list_context: "dlist", text: "Sépare deux choix l'un de l'autre.\nExemple{nbsp}: `/noir|blanc/`{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7400 {list_context: "dlist", text: "groupe de capture (entre `(` et `)`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7402 {list_context: "dlist", text: "Délimite un groupe de caractères.\nLes groupes peuvent par la suite être _identifiés_ et _remplacés_. +\nOn notera également que l'emploi des _groupes_ change\nla structure des résultats en un tableau de plusieurs éléments.\nCe tableau a la forme `[\"chaine identifiée\", \"groupe 1\", \"groupe 2\" ...]`.", blocks: 0}><text:line-break/>----<text:line-break/>const postcode = '75015 Paris';<text:line-break/>const cedex = `CODEPOSTAL VILLE CEDEX<text:line-break/>33900 Bordeaux Cedex 9<text:line-break/>33074 BORDEAUX CEDEX<text:line-break/>33700 MERIGNAC Cidex 40`;<text:line-break/><text:line-break/>const nogroup = /^[0-9]{5} [a-z0-9' -]+/i;<text:line-break/>const group = /^([0-9]{5}) [a-z0-9' -]+/i;<text:line-break/><text:line-break/>// avec ou sans groupe de capture<text:line-break/>console.log(postcode.match(nogroup));         1<text:line-break/>console.log(postcode.match(group));           2<text:line-break/><text:line-break/>// mode multiligne avec ou sans option globale<text:line-break/>console.log(cedex.match(/^([0-9]{5})/im));    3<text:line-break/>console.log(cedex.match(/^([0-9]{5})/gim));   4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7458 {list_context: "colist", text: "Affiche `[\"75015 Paris\"]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7468 {list_context: "colist", text: "Affiche `[\"75015 Paris\", \"75015\"]`{nbsp}— le premier élément correspond à la chaîne identifiée tandis que le second élément correspond au _premier_ groupe de capture.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7478 {list_context: "colist", text: "Affiche `[\"33900\", \"33900\"]`{nbsp}– l'option multi-ligne itère de ligne en ligne jusqu'à trouver un motif.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7488 {list_context: "colist", text: "Affiche `[\"33900\", \"33074\", \"33700\"]`{nbsp}— l'option multi-ligne globale retourne tous les groupes de capture.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7502 {list_context: "dlist", text: "tout caractère (`.`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7504 {list_context: "dlist", text: "Équivalent à _tout caractère_ sauf le saut de ligne.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7518 {list_context: "dlist", text: "caractère de mot (`\\w`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7520 {list_context: "dlist", text: "Équivalent à tout caractère pouvant composer un mot anglais{nbsp}:\nles caractères accentués ne sont pas englobés par cette classe de caractères.\nIdentique à `[A-Za-z0-9_]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7538 {list_context: "dlist", text: "caractère numérique (`\\d`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7540 {list_context: "dlist", text: "Équivalent à tout caractère numérique.\nIdentique à `[0-9]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7556 {list_context: "dlist", text: "caractère d'espacement (`\\s`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7558 {list_context: "dlist", text: "Équivalent à tout caractère d'espacement\n(espace, tabulation, retour chariot, etc.).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7574 {list_context: "dlist", text: "caractère Unicode (`\\u{....}`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7576 {list_context: "dlist", text: "Doit être combiné avec l'option `u` (`/.../u`).\nExemple{nbsp}: ♥︎ -> `\\u{2665}`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const text = 'I ♥ RegExp in 2018';<text:line-break/>console.log(text.match(/\u{2665} (\w+)/u));   1<text:line-break/><text:line-break/>const [,iLove,year] = text.match(/^(I \u{2665}).+(\d{4})$/u);<text:line-break/>console.log(`${iLove} ${year}`);              2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7624 {list_context: "colist", text: "Affiche `[\"♥ RegExp\", \"RegExp\"]`{nbsp}— et s'arrête là car l'espace suivant n'est pas un caractère de mot.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7634 {list_context: "colist", text: "Affiche `\"I ♥ {docyear}\"`{nbsp}— on a extrait le début de la phrase et l'année placée en fin de chaîne.", blocks: 0}><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur expressions régulières.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const cedex = `CODEPOSTAL VILLE CEDEX<text:line-break/>33900 Bordeaux Cedex 9<text:line-break/>33074 BORDEAUX CEDEX<text:line-break/>33700 MERIGNAC Cidex 40`;<text:line-break/><text:line-break/>const postcode_tester = /^\d{5}\s/m;<text:line-break/><text:line-break/>if (postcode_tester.test(cedex)) {<text:line-break/>  console.log(cedex.match(/^(\d{5})\b/gm));<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const text = 'I ♥ JavaScript';<text:line-break/><text:line-break/><text:line-break/>console.log(text.replace('♥', 'love'));     1<text:line-break/>console.log(text.replace(/\b\w+$/, 'PHP')); 2<text:line-break/><text:line-break/>console.log(text.replace(/^.+(\u{2665}) (\w+)$/u, '$2 $1 me')); 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7722 {list_context: "colist", text: "Affiche `\"I love JavaScript\"`{nbsp}— si le premier argument de `replace` est une chaîne, elle est convertie automatiquement en expression régulière.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7732 {list_context: "colist", text: "Affiche `\"I ♥ PHP\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7742 {list_context: "colist", text: "Affiche `JavaScript ♥ me\"`{nbsp}— les symboles `$&lt;numéro>` représentent les groupes de capture on peut les placer dans l'ordre de notre choix.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const text = 'I ♥ JavaScript';<text:line-break/><text:line-break/>const shout = text.replace(/\b(\w+)$/u, (pattern, lang) =&amp;gt; {<text:line-break/>  return lang.toLocaleUpperCase();<text:line-break/>});<text:line-break/><text:line-break/>console.log(shout);   1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7782 {list_context: "colist", text: "Affiche `\"I ♥ JAVASCRIPT\"`{nbsp}— le dernier mot est transformé en majuscules.", blocks: 0}></text:p><text:p><text:line-break/>----<text:line-break/>// Utilisation de guillemets simples<text:line-break/>console.log('L\'après-midi\nLe soir');  1<text:line-break/><text:line-break/>// Utilisation de guillemets doubles<text:line-break/>console.log("L'après-midi\nLe soir");   2<text:line-break/><text:line-break/>// Utilisation de guillemets obliques<text:line-break/>console.log(`L'après-midi<text:line-break/>Le soir`);                              3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6606 {list_context: "colist", text: "Utilisation de guillemets simples (`\\n` permet de revenir à la ligne).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6616 {list_context: "colist", text: "Utilisation de guillemets doubles{nbsp}— évite d'échapper le guillemet simple.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6626 {list_context: "colist", text: "Utilisation de guillemets obliques{nbsp}— autorise le multi-ligne.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const mot = 'pot';<text:line-break/><text:line-break/>console.log(`${mot} de colle`);<text:line-break/>console.log(`${mot} de fleur`);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log('I ♥ JavaScript'.length); 1<text:line-break/>console.log(''.length);               2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6700 {list_context: "colist", text: "Affiche `14`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6710 {list_context: "colist", text: "Affiche `0`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const mot = 'Node.js';<text:line-break/><text:line-break/>console.log(mot[0]);        1<text:line-break/>console.log(mot.charAt(1)); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6752 {list_context: "colist", text: "Affiche `N`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6762 {list_context: "colist", text: "Affiche `o`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const mot = 'Node.js';<text:line-break/><text:line-break/>console.log(mot.toLocaleLowerCase()); 1<text:line-break/>console.log(mot.toLocaleUpperCase()); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6804 {list_context: "colist", text: "Affiche `node.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6814 {list_context: "colist", text: "Affiche `NODE.JS`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const mot = '  Node.js  ';<text:line-break/><text:line-break/>console.log(mot.trim());      1<text:line-break/>console.log(mot.trimLeft());  2<text:line-break/>console.log(mot.trimRight()); 3<text:line-break/><text:line-break/>const swiftCode = 'BARCGB22';<text:line-break/><text:line-break/>console.log(swiftCode.padEnd(11, 'X')); 4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6860 {list_context: "colist", text: "Affiche `Node.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6870 {list_context: "colist", text: "Affiche `Node.js{nbsp}{nbsp}`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6880 {list_context: "colist", text: "Affiche `{nbsp}{nbsp}Node.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6890 {list_context: "colist", text: "Affiche `BARCGB22XXX`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log('I ♥ JavaScript'.indexOf('JavaScript')); 1<text:line-break/>console.log('I ♥ JavaScript'.indexOf('?'));          2<text:line-break/>console.log('I ♥ JavaScript'.indexOf('a'));          3<text:line-break/>console.log('I ♥ JavaScript'.lastIndexOf('a'));      4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@6938 {list_context: "colist", text: "Retourne `4`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6948 {list_context: "colist", text: "Retourne `-1`{nbsp}— aucune occurrence n'a été trouvée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6958 {list_context: "colist", text: "Retourne `5`{nbsp}— première occurrence de la lettre `a`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@6968 {list_context: "colist", text: "Retourne `7`{nbsp}— dernière occurrence de la lettre `a`.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des booléens</text:h><text:p>Un booléen est une donnée de type logique qui peut être vraie ou fausse en prenant respectivement la valeur true ou false.<text:line-break/>C&amp;#8217;est un type de choix pour effectuer des assertions et vérifier des conditions.</text:p><text:p>Une donnée d&amp;#8217;un autre type peut être convertie en booléen.<text:line-break/>La logique qui déterminera si la conversion retournera true ou false<text:line-break/>est la suivante&amp;#160;:</text:p><text:p><text:line-break/>----<text:line-break/>const counter = 3;<text:line-break/><text:line-break/>console.log(counter);               1<text:line-break/>console.log(counter === 3);         2<text:line-break/><text:line-break/>const check = (counter === 3);<text:line-break/><text:line-break/>console.log(check);                 3<text:line-break/>console.log(check === true);        4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7840 {list_context: "colist", text: "Affiche `3`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7850 {list_context: "colist", text: "Affiche `true`{nbsp}— la condition est vérifiée (3 équivaut strictement à 3).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7860 {list_context: "colist", text: "Affiche `true`{nbsp}— c'est la valeur de la variable `check` suite à son assignation lors de la ligne précédente.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7870 {list_context: "colist", text: "Affiche `true`{nbsp}— la variable `check` équivaut strictement à `true`.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7888 {list_context: "dlist", text: "`true`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7890 {list_context: "dlist", text: "Toute valeur non-nulle.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7904 {list_context: "dlist", text: "`false`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7906 {list_context: "dlist", text: "Toute valeur nulle (`null`, `0`, `NaN`), vide (`''`)\nou indéfinie (`undefined`).", blocks: 0}><text:line-break/>----<text:line-break/>const counter = 3;<text:line-break/><text:line-break/>console.log(Boolean(''));       1<text:line-break/>console.log(Boolean(counter));  2<text:line-break/>console.log(Boolean([]));       3<text:line-break/><text:line-break/>if (counter) {<text:line-break/>  console.log('if (counter) équivaut à if (Boolean(counter))');<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@7954 {list_context: "colist", text: "Affiche `false`{nbsp}— il s'agit d'une _chaîne vide_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7964 {list_context: "colist", text: "Affiche `true`{nbsp}— il s'agit d'une valeur _non-nulle_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@7974 {list_context: "colist", text: "Affiche `true`{nbsp}— le tableau est vide mais l'objet en lui-même _vaut_ quelque chose{nbsp}: un tableau.", blocks: 0}></text:p><text:h text:outline-level="2">Manipuler des nombres (Number, Math)</text:h><text:p>ECMAScript ne fait pas de distinction entre des nombres entiers et des<text:line-break/>nombres contenant des décimales&amp;#160;: ce sont des nombres un point c&amp;#8217;est tout.</text:p><text:p>Les nombres sont représentés par défaut en base 10.<text:line-break/>La plage de nombre utilisable démarre à moins l&amp;#8217;infini et va jusqu&amp;#8217;à plus l&amp;#8217;infini.<text:line-break/>Des constantes définies par ECMAScript contiennent les valeurs minimales et<text:line-break/>maximales que l&amp;#8217;on peut représenter dans un programme&amp;#160;:</text:p><text:p>Il est aussi possible de compter dans d&amp;#8217;autres bases comme la base 16,<text:line-break/>c&amp;#8217;est-à-dire une représentation hexadécimale de 0 à 16, exprimée de 0 à F<text:line-break/>—&amp;#160;A vaut 10 (car juste après 9), B vaut 11, etc.<text:line-break/>Leur notation se fait en préfixant la valeur par 0x&amp;#160;:</text:p><text:p>ECMAScript est souvent décrié par son incapacité à gérer les opérations<text:line-break/>mathématiques avec précision.</text:p><text:p>ECMAScript respecte le standard IEEE 754 de gestion de nombres à virgule flottante sur 64 bits de données.<text:line-break/>Qui d&amp;#8217;autre l&amp;#8217;utilise&amp;#160;?<text:line-break/>D&amp;#8217;autres langages "inconnus" comme Python, PHP et Ruby, entre autres.</text:p><text:p>Pour en savoir plus&amp;#160;: fr.wikipedia.org/wiki/IEEE_754.</text:p><text:h text:outline-level="3">Opérations mathématiques</text:h><text:p>Les nombres s&amp;#8217;utilisent pour effectuer des opérations mathématiques.<text:line-break/>Chaque opération est dotée d&amp;#8217;un symbole&amp;#160;:</text:p><text:p>Est-ce que vous avez déjà tenté d&amp;#8217;additionner un nombre avec un tableau&amp;#160;?<text:line-break/>Pas forcément mais ECMAScript ne vous en empêchera pas.</text:p><text:p>Rendez-vous à la section suivante pour se prémunir des nombres qui n&amp;#8217;en sont pas.</text:p><text:p><text:line-break/>#&lt;Asciidoctor::ListItem@8210 {list_context: "dlist", text: "addition", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8212 {list_context: "dlist", text: "`+`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8226 {list_context: "dlist", text: "soustraction", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8228 {list_context: "dlist", text: "`-`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8242 {list_context: "dlist", text: "multiplication", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8244 {list_context: "dlist", text: "`*`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8258 {list_context: "dlist", text: "division", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8260 {list_context: "dlist", text: "`/`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8274 {list_context: "dlist", text: "modulo (reste de division)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8276 {list_context: "dlist", text: "`%`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8290 {list_context: "dlist", text: "exposant (puissance)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8292 {list_context: "dlist", text: "`**`", blocks: 0}><text:line-break/>----<text:line-break/>console.log(2 + 4);     1<text:line-break/>console.log(2 - 4);     2<text:line-break/>console.log(2 * 4);     3<text:line-break/>console.log(2 / 4);     4<text:line-break/>console.log(2 % 4);     5<text:line-break/>console.log(2 ** 4);    6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8344 {list_context: "colist", text: "Affiche `6`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8354 {list_context: "colist", text: "Affiche `-2`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8364 {list_context: "colist", text: "Affiche `8`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8374 {list_context: "colist", text: "Affiche `0.5`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8384 {list_context: "colist", text: "Affiche `2`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8394 {list_context: "colist", text: "Affiche `16`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(10 / '1');    1<text:line-break/>console.log(10 / 0);      2<text:line-break/>console.log(10 / []);<text:line-break/>console.log(10 / {});     3<text:line-break/>console.log(10 + null);<text:line-break/>console.log(10 + true);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8454 {list_context: "colist", text: "La chaîne `'1'` sera convertie en nombre (voir section ci-après).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8464 {list_context: "colist", text: "On nous a toujours interdit la division par zéro{nbsp}? En vrai on crée l'_infini_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8474 {list_context: "colist", text: "Seule cette opération retournera autre chose qu'un nombre.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">Les nombres qui n&amp;#8217;en sont pas (NaN)</text:h><text:p>Certaines opérations n&amp;#8217;aboutiront pas et n&amp;#8217;afficheront pas d&amp;#8217;erreur pour autant.<text:line-break/>Dans ce cas, le résultat de l&amp;#8217;opération vaudra NaN.<text:line-break/>Pour not a number (littéralement&amp;#160;: "n&amp;#8217;est pas un nombre").</text:p><text:p>La fonction Number.isNaN nous aidera à vérifier si la valeur d&amp;#8217;une variable<text:line-break/>ou le résultat d&amp;#8217;une opération est un NaN ou non.<text:line-break/>Cette fonction retourne un booléen.</text:p><text:p>Il faut se méfier de NaN comme de la peste car il est considéré<text:line-break/>comme un nombre d&amp;#8217;un point ECMAScript.<text:line-break/>Toute opération mathématique impliquant NaN renverra un NaN&amp;#160;:</text:p><text:p>Il vaut mieux s&amp;#8217;assurer qu&amp;#8217;une variable est à la fois un nombre et<text:line-break/>n&amp;#8217;est pas équivalent à NaN&amp;#160;:</text:p><text:p><text:line-break/>----<text:line-break/>console.log(10 / 'fromage');<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log(Number.isNaN(NaN));             1<text:line-break/>console.log(Number.isNaN(10 / 'fromage'));  2<text:line-break/><text:line-break/>console.log(Number.isNaN(10));              3<text:line-break/>console.log(Number.isNaN('fromage'));       4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log(typeof NaN);<text:line-break/>console.log(typeof 10);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const result = 10 / 'fromage';<text:line-break/><text:line-break/>if (typeof result === 'number' &amp;amp;&amp;amp; !Number.isNaN(result)) {<text:line-break/>  console.log('Ceci n\'est pas un NaN.');<text:line-break/>}<text:line-break/>else {<text:line-break/>  console.log('L\'opération produit un nombre qui n\'en est pas un.');<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Convertir en nombre</text:h><text:p>Les lignes qui précédent l&amp;#8217;évoquent un peu&amp;#160;: on peut passer d&amp;#8217;autres types<text:line-break/>de données à des nombres.<text:line-break/>Idéalement, on voudra transformer explicitement quelque chose en un nombre.</text:p><text:p>Pour cela nous avons deux fonctions à disposition&amp;#160;:</text:p><text:p>parseInt a cette particularité que l&amp;#8217;on peut choisir la base<text:line-break/>de la conversion avec le second argument de la fonction&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8660 {list_context: "dlist", text: "`parseInt`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8662 {list_context: "dlist", text: "Essaie d'interpréter un nombre entier{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8676 {list_context: "dlist", text: "`parseFloat`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8678 {list_context: "dlist", text: "Essaie d'interpréter un nombre à virgule.\nLa fonction s'arrête dès qu'elle n'a plus affaire à un chiffre.", blocks: 0}><text:line-break/>----<text:line-break/>console.log(parseInt('3.141592653589793'));   1<text:line-break/>console.log(parseFloat('3.141592653589793')); 2<text:line-break/><text:line-break/>console.log(parseInt('14.10-patch.2'));   3<text:line-break/>console.log(parseFloat('14.10-patch.2')); 4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8728 {list_context: "colist", text: "Affiche `3`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8738 {list_context: "colist", text: "Affiche `3.141592653589793`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8748 {list_context: "colist", text: "Affiche `14`{nbsp}— ça ne change rien pour `parseInt`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8758 {list_context: "colist", text: "Affiche `14.1`{nbsp}— la fonction s'arrête à la décimale précédant une lettre.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(parseInt(10, 16));    1<text:line-break/>console.log(parseInt('A', 16));   2<text:line-break/>console.log(parseInt('A00', 16)); 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8802 {list_context: "colist", text: "Affiche `16`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8812 {list_context: "colist", text: "Affiche `10`{nbsp}— `A` étant juste après `10` en hexadécimal.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8822 {list_context: "colist", text: "Affiche `2560`{nbsp}— aurait pu s'écrire `0xF00`{nbsp}— cf. le &lt;&lt;number,début de cette même section>>, à propos des bases.", blocks: 0}></text:p><text:h text:outline-level="3">Formater et arrondir des nombres</text:h><text:p>Si l&amp;#8217;envie vous prenait de vouloir arrondir des nombres, il existe<text:line-break/>quelques fonctions pour nous aider.</text:p><text:p>Math.ceil, Math.floor</text:p><text:p>Enfin, on peut préserver le formatage du nombre de décimales<text:line-break/>après la virgule en transformant le nombre en chaîne de caractères<text:line-break/>grâce à la méthode toFixed&amp;#160;:</text:p><text:p><text:line-break/>#&lt;Asciidoctor::ListItem@8856 {list_context: "dlist", text: "`Math.round`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8858 {list_context: "dlist", text: "Arrondit à l'entier le plus proche{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8872 {list_context: "dlist", text: "`Math.ceil`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8874 {list_context: "dlist", text: "Arrondit à l'entier supérieur du nombre donné{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8888 {list_context: "dlist", text: "`Math.floor`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8890 {list_context: "dlist", text: "Arrondit à l'entier inférieur du nombre donné.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(Math.round(3.1));    1<text:line-break/>console.log(Math.round(3.8));    2<text:line-break/>console.log(Math.round(3.5));    3<text:line-break/><text:line-break/>console.log(Math.ceil(3.14));    4<text:line-break/>console.log(Math.floor(3.99));   5<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8942 {list_context: "colist", text: "Affiche `3`{nbsp}— l'entier le plus proche est 3.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8952 {list_context: "colist", text: "Affiche `4`{nbsp}— l'entier le plus proche est 4.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8962 {list_context: "colist", text: "Affiche `4`{nbsp}— idem.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8972 {list_context: "colist", text: "Affiche `4`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8982 {list_context: "colist", text: "Affiche `3`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(10.0101.toFixed(2));     1<text:line-break/>console.log(10.0101.toFixed(0));     2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9024 {list_context: "colist", text: "Affiche `'10.01'`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9034 {list_context: "colist", text: "Affiche `'10'`.", blocks: 0}></text:p><text:p><text:line-break/>----<text:line-break/>console.log(40);<text:line-break/>console.log(40.0);<text:line-break/><text:line-break/>console.log(40 === 40.0);   1<text:line-break/>console.log(40 === '40.0'); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8034 {list_context: "colist", text: "Affiche `true`{nbsp}— les deux valeurs sont strictement équivalentes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8044 {list_context: "colist", text: "Affiche `false`{nbsp}— un élément entre guillemets est une chaîne de caractère.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(Number.POSITIVE_INFINITY);  1<text:line-break/>console.log(Number.NEGATIVE_INFINITY);  2<text:line-break/><text:line-break/>console.log(Number.MAX_VALUE);          3<text:line-break/>console.log(Number.MIN_VALUE);          4<text:line-break/><text:line-break/>console.log(Number.MAX_SAFE_INTEGER);   5<text:line-break/>console.log(Number.MIN_SAFE_INTEGER);   6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log(0x0000);<text:line-break/>console.log(0x000A);<text:line-break/>console.log(0x00A0);<text:line-break/>console.log(0x0A00);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@8122 {list_context: "colist", text: "Affiche `0`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8132 {list_context: "colist", text: "Affiche `10`{nbsp}— car `A` en hexadécimal vaut 10 en décimal.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8142 {list_context: "colist", text: "Affiche `160`{nbsp}— pour `10 x 16` (une dizaine vaut 16).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@8152 {list_context: "colist", text: "Affiche `2560`{nbsp}— pour `10 x 16 x 16` (une centaine vaut 16x16).", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>0.2 + 0.6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des fonctions</text:h><text:p>Une fonction est un mécanisme pour rendre du code réutilisable.<text:line-break/>Une fonction retourne un résultat.<text:line-break/>À l&amp;#8217;aide de paramètres, on peut faire varier ce résultat.</text:p><text:p>Cela se passe en deux temps&amp;#160;:</text:p><text:p>ECMAScript fournit un ensemble de fonctions de base<text:line-break/>(console.log, setTimeout etc).<text:line-break/>Node ajoute les siennes (comme require).<text:line-break/>Nous avons la liberté d&amp;#8217;en créer nous-même, spécifiques à nos besoins.</text:p><text:p>L&amp;#8217;exemple précédent nous indique qu&amp;#8217;une fonction se découpe en 3 parties&amp;#160;:</text:p><text:p>Le corps d&amp;#8217;une fonction constitue une portée&amp;#160;: toute variable définie<text:line-break/>dans le corps d&amp;#8217;une fonction est invisible en dehors.</text:p><text:p>On en parle plus en détails dans la section portée<text:line-break/>en début de section.</text:p><text:h text:outline-level="3">Les fonctions anonymes</text:h><text:p>Les fonctions anonymes sont employées en arguments d&amp;#8217;autres fonctions.<text:line-break/>On les dit anonymes, car elles ne sont pas consignées dans des variables.<text:line-break/>Il est fréquent de les utiliser pour itérer sur des tableaux,<text:line-break/>lors d&amp;#8217;événements ou dans des promesses.</text:p><text:p>C&amp;#8217;est une manière élégante d&amp;#8217;encapsuler du code à exécuter plus tard.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>setTimeout(() =&amp;gt; console.log('Une seconde plus tard'), 1000);<text:line-break/><text:line-break/>setTimeout(() =&amp;gt; {<text:line-break/>  console.log('Deux secondes plus tard');     1<text:line-break/>}, 2000);<text:line-break/><text:line-break/>process.on('exit', () =&amp;gt; {<text:line-break/>  console.log('Le processus se termine');     2<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9284 {list_context: "colist", text: "Affiche `\"Deux secondes plus tard\"` deux secondes après le début du script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9294 {list_context: "colist", text: "Affiche `\"Le processus se termine\"` quand le processus se termine, une fois que toutes les actions en attente ont été exécutées.", blocks: 0}></text:p><text:h text:outline-level="3">Les fonctions de callback</text:h><text:p>Quand une fonction est passée en argument d&amp;#8217;une autre fonction,<text:line-break/>on appelle cela un callback.<text:line-break/>On l&amp;#8217;appelle plus tard (to call back) que le moment où elle est définie.<text:line-break/>La fonction peut recevoir des paramètres qui aident à reconstruire un contexte<text:line-break/>au moment de son exécution.</text:p><text:p><text:line-break/>----<text:line-break/>const printYear = (date) =&amp;gt; {             2<text:line-break/>  console.log(date.getUTCFullYear());     3<text:line-break/>}<text:line-break/><text:line-break/>setTimeout(printYear, 1000, new Date());  1<text:line-break/>// équivalent à<text:line-break/>// setTimeout(date =&amp;gt; printYear(date), 1000, new Date());<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9352 {list_context: "colist", text: "Le troisième argument (et les suivants) de `setTimeout` sont transmis en paramètre de la fonction de _callback_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9362 {list_context: "colist", text: "Cette fonction sera invoquée une seconde après le début du script, et recevra la date du moment en paramètre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9372 {list_context: "colist", text: "Affiche l'année de la date passée en argument{nbsp}— l'année en cours dans cet exemple.", blocks: 0}></text:p><text:h text:outline-level="3">Paramètres du reste (rest parameters)</text:h><text:p>Les paramètres du reste collecte un nombre indéfini de paramètres.<text:line-break/>Les paramètres sont regroupés dans un même tableau (voir ci-après).</text:p><text:p><text:line-break/>----<text:line-break/>const combien_de = (nom, ...params) =&amp;gt; {<text:line-break/>  console.log(`On a compté ${params.length} ${nom}.`);<text:line-break/>};<text:line-break/><text:line-break/>combien_de('patates', 'un', 'deux', 'trois'); 1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9426 {list_context: "colist", text: "Affiche `\"On a compté 3 patates.\"`.", blocks: 0}></text:p><text:p><text:line-break/><text:line-break/>1. la création de la fonction&amp;#160;;,1. l&amp;#8217;exécution de la fonction.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const hello = (mot) =&amp;gt; `Hello ${mot}`;  1<text:line-break/><text:line-break/>console.log(hello);                     2<text:line-break/>console.log(hello('World'));            3<text:line-break/>console.log(hello('toi'));<text:line-break/><text:line-break/>const random = () =&amp;gt; {<text:line-break/>  const limit = 100;<text:line-break/><text:line-break/>  return Math.floor(Math.random() * limit);<text:line-break/>};<text:line-break/><text:line-break/>console.log(random());                  4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9118 {list_context: "colist", text: "On _crée_ la fonction `hello`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9128 {list_context: "colist", text: "Affiche `[Function: hello]`{nbsp}— il s'agit de la définition de la fonction.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9138 {list_context: "colist", text: "Affiche `\"Hello World\"`{nbsp}— il s'agit de l'_exécution_ de la fonction, qui _retourne_ un résultat.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9148 {list_context: "colist", text: "Affiche un nombre aléatoire entre 0 et 100{nbsp}— cette fonction est invoquée sans paramètre.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9160 {list_context: "dlist", text: "les *arguments*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9162 {list_context: "dlist", text: "C'est la partie à gauche de la flèche (`=>`).\nLes arguments sont séparés par des virgules (exemple{nbsp}: `(argument1, argument2, etc.)`){nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9178 {list_context: "dlist", text: "le *corps*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9180 {list_context: "dlist", text: "C'est la partie entre accolades (`{ ... }`).\nQuand la fonction est sur une ligne,\nle résultat de l'opération est _implicitement retourné_.\nOn peut dans ce cas se passer du mot-clé `return`{nbsp};", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9200 {list_context: "dlist", text: "la *valeur de retour*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9202 {list_context: "dlist", text: "C'est la valeur renvoyée en dehors de la fonction.\nLa valeur de retour est définie à l'aide du mot-clé `return`.\nLa valeur `undefined` est retournée de manière implicite\nlorsque le mot-clé `return` est absent.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des tableaux (Array)</text:h><text:p>Les tableaux (ou listes indexées) servent à lister des éléments,<text:line-break/>de tout type et dans l&amp;#8217;ordre de notre choix.<text:line-break/>Chaque élément de tableau se voit attribué un numéro (index).<text:line-break/>On peut retrouver l&amp;#8217;élément par son numéro, en itérant à l&amp;#8217;aide de boucles<text:line-break/>ou en ayant recours à d&amp;#8217;autres méthodes d&amp;#8217;identification.</text:p><text:p>L&amp;#8217;exemple précédent illustre plusieurs caractéristiques des collections&amp;#160;:</text:p><text:h text:outline-level="3">Créer des tableaux à partir d&amp;#8217;autres valeurs</text:h><text:p>La fonction Array.from est une manière de créer<text:line-break/>un tableau à partir de quelque chose qui ressemble à un tableau.</text:p><text:p>Le deuxième argument de Array.from est facultatif.<text:line-break/>C&amp;#8217;est une fonction anonyme qui s&amp;#8217;utilise comme les méthodes d&amp;#8217;itération Array.forEach et Array.map.</text:p><text:p>Cette méthode est des plus utiles pour itérer sur des listes d&amp;#8217;éléments DOM<text:line-break/>obtenues avec les fonctions document.querySelectorAll<text:line-break/>et document.getElementsByTagName, entre autres.</text:p><text:p><text:line-break/>----<text:line-break/>console.log(Array.from('fromage'));                                   1<text:line-break/><text:line-break/>// utilisation du second argument<text:line-break/>console.log(Array.from('fromage', (letter) =&amp;gt; letter.toUpperCase())); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9618 {list_context: "colist", text: "Affiche `[\"f\", \"r\", \"o\", \"m\", \"a\", \"g\", \"e\"]`{nbsp}— chaque lettre de la chaîne.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9628 {list_context: "colist", text: "Affiche `[\"F\", \"R\", \"O\", \"M\", \"A\", \"G\", \"E\"]`{nbsp}— chaque lettre de la chaîne a été passée en majuscules.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const links = document.querySelectorAll('a');<text:line-break/><text:line-break/>console.log(Array.from(links).map(a =&amp;gt; a.textContent));<text:line-break/>// parce qu'on ne peut pas faire<text:line-break/>// links.map(a =&amp;gt; a.textContent);<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Combiner des tableaux</text:h><text:p>Il est relativement aisé de composer des tableaux en fonction d&amp;#8217;autres tableaux.<text:line-break/>Une première manière d&amp;#8217;y parvenir est d&amp;#8217;utiliser la méthode concat&amp;#160;:</text:p><text:p>Cette méthode crée un nouveau tableau à partir d&amp;#8217;une liste de tableaux<text:line-break/>passés en paramètre.</text:p><text:p>Une autre manière de faire est d&amp;#8217;utiliser l&amp;#8217;opérateur &amp;#8230;&amp;#8203;<text:line-break/>(aussi appelé spread) pour éclater plusieurs tableaux et<text:line-break/>les rassembler dans un autre&amp;#160;:</text:p><text:p>À l&amp;#8217;inverse, la méthode join concatène tous les éléments<text:line-break/>dans une chaîne de caractères avec le séparateur de notre choix.<text:line-break/>Ce séparateur est optionnel.</text:p><text:p><text:line-break/>----<text:line-break/>const mousquetaires = ['Atos', 'Portos', 'Aramis'];<text:line-break/>const extras = ['d\'Artagnan', 'Albert'];<text:line-break/><text:line-break/>console.log(mousquetaires.concat(extras));      1<text:line-break/><text:line-break/>// autre manière d'obtenir la liste des 5 mousquetaires<text:line-break/>console.log([].concat(mousquetaires, extras));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9706 {list_context: "colist", text: "Affiche `[\"Atos\", \"Portos\", \"Aramis\", \"d'Artagnan\", \"Albert\"]`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const mousquetaires = ['Atos', 'Portos', 'Aramis'];<text:line-break/>const extras = ['d\'Artagnan', 'Albert'];<text:line-break/><text:line-break/>console.log([...mousquetaires, ...extras]);   1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9764 {list_context: "colist", text: "Affiche `[\"Atos\", \"Portos\", \"Aramis\", \"d'Artagnan\", \"Albert\"]`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const headers = ['ID', 'NOM', 'PRENOM'];<text:line-break/><text:line-break/>console.log(headers.join());    1<text:line-break/>console.log(headers.join(';')); 2<text:line-break/>console.log(headers.join(''));  3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9808 {list_context: "colist", text: "Affiche `\"ID,NOM,PRENOM\"`{nbsp}— le séparateur par défaut est une virgule (`,`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9818 {list_context: "colist", text: "Affiche `\"ID;NOM;PRENOM\"`{nbsp}— on a choisi le séparateur `;`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9828 {list_context: "colist", text: "Affiche `\"IDNOMPRENOM\"`.", blocks: 0}></text:p><text:h text:outline-level="3">Itérer sur les valeurs avec des boucles</text:h><text:p>Les boucles sont une manière de parcourir plusieurs valeurs.<text:line-break/>Elles aident la mise en place d&amp;#8217;automatismes pour éviter de répéter du code.</text:p><text:p>Prenons le temps de revenir sur cet exemple.<text:line-break/>On y découvre plusieurs manières de faire des boucles sur un tableau&amp;#160;:</text:p><text:p>Il y a en réalité deux manières d&amp;#8217;itérer avec la boucle for&amp;#160;:<text:line-break/>sur les index (avec l&amp;#8217;opérateur in)<text:line-break/>et sur les valeurs (avec l&amp;#8217;opérateur of).</text:p><text:p>La méthode forEach propage en réalité 3 arguments à notre fonction anonyme&amp;#160;:<text:line-break/>l&amp;#8217;élément en cours de l&amp;#8217;itération,<text:line-break/>l&amp;#8217;index de l&amp;#8217;élément,<text:line-break/>le tableau d&amp;#8217;origine.</text:p><text:p>Pourquoi passer le tableau d&amp;#8217;origine alors qu&amp;#8217;on itère sur ce même tableau&amp;#160;?<text:line-break/>Pour donner du contexte au cas où on opère<text:line-break/>avec une fonction nommée.<text:line-break/>Nous verrons un usage concret de ce troisième argument<text:line-break/>dans la section transformer les valeurs.</text:p><text:p>Outre l&amp;#8217;inspection et l&amp;#8217;affichage des valeurs, les boucles offrent la liberté<text:line-break/>de faire des tris, de transformer les valeurs, de filtrer selon des conditions<text:line-break/>mais aussi de créer de nouvelles structures de données.</text:p><text:p>Ces méthodes sont décrites dans les sections suivantes.</text:p><text:p><text:line-break/>----<text:line-break/>const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];<text:line-break/><text:line-break/>for (const day of weekdays) {<text:line-break/>  console.log(day);                           1<text:line-break/>}<text:line-break/><text:line-break/>// on obtient le même résultat avec la méthode `forEach`<text:line-break/>weekdays.forEach((day) =&amp;gt; console.log(day));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9878 {list_context: "colist", text: "Affiche successivement chaque valeur du tableau{nbsp}— `\"lundi\"`, `\"mardi\"`, `\"mercredi\"`, `\"jeudi\"`, `\"vendredi\"`.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9890 {list_context: "dlist", text: "`for...of`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9892 {list_context: "dlist", text: "On assigne une variable pour chaque élément (opérateur `of`) du tableau.\nLes expressions situées entre accolade (`{...}`) sont exécutées pour\nchaque élément du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9910 {list_context: "dlist", text: "`forEach(element => expression)`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9912 {list_context: "dlist", text: "La méthode `forEach` applique une &lt;&lt;anonymous-function,fonction anonyme>>\npour chaque élément du tableau.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const weekend = ['samedi', 'dimanche'];<text:line-break/><text:line-break/>for (const index in weekend) {<text:line-break/>  console.log(index);             1<text:line-break/>  console.log(weekend[index]);    2<text:line-break/>}<text:line-break/><text:line-break/>for (const day of weekend) {<text:line-break/>  console.log(day);               3<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9962 {list_context: "colist", text: "Affiche successivement `0` puis `1`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9972 {list_context: "colist", text: "Affiche successivement `\"samedi\"` puis `\"dimanche\"`{nbsp}— l'index permet de retrouver la valeur du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9982 {list_context: "colist", text: "Affiche successivement `\"samedi\"` puis `\"dimanche\"`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const undeux = ['un', 'deux'];<text:line-break/><text:line-break/>const printIndex = (element, index, array) =&amp;gt; {<text:line-break/>  console.log(`${element} se trouve à l'index ${index}`);  2<text:line-break/>}<text:line-break/><text:line-break/>undeux.forEach(printIndex);                                1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10026 {list_context: "colist", text: "Applique la fonction `printIndex` pour chaque élément du tableau `undeux`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10036 {list_context: "colist", text: "Affiche successivement `\"un se trouve à l'index 0\"` puis `\"deux se trouve à l'index 1\"`.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Trier les valeurs</text:h><text:p>La méthode sort change l&amp;#8217;ordre des éléments d&amp;#8217;un tableau.<text:line-break/>Cette méthode utilise une fonction anonyme.<text:line-break/>La fonction anonyme compare deux éléments entre eux.<text:line-break/>Elle retourne un nombre positif, négatif ou égal à zéro selon la<text:line-break/>logique que l&amp;#8217;on souhaite donner au tri&amp;#160;:</text:p><text:p>Les chaînes de caractères peuvent être comparées<text:line-break/>avec la méthode localeCompare.<text:line-break/>Cette méthode retourne un nombre après une comparaison caractère par caractère<text:line-break/>entre deux chaînes&amp;#160;:</text:p><text:p>La méthode reverse transforme le tableau d&amp;#8217;origine<text:line-break/>en inversant l&amp;#8217;ordre de ses éléments.</text:p><text:p><text:line-break/>* quand la comparaison est positive&amp;#160;:<text:line-break/>sort placera le premier élément avant le second&amp;#160;;,* quand la comparaison est négative&amp;#160;:<text:line-break/>sort placera le premier élément après le second&amp;#160;;,* quand la comparaison est nulle ou non spécifiée&amp;#160;:<text:line-break/>l&amp;#8217;ordre des éléments restera inchangé.<text:line-break/><text:line-break/>----<text:line-break/>const sortAsc = (a, b) =&amp;gt; a - b;<text:line-break/>const sortDesc = (a, b) =&amp;gt; b - a;<text:line-break/><text:line-break/>console.log([1, 3, 2].sort(sortAsc));                   1<text:line-break/><text:line-break/>const undeux = [{label: 'deux', order: 2}, {label: 'un', order: 1}];<text:line-break/><text:line-break/>console.log(undeux.sort((a, b) =&amp;gt; a.order - b.order));  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10128 {list_context: "colist", text: "Affiche `[1, 2, 3]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10138 {list_context: "colist", text: "Affiche `[ { label: \"un\", order: 1 }, { label: \"deux\", order: 2 } ]`{nbsp}— le tableau a été trié sur la valeur de `order`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const sortAlpha = (a, b) =&amp;gt; a.localeCompare(b);<text:line-break/><text:line-break/>console.log(['A', 'b', 'c', 'a'].sort(sortAlpha));                  1<text:line-break/><text:line-break/>const undeux = [{label: 'un', order: 1}, {label: 'deux', order: 2}];<text:line-break/><text:line-break/>console.log(undeux.sort((a, b) =&amp;gt; a.label.localeCompare(b.label))); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10180 {list_context: "colist", text: "Affiche `[\"a\", \"A\", \"b\", \"c\"]`{nbsp}— les majuscules influencent le tri.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10190 {list_context: "colist", text: "Affiche `[ { label: \"deux\", order: 2 }, { label: \"un\", order: 1 } ]`{nbsp}— le tableau a été trié sur la valeur de `label` cette fois-ci.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const weekend = ['samedi', 'dimanche'];<text:line-break/><text:line-break/>weekend.reverse();<text:line-break/><text:line-break/>console.log(weekend);     1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10246 {list_context: "colist", text: "Affiche `[\"dimanche\", \"samedi\"]`.", blocks: 0}></text:p><text:h text:outline-level="3">Transformer les valeurs</text:h><text:p>La méthode map fonctionne quasiment comme la méthode forEach.<text:line-break/>À ceci près qu&amp;#8217;elle retourne un nouveau tableau,<text:line-break/>constitué des valeurs retournées par la fonction appliquée sur chaque élément.</text:p><text:p>Le troisième argument de la méthode map prend ici tout son sens.<text:line-break/>Par exemple si l&amp;#8217;on souhaite dédoublonner un tableau&amp;#160;:</text:p><text:p>L&amp;#8217;exemple précédent vérifie à chaque itération si la valeur de l&amp;#8217;élément<text:line-break/>est contenue dans la suite du tableau.<text:line-break/>array.slice(index+1) crée un nouveau tableau contenant tous les éléments<text:line-break/>situés après l&amp;#8217;élément courant (index+1).</text:p><text:p>La méthode reduce est une autre méthode de transformation.<text:line-break/>Elle est différente, car elle passe le résultat de la précédente itération<text:line-break/>à la suivante.<text:line-break/>C&amp;#8217;est comme si elle accumulait les résultats.<text:line-break/>reduce retourne une valeur finale qui peut être autre chose qu&amp;#8217;un tableau.</text:p><text:p><text:line-break/>----<text:line-break/>const newArray = ['a', ' b', 'c '].map(value =&amp;gt; {<text:line-break/>  return value.trim().toUpperCase();<text:line-break/>});<text:line-break/><text:line-break/>console.log(newArray); 1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10296 {list_context: "colist", text: "Retourne `['A', 'B', 'C']`{nbsp}— on a passé tous les éléments en lettres majuscules.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const soundcheck = ['un', 'deux', 'un', 'deux'];<text:line-break/><text:line-break/>const dedupe = (element, index, array) =&amp;gt; {<text:line-break/>  if (array.slice(index+1).includes(element)) {<text:line-break/>    return null;<text:line-break/>  }<text:line-break/><text:line-break/>  return element;<text:line-break/>}<text:line-break/><text:line-break/>console.log(soundcheck.map(dedupe));          1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10336 {list_context: "colist", text: "Affiche `[null, null, \"un\", \"deux\"]`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const stats = [2, 4, 6, 10];<text:line-break/><text:line-break/>const sum = (previous, element) =&amp;gt; previous + element;    2<text:line-break/><text:line-break/>console.log(stats.reduce(sum, 0));    1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10380 {list_context: "colist", text: "Effectue une _réduction_ à l'aide de la fonction `sum` et d'une valeur par défaut de `0`{nbsp}— affiche `22` à l'issue des itérations\u202F.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10390 {list_context: "colist", text: "La valeur de l'*élément* est le _second paramètre_ le premier paramètre correspond au résultat de l'itération précédente ou à la valeur initiale, passée en argument à `reduce`.", blocks: 0}></text:p><text:h text:outline-level="3">Filtrer les valeurs</text:h><text:p>La méthode filter retourne un nouveau tableau filtré à l&amp;#8217;aide<text:line-break/>d&amp;#8217;une fonction anonyme.<text:line-break/>Seuls les éléments qui satisfont la condition établie par la fonction<text:line-break/>se retrouvent dans le nouveau tableau.</text:p><text:p><text:line-break/>----<text:line-break/>const values = [null, 'un', 'deux', 3];<text:line-break/><text:line-break/>console.log(values.filter(value =&amp;gt; Number.isFinite(value)));  1<text:line-break/>console.log(values.filter(value =&amp;gt; value));                   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10442 {list_context: "colist", text: "Retourne `[3]`{nbsp}— c'est la seule valeur qui est un nombre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10452 {list_context: "colist", text: "Retourne `[\"un\", \"deux\", 3]`{nbsp}— ce sont les valeurs non-nulles.", blocks: 0}></text:p><text:h text:outline-level="3">Identifier une ou plusieurs valeurs</text:h><text:p>Les méthodes indexOf, lastIndexOf et includes identifient une<text:line-break/>valeur exacte au sein d&amp;#8217;un tableau.</text:p><text:p>indexOf et lastIndexOf retournent l&amp;#8217;index de la valeur recherchée.<text:line-break/>Si aucun élément n&amp;#8217;a été retrouvé, elles retourneront la valeur -1.<text:line-break/>includes retourne un booléen indiquant si la recherche<text:line-break/>est fructueuse (true) ou non (false).</text:p><text:p>Il existe ensuite d&amp;#8217;autres méthodes comme find, some et every.<text:line-break/>Elles identifient des éléments à partir d&amp;#8217;une fonction.<text:line-break/>Les conditions de recherche sont plus complètes, car on n&amp;#8217;est pas obligé<text:line-break/>de connaître la valeur exacte recherchée.</text:p><text:p>La méthode find retourne l&amp;#8217;élément qui satisfait la condition en premier.<text:line-break/>La méthode findIndex retourne l&amp;#8217;index de l&amp;#8217;élément<text:line-break/>qui satisfait la condition en premier.</text:p><text:p>Les méthodes some et every retournent un booléen<text:line-break/>lorsque la condition est satisfaite.<text:line-break/>some retourne true si au moins une itération est satisfaisante.<text:line-break/>every retourne true si toutes les itérations sont satisfaisantes.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const soundcheck = ['un', 'deux', 'un', 'deux'];<text:line-break/><text:line-break/>console.log(soundcheck.indexOf('un'));        1<text:line-break/>console.log(soundcheck.indexOf('deux'));      2<text:line-break/>console.log(soundcheck.indexOf('trois'));     3<text:line-break/><text:line-break/>console.log(soundcheck.lastIndexOf('deux'));  4<text:line-break/><text:line-break/>console.log(soundcheck.includes('deux'));     5<text:line-break/>console.log(soundcheck.includes('trois'));    6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10514 {list_context: "colist", text: "Affiche `0`{nbsp}— le premier `\"un\"` est l'élément `0` du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10524 {list_context: "colist", text: "Affiche `1`{nbsp}— le premier `\"deux\"` est l'élément `1` du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10534 {list_context: "colist", text: "Affiche `-1`{nbsp}— cet élément est absent du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10544 {list_context: "colist", text: "Affiche `3`{nbsp}— le dernier `\"deux\"` est l'élément `3` du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10554 {list_context: "colist", text: "Affiche `true`{nbsp}— l'élément `\"un\"` existe dans le tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10564 {list_context: "colist", text: "Affiche `false`{nbsp}— l'élément `\"trois\"` n'existe pas dans le tableau.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const values = [null, 2, 10, 100];<text:line-break/><text:line-break/>const biggerThan50 = (value) =&amp;gt; value &amp;gt; 50;   1<text:line-break/><text:line-break/>console.log(values.find(biggerThan50));       2<text:line-break/>console.log(values.findIndex(biggerThan50));  3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10610 {list_context: "colist", text: "La fonction `isFinite` retourne `true` si la valeur passée en argument est un nombre supérieur à `50`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10620 {list_context: "colist", text: "Affiche `100`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10630 {list_context: "colist", text: "Affiche `3`{nbsp}— c'est l'index de la valeur `100`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const values = [1, 'a', 120, undefined, 4];<text:line-break/>const isUndefined = (value) =&amp;gt; value === undefined;<text:line-break/><text:line-break/>console.log(values.every(isUndefined));                1<text:line-break/>console.log(values.some(isUndefined));                 2<text:line-break/>console.log(values.filter(d =&amp;gt; d).some(isUndefined));  3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10674 {list_context: "colist", text: "Affiche `false`{nbsp}— toutes les valeurs ne sont pas égales à `undefined`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10684 {list_context: "colist", text: "Affiche `true`{nbsp}— au moins une valeur est égale à `undefined`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10694 {list_context: "colist", text: "Affiche `false`{nbsp}— il n'y a plus de valeur `undefined` dans le tableau, car on a utilisé la méthode &lt;&lt;array.filter,filter>> pour supprimer les valeurs non-vides.", blocks: 0}></text:p><text:h text:outline-level="3">Décomposition de tableau (destructuring)</text:h><text:p>L&amp;#8217;affectation par décomposition (destructuring) est une manière élégante<text:line-break/>de piocher une ou plusieurs valeurs dans un tableau.<text:line-break/>La décomposition n&amp;#8217;altère pas le contenu des variables décomposées.<text:line-break/>Ce mécanisme existe aussi pour les objets.</text:p><text:p>La décomposition se combine agréablement avec l&amp;#8217;opérateur &amp;#8230;&amp;#8203; (opérateur spread).<text:line-break/>Il accumule le reste des éléments dans une variable, sous forme de tableau.</text:p><text:p>La méthode slice offre davantage de souplesse pour gérer les limites.<text:line-break/>On choisit l&amp;#8217;index de début et l&amp;#8217;index de fin de la décomposition.</text:p><text:p>Si les valeurs de début et/ou de fin sont négatives,<text:line-break/>les index sont calculés à partir de la fin du tableau.</text:p><text:p><text:line-break/>----<text:line-break/>const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];<text:line-break/><text:line-break/>const [first, second] = weekdays;<text:line-break/>console.log(first);           1<text:line-break/>console.log(second);          2<text:line-break/><text:line-break/>const [,, third] = weekdays;<text:line-break/>console.log(third);           3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10752 {list_context: "colist", text: "Affiche `\"lundi\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10762 {list_context: "colist", text: "Affiche `\"mardi\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10772 {list_context: "colist", text: "Affiche `\"mercredi\"`{nbsp}— l'utilisation des virgules sans variable a permis de _sauter_ des positions dans la décomposition.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];<text:line-break/><text:line-break/>const [first, second, ...rest] = weekdays;<text:line-break/>console.log(rest);           1<text:line-break/><text:line-break/>// revient au même que<text:line-break/>// const [,, ...rest] = weekdays;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10812 {list_context: "colist", text: "Affiche `[\"mercredi\", \"jeudi\", \"vendredi\"]`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const values = ['un', 'deux', 'trois', 'quatre'];<text:line-break/><text:line-break/>console.log(values.slice(1));     1<text:line-break/>console.log(values.slice(1, 2));  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10854 {list_context: "colist", text: "Affiche `[\"deux\", \"trois\", \"quatre\"]`{nbsp}— à partir de l'index `1`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10864 {list_context: "colist", text: "Affiche `[\"deux\"]`{nbsp}— à partir de l'index `1` et jusqu'à l'index `2` (non-inclus).", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const values = ['un', 'deux', 'trois', 'quatre'];<text:line-break/><text:line-break/>console.log(values.slice(-1));     1<text:line-break/>console.log(values.slice(-3));     2<text:line-break/><text:line-break/>console.log(values.slice(0, -1));  3<text:line-break/>console.log(values.slice(0, -3));  4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@10910 {list_context: "colist", text: "Affiche `[\"quatre\"]`{nbsp}— premier élément à partir de la fin.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10920 {list_context: "colist", text: "Affiche `[\"deux\", \"trois\", \"quatre\"]`{nbsp}— les trois premiers éléments à partir de la fin.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10930 {list_context: "colist", text: "Affiche `[\"un\", \"deux\", \"trois\"]`{nbsp}— jusqu'au dernier élément à partir de la fin (non-inclus).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@10940 {list_context: "colist", text: "Affiche `[\"un\"]`{nbsp}— jusqu'au troisième élément à partir de la fin (non-inclus).", blocks: 0}></text:p><text:p><text:line-break/>----<text:line-break/>const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];<text:line-break/><text:line-break/>console.log(weekdays);          1<text:line-break/>console.log(weekdays.length);   2<text:line-break/>console.log(weekdays[1]);       3<text:line-break/>console.log(weekdays[0]);<text:line-break/>console.log(weekdays[5]);       4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@9488 {list_context: "colist", text: "Affiche `[\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\"]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9498 {list_context: "colist", text: "Affiche `5`{nbsp}— soit la longueur du tableau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9508 {list_context: "colist", text: "Affiche `\"mardi\"`{nbsp}— c'est l'élément défini à l'index `1`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@9518 {list_context: "colist", text: "Affiche `undefined`{nbsp}— il n'y a aucun élément défini à l'index `5`.", blocks: 0}><text:line-break/><text:line-break/>1. la numérotation débute à l&amp;#8217;index 0&amp;#160;;,1. la propriété length contient la longueur du tableau&amp;#160;;,1. la valeur undefined est retournée quand on tente d&amp;#8217;accéder à un index<text:line-break/>qui n&amp;#8217;existe pas.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des structures d&amp;#8217;objet</text:h><text:p>Les structures d&amp;#8217;objet servent à lister des éléments de tout type<text:line-break/>au sein d&amp;#8217;une même variable.<text:line-break/>L&amp;#8217;indexation se fait comme dans un dictionnaire,<text:line-break/>avec un identifiant unique pour chaque valeur.</text:p><text:p>Nous pouvons nous baser sur une autre syntaxe pour créer et accéder<text:line-break/>à des valeurs en utilisant des variables en guise d&amp;#8217;identifiant d&amp;#8217;index&amp;#160;:</text:p><text:h text:outline-level="3">Décomposition d&amp;#8217;objet (destructuring)</text:h><text:p>L&amp;#8217;affectation par décomposition (destructuring) est une manière<text:line-break/>élégante de piocher une ou plusieurs valeurs dans un objet.<text:line-break/>Ce mécanisme existe aussi pour les tableaux.</text:p><text:p>La décomposition se combine agréablement avec l&amp;#8217;opérateur &amp;#8230;&amp;#8203;<text:line-break/>(opérateur spread).<text:line-break/>Il accumule le reste des éléments dans une variable,<text:line-break/>sous forme d&amp;#8217;objet.</text:p><text:p><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>  twitter: '@FrancineDu26',<text:line-break/>};<text:line-break/><text:line-break/>const {location,twitter} = francine;<text:line-break/>console.log(location);            1<text:line-break/><text:line-break/>const {first_name:prenom} = francine;<text:line-break/>console.log(prenom);              2<text:line-break/><text:line-break/>const {is_admin=false} = francine;<text:line-break/>console.log(is_admin);            3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11140 {list_context: "colist", text: "Affiche `\"Drôme\"`{nbsp}— on a décomposé la clé `location`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11150 {list_context: "colist", text: "Affiche `\"Francine\"`{nbsp}— on a décomposé puis renommé la clé `first_name` en une nouvelle variable{nbsp}: `prenom`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11160 {list_context: "colist", text: "Affiche `false`{nbsp}— on a décomposé la clé `is_admin` et comme elle n'existe pas, on a spécifié la valeur par défaut `false`, au lieu de `undefined`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>  twitter: '@FrancineDu26',<text:line-break/>};<text:line-break/><text:line-break/>const {first_name, ...metadata} = francine;<text:line-break/><text:line-break/>console.log(first_name);          1<text:line-break/>console.log(metadata);            2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11202 {list_context: "colist", text: "Affiche `\"Francine\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11212 {list_context: "colist", text: "Affiche `{ location: \"Drôme\", twitter: \"@FrancineDu26\" }`.", blocks: 0}></text:p><text:h text:outline-level="3">Combiner des objets</text:h><text:p>Object.assign est une méthode qui permet d&amp;#8217;étendre et combiner plusieurs objets.<text:line-break/>On a le choix d&amp;#8217;intégrer les nouveaux éléments à un objet existant<text:line-break/>ou bien d&amp;#8217;en créer un nouveau.<text:line-break/>Les objets sont combinés dans le premier paramètre de la fonction.</text:p><text:p>À noter que les assignations se font de gauche à droite.<text:line-break/>Toute clé existante est remplacée.</text:p><text:p>La décomposition d&amp;#8217;objet sert également à combiner<text:line-break/>un ou plusieurs objets entre eux.</text:p><text:p><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>};<text:line-break/><text:line-break/>const francine26 = Object.assign({}, francine, {location: 'Drôme'});<text:line-break/>console.log(francine26);      1<text:line-break/>console.log(francine);        2<text:line-break/><text:line-break/>Object.assign(francine26, {location: 'Paris'}, {location: 'Ardèche'});<text:line-break/>console.log(francine26);      3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11266 {list_context: "colist", text: "Affiche `{ first_name: \"Francine\", location: \"Drôme\" }`{nbsp}— la nouvelle variable contient nos deux objets combinés.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11276 {list_context: "colist", text: "Affiche `{ first_name: \"Francine\" }`{nbsp}— ce sont les valeurs originelles de notre objet.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11286 {list_context: "colist", text: "Affiche `{ first_name: \"Francine\", location: 'Ardèche' }`{nbsp}— l'objet `francine26` a reçu la nouvelle propriété `location`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>};<text:line-break/><text:line-break/>const francine26 = {...francine, location: 'Drôme'};<text:line-break/>console.log(francine26);      1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11328 {list_context: "colist", text: "Affiche `{ first_name: \"Francine\", location: \"Drôme\" }`.", blocks: 0}></text:p><text:h text:outline-level="3">Itérer sur des objets</text:h><text:p>La méthode Object.entries est probablement la méthode<text:line-break/>la plus adaptée pour itérer à la fois sur les clés et sur les valeurs<text:line-break/>d&amp;#8217;un objet.<text:line-break/>Object.entries est une fonction qui retourne un tableau.<text:line-break/>Ce tableau contient autant de paires de [clé, valeur] qu&amp;#8217;il y a<text:line-break/>d&amp;#8217;éléments dans l&amp;#8217;objet.</text:p><text:p>Libre à nous d'itérer sur les valeurs<text:line-break/>et d&amp;#8217;utiliser la décomposition de tableaux<text:line-break/>pour rendre notre code explicite&amp;#160;:</text:p><text:p>Deux autres méthodes récupèrent<text:line-break/>soit la liste des clés d&amp;#8217;un objet (Object.keys)<text:line-break/>soit la liste des valeurs d&amp;#8217;un objet (Object.values).<text:line-break/>Dans les deux cas, les résultats sont retournés<text:line-break/>sous forme d&amp;#8217;un tableau.</text:p><text:p><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log(Object.entries(francine)); 1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11382 {list_context: "colist", text: "Affiche `[[ \"first_name\", \"Francine\" ], [ \"location\", \"Drôme\" ]]`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>Object.entries(francine).forEach(([key, value]) =&amp;gt; {<text:line-break/>  console.log(`francine.${key} vaut ${value}`);   1<text:line-break/>})<text:line-break/><text:line-break/>// même résultat, autre méthode<text:line-break/>for (const [key, value] of Object.entries(francine)) {<text:line-break/>  console.log(`francine.${key} vaut ${value}`);   2<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11424 {list_context: "colist", text: "Affiche successivement `\"francine.first_name vaut Francine\"` puis `\"francine.location vaut Drôme\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11434 {list_context: "colist", text: "Idem.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log(Object.keys(francine));     1<text:line-break/>console.log(Object.values(francine));   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11476 {list_context: "colist", text: "Affiche `[\"first_name\", \"location\"]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11486 {list_context: "colist", text: "Affiche `[\"Francine\", \"Drôme\"]`.", blocks: 0}></text:p><text:h text:outline-level="3">Identifier une ou plusieurs valeurs</text:h><text:p>Il y a trois manières d&amp;#8217;identifier si un objet contient une valeur<text:line-break/>associée à une clé.</text:p><text:p>Le plus simple est d&amp;#8217;utiliser la méthode hasOwnProperty.<text:line-break/>Elle prend en argument le nom de la clé à tester et<text:line-break/>retourne un booléen.</text:p><text:p>La seconde manière est d&amp;#8217;utiliser l&amp;#8217;opérateur in.<text:line-break/>On l&amp;#8217;aura déjà rencontré lors des boucles.<text:line-break/>Sauf que cette fois, on l&amp;#8217;utilise une seule fois&amp;#160;— et non dans une boucle.</text:p><text:p>Enfin, on peut tester la valeur associée avec la syntaxe standard objet.clé.</text:p><text:p>Attention toutefois, car cette méthode teste uniquement la valeur.<text:line-break/>Si la clé existe et contient undefined, vous ne verrez pas la différence.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log(francine.hasOwnProperty('location'));   1<text:line-break/>console.log(francine.hasOwnProperty('twitter'));    2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11546 {list_context: "colist", text: "Affiche `true`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11556 {list_context: "colist", text: "Affiche `false`{nbsp}— cette clé n'existe pas dans cet objet.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log('location' in francine);   1<text:line-break/>console.log('twitter' in francine);    2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11598 {list_context: "colist", text: "Affiche `true`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11608 {list_context: "colist", text: "Affiche `false`{nbsp}— cette clé n'existe pas dans cet objet.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log(Boolean(francine.location));   1<text:line-break/>console.log(Boolean(francine.twitter));    2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11650 {list_context: "colist", text: "Affiche `true`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11660 {list_context: "colist", text: "Affiche `false`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>  twitter: undefined<text:line-break/>};<text:line-break/><text:line-break/>console.log(Boolean(francine.twitter));          1<text:line-break/>console.log(francine.twitter !== undefined);     2<text:line-break/><text:line-break/>console.log(francine.hasOwnProperty('twitter')); 3<text:line-break/>console.log('twitter' in francine);              4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11706 {list_context: "colist", text: "Affiche `false`{nbsp}— la valeur `undefined` est convertie en `false`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11716 {list_context: "colist", text: "Affiche `false`{nbsp}— la clé existe bien, mais elle contient la valeur `undefined`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11726 {list_context: "colist", text: "Affiche `true`{nbsp}— le test se fait sur l'existence de la clé.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11736 {list_context: "colist", text: "Affiche `true`{nbsp}— idem.", blocks: 0}></text:p><text:p><text:line-break/>----<text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>};<text:line-break/><text:line-break/>console.log(francine.first_name); 1<text:line-break/><text:line-break/>francine.age = 25;                2<text:line-break/>console.log(francine.age);        3<text:line-break/>console.log(francine.twitter);    4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11000 {list_context: "colist", text: "Affiche `\"Francine\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11010 {list_context: "colist", text: "On assigne une valeur numérique dans l'index `age` une fois l'objet créé.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11020 {list_context: "colist", text: "Affiche `25`{nbsp}— la valeur numérique précédemment assignée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11030 {list_context: "colist", text: "Affiche `undefined`{nbsp}— aucune valeur n'est assignée pour cette clé.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const SOCIAL_NETWORK = 'twitter';<text:line-break/><text:line-break/>const francine = {<text:line-break/>  first_name: 'Francine',<text:line-break/>  location: 'Drôme',<text:line-break/>  [SOCIAL_NETWORK]: '@FrancineDu26',    1<text:line-break/>};<text:line-break/><text:line-break/>console.log(francine[SOCIAL_NETWORK]);  2<text:line-break/><text:line-break/>// manières équivalentes, sans utilisation de variable<text:line-break/>console.log(francine.twitter);<text:line-break/>console.log(francine['twitter']);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11072 {list_context: "colist", text: "Assigne la chaîne `@FrancineDu26` dans l'index correspondant à la valeur de la variable `SOCIAL_NETWORK`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11082 {list_context: "colist", text: "Affiche `\"@FrancineDu26\"`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des structures de données JSON</text:h><text:p>JSON (json.org) est un format de données textuel standardisé.<text:line-break/>Son but est de pouvoir représenter des données informatiques de manière<text:line-break/>interopérable entre différents langages.</text:p><text:p>Le format JSON ressemble beaucoup à une structure d'objet ECMAScript.<text:line-break/>La représentation est plus stricte car toute donnée doit être représentée<text:line-break/>de manière textuelle.<text:line-break/>Ainsi, toutes les clés sont entourées de guillemets doubles.</text:p><text:p>Les types de données autorisés sont les nombres, les chaînes de caractère,<text:line-break/>les booléens, les tableaux, les objets et la valeur null.<text:line-break/>On ne peut donc pas représenter de fonction,<text:line-break/>d'instance d&amp;#8217;objet ni même la valeur undefined.</text:p><text:p>ECMAScript embarque le nécessaire pour parser depuis et convertir en JSON.<text:line-break/>Cela se fait respectivement avec les fonctions JSON.parse et JSON.stringify.</text:p><text:p>La fonction JSON.parse consomme du texte.<text:line-break/>Elle retourne une représentation ECMAScript ou lance une erreur<text:line-break/>en cas de problème.</text:p><text:p>À l&amp;#8217;inverse, la fonction JSON.stringify convertit une structure ECMAScript<text:line-break/>en chaîne de caractères au format JSON&amp;#160;:</text:p><text:p>La fonction JSON.stringify parcourt tous les éléments<text:line-break/>pour les sérialiser en forme textuelle.<text:line-break/>Quand la fonction de sérialisation rencontre la la clé spéciale toJSON,<text:line-break/>elle l&amp;#8217;utilisera pour effectuer la conversion&amp;#160;:</text:p><text:p>Notre implémentation contenue dans la fonction toJSON est<text:line-break/>responsable de renvoyer du texte seulement et de choisir les clés<text:line-break/>à sérialiser.</text:p><text:p>Dans cette variante d&amp;#8217;exemple, la clé city n&amp;#8217;a pas été sérialisée<text:line-break/>car notre fonction toJSON se préoccupait seulement des clés lat et lon.</text:p><text:p><text:line-break/>----<text:line-break/>{<text:line-break/>  "title": "Node.js",<text:line-break/>  "price_tag": 32,<text:line-break/>  "keywords": [<text:line-break/>    "JavaScript",<text:line-break/>    "Node.js",<text:line-break/>    "Apprendre par l'exemple"<text:line-break/>  ]<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const json_object = '{ "title": "Node.js", "price_tag": 32 }';<text:line-break/>const json_string = '"Hello World!"';<text:line-break/>const json_number = '32';<text:line-break/><text:line-break/>console.log(JSON.parse(json_string)); 1<text:line-break/>console.log(JSON.parse(json_number)); 2<text:line-break/>console.log(JSON.parse(json_object)); 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11826 {list_context: "colist", text: "Affiche `\"Hello World!\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11836 {list_context: "colist", text: "Affiche `32`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11846 {list_context: "colist", text: "Affiche `{price_tag: 32, title: \"Node.js\"}`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const location = {<text:line-break/>  lat: 48.8503439,<text:line-break/>  lon: 2.34658949<text:line-break/>}<text:line-break/><text:line-break/>console.log(JSON.stringify(location));  1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11886 {list_context: "colist", text: "Affiche `\"{\\\"lat\\\":48.8503439,\\\"lon\\\":2.34658949}\"`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const location = {<text:line-break/>  lat: 48.8503439,<text:line-break/>  lon: 2.34658949,<text:line-break/>  toJSON() {<text:line-break/>    return `geo=${this.lat},${this.lon}`;<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>console.log(JSON.stringify(location));    1<text:line-break/><text:line-break/>delete location.toJSON;<text:line-break/>console.log(JSON.stringify(location));    2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11928 {list_context: "colist", text: "Affiche `\"\\\"geo=48.8503439,2.34658949\\\"\"`{nbsp}— c'est la sérialisation definie par notre fonction `toJSON`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@11938 {list_context: "colist", text: "Affiche `\"{\\\"lat\\\":48.8503439,\\\"lon\\\":2.34658949}\"`{nbsp}— sans la clé `toJSON`, notre objet initial est sérialisé tel quel.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const location = {<text:line-break/>  lat: 48.8503439,<text:line-break/>  lon: 2.34658949,<text:line-break/>  city: 'Paris',<text:line-break/>  toJSON() {<text:line-break/>    return `geo=${this.lat},${this.lon}`;<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>console.log(JSON.stringify(location));    1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@11978 {list_context: "colist", text: "Affiche `\"\\\"geo=48.8503439,2.34658949\\\"\"`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur JSON.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON<text:line-break/></text:p><text:h text:outline-level="2">Manipuler des dates</text:h><text:p>Les calculs de date s&amp;#8217;effectuent à l&amp;#8217;aide des objets Date.<text:line-break/>Chaque instance de Date représente un moment dans le temps, à un jour<text:line-break/>et à une heure donnée.</text:p><text:p>Un certain nombre de méthodes retournent différents éléments de la date<text:line-break/>contenue dans l&amp;#8217;objet&amp;#160;: année, secondes, jour de la semaine, etc.<text:line-break/>Il en existe tout autant pour modifier ces éléments de date.</text:p><text:p>L&amp;#8217;exemple précédent illustre l&amp;#8217;ambiguïté de la notion de mois.<text:line-break/>Il s&amp;#8217;agit en réalité de l&amp;#8217;index du mois&amp;#160;:<text:line-break/>0 correspond à janvier, 1 à février, etc.</text:p><text:p>La plupart des méthodes natives font référence à l&amp;#8217;anglais.<text:line-break/>Elles offrent peu de confort de manipulation&amp;#160;— on aimerait pouvoir<text:line-break/>compter facilement le nombre de jours entre deux dates, ou retirer 30 jours.</text:p><text:p>Quand nous utiliserons Node et<text:line-break/>npm, nous verrons que nous aurons<text:line-break/>à disposition des librairies facilitant les manipulations de dates.</text:p><text:h text:outline-level="3">Formatage internationalisé (Intl.DateTimeFormat)</text:h><text:p>La spécification ECMA Intl a été conçue pour ajouter des<text:line-break/>fonctionnalités relatives aux langues.<text:line-break/>Cette spécification est complémentaire.<text:line-break/>Son comportement varie en fonction du système d&amp;#8217;exploitation<text:line-break/>—&amp;#160;mode d&amp;#8217;installation de Node et/ou version du navigateur web.</text:p><text:p>Les méthodes de date toLocaleString, toLocaleDateString et<text:line-break/>toLocaleTimeString renvoient une version localisée<text:line-break/>d&amp;#8217;une date complète, d&amp;#8217;une date et d&amp;#8217;une heure, respectivement.</text:p><text:p>Si en formatant une date, les caractères M01, M02 ou autre s&amp;#8217;affiche,<text:line-break/>c&amp;#8217;est que le système n&amp;#8217;est pas configuré avec les libellés de la langue<text:line-break/>demandée.</text:p><text:p>La langue par défaut est l&amp;#8217;anglais.</text:p><text:p>Une version plus verbeuse consiste à créer un formateur avec<text:line-break/>Intl.DateTimeFormat.<text:line-break/>Ce formateur se réutilise pour transformer plusieurs fois<text:line-break/>des dates différentes avec les mêmes réglages<text:line-break/>ou une même date avec des formatages différents.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const past = new Date('2013-12-04 10:00:00');<text:line-break/><text:line-break/>console.log(past.toLocaleDateString());                           1<text:line-break/>console.log(past.toLocaleDateString('fr-FR', { month: 'long' })); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12224 {list_context: "colist", text: "Affiche `04/12/2013`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12234 {list_context: "colist", text: "Affiche `décembre`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Date/toLocaleDateString.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const past = new Date('2013-12-04 10:00:00');<text:line-break/><text:line-break/>const options = { year: 'numeric', month: 'short', day: 'numeric' };<text:line-break/>const longOptions = {...options, weekday: 'long', month: 'long'};<text:line-break/>const fr = new Intl.DateTimeFormat('fr-FR', options);<text:line-break/>const frLong = new Intl.DateTimeFormat('fr-FR', longOptions);<text:line-break/><text:line-break/>console.log(fr.format(past));         1<text:line-break/>console.log(frLong.format(past));     2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12312 {list_context: "colist", text: "Affiche `4 déc. 2013`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12322 {list_context: "colist", text: "Affiche `mercredi 4 décembre 2013`.", blocks: 0}><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur DateTimeFormat.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat<text:line-break/></text:p><text:p><text:line-break/>----<text:line-break/>const now = new Date();<text:line-break/>const past = new Date('2013-12-04 10:00:00'); 1<text:line-break/><text:line-break/>console.log(past.getUTCFullYear());           2<text:line-break/>console.log(now.getUTCFullYear());            3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12050 {list_context: "colist", text: "On initialise l'objet date `past` au 04 décembre 2013.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12060 {list_context: "colist", text: "Affiche `2013`{nbsp}— l'année liée à l'objet `past`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12070 {list_context: "colist", text: "Affiche `{docyear}`{nbsp}— l'année liée à l'objet `now` (aujourd'hui).", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const past = new Date('2013-12-04 10:00:00');<text:line-break/><text:line-break/>past.setUTCFullYear('2015');           1<text:line-break/>console.log(past.toISOString());       2<text:line-break/><text:line-break/>past.setUTCMonth(1);                   3<text:line-break/>console.log(past.toISOString());       4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12116 {list_context: "colist", text: "Change la date vers l'année `2015`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12126 {list_context: "colist", text: "Affiche `\"2015-12-04T10:00:00.000Z\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12136 {list_context: "colist", text: "Change la date vers le mois `1`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12146 {list_context: "colist", text: "Affiche `\"2015-02-04T10:00:00.000Z\"`{nbsp}— pourquoi le mois de février{nbsp}??", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Date.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date<text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des classes d&amp;#8217;objet (Class)</text:h><text:p>Une classe est une structure qui partage des propriétés<text:line-break/>et des méthodes entre objets qui l&amp;#8217;instancient.<text:line-break/>Une instance de classe est créée en préfixant un appel de fonction<text:line-break/>par l&amp;#8217;opérateur new.</text:p><text:p>Si on se réfère à l&amp;#8217;exemple précédent,<text:line-break/>nos deux variables sont des objets issus de la classe Date.<text:line-break/>Chacune des variables bénéficie des méthodes définies par la classe Date.</text:p><text:p>Autrement dit, si les structures d&amp;#8217;objet définissent des données,<text:line-break/>les classes définissent des comportements partagés.</text:p><text:p>Nous développerons cet exemple dans les sections qui suivent.<text:line-break/>On peut d&amp;#8217;ores et déjà noter que la structure d&amp;#8217;une classe<text:line-break/>se décompose en plusieurs parties&amp;#160;:</text:p><text:h text:outline-level="3">Méthodes d&amp;#8217;instance</text:h><text:p>Les méthodes définissent des comportements partagés entre chaque instance<text:line-break/>de la classe.<text:line-break/>Elles servent à retourner ou transformer des valeurs rattachées à l&amp;#8217;objet.</text:p><text:p><text:line-break/>----<text:line-break/>class Book {<text:line-break/>  constructor({ title }) {<text:line-break/>    this.title = title;<text:line-break/>  }<text:line-break/><text:line-break/>  isPublished() {<text:line-break/>    return this.is_published === true;<text:line-break/>  }<text:line-break/><text:line-break/>  publish() {<text:line-break/>    this.is_published = true;<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>const book1 = new Book({ title: 'Node.js' });<text:line-break/>console.log(book1.isPublished());   1<text:line-break/>book1.publish();<text:line-break/>console.log(book1.isPublished());   2<text:line-break/><text:line-break/>const book2 = new Book({ title: 'CSS maintenables' });<text:line-break/>console.log(book2.isPublished());   3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12634 {list_context: "colist", text: "Affiche `false`{nbsp}— la propriété n'existe pas.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12644 {list_context: "colist", text: "Affiche `true`{nbsp}— la propriété `is_published` a été changée à la ligne précédente.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12654 {list_context: "colist", text: "Affiche `false`{nbsp}— les données sont étanches entre chaque instance.", blocks: 0}></text:p><text:h text:outline-level="3">Méthodes statiques</text:h><text:p>Les méthodes statiques sont pratiques pour mettre à disposition du code<text:line-break/>métier de manière organisée.<text:line-break/>Elles se caractérisent par le préfixe static devant un nom de fonction.</text:p><text:p>On verra dans le chapitre sur Node<text:line-break/>qu&amp;#8217;on peut se baser sur les modules pour partager du code<text:line-break/>sans avoir à l&amp;#8217;affecter à une classe.</text:p><text:p><text:line-break/>----<text:line-break/>class Book {<text:line-break/>  constructor({ title, ean13 }) {<text:line-break/>    this.title = title;<text:line-break/>    this.ean13 = ean13;<text:line-break/>  }<text:line-break/><text:line-break/>  static clean(value) {<text:line-break/>    return value.replace(/\D/g, '');<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>const nodebook = new Book({<text:line-break/>  title: 'Node.js',<text:line-break/>  ean13: Book.clean('978-2212139938'),  1<text:line-break/>});<text:line-break/><text:line-break/>console.log(nodebook.ean13);            2<text:line-break/>console.log(nodebook.clean);            3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12708 {list_context: "colist", text: "On appelle la méthode statique `Book.clean` pour nettoyer le code EAN13.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12718 {list_context: "colist", text: "Affiche `\"9782212139938\"`{nbsp}— la valeur a bien été nettoyée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12728 {list_context: "colist", text: "Affiche `undefined`{nbsp}— les méthodes statiques ne sont pas accessibles depuis l'instance de classe.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Classes/static.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static<text:line-break/></text:p><text:h text:outline-level="3">Accesseurs et mutateurs</text:h><text:p>Ce type particulier de méthode permet de définir des attributs<text:line-break/>dont la valeur est dynamique (accesseur).<text:line-break/>Le mutateur gère l&amp;#8217;affectation de valeur vers cet attribut dynamique.<text:line-break/>Ces méthodes sont préfixées par get ou set.</text:p><text:p><text:line-break/>----<text:line-break/>class Book {<text:line-break/>  constructor({ title, ean13 }) {<text:line-break/>    this.title = title;<text:line-break/>    this.ean13 = ean13;<text:line-break/>  }<text:line-break/><text:line-break/>  get isbn() {                1<text:line-break/>    return this.ean13.slice(3);<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>const nodebook = new Book({ title: 'Node.js', ean13: '9782212139938' });<text:line-break/><text:line-break/>console.log(nodebook.ean13);  2<text:line-break/>console.log(nodebook.isbn);   3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12800 {list_context: "colist", text: "Définition de l'_accesseur_ `isbn`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12810 {list_context: "colist", text: "Affiche `\"9782212139938\"`{nbsp}— c'est une propriété de l'objet `nodebook`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12820 {list_context: "colist", text: "Affiche `\"2212139938\"`{nbsp}— `isbn` s'utilise comme un attribut mais sa valeur est calculée à chaque fois qu'elle est appelée.", blocks: 0}><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Functions/get.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get<text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Functions/set.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set<text:line-break/></text:p><text:h text:outline-level="3">Héritage</text:h><text:p>L&amp;#8217;héritage est un mécanisme d&amp;#8217;extension de classe.<text:line-break/>C&amp;#8217;est une pratique peu employée en JavaScript,<text:line-break/>principalement de par sa nature modulaire et fonctionnelle.</text:p><text:p>L&amp;#8217;héritage se caractérise par l&amp;#8217;usage de l&amp;#8217;opérateur extends lors de la<text:line-break/>définition de la classe et aussi par l&amp;#8217;utilisation du mot-clé super<text:line-break/>dans le constructeur.</text:p><text:p>En pratique, c&amp;#8217;est comme si on empilait les classes les unes sur les autres.<text:line-break/>On lègue des méthodes aux classes qui héritent.<text:line-break/>Si une méthode porte le même nom, elle sera écrasée.</text:p><text:p>L&amp;#8217;appel à la fonction super() appelle le constructeur de la classe étendue.<text:line-break/>Si on ne l&amp;#8217;appelle pas, le constructeur de la classe parent ne sera pas invoqué.</text:p><text:p>On reparlera de l&amp;#8217;héritage dans la<text:line-break/>section React<text:line-break/>du chapitre 9.<text:line-break/>C&amp;#8217;est un exemple populaire d&amp;#8217;héritage de composants graphiques.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>class Product {<text:line-break/>  constructor({ ean13 }) {<text:line-break/>    this.ean13 = ean13;<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>class Book extends Product {<text:line-break/>  constructor(options) {<text:line-break/>    super(options);<text:line-break/><text:line-break/>    this.title = options.title;<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>const nodebook = new Book({ title: 'Node.js', ean13: '9782212139938' });<text:line-break/>console.log(nodebook.title);    1<text:line-break/>console.log(nodebook.ean13);    2<text:line-break/><text:line-break/>const nodeproduct = new Product({ title: 'Node.js', ean13: '9782212139938' });<text:line-break/>console.log(nodeproduct.title); 3<text:line-break/>console.log(nodeproduct.ean13); 4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12910 {list_context: "colist", text: "Affiche `\"Node.js\"`{nbsp}— la propriété `title` est assignée dans le constructeur de la classe `Book`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12920 {list_context: "colist", text: "Affiche `\"9782212139938\"`{nbsp}— la propriété `ean13` est assignée dans le constructeur de `Product`, la classe dont on hérite grâce à `extends` et à l'appel de `super()` qui transmet les arguments d'initialisation.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12930 {list_context: "colist", text: "Affiche `undefined`{nbsp}— la propriété `title` n'est pas assignée dans le constructeur de la classe `Product`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12940 {list_context: "colist", text: "Affiche `\"9782212139938\"`{nbsp}— la propriété `ean13` est assignée dans le constructeur de `Product` qu'on appelle directement cette fois-ci.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/>----<text:line-break/>const date1 = new Date();<text:line-break/>const date2 = new Date('2013-12-04');<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>class Book {<text:line-break/>  constructor({ title, ean13 }) {     1<text:line-break/>    this.title = title;               2<text:line-break/>    this.ean13 = ean13;<text:line-break/>  }<text:line-break/><text:line-break/>  toJSON() {                          3<text:line-break/>    const {title, ean13} = this;<text:line-break/>    return {title, ean13};<text:line-break/>  }<text:line-break/><text:line-break/>  get isbn() {                        4<text:line-break/>    return this.ean13.split(3)[1];<text:line-break/>  }<text:line-break/><text:line-break/>  static clean(value) {               5<text:line-break/>    return value.replace(/\D/g, '');<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12418 {list_context: "colist", text: "Le constructeur reçoit un ou plusieurs arguments lors de l'instanciation de la classe.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12428 {list_context: "colist", text: "`this` fait référence à _ce contexte_, c'est-à-dire à _cette instance de classe_{nbsp}; deux instances peuvent être initialisées avec des données différentes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12438 {list_context: "colist", text: "`toJSON` est une méthode de la classe.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12448 {list_context: "colist", text: "`isbn` est un accesseur (préfixe `get`){nbsp}— une propriété dont la valeur est calculée à chaque fois qu'elle est appelée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12458 {list_context: "colist", text: "`clean` est une méthode dite _statique_{nbsp}— elle est appelée en dehors d'une instance.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@12470 {list_context: "dlist", text: "la définition", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12472 {list_context: "dlist", text: "Définit le nom de la classe que l'on pourra instancier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12486 {list_context: "dlist", text: "le constructeur", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12488 {list_context: "dlist", text: "Partie exécutée lorsque la classe est instanciée.\nOn y met le moins de choses possibles.\nEn général on copie les données passées en argument.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12506 {list_context: "dlist", text: "les méthodes", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12508 {list_context: "dlist", text: "Fonctions partagées entre toutes les instances de la classe.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12522 {list_context: "dlist", text: "les méthodes statiques", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12524 {list_context: "dlist", text: "Fonctions partagées sans avoir à instancier la classe.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12538 {list_context: "dlist", text: "les accesseurs et mutateurs", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12540 {list_context: "dlist", text: "Fonctions qui définissent le comportement de propriétés dynamiques.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12554 {list_context: "dlist", text: "le contexte (`this`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@12556 {list_context: "dlist", text: "On peut y référer dans les méthodes de la classe pour dire\n_je fais référence à cet objet_.\nEt donc d'appeler les données et méthodes attenantes.", blocks: 0}><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Classes.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Manipuler des promesses (Promise)</text:h><text:p>Une promesse est un objet retourné immédiatement.<text:line-break/>Le résultat est obtenu plus tard.<text:line-break/>Cette résolution peut être soit positive soit négative.<text:line-break/>On dit alors que l&amp;#8217;action est asynchrone.</text:p><text:p>Le fait qu&amp;#8217;une fonction nous passe d&amp;#8217;autres fonctions pour commander<text:line-break/>un résultat s&amp;#8217;appelle le pattern Executor.</text:p><text:p>Une Promise s&amp;#8217;orchestre en deux temps.<text:line-break/>L&amp;#8217;initialisation&amp;#160;: on décide de la manière dont le traitement asynchrone<text:line-break/>sera effectué.<text:line-break/>Puis la résolution&amp;#160;: positive en appelant resolve()<text:line-break/>ou négative, en appelant reject().<text:line-break/>Le résultat passé à resolve sera transmis au premier argument de then.<text:line-break/>Le résultat passé à reject sera transmis au deuxième argument de then<text:line-break/>mais aussi au premier argument de catch.</text:p><text:p>Une instance de Promise expose plusieurs méthodes<text:line-break/>pour propager le statut de son exécution.</text:p><text:p>Historiquement, de nombreuses librairies ont proposé leur propre implémentation de promesses.<text:line-break/>Elles avaient le défaut de ne pas être interopérables entre elles.<text:line-break/>La spécification Promise/A+ a émergé pour établir un standard de compatibilité.</text:p><text:p>ECMAScript 2015 introduit nativement cette API.<text:line-break/>Plus besoin de polyfill ou de librairie pour en bénéficier nativement.</text:p><text:p>github.com/promises-aplus/promises-spec</text:p><text:p>En général, on utilise les promesses pour aller plus vite.<text:line-break/>Parce qu&amp;#8217;on peut continuer à traiter d&amp;#8217;autres actions<text:line-break/>en attendant l&amp;#8217;arrivée du résultat.</text:p><text:p>C&amp;#8217;est comme quand on se rend au restaurant&amp;#160;:<text:line-break/>les personnes en cuisine effectuent le traitement des commandes<text:line-break/>(actions longues) tandis que les personnes au service gèrent<text:line-break/>des interactions plus courtes mais plus fréquentes.<text:line-break/>Au final, le ticket de commande contient la liste des promesses dont<text:line-break/>on attend la résolution.</text:p><text:p>Nous verrons d&amp;#8217;autres utilisations des promesses<text:line-break/>avec fetch() au chapitre 9,<text:line-break/>avec promisify au chapitre 4<text:line-break/>et dans l'annexe B.</text:p><text:p>Un guide très complet&amp;#160;— en anglais&amp;#160;— est publié en libre consultation sur le site du W3C.<text:line-break/>Un dépôt sur GitHub permet d&amp;#8217;y contribuer.</text:p><text:h text:outline-level="3">Collection de promesses</text:h><text:p>Promise.all est une méthode statique de la class Promise.<text:line-break/>Elle accepte un tableau de promesses.<text:line-break/>Promise.all retourne elle-même une promesse.<text:line-break/>Cette promesse est résolue positivement si toutes les promesses réussissent.<text:line-break/>Elle est résolue négativement dès que l&amp;#8217;une d&amp;#8217;entre elles échoue.</text:p><text:p>L&amp;#8217;exemple précédent illustre la parallélisation des actions.<text:line-break/>Si la promesse la plus longue prend 1 seconde à être résolue,<text:line-break/>alors le temps d&amp;#8217;attente pour la résolution de toutes les promesses<text:line-break/>est de 1 seconde.<text:line-break/>Si on avait été dans un enchainement séquentiel, le temps d&amp;#8217;attente<text:line-break/>final aurait été l&amp;#8217;accumulation des temps d&amp;#8217;attente de la résolution<text:line-break/>de chacune des promesses.</text:p><text:p>Les promesses sont un des meilleurs moyens à notre disposition pour<text:line-break/>modulariser, linéariser et clarifier le sens du flot de notre code.</text:p><text:p><text:line-break/>----<text:line-break/>const asyncRandom = () =&amp;gt; new Promise((resolve) =&amp;gt; {<text:line-break/>  const timing = Math.floor(Math.random() * 2000);<text:line-break/>  setTimeout(() =&amp;gt; resolve(`résolu après ${timing}ms`), timing);        1<text:line-break/>});<text:line-break/><text:line-break/>const all = Promise.all([asyncRandom(), asyncRandom(), asyncRandom()]); 2<text:line-break/>all.then(messages =&amp;gt; console.log(messages));                            3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@13314 {list_context: "colist", text: "Cette fonction résout la promesse après un délai aléatoire compris entre 0 et 2000 millisecondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13324 {list_context: "colist", text: "On passe 3 promesses à `Promise.all`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13334 {list_context: "colist", text: "La résolution est déclenchée dès que les 3 promesses sont résolues{nbsp}— l'argument contient un tableau listant les résultats _dans l'ordre initial_ des promesses.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">async/await</text:h><text:p>Les opérateurs async et await aident à mettre en pause<text:line-break/>l&amp;#8217;interpréteur ECMAScript, en attendant le résultat d&amp;#8217;une<text:line-break/>fonction asynchrone (préfixée par async).<text:line-break/>Les promesses sont implicitement compatibles.<text:line-break/>On peut donc les mettre à plat pour obtenir un résultat<text:line-break/>sans avoir à utiliser then ni catch.</text:p><text:p>Transformons l&amp;#8217;exemple de la section Promise.all<text:line-break/>pour comprendre l&amp;#8217;impact de async et de await.</text:p><text:p>On gagne en lisibilité, mais on perd en vitesse.<text:line-break/>Les promesses sont exécutées les unes à la suite des autres<text:line-break/>et non plus en parallèle.<text:line-break/>Il est important d&amp;#8217;arbitrer les choix de design et d&amp;#8217;éviter de bloquer<text:line-break/>l&amp;#8217;exécution de vos scripts sans raison explicite.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>function asyncRandom() {<text:line-break/>  return new Promise((resolve) =&amp;gt; {<text:line-break/>    const timing = Math.floor(Math.random() * 2000);<text:line-break/>    setTimeout(() =&amp;gt; resolve(`résolu après ${timing}ms`), timing);<text:line-break/>  });<text:line-break/>}<text:line-break/><text:line-break/>(async () =&amp;gt; {                                                    1<text:line-break/>  const all = [<text:line-break/>    await asyncRandom(), await asyncRandom(), await asyncRandom() 2<text:line-break/>  ];<text:line-break/><text:line-break/>  console.log(all);                                               3<text:line-break/>})();<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@13394 {list_context: "colist", text: "On crée une _fonction asynchrone auto-invoquée_{nbsp}— c'est pas pour frimer mais parce qu'on ne peut pas encore utiliser de fonction asynchrone directement au niveau principal d'un script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13404 {list_context: "colist", text: "Chaque utilisation de `await` met l'interpréteur en pause.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13414 {list_context: "colist", text: "L'affichage du temps d'exécution de chaque promesse se fait lorsque les 3 promesses sont résolues.", blocks: 0}><text:line-break/></text:p><text:p><text:line-break/>----<text:line-break/>const p = new Promise((resolve) =&amp;gt; resolve('promesse tenue'));<text:line-break/><text:line-break/>console.log(p);                           1<text:line-break/>console.log('un');                        2<text:line-break/>p.then(message =&amp;gt; console.log(message));  4<text:line-break/>console.log('deux');                      3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@13008 {list_context: "colist", text: "Affiche `Promise`{nbsp}— ce n'est pas le résultat que l'on voit mais l'objet avec lequel interagir pour être prévenu de la mise à disposition du résultat.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13018 {list_context: "colist", text: "Affiche `\"un\"`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13028 {list_context: "colist", text: "Affiche `\"deux\"`{nbsp}— c'est parce que la ligne d'avant a mis en attente la &lt;&lt;anonymous-function,fonction anonyme>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13038 {list_context: "colist", text: "Affiche `\"promesse tenue\"` en dernier.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@13070 {list_context: "dlist", text: "`then(onSuccess[, onError])`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13072 {list_context: "dlist", text: "Fonction acceptant un _callback_ de résolution et\nun _callback_ de rejet (facultatif).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13088 {list_context: "dlist", text: "`catch(onError)`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13090 {list_context: "dlist", text: "Fonction acceptant un _callback_ de rejet.", blocks: 0}><text:line-break/>----<text:line-break/>const oddTime = (date) =&amp;gt; {<text:line-break/>  return new Promise((resolve, reject) =&amp;gt; {<text:line-break/>    parseInt(date.getTime() / 1000) % 2                         1<text:line-break/>      ? resolve('le nombre de secondes est impair :-)')<text:line-break/>      : reject('le nombre de secondes n\'est pas impair :-(');<text:line-break/>  });<text:line-break/>}<text:line-break/><text:line-break/>const now = new Date();<text:line-break/><text:line-break/>oddTime(now)<text:line-break/>  .then(msg =&amp;gt; console.log(msg), msg =&amp;gt; console.error(msg)); 2<text:line-break/><text:line-break/>oddTime(new Date(now.getTime() + 1000))                      3<text:line-break/>  .then(msg =&amp;gt; console.log(msg))                             4<text:line-break/>  .catch(msg =&amp;gt; console.error(msg))                          5<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@13140 {list_context: "colist", text: "La fonction `oddTime` accepte un argument de type &lt;&lt;date,Date>. Elle résout la promesse _positivement_ (`resolve`) si le nombre de secondes est impair, sinon elle résout la promesse _négativement_ (`reject`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13150 {list_context: "colist", text: "Utilisation de la forme compacte de `then` avec deux _callbacks_{nbsp}: un de succès (associé à `resolve`) et un d'échec (associé à `reject`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13160 {list_context: "colist", text: "On crée une nouvelle promesse, avec une date calée une seconde plus tard c'est histoire de s'assurer que les deux appels aboutissent à une résolution différente.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13170 {list_context: "colist", text: "Affiche `\"le nombre de secondes est impair{nbsp}:-)\"` si la résolution est positive.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@13180 {list_context: "colist", text: "Affiche `\"le nombre de secondes n'est pas impair{nbsp}:-(\"` si la résolution est négativement.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur Promise.<text:line-break/>developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise<text:line-break/><text:line-break/><text:line-break/>* www.w3.org/2001/tag/doc/promises-guide,* github.com/w3ctag/promises-guide<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>ECMAScript est un langage bien plus riche, complet et élégant qu&amp;#8217;il n&amp;#8217;y parait.</text:p><text:p>Ce chapitre nous a appris les différentes structures de langage<text:line-break/>communes à toutes les environnements comprenant ECMAScript.<text:line-break/>Cela s&amp;#8217;applique aussi bien à Node qu&amp;#8217;aux navigateurs web.<text:line-break/>Je vous invite à revenir à ce chapitre pour vous rafraîchir la mémoire<text:line-break/>mais aussi pour jouer avec les exemples afin de confirmer votre compréhension<text:line-break/>du langage.</text:p><text:p>Dans le chapitre suivant, nous allons<text:line-break/>relier ces apprentissages avec Node&amp;#160;— l&amp;#8217;interpréteur et l&amp;#8217;environnement<text:line-break/>d&amp;#8217;exécution JavaScript que nous avons appris à installer au<text:line-break/>chapitre 2.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* Qu&amp;#8217;est-ce que JavaScript, pour de vrai&amp;#160;?,* Comprendre l&amp;#8217;évolution de la spécification ECMAScript,* Manipuler les différentes structures du langage,* En savoir plus sur des éléments avancés du langage<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Jouer avec Node.js</text:h><text:p>On peut utiliser Node en parlant directement avec l&amp;#8217;interpréteur, en créant<text:line-break/>un script ou en programmant une application plus complexe.</text:p><text:p>Ce chapitre explique ce qu&amp;#8217;il faut savoir pour interagir avec l&amp;#8217;exécutable<text:line-break/>node, le fonctionnement des modules et les variables à disposition.</text:p><text:p>Nous en profiterons aussi pour passer en revue la variété de modules<text:line-break/>disponibles par défaut.</text:p><text:p>TBD.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:h text:outline-level="2">Interagir avec l&amp;#8217;interpréteur Node</text:h><text:p>L&amp;#8217;interpréteur Node est le programme qui nous permet d&amp;#8217;obtenir des résultats<text:line-break/>en échange d&amp;#8217;instructions ECMAScript.<text:line-break/>Le terminal est un autre programme qui nous permet de dialoguer avec<text:line-break/>un ordinateur et les programmes installés.</text:p><text:p>Le chapitre 2 détaille comment installer<text:line-break/>Node et un terminal sur son ordinateur.<text:line-break/>Il contient également des conseils pour utiliser Node depuis un<text:line-break/>navigateur web.<text:line-break/>Cela peut rendre l&amp;#8217;accès au terminal plus facile.</text:p><text:p>La suite de ce chapitre se base sur le principe que vous avez un terminal<text:line-break/>sous le nez, prêt·e à saisir des instructions ECMAScript.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:h text:outline-level="3">Afficher la version</text:h><text:p>Nous pourrions commencer par afficher la version de l&amp;#8217;interpréteur Node.<text:line-break/>Nous nous assurons ainsi que nous pouvons interagir avec<text:line-break/>l&amp;#8217;interpréteur Node avec succès et que l&amp;#8217;interpréteur<text:line-break/>est celui que nous attendons, dans la bonne version.<text:line-break/>La version de Node conditionne la liste des fonctionnalités du langage<text:line-break/>ECMAScript à disposition.</text:p><text:p>Le site web node.green liste le niveau de compatibilité<text:line-break/>des fonctionnalités ECMAScript.</text:p><text:p>Cette page vous aidera à comprendre quelles fonctionnalités utiliser en toute<text:line-break/>sécurité, version par version de Node.</text:p><text:p>Une fois votre terminal ouvert, saisissez la commande suivante&amp;#160;:</text:p><text:p>Le numéro de version de l&amp;#8217;interpréteur Node s&amp;#8217;affiche alors.<text:line-break/>Par exemple&amp;#160;: v10.3.0.</text:p><text:p>Si c&amp;#8217;est ce à quoi vous vous attendiez, nous pouvons passer à la suite.<text:line-break/>À l&amp;#8217;inverse, si une erreur se produit ou que le numéro de version<text:line-break/>n&amp;#8217;est pas celui que vous attendiez, jetez un œil à la<text:line-break/>section Installer Node.js du chapitre 2.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node --version<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-04<text:line-break/>$ cd $(nodebook dir chapter-04)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Avec un script</text:h><text:p>L&amp;#8217;exécution d&amp;#8217;un script Node est très certainement la pratique la plus courante.</text:p><text:p>L&amp;#8217;interpréteur Node lit le contenu d&amp;#8217;un fichier et exécute les instructions.<text:line-break/>L&amp;#8217;interpréteur reste actif jusqu&amp;#8217;à ce que toutes les instructions<text:line-break/>soient traitées.</text:p><text:p>Dans cet exemple, le fichier script.js contient deux instructions.<text:line-break/>Node les interprète lorsqu&amp;#8217;on lui passe le chemin du fichier en paramètre<text:line-break/>dans une invite de commande&amp;#160;:</text:p><text:p>Node interprète le contenu du fichier script.js.<text:line-break/>Il nous rend ensuite la main pour exécuter d&amp;#8217;autres commandes.</text:p><text:p>On apprendra à passer des arguments d&amp;#8217;exécution<text:line-break/>dans la section module process.</text:p><text:p>Démarrer un processus Node a un coût incompressible en ressources machine&amp;#160;:<text:line-break/>environ 30Mo de RAM et environ 40 millisecondes de CPU avant d&amp;#8217;exécuter nos<text:line-break/>instructions.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>console.log(2 + 2);<text:line-break/>console.log('abc'.toLocaleUpperCase());<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node script.js<text:line-break/>4<text:line-break/>ABC<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Avec l&amp;#8217;invite de commande interactive (REPL)</text:h><text:p>L&amp;#8217;invite de commande interactive est une manière de parler<text:line-break/>à l&amp;#8217;interpréteur Node sans écrire de fichier.</text:p><text:p>J&amp;#8217;utilise l&amp;#8217;invite de commande pour tester des idées et des éléments de syntaxe<text:line-break/>quand je ne m&amp;#8217;en rappelle plus.</text:p><text:p>Le mode interactif s&amp;#8217;active en exécutant Node sans aucun autre argument&amp;#160;:</text:p><text:p>On notera au passage que l&amp;#8217;invite est préfixée par le caractère &amp;gt;<text:line-break/>afin de marquer notre présence dans un environnement différent.<text:line-break/>On retrouve un comportement similaire dans les invites de commande<text:line-break/>des langages Ruby (irb), Python (python) et PHP (php -a)</text:p><text:p>Lorsque nous sommes dans l&amp;#8217;interpréteur interactif,<text:line-break/>toutes les expressions sont interprétées par Node&amp;#160;:</text:p><text:p>Des expressions sont réservées pour obtenir de l&amp;#8217;aide, sortir de l&amp;#8217;interpréteur<text:line-break/>ou simplement pour nettoyer ce que l&amp;#8217;on voit à l&amp;#8217;écran.<text:line-break/>Pour cela on fait appel à l&amp;#8217;instruction .help&amp;#160;:</text:p><text:p>Ces touches ou combinaisons de touches sont utiles pour naviguer dans<text:line-break/>l&amp;#8217;invite de commande&amp;#160;:</text:p><text:p>La touche  complètera automatiquement la saisie,<text:line-break/>offrira une liste de choix de complétion&amp;#160;:</text:p><text:p>On notera que l&amp;#8217;utilisation de  après un caractère point (.)<text:line-break/>listera l&amp;#8217;intégralité des propriétés de cet objet.</text:p><text:p>L&amp;#8217;utilisation de la touche  affichera toutes les variables connues<text:line-break/>de la session interactive en cours.<text:line-break/>Il suffit d&amp;#8217;appuyer une ou deux fois sur la touche <text:line-break/>dans une invite vide&amp;#160;:</text:p><text:p>C&amp;#8217;est un excellent moyen de découvrir des éléments du langage qui nous<text:line-break/>étaient inconnus jusque-là.</text:p><text:p>La sortie de l&amp;#8217;invite de commande se fait à l&amp;#8217;aide de<text:line-break/>l&amp;#8217;utilisation répétée de la combinaison de touches <text:line-break/>(ou  sous macOS).<text:line-break/>On revient ainsi à l&amp;#8217;état initial où l&amp;#8217;on était avant de<text:line-break/>saisir la commande node&amp;#160;:</text:p><text:p>Ce même résultat s&amp;#8217;obtient en saisissant .exit<text:line-break/>ou en utilisant la combinaison de touches  (ou  sous macOS).</text:p><text:p>La variable \_ est spécifique à l&amp;#8217;invite de commande Node.<text:line-break/>Elle contient systématiquement le résultat retourné par<text:line-break/>la dernière évaluation de code&amp;#160;:</text:p><text:p>Cette variable magique est équivalente à la variable $_ dans la console<text:line-break/>des outils de développement des navigateurs web.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; <text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; 2 + 2<text:line-break/>4<text:line-break/>&amp;gt; "abc".toLocaleUpperCase()<text:line-break/>'ABC'<text:line-break/>&amp;gt; <text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; .help<text:line-break/>.break    Sometimes you get stuck, this gets you out<text:line-break/>.clear    Alias for .break<text:line-break/>.editor   Enter editor mode<text:line-break/>.exit     Exit the repl<text:line-break/>.help     Print this help message<text:line-break/>.load     Load JS from a file into the REPL session<text:line-break/>.save     Save all evaluated commands in this REPL session to a file<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* la combinaison de touches  annule<text:line-break/>la saisie de la ligne en cours&amp;#160;— c&amp;#8217;est  sous macOS&amp;#160;;,* les touches flèche haut () et flèche bas<text:line-break/>() aident à naviguer dans l&amp;#8217;historique des commandes&amp;#160;;,* la touche tabulation () tente de compléter la saisie avec une<text:line-break/>expression ou variable connue.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; conso<text:line-break/>&amp;gt; console<text:line-break/>&amp;gt; console.<text:line-break/>...<text:line-break/>console.assert                console.clear                 console.count<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; <text:line-break/>Array                         Boolean                       Date<text:line-break/>Error                         EvalError                     Function<text:line-break/>Infinity                      JSON                          Math<text:line-break/>NaN                           Number                        Object<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; <text:line-break/>(To exit, press ^C again or type .exit)<text:line-break/>&amp;gt; <text:line-break/>$ <text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node<text:line-break/>&amp;gt; 2 + 2<text:line-break/>4<text:line-break/>&amp;gt; _ + 2<text:line-break/>6<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-04<text:line-break/>$ cd $(nodebook dir chapter-04)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Les modules de base</text:h><text:p>Les modules de base étendent le champ d&amp;#8217;action de Node.<text:line-break/>Ils servent d&amp;#8217;interface pour communiquer avec le système d&amp;#8217;exploitation,<text:line-break/>le système de fichier, des ressources HTTP et des connexions réseau, entre autres.<text:line-break/>Ces modules sont inclus avec chaque installation de Node.<text:line-break/>On peut donc en bénéficier sans effort supplémentaire.</text:p><text:p>Le chargement d&amp;#8217;un module de base s&amp;#8217;effectue en passant son identifiant<text:line-break/>à la fonction require().<text:line-break/>Cette fonction retourne alors un objet avec un certain nombre de propriétés et<text:line-break/>de fonctions.</text:p><text:p>Ainsi, on chargera le module fs (pour file system&amp;#160;— système de fichiers)<text:line-break/>afin d&amp;#8217;interagir avec les fichiers et les répertoires présents sur l&amp;#8217;ordinateur&amp;#160;:</text:p><text:p>Ces modules de base représentent la pierre angulaire de nos applications Node.<text:line-break/>Ils fournissent le nécessaire pour tout faire&amp;#160;!<text:line-break/>On apprendra à étendre encore plus le champ des possibles dans<text:line-break/>le chapitre 5<text:line-break/>grâce aux modules npm.</text:p><text:p>Les modules de base changent au fil du temps&amp;#160;:<text:line-break/>les nouvelles versions de Node ajoutent, corrigent et complètent les modules et<text:line-break/>fonctions existantes.<text:line-break/>La documentation officielle de Node reflète ces changements et<text:line-break/>affiche un indice de stabilité pour savoir à quoi s&amp;#8217;en tenir.</text:p><text:p>Exceptionnellement, un module de base (ou une de ses fonctions) peut être supprimé.<text:line-break/>L&amp;#8217;équipe de Node annonce ces changements en dépréciant le module en question&amp;#160;:<text:line-break/>le code reste en place et sera supprimé dans une version ultérieure.<text:line-break/>En général, c&amp;#8217;est une question de mois voire d&amp;#8217;années.<text:line-break/>On verra plus loin comment afficher les alertes de dépréciation.</text:p><text:p>Node communique un indice de stabilité pour les modules de base.<text:line-break/>Cette échelle se décompose en trois niveaux&amp;#160;:</text:p><text:p>L&amp;#8217;indice est parfois appliqué à des fonctions dont les attentes<text:line-break/>changeraient d&amp;#8217;une version à l&amp;#8217;autre de Node.</text:p><text:p>Les sections suivantes illustrent des usages courants des modules de base<text:line-break/>pour mieux comprendre quoi en attendre et comment les utiliser.</text:p><text:h text:outline-level="3">console : déboguer rapidement des variables</text:h><text:p>L&amp;#8217;objet console est une boîte à outils pour afficher<text:line-break/>ce qu&amp;#8217;il se passe à un moment donné dans un de nos scripts.</text:p><text:p>La fonction écrit les messages et la valeur des variables dans la<text:line-break/>sortie standard du terminal&amp;#160;:</text:p><text:p>Node charge automatiquement le module pour nous et<text:line-break/>le rend utilisable à tout moment à travers la variable globale console.</text:p><text:p>Nul besoin de charger le module manuellement avec require('console').</text:p><text:p>console.log sait interpoler les valeurs passées en argument avec le marqueur %s.<text:line-break/>C&amp;#8217;est utile pour structurer un message complexe en gardant les variables à part&amp;#160;:</text:p><text:p>%s ne sait afficher que des chaînes de caractères.<text:line-break/>D&amp;#8217;autres marqueurs savent afficher d&amp;#8217;autres types de données&amp;#160;:</text:p><text:p>L&amp;#8217;objet console est originaire du monde des navigateurs web.<text:line-break/>C&amp;#8217;est un onglet de la boîte à outils de développement.<text:line-break/>On peut y lire des messages placés dans le code JavaScript de la page web.<text:line-break/>On l&amp;#8217;utilise aussi pour inspecter et interagir la page avec du code.</text:p><text:p>La documentation du module console est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/console.html</text:p><text:p><text:line-break/>----<text:line-break/>let count = 0;<text:line-break/><text:line-break/>count++; count++; count++;<text:line-break/><text:line-break/>console.log('Valeur de count :', count);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node console/log.js<text:line-break/>Valeur de count : 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log('Soupe %s et carottes', 'lentilles');  1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14386 {list_context: "colist", text: "Affiche `Soupe lentilles et carottes`.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14404 {list_context: "dlist", text: "`%d`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14406 {list_context: "dlist", text: "Affiche la valeur en tant que &lt;&lt;../chapter-03/index.adoc#number,nombre>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14420 {list_context: "dlist", text: "`%j`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14422 {list_context: "dlist", text: "Affiche la valeur en tant que &lt;&lt;../chapter-03/index.adoc#json,structure JSON>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14436 {list_context: "dlist", text: "`%O`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14438 {list_context: "dlist", text: "Affiche l'objet avec une profondeur maximum de 4 éléments.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14452 {list_context: "dlist", text: "`%o`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14454 {list_context: "dlist", text: "Idem que `%O` mais sur une profondeur maximum de 2 éléments.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14476 {list_context: "dlist", text: "`console.log()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14478 {list_context: "dlist", text: "Affichage de messages et de variables dans le terminal.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14492 {list_context: "dlist", text: "`console.error()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14494 {list_context: "dlist", text: "Comportement identique à `console.log()` mais à réserver aux erreurs.\nLa fonction écrit dans la &lt;&lt;process.std,sortie erreur>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14510 {list_context: "dlist", text: "`console.dir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14512 {list_context: "dlist", text: "Affichage dédié aux objets et tableaux.\nOn peut paramétrer la profondeur d'affichage\n(par défaut, jusqu'à 2 niveaux).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14530 {list_context: "dlist", text: "`console.group()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14532 {list_context: "dlist", text: "Regroupe visuellement les appels à `console.log` et `console.error`. +\nUn groupe se clôt avec `console.groupEnd()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14548 {list_context: "dlist", text: "`console.time()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14550 {list_context: "dlist", text: "Démarre un chronomètre en lui attribuant un nom. +\nLe chronomètre s'arrête et sa durée s'affiche avec `console.timeEnd()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14566 {list_context: "dlist", text: "classe `Console`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14568 {list_context: "dlist", text: "Crée un objet similaire à `console` mais en dirigeant l'affichage ailleurs\nque vers les &lt;&lt;process.std,flux standards>>.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">path : manipuler des chemins de fichier</text:h><text:p>Le module path offre un ensemble de fonctions et de propriétés pour<text:line-break/>manipuler et construire des chemins vers des fichiers et répertoires.</text:p><text:p>Ces opérations permettent à notre code de fonctionner de manière identique<text:line-break/>sur des systèmes d&amp;#8217;exploitation exprimant les chemins de manière différente&amp;#160;—<text:line-break/>comme Linux et Windows par exemple.</text:p><text:p>Certaines fonctions comme path.join tiennent compte de la nature du système<text:line-break/>d&amp;#8217;exploitation.<text:line-break/>Le résultat d&amp;#8217;un même appel de fonction sera différent mais correspondra<text:line-break/>à la même intention&amp;#160;:</text:p><text:p>On constate que path.join assemble les chemins en utilisant la valeur de<text:line-break/>path.sep.<text:line-break/>Ce qui est bien pour nous, c&amp;#8217;est qu&amp;#8217;on n&amp;#8217;a pas besoin d&amp;#8217;y penser&amp;#160;:<text:line-break/>Node se charge de la compatibilité avec le système d&amp;#8217;exploitation.</text:p><text:p>La différence de résultats se précise un peu plus lorsque l&amp;#8217;on tente de calculer<text:line-break/>des chemins complets, relatifs à notre emplacement actuel&amp;#160;:</text:p><text:p>Les résultats produits par les fonctions du module path<text:line-break/>se combinent particulièrement bien avec celles du module fs, pour<text:line-break/>accéder aux fichiers en question.</text:p><text:p>On peut avoir besoin de manipuler des chemins Windows avec du code<text:line-break/>exécuté sur un autre système d&amp;#8217;exploitation comme Linux et macOS.<text:line-break/>C&amp;#8217;est exactement ce que proposent les fonctions de path.win32.</text:p><text:p>L&amp;#8217;objet path.posix fonctionne de la même manière pour des chemins Linux.</text:p><text:p>La documentation du module path est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/path.html</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const path = require('path');<text:line-break/><text:line-break/>console.log(path.dirname('/tmp/package.json'));           1<text:line-break/>console.log(path.basename('/tmp/package.json'));          2<text:line-break/>console.log(path.extname('/tmp/package.json'));           3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14682 {list_context: "colist", text: "Affiche `/tmp`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14692 {list_context: "colist", text: "Affiche `package.json`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14702 {list_context: "colist", text: "Affiche `.json`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const path = require('path');<text:line-break/><text:line-break/>console.log(path.sep);                          1<text:line-break/>console.log(path.join('tmp', 'package.json'));  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14744 {list_context: "colist", text: "Affiche `/`{nbsp}— `\\` sous Windows.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14754 {list_context: "colist", text: "Affiche `tmp/package.json`{nbsp}— `tmp\\package.json` sous Windows.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const path = require('path');<text:line-break/><text:line-break/>const diff = path.relative('/tmp/package.json', '/tmp/source');<text:line-break/><text:line-break/>console.log(diff);                                                1<text:line-break/>console.log(path.resolve('/tmp/package.json', '..', './source')); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14798 {list_context: "colist", text: "Affiche `../source`{nbsp}— `..\\source` sous Windows{nbsp}— c'est le chemin à parcourir pour aller du premier chemin au second chemin.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14808 {list_context: "colist", text: "Affiche `/tmp/source`{nbsp}— `C:\\tmp\\source` sous Windows{nbsp}— on constate que le chemin _résolu_ est absolu, et intègre la lettre du lecteur sous Windows.", blocks: 0}><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14828 {list_context: "dlist", text: "`path.basename()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14830 {list_context: "dlist", text: "Retourne le nom de fichier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14844 {list_context: "dlist", text: "`path.dirname()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14846 {list_context: "dlist", text: "Retourne le nom de répertoire.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14860 {list_context: "dlist", text: "`path.extname()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14862 {list_context: "dlist", text: "Retourne l'extension d'un fichier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14876 {list_context: "dlist", text: "`path.isAbsolute()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14878 {list_context: "dlist", text: "Indique si le chemin est _absolu_ ou non.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14892 {list_context: "dlist", text: "`path.join()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14894 {list_context: "dlist", text: "Assemble des bouts de chemin.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14908 {list_context: "dlist", text: "`path.parse()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14910 {list_context: "dlist", text: "Retourne des informations liées à la compréhension d'un chemin\n(extension, nom de fichier, nom de répertoire).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14926 {list_context: "dlist", text: "`path.relative()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14928 {list_context: "dlist", text: "Calcule le chemin relatif entre un chemin source et un chemin de destination.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14942 {list_context: "dlist", text: "`path.resolve()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14944 {list_context: "dlist", text: "Calcule un chemin absolu à partir de plusieurs bouts de chemin.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14958 {list_context: "dlist", text: "attribut `path.sep`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14960 {list_context: "dlist", text: "Retourne le caractère servant de séparateur de répertoires\npour le système d'exploitation sur lequel est exécuté le script.\nPar exemple `/` pour Linux et macOS{nbsp}; `\\` pour Windows.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const {join,resolve} = require('path').win32; 1<text:line-break/><text:line-break/>console.log(join('tmp', 'package.json'));     2<text:line-break/>console.log(resolve('C:\\tmp', '../etc'));       3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15028 {list_context: "colist", text: "On déstructure les fonctions depuis la variante `win32` du module `path`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15038 {list_context: "colist", text: "Affiche `tmp\\package.json`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15048 {list_context: "colist", text: "Affiche `C:\\etc`.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">url : manipuler des URL</text:h><text:p>Le module url offre des outils pour interpréter des URL, les transformer<text:line-break/>et les assembler à nouveau sous forme de chaîne de caractères.<text:line-break/>La variable URL (en majuscules) est disponible de manière globale.</text:p><text:p>La classe URL que nous utilisons dans Node est la même que dans les<text:line-break/>navigateurs web modernes.<text:line-break/>Son fonctionnement suit le standard url.spec.whatwg.org.</text:p><text:p>L&amp;#8217;objet retourné par le constructeur de URL est modifiable.<text:line-break/>Il est ainsi possible de modifier les parties de l&amp;#8217;URL qui nous intéressent<text:line-break/>et de récupérer une URL sous forme d&amp;#8217;une chaîne de caractères&amp;#160;:</text:p><text:p>La fonction format() va plus loin que url.toString().<text:line-break/>Ses options contrôlent plus finement ce qui sera conservé ou retiré lors<text:line-break/>de la conversion en chaîne de caractères&amp;#160;:</text:p><text:p>Le constructeur URL accepte une URL de référence en second argument.<text:line-break/>Cette adresse résout un chemin absolu à partir du premier argument&amp;#160;:</text:p><text:p>Manipuler une URL est plus aisé lorsqu&amp;#8217;elle est structurée sous forme d&amp;#8217;objet.<text:line-break/>Les paramètres ne sont pas en reste avec l&amp;#8217;attribut searchParams&amp;#160;:</text:p><text:p>La documentation du module url est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/url.html</text:p><text:p><text:line-break/>----<text:line-break/>const example = new URL('https://oncletom.io/node.js/');<text:line-break/><text:line-break/>console.log(example.hostname);  1<text:line-break/>console.log(example.pathname);  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15126 {list_context: "colist", text: "Affiche `oncletom.io`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15136 {list_context: "colist", text: "Affiche `/node.js/`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const example = new URL('https://oncletom.io/node.js/');<text:line-break/>example.pathname = '/';<text:line-break/>example.hash = '#top';<text:line-break/><text:line-break/>console.log(example.toString());  1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15194 {list_context: "colist", text: "Affiche `https://oncletom.io/#top`{nbsp}— le chemin et le fragment ont été modifiées.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const {format} = require('url');<text:line-break/><text:line-break/>const example = new URL('https://user:password@oncletom.io/#top?test=1');<text:line-break/>const options = {<text:line-break/>  auth: false,<text:line-break/>  search: false,<text:line-break/>  fragment: false,<text:line-break/>};<text:line-break/><text:line-break/>console.log(format(example, options));  1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15234 {list_context: "colist", text: "Affiche `https://oncletom.io/`{nbsp}— les identifiants, l'ancre et les arguments ont été retirés par la fonction `format()`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const url1 = new URL('/node.js/', 'https://oncletom.io');<text:line-break/>const url2 = new URL('../', 'https://oncletom.io/node.js/');<text:line-break/><text:line-break/>console.log(url1.toString()); 1<text:line-break/>console.log(url2.toString()); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15276 {list_context: "colist", text: "Affiche `https://oncletom.io/node.js/`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15286 {list_context: "colist", text: "Affiche `https://oncletom.io/`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15304 {list_context: "dlist", text: "`url.parse()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15306 {list_context: "dlist", text: "Transforme une chaîne de caractères en un objet utilisable avec la fonction\n&lt;&lt;http.request,`http.request()`>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15322 {list_context: "dlist", text: "classe `URL`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15324 {list_context: "dlist", text: "Représentation de la structure d'une URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15338 {list_context: "dlist", text: "classe `URLSearchParams`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15340 {list_context: "dlist", text: "Représentation des paramètres d'URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15362 {list_context: "dlist", text: "`url.format()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15364 {list_context: "dlist", text: "Transforme un objet `URL` en chaîne de caractères grâce à des contrôles fins.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15376 {list_context: "dlist", text: "`url.toString()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15378 {list_context: "dlist", text: "Transforme l'objet `URL` en chaîne de caractères.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15390 {list_context: "dlist", text: "attribut `url.hash`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15392 {list_context: "dlist", text: "Fragment de l'URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15406 {list_context: "dlist", text: "attribut `url.hostname`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15408 {list_context: "dlist", text: "Nom de l'hôte.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15422 {list_context: "dlist", text: "attribut `url.pathname`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15424 {list_context: "dlist", text: "Chemin d'accès à la ressource.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15438 {list_context: "dlist", text: "attribut `url.protocol`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15440 {list_context: "dlist", text: "Protocole spécifié.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15454 {list_context: "dlist", text: "attribut `url.search`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15456 {list_context: "dlist", text: "Paramètres de l'URL, caractère `?` inclus.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15470 {list_context: "dlist", text: "attribut `url.searchParams`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15472 {list_context: "dlist", text: "Objet permettant de manipuler les paramètres.\nVoir ci-après.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const example = new URL('https://oncletom.io/');<text:line-break/>example.searchParams.set('search', 'node.js');<text:line-break/><text:line-break/>console.log(example.toString());               1<text:line-break/>console.log(example.searchParams.toString());  2<text:line-break/><text:line-break/>example.searchParams.delete('search');<text:line-break/>console.log(example.toString());               3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15522 {list_context: "colist", text: "Affiche `https://oncletom.io/?search=node.js`{nbsp}— représentation de l'URL complète.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15532 {list_context: "colist", text: "Affiche `search=node.js`{nbsp}— représentation des paramètres seulement.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15542 {list_context: "colist", text: "Affiche `https://oncletom.io/`{nbsp}— le paramètre `search` et sa valeur ont été supprimés de l'URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15560 {list_context: "dlist", text: "`searchParams.append()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15562 {list_context: "dlist", text: "Ajoute un paramètre à la suite de l'URL.\nCette fonction permet d'ajouter plusieurs fois une même clé, peu importe sa valeur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15578 {list_context: "dlist", text: "`searchParams.delete()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15580 {list_context: "dlist", text: "Supprime un paramètre d'URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15594 {list_context: "dlist", text: "`searchParams.get()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15596 {list_context: "dlist", text: "Retoure la valeur d'un paramètre donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15610 {list_context: "dlist", text: "`searchParams.getAll()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15612 {list_context: "dlist", text: "Retourne toutes les valeurs d'un paramètre donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15626 {list_context: "dlist", text: "`searchParams.has()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15628 {list_context: "dlist", text: "Retourne `true` si les paramètres contiennent une clé donnée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15642 {list_context: "dlist", text: "`searchParams.set()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15644 {list_context: "dlist", text: "Assigne une valeur à un paramètre d'URL.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15658 {list_context: "dlist", text: "`searchParams.toString()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15660 {list_context: "dlist", text: "Retourne une représentation de l'objet sous forme d'une chaîne\nde caractères exploitable dans une URL.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">fs : manipuler le système de fichiers</text:h><text:p>Le module fs est un incontournable.<text:line-break/>On y a recours dès que l&amp;#8217;on a besoin de lire ou d&amp;#8217;écrire dans un fichier.<text:line-break/>On s&amp;#8217;en sert également pour créer, déplacer ou supprimer des fichiers<text:line-break/>et des répertoires.</text:p><text:p>__filename est une chaîne de caractères faisant référence au fichier actuel.<text:line-break/>__dirname fait référence au répertoire du fichier actuel.</text:p><text:p>Ces variables sont utiles pour opérer sur<text:line-break/>des chemins relatifs au fichier actuel.</text:p><text:p>Dans l&amp;#8217;exemple précédent, nous avons parcouru le contenu d&amp;#8217;un fichier.<text:line-break/>fs.readdir() parcourt un répertoire&amp;#160;:</text:p><text:p>En l&amp;#8217;exécutant, nous obtenons ces résultats&amp;#160;:</text:p><text:p>Dans les environnements UNIX, le . fait référence au répertoire courant<text:line-break/>et .. au répertoire parent.<text:line-break/>C&amp;#8217;est le cas avec Node également.<text:line-break/>Par la notion de courant fait référence<text:line-break/>à l&amp;#8217;emplacement depuis lequel nous appelons l&amp;#8217;exécutable node.<text:line-break/>Changeons de répertoire pour voir&amp;#160;:</text:p><text:p>Les chemins relatifs sont<text:line-break/>relatifs à l&amp;#8217;emplacement depuis lequel on exécute la commande node.<text:line-break/>__dirname et de __filename sont déterminés par rapport<text:line-break/>à l&amp;#8217;emplacement du script qui fait référence à ces variables.</text:p><text:p>Puisque les opérations liées au système de fichier ne sont pas immédiates<text:line-break/>alors la majorité des fonctions de ce module est asynchrone.<text:line-break/>Leur rapidité d&amp;#8217;exécution varie en fonction du support de stockage utilisé<text:line-break/>(à disque, à mémoire), de son usure et de la capacité de traitement du CPU<text:line-break/>de l&amp;#8217;ordinateur.</text:p><text:p>Cela veut aussi dire que les erreurs sont obtenues de manière asynchrone&amp;#160;:</text:p><text:p>On peut articuler plusieurs opérations entre elles.<text:line-break/>Et utiliser le module path pour construire des chemins robustes<text:line-break/>qui fonctionnent avec tous les systèmes d&amp;#8217;exploitation, sans effort.</text:p><text:p>L&amp;#8217;exemple suivant crée un répertoire dans un dossier temporaire,<text:line-break/>effectue une copie de fichier sous un autre nom et liste le contenu du répertoire<text:line-break/>une fois la copie effectuée&amp;#160;:</text:p><text:p>Le script Node exécuté a le droit d&amp;#8217;accéder, d&amp;#8217;altérer et de supprimer<text:line-break/>au même titre que l&amp;#8217;utilisateur système qui lance le script.</text:p><text:p>Ce n&amp;#8217;est pas grave si on exécute du code écrit soi-même.<text:line-break/>Il faut être vigilant·e et pouvoir faire confiance si le code exécuté provient<text:line-break/>d&amp;#8217;une autre personne.</text:p><text:p>Si l&amp;#8217;exemple précédent semble agréable à lire, il révèle deux points de vigilance.</text:p><text:p>J&amp;#8217;ai écrit le code de manière optimiste, pour des questions de lisibilité.<text:line-break/>Pourtant à chaque opération, il y a une possibilité d&amp;#8217;erreur à gérer&amp;#160;:<text:line-break/>de la création du répertoire jusqu&amp;#8217;à la lecture des fichiers de ce répertoire.<text:line-break/>Il faudrait vérifier l&amp;#8217;argument error à chaque fois et décider quoi faire<text:line-break/>en fonction de la nature du problème.</text:p><text:p>Je vous invite à modifier le code de l&amp;#8217;exemple précédent<text:line-break/>pour afficher la valeur des variables error avec à l&amp;#8217;aide des<text:line-break/>fonctions du module console.<text:line-break/>Certaines erreurs apparaissent quand invoque le script une deuxième fois.</text:p><text:p>L&amp;#8217;imbrication des fonctions de callback fait qu&amp;#8217;il est<text:line-break/>difficile d&amp;#8217;interrompre une suite de callbacks.<text:line-break/>Une bonne piste serait d&amp;#8217;appliquer l'utilitaire promisify<text:line-break/>sur les fonctions du module fs créer une<text:line-break/>chaine de promesses.<text:line-break/>Nous apprendrons à faire ça dans la section du module util.</text:p><text:p>Fichier qui fait référence à un autre fichier&amp;#160;— c&amp;#8217;est comme un alias.<text:line-break/>Toutes les modifications effectuées sur le lien symbolique sont<text:line-break/>répercutées sur le fichier d&amp;#8217;origine.</text:p><text:p>En savoir plus sur fr.wikipedia.org/wiki/Lien_symbolique.</text:p><text:p>La documentation du module fs est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/fs.html</text:p><text:p><text:line-break/>----<text:line-break/>const fs = require('fs');<text:line-break/>const path = require('path');<text:line-break/>const filename = path.join(__dirname, 'package.json');<text:line-break/><text:line-break/>fs.readFile(filename, (err, content) =&amp;gt; {   1<text:line-break/>  console.log(String(content));             2<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15742 {list_context: "colist", text: "Lorsque la lecture du fichier aboutit, la &lt;&lt;callbacks,fonction de callback>> est appelée avec 2 paramètres{nbsp}: un objet d'erreur et le contenu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15752 {list_context: "colist", text: "Affiche le contenu d'un fichier `package.json`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>console.log(__filename);                      1<text:line-break/>console.log(module.filename === __filename);  2<text:line-break/><text:line-break/>console.log(__dirname);                       3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15812 {list_context: "colist", text: "Affiche `/.../chapter-04/examples/dirname-filename.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15822 {list_context: "colist", text: "Affiche `true`{nbsp}— ça ne serait pas un _raccourci_ sinon{nbsp};-).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15832 {list_context: "colist", text: "Affiche `/.../chapter-04/examples`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {readdir} = require('fs');<text:line-break/><text:line-break/>readdir('.', (error, files) =&amp;gt; console.log(files));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node fs/ls.js<text:line-break/>[ '.eslintrc.yaml',<text:line-break/>  'console',<text:line-break/>  'debug.txt',<text:line-break/>  'deprecation-warning.js',<text:line-break/>  'process/env.js',<text:line-break/>  ...<text:line-break/>  'util' ]<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ cd ../..<text:line-break/>$ node chapter-04/examples/fs/ls.js<text:line-break/>[ '.eslintignore',<text:line-break/>  'README.md',<text:line-break/>  'chapter-01'<text:line-break/>  'chapter-02'<text:line-break/>  ...<text:line-break/>  'tests' ]<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const fs = require('fs');<text:line-break/><text:line-break/>fs.rmdir(__dirname, (error) =&amp;gt; console.error(error.message)); 1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15918 {list_context: "colist", text: "Indique que la suppression n'a pas abouti car le répertoire en question n'est pas vide{nbsp}— et pour cause, c'est celui qui contient notre fichier d'exemple.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {tmpdir} = require('os');<text:line-break/>const {join} = require('path');<text:line-break/>const fs = require('fs');<text:line-break/><text:line-break/>const dest_dir = join(tmpdir(), 'test');          1<text:line-break/><text:line-break/>fs.mkdir(dest_dir, (error) =&amp;gt; {                   2<text:line-break/>  const dest = join(dest_dir, 'example-copy.js');<text:line-break/><text:line-break/>  fs.copyFile(__filename, dest, (error) =&amp;gt; {      3<text:line-break/>    if (error === null) {<text:line-break/>      console.log(`La copie vers ${dest} s'est bien passée.`);<text:line-break/>    }<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@15964 {list_context: "colist", text: "On assemble un chemin composé à partir du &lt;&lt;os,répertoire temporaire>> fourni par le système d'exploitation.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15974 {list_context: "colist", text: "Crée le répertoire en question.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@15984 {list_context: "colist", text: "Copie le contenu de ce script d'exemple vers le répertoire en question en lui attribuant un nouveau nom.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16030 {list_context: "dlist", text: "`fs.appendFile()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16032 {list_context: "dlist", text: "Ajoute un contenu à la suite d'un fichier existant.\nLe fichier sera créé le cas échéant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16048 {list_context: "dlist", text: "`fs.copyFile()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16050 {list_context: "dlist", text: "Copie un fichier depuis un emplacement vers un autre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16064 {list_context: "dlist", text: "`fs.mkdir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16066 {list_context: "dlist", text: "Crée un nouveau répertoire.\nLe répertoire parent doit déjà exister.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16082 {list_context: "dlist", text: "`fs.readdir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16084 {list_context: "dlist", text: "Obtient la liste des fichiers et dossiers contenus dans un répertoire donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16098 {list_context: "dlist", text: "`fs.readFile()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16100 {list_context: "dlist", text: "Lit le contenu d'un fichier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16114 {list_context: "dlist", text: "`fs.rename()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16116 {list_context: "dlist", text: "Renomme un fichier ou un répertoire.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16130 {list_context: "dlist", text: "`fs.rmdir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16132 {list_context: "dlist", text: "Supprime un répertoire.\nIl doit être vide.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16148 {list_context: "dlist", text: "`fs.stat()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16150 {list_context: "dlist", text: "Retourne des informations à propos d'un chemin d'accès{nbsp}:\nest-ce que c'est un fichier, un répertoire, un lecteur, un lien symbolique etc.\nDes attributs clarifient la taille du fichier (en octets), l'identifiant\nsystème de son propriétaire, la date de création/modification/dernier accès etc.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16170 {list_context: "dlist", text: "`fs.symlink()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16172 {list_context: "dlist", text: "Crée un lien symbolique vers un emplacement.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16186 {list_context: "dlist", text: "`fs.truncate()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16188 {list_context: "dlist", text: "Raccourcit le contenu d'un fichier à une longueur donnée (en nombre d'octets).\nSi aucun argument n'est donné, le contenu du fichier est remis à zéro.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16204 {list_context: "dlist", text: "`fs.createReadStream()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16206 {list_context: "dlist", text: "Crée un &lt;&lt;stream,flux de lecture>>, pour lire un fichier en continu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16220 {list_context: "dlist", text: "`fs.createWriteStream()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16222 {list_context: "dlist", text: "Crée un &lt;&lt;stream,flux d'écriture>>, pour écrire en continu dans un fichier.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">events : programmer des événements</text:h><text:p>Le module events contient le nécessaire pour créer du code communiquant<text:line-break/>à l&amp;#8217;aide de fonctions d&amp;#8217;écoute et d&amp;#8217;émission de messages.<text:line-break/>C&amp;#8217;est comme un centre de tri postal mais pour Node avec des variables<text:line-break/>en guise de courriers.</text:p><text:p>Un événement se décompose en 3 parties&amp;#160;: les fonctions d&amp;#8217;écoute,<text:line-break/>les émissions de message et un objet EventEmitter<text:line-break/>qui fait le lien entre les deux.</text:p><text:p>Contrairement à ce que l&amp;#8217;on pourrait penser, le langage ECMAScript ne possède<text:line-break/>aucune structure de gestion d&amp;#8217;événements.</text:p><text:p>S&amp;#8217;il est possible de réagir à des événements dans les navigateurs web,<text:line-break/>c&amp;#8217;est grâce à la spécification DOM&amp;#160;— l&amp;#8217;API JavaScript pour manipuler<text:line-break/>une structure de document HTML.</text:p><text:p>Pour en savoir plus&amp;#160;: developer.mozilla.org/fr/docs/Web/Events.</text:p><text:p>On peut décider d&amp;#8217;écouter un événement une seule fois avec emitter.once()&amp;#160;:</text:p><text:p>La fonction emitter.remove débranche une fonction d&amp;#8217;écoute selon<text:line-break/>les critères de notre choix&amp;#160;:</text:p><text:p>On remarquera qu&amp;#8217;il faut pouvoir faire référence à la fonction d&amp;#8217;écoute<text:line-break/>afin de la débrancher.</text:p><text:p>Une utilisation alternative des événements consiste à étendre la classe EventEmitter.<text:line-break/>Une fois étendue, notre nouvelle classe bénéficiera des méthodes .on() etc.</text:p><text:p>Ce mécanisme est utile pour cacher de la complexité applicative,<text:line-break/>pour exécuter une fonction plusieurs fois lors d&amp;#8217;un événement donné,<text:line-break/>pour exposer une surface d&amp;#8217;action compréhensible,<text:line-break/>tout en rendant notre code communiquant vers l&amp;#8217;extérieur.</text:p><text:p>Plusieurs modules Node utilisent les événements pour nous permettre d&amp;#8217;y<text:line-break/>réagir de manière totalement optionnelle.<text:line-break/>Tout ce que l&amp;#8217;on vient d&amp;#8217;expliquer s&amp;#8217;applique à l&amp;#8217;identique<text:line-break/>au module process, au module child_process<text:line-break/>ainsi qu&amp;#8217;au module http.</text:p><text:p>La documentation du module events est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/events.html</text:p><text:p><text:line-break/>----<text:line-break/>const EventEmitter = require('events');<text:line-break/>const emitter = new EventEmitter();               1<text:line-break/><text:line-break/>emitter.on('date', (date) =&amp;gt; {                    2<text:line-break/>  console.log('Année : %d', date.getFullYear());<text:line-break/>});<text:line-break/><text:line-break/>emitter.emit('date', new Date('2018-03-01'));     3<text:line-break/>emitter.emit('date', new Date('1983-03-24'));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16324 {list_context: "colist", text: "Création d'un gestionnaire d'événements.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16334 {list_context: "colist", text: "Enregistrement d'une fonction d'écoute{nbsp}— elle sera exécutée à chaque émission de l'événement `date`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16344 {list_context: "colist", text: "Émission d'un événement `date` avec comme argument, un &lt;&lt;../chapter-03/index.adoc#date,objet `Date`>>.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const EventEmitter = require('events');<text:line-break/>const emitter = new EventEmitter();<text:line-break/><text:line-break/>emitter.once('date', (date) =&amp;gt; {                  1<text:line-break/>  console.log('Année : %d', date.getFullYear());<text:line-break/>});<text:line-break/><text:line-break/>emitter.emit('date', new Date('2018-03-01'));<text:line-break/>emitter.emit('date', new Date('1983-03-24'));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16408 {list_context: "colist", text: "Bien que l'événement `date` soit appelé deux fois, la fonction d'écoute ne réagira qu'une seule fois.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const EventEmitter = require('events');<text:line-break/>const emitter = new EventEmitter();<text:line-break/>const tick = () =&amp;gt; process.stdout.write('.');<text:line-break/>let counter = 0;<text:line-break/><text:line-break/>setInterval(() =&amp;gt; {<text:line-break/>  counter++;<text:line-break/>  emitter.emit('date', new Date());             1<text:line-break/><text:line-break/>  if (counter === 5) {<text:line-break/>    process.exit(0);<text:line-break/>  }<text:line-break/>}, 1000);<text:line-break/><text:line-break/>emitter.on('date', tick);                       2<text:line-break/>emitter.on('date', () =&amp;gt; {<text:line-break/>  if (counter === 3) {<text:line-break/>    emitter.removeListener('date', tick);       3<text:line-break/>  }<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16452 {list_context: "colist", text: "L'événement `date` est émis toutes les secondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16462 {list_context: "colist", text: "La fonction `tick` est appelée toutes les secondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16472 {list_context: "colist", text: "La fonction `tick` est débranchée de l'événement `date` au bout de 3 incréments.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const EventEmitter = require('events');<text:line-break/><text:line-break/>class Car extends EventEmitter {                                      1<text:line-break/>  constructor (name) {<text:line-break/>    super();                                                          2<text:line-break/>    this.name = name;<text:line-break/>  }<text:line-break/><text:line-break/>  start () {<text:line-break/>    this.emit('action', this, 'démarrer');                            3<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>const auto = new Car('Boombo');<text:line-break/>auto.on('action', (car, action) =&amp;gt; {                                  4<text:line-break/>  console.log('La voiture %s est en train de %s', car.name, action);<text:line-break/>});<text:line-break/><text:line-break/>auto.start();<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16520 {list_context: "colist", text: "Extension de la classe `EventEmitter`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16530 {list_context: "colist", text: "L'utilisation de la fonction spéciale `super()` est indispensable. Elle revient à invoquer `new EventEmitter()` par mécanisme de cascade.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16540 {list_context: "colist", text: "La méthode `.start()` encapsule un appel à la méthode `.emit()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16550 {list_context: "colist", text: "La fonction réagira à l'émission de l'événement `action` quand la méthode `.start()` sera appelée.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16572 {list_context: "dlist", text: "`on()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16574 {list_context: "dlist", text: "Enregistre une nouvelle fonction réagissant à un événement donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16588 {list_context: "dlist", text: "`once()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16590 {list_context: "dlist", text: "Enregistre une nouvelle fonction réagissant _une seule fois_ à un événement donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16604 {list_context: "dlist", text: "`emit()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16606 {list_context: "dlist", text: "Émet un événement.\nSi un ou plusieurs arguments additonnels sont présents,\nils sont transmis aux fonctions écoutant cet événement.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16624 {list_context: "dlist", text: "`eventNames()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16626 {list_context: "dlist", text: "Liste les événements pour lesquels on a enregistré au moins une fonction d'écoute.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16640 {list_context: "dlist", text: "`listeners()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16642 {list_context: "dlist", text: "Liste les fonctions écoutant les événements.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16656 {list_context: "dlist", text: "`removeListener()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16658 {list_context: "dlist", text: "Supprime une fonction d'écoute d'un événement donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16672 {list_context: "dlist", text: "`removeAllListeners()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16674 {list_context: "dlist", text: "Supprime toutes les fonctions d'écoute d'un événement donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16688 {list_context: "dlist", text: "`setMaxListeners()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16690 {list_context: "dlist", text: "Change le nombre maximum de fonctions d'écoute possibles. +\nPar défaut cette limite est de _10 fonctions maximum_.\nÇa paraît peu.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">util : transformer des callbacks en promesses</text:h><text:p>Le module util est un petit module contenant des fonctions utilitaires<text:line-break/>qui ne rentreraient pas dans le périmètre d&amp;#8217;autres modules.</text:p><text:p>On y trouve util.format(), une fonction qui fait beaucoup penser à<text:line-break/>console.log mais sans afficher le message&amp;#160;:</text:p><text:p>Pour afficher la valeur de la variable message de l&amp;#8217;exemple précédent,<text:line-break/>il suffirait de décommenter la dernière ligne et de (re)lancer le script.</text:p><text:p>La fonction util.debuglog() formate aussi des messages.<text:line-break/>Son affichage est toutefois conditionnel.<text:line-break/>Ce qui est pratique quand on veut déboguer des variables sans toucher au code<text:line-break/>entre deux exécutions&amp;#160;:</text:p><text:p>En lançant la commande suivante, seul le message de console.log s&amp;#8217;affiche&amp;#160;:</text:p><text:p>Il nous faut alors utiliser la variable d&amp;#8217;environnement NODE_DEBUG.<text:line-break/>En lui attribuant la même valeur que notre débogueur, celui-ci affichera alors<text:line-break/>le contenu attendu&amp;#160;:</text:p><text:p>Si l&amp;#8217;on souhaite avoir plusieurs débogueurs, dans un ou plusieurs scripts,<text:line-break/>il suffit de séparer leur nom par une virgule.<text:line-break/>Par exemple NODE_DEBUG=nodebook,test,fromage.</text:p><text:p>Une de mes fonctions préférées est util.promisify().<text:line-break/>Elle convertit une fonction acceptant un callback en une fonction<text:line-break/>retournant une promesse.<text:line-break/>C&amp;#8217;est d&amp;#8217;autant plus pratique quand on n&amp;#8217;a pas la maitrise du<text:line-break/>code source original&amp;#160;:</text:p><text:p>Ça paraît rien mais ça ouvre un potentiel de simplification énorme pour nous.<text:line-break/>Fini l&amp;#8217;argument error qui nous embête&amp;#160;: on peut le collecter quand ça<text:line-break/>nous arrange grâce à .catch().</text:p><text:p>Ça nous évite aussi d&amp;#8217;avoir à écrire toutes ces lignes de code<text:line-break/>pour arriver au même résultat&amp;#160;:</text:p><text:p>La documentation du module util est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/util.html</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const {format} = require('util');<text:line-break/><text:line-break/>const message = format('Il fait %s aujourd\'hui', '☀️ '); 1<text:line-break/>// console.log(message);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16778 {list_context: "colist", text: "Assigne le message formaté dans une variable sans l'afficher.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {debuglog} = require('util');<text:line-break/>const {cpus} = require('os');<text:line-break/><text:line-break/>const debug = debuglog('nodebook');                     1<text:line-break/>const infos = cpus().map(cpu =&amp;gt; cpu.model);<text:line-break/><text:line-break/>console.log('Cet ordinateur a %d CPU.', infos.length);  2<text:line-break/>debug('Le modèle de CPU est %s.', infos[0]);            3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16824 {list_context: "colist", text: "Création d'un débogueur nommé `nodebook`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16834 {list_context: "colist", text: "Ce message s'affiche systématiquement quand on exécute le script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16844 {list_context: "colist", text: "Le modèle de CPU sera affiché en invoquant Node en présence de la variable d'environnement `NODE_DEBUG`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node util/debuglog.js<text:line-break/>Cet ordinateur a 4 CPU.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ NODE_DEBUG=nodebook node util/debuglog.js<text:line-break/>Cet ordinateur a 4 CPU.<text:line-break/>NODEBOOK 32486: Le modèle de CPU est Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {promisify} = require('util');<text:line-break/>const readdir = promisify(require('fs').readdir);   1<text:line-break/><text:line-break/>readdir(__dirname)                                  2<text:line-break/>  .then((files) =&amp;gt; console.log(files))              3<text:line-break/>  .catch((error) =&amp;gt; console.error(error.message));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16902 {list_context: "colist", text: "Assigne une version transformée de `fs.readdir` grâce à `util.promisify`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16912 {list_context: "colist", text: "On ne passe pas de &lt;&lt;callbacks,callback>> contrairement à `fs.readdir`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16922 {list_context: "colist", text: "Le résultat de l'opération est passé à la résolution de promesse.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const fs = require('fs');<text:line-break/><text:line-break/>const readdir = (path) =&amp;gt; {<text:line-break/>  return new Promise((resolve, reject) =&amp;gt; {<text:line-break/>    fs.readdir(path, (error, files) =&amp;gt; {<text:line-break/>      error ? reject(error) : resolve(files);<text:line-break/>    });<text:line-break/>  });<text:line-break/>};<text:line-break/><text:line-break/>readdir(__dirname)<text:line-break/>  .then((files) =&amp;gt; console.log(files))<text:line-break/>  .catch((error) =&amp;gt; console.error(error.message));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@16970 {list_context: "dlist", text: "`util.debuglog()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16972 {list_context: "dlist", text: "Crée une fonction de débogage similaire à &lt;&lt;console,`console.error`>>.\nLes messages ne s'afficheront que si la &lt;&lt;process.env,variable d'environnement>>\n`NODE_DEBUG` mentionne l'identifiant du débogueur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16990 {list_context: "dlist", text: "`util.deprecate()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@16992 {list_context: "dlist", text: "Affiche un message d'avertissement lorsque vous souhaitez retirer une fonction\npartagée dans une version ultérieure de votre code.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17008 {list_context: "dlist", text: "`util.format()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17010 {list_context: "dlist", text: "Retourne une chaîne de caractères formatée, comme &lt;&lt;console,`console.log`>>\nmais sans l'envoyer dans un &lt;&lt;process.std,flux de sortie>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17026 {list_context: "dlist", text: "`util.promisify()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17028 {list_context: "dlist", text: "Transforme une &lt;&lt;callbacks,fonction de callback>> en\n&lt;&lt;../chapter-03/index.adoc#promise,promesse>>.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">http : créer et interroger des ressources via le protocole HTTP</text:h><text:p>Le module http est un module incontournable de Node.<text:line-break/>Il a 2 facettes&amp;#160;: la création de requêtes HTTP et la création<text:line-break/>de serveurs HTTP.<text:line-break/>Dans un cas on utilise le protocole HTTP pour accéder à une ressource distante<text:line-break/>et recevoir une réponse.<text:line-break/>Dans l&amp;#8217;autre cas on utilise le protocole HTTP pour<text:line-break/>mettre à disposition des ressources et les envoyer en réponse.</text:p><text:p>Le module https offre exactement les mêmes propriétés.<text:line-break/>Il est à privilégier pour établir des connections sécurisées<text:line-break/>vers des adresses commençant par https://.</text:p><text:p>Ce premier exemple met en lumière la nature asynchrone et non-bloquante par défaut de Node.<text:line-break/>La création d&amp;#8217;une requête et l&amp;#8217;obtention de la réponse sont séparées d&amp;#8217;un délai<text:line-break/>variable pendant lequel Node ne bloque pas le reste du code de s&amp;#8217;exécuter.<text:line-break/>Les callbacks sont appelés lorque l&amp;#8217;action est terminée.</text:p><text:p>En regardant le code de l&amp;#8217;exemple précédent, on en apprend un peu plus sur<text:line-break/>le fonctionnement d&amp;#8217;une requête HTTP&amp;#160;:</text:p><text:p>Pour rester rapide, Node fait aussi le choix de transmettre les données<text:line-break/>au fur et à mesure.<text:line-break/>L'événement data renvoie en réalité environ 10Ko de données.<text:line-break/>L&amp;#8217;exemple précédent a tout renvoyé d&amp;#8217;un coup car le volume des données<text:line-break/>était inférieur à 10Ko.</text:p><text:p>Voyons maintenant ce qu&amp;#8217;il se passe lorsqu&amp;#8217;on fait appel à un fichier<text:line-break/>plus volumineux&amp;#160;:</text:p><text:p>Les fonctions http.get() et http.request() accepte une chaîne de caractères<text:line-break/>comme premier argument.</text:p><text:p>Il est aussi possible de lui passer un objet URL.<text:line-break/>Pratique si vous manipulez des URL complexes ou si vous paginez.</text:p><text:p>En clair, on peut recevoir une réponse en plusieurs fois, petit bout par petit bout.<text:line-break/>Les données reçues ne sont pas forcément complètes.<text:line-break/>Ça pose problème à des fonctions comme<text:line-break/>JSON.parse.<text:line-break/>Elle nécessite un document JSON complet pour produire un résultat.</text:p><text:p>Une solution consiste accumuler les morceaux de réponse et à les assembler.<text:line-break/>Cela veut aussi dire que l&amp;#8217;on consomme autant de mémoire que l&amp;#8217;on reçoit de données.</text:p><text:p>Une autre solution repose sur l&amp;#8217;utilisation des flux de données.<text:line-break/>Ils pompent et brassent les données comme du liquide, en consommant peu de mémoire.<text:line-break/>On en parle plus loin, dans la section sur le module streams.</text:p><text:p>La fonction http.request() gère une requête plus finement.<text:line-break/>On peut aisément régler les entêtes, le verbe HTTP et les modalités de<text:line-break/>transmission des données.</text:p><text:p>L&amp;#8217;exemple suivant illustre l&amp;#8217;envoi d&amp;#8217;une requête HEAD.<text:line-break/>Ce verbe HTTP indique au serveur distant de répondre avec les métadonnées<text:line-break/>de la ressource mais sans les données (response.on('data'))&amp;#160;:</text:p><text:p>La fonction url.parse du module url est une alternative à la<text:line-break/>construction manuelle de l&amp;#8217;URL.<text:line-break/>Les opérateurs de manipulation d&amp;#8217;objets<text:line-break/>comme le destructuring et l&amp;#8217;expansion (rest) favorisent<text:line-break/>une écriture concise et élégante.</text:p><text:p>L&amp;#8217;utilisation de http.get et http.request est simple tant qu&amp;#8217;on évite<text:line-break/>la personnalisation de la requête.<text:line-break/>On ajoute progressivement de plus en plus de travail pour bien envoyer une<text:line-break/>requête, collecter les données et gérer les erreurs.</text:p><text:p>Nous verrons comment arriver au même résultat en écrivant moins de code grâce aux<text:line-break/>modules npm<text:line-break/>(chapitre 5).</text:p><text:p>Il est temps de nous pencher sur l&amp;#8217;autre versant du module&amp;#160;: la création<text:line-break/>d&amp;#8217;un serveur HTTP.</text:p><text:p>Ce concept peut sembler étrange lorsqu&amp;#8217;on vient d&amp;#8217;un autre langage de programmation.<text:line-break/>Après tout, Apache ou nginx s&amp;#8217;en chargent très bien pour nous.</text:p><text:p>Un serveur HTTP embarqué avec Node, c&amp;#8217;est avant tout<text:line-break/>une question d&amp;#8217;autonomie et d&amp;#8217;interopérabilité.<text:line-break/>Pas besoin de module spécial pour Apache.<text:line-break/>Pas besoin de module spécial pour nginx.</text:p><text:p>On peut développer un site web et le faire fonctionner instantément sans<text:line-break/>installer autre chose.<text:line-break/>L&amp;#8217;intégration avec un serveur Apache, nginx ou autre nécessite ensuite<text:line-break/>très peu d&amp;#8217;efforts.</text:p><text:p>Le serveur se démarre de la même manière qu&amp;#8217;un script ordinaire&amp;#160;:</text:p><text:p>Le serveur continuera d&amp;#8217;accepter les requêtes entrantes jusqu&amp;#8217;à ce que le<text:line-break/>processus soit interrompu par une erreur ou par un<text:line-break/>signal d&amp;#8217;arrêt<text:line-break/>—&amp;#160;en utilisant la combinaison de touches  par exemple.</text:p><text:p>Accédez au serveur HTTP en ouvrant un navigateur web comme Firefox ou Chrome<text:line-break/>puis en inscrivant localhost:4000 dans la barre d&amp;#8217;adresses.<text:line-break/>Dirigez ensuite le navigateur vers localhost:4000/test et observez les<text:line-break/>changements.</text:p><text:p>La commande Unix curl sait envoyer des requêtes HTTP.<text:line-break/>On peut l&amp;#8217;utiliser pour lire les réponses de notre serveur&amp;#160;:</text:p><text:p>L&amp;#8217;option -i affiche les entêtes de réponse.<text:line-break/>C&amp;#8217;est l&amp;#8217;équivalent de response.headers.</text:p><text:p>On a posé les bases d&amp;#8217;un serveur HTTP minimaliste sur lequel on va<text:line-break/>pouvoir construire pas à pas tout type d&amp;#8217;applications web.<text:line-break/>Et qu&amp;#8217;est-ce qu&amp;#8217;il manque pour en faire un serveur web&amp;#160;?<text:line-break/>De pouvoir typer les ressources renvoyées afin qu&amp;#8217;elles soient comprises<text:line-break/>par un navigateur web.<text:line-break/>c&amp;#8217;est-à-dire de pouvoir signaler que nos réponses contiennent du HTML, du CSS,<text:line-break/>des images etc.</text:p><text:p>Modifions notre exemple précédent pour renvoyer du HTML&amp;#160;:</text:p><text:p>L&amp;#8217;appel de la fonction response.end() est impératif.<text:line-break/>Sans ça, le client&amp;#160;— ici, le navigateur web&amp;#160;— pense que des données peuvent<text:line-break/>encore arriver.</text:p><text:p>Si on supprime l&amp;#8217;appel à response.end() dans l&amp;#8217;exemple précédent,<text:line-break/>l&amp;#8217;indicateur de chargement du navigateur sera actif pendant 2 minutes,<text:line-break/>suite à quoi Node interrompra la connexion, considérant qu&amp;#8217;elle met trop<text:line-break/>de temps pour aboutir.</text:p><text:p>Dirigeons notre navigateur web vers localhost:4000 pour observer<text:line-break/>le résultat.</text:p><text:p>La balise HTML &amp;lt;h1&amp;gt; a bien été prise en compte mais qu&amp;#8217;en est-il du<text:line-break/>caractère Ã&amp;#160;&amp;#160;?<text:line-break/>Il semblerait que le caractère accentué n&amp;#8217;aie pas été compris par le navigateur.</text:p><text:p>Si le serveur distant ne précise pas l&amp;#8217;encodage des caractères,<text:line-break/>le navigateur va l&amp;#8217;interpréter en ASCII.<text:line-break/>Or les éditeurs de code enregistrent les fichiers avec un autre encodage&amp;#160;: UTF-8.<text:line-break/>Ce standard englobe les alphabets du monde entier, dont les accents et<text:line-break/>caractères diacritique de la langue française.</text:p><text:p>L&amp;#8217;informatique contemporaine a débuté aux États-Unis.<text:line-break/>Les systèmes ont été conçus à cette époque pour comprendre l&amp;#8217;alphabet anglais,<text:line-break/>les signes de ponctuations et des caractères spéciaux.<text:line-break/>On parle alors de standard d&amp;#8217;encodage ASCII.</text:p><text:p>L&amp;#8217;émergence d&amp;#8217;Internet et du World Wide Web ont popularisé l&amp;#8217;encodage UTF-8<text:line-break/>afin d&amp;#8217;exprimer de manière commune les caractères spéciaux de toutes les<text:line-break/>langues du monde entier.</text:p><text:p>Ce qui nous intéresse, c&amp;#8217;est de pouvoir indiquer aux navigateurs web<text:line-break/>quel est l&amp;#8217;encodage utilisé pour qu&amp;#8217;il soit respecté à l&amp;#8217;affichage.<text:line-break/>Le protocole HTTP dispose justement de l&amp;#8217;entête Content-Type&amp;#160;:</text:p><text:p>Cette indication suffit au navigateur pour décoder les caractères<text:line-break/>et les afficher comme on l&amp;#8217;espérait.</text:p><text:p>L&amp;#8217;étape suivante consisterait à transmettre deux contenus différents selon<text:line-break/>l&amp;#8217;URL demandée.<text:line-break/>Par exemple, une page HTML et un fichier CSS habillant la page HTML.</text:p><text:p>Si tout se passe bien, le chargement de la page HTML devrait déclencher<text:line-break/>une requête vers localhost:4000/main.css.<text:line-break/>La confirmation est visuelle en visitant notre serveur avec un navigateur web&amp;#160;:</text:p><text:p>On est en situation de contrôle&amp;#160;: on décide de ce qu&amp;#8217;on répond.<text:line-break/>C&amp;#8217;est une manière d&amp;#8217;apprendre petit à petit comment fonctionne<text:line-break/>le protocole HTTP sur lequel repose une majorité de notre activité sur Internet.</text:p><text:p>On a couvert les principes du module http mais il reste beaucoup de choses<text:line-break/>à apprendre pour développer une application web maintenable.<text:line-break/>C&amp;#8217;est justement le sujet du chapitre 7,<text:line-break/>aidé par les modules npm que l&amp;#8217;on apprendra<text:line-break/>à manipuler dans le chapitre 5.</text:p><text:p>La documentation du module http est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/http.html</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const {get} = require('https');<text:line-break/><text:line-break/>get('https://oncletom.io/node.js/package.json', (response) =&amp;gt; { 1<text:line-break/>  response.on('data', (data) =&amp;gt; {<text:line-break/>    console.log(data.toString());                               2<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17112 {list_context: "colist", text: "Initialisation de la requête{nbsp}— un objet représentant la &lt;&lt;http.IncomingMessage,réponse du serveur distant>> nous est transmis. À ce stade là, le serveur n'a pas encore commencé à renvoyer des données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17122 {list_context: "colist", text: "On en est à l'étape où on reçoit des données. Le contenu du fichier `package.json` est affiché sous forme de chaînes de caractères.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>1. envoi de la requête au serveur distant (get()),1. obtention d&amp;#8217;une réponse (objet response dans le callback),1. transmission d&amp;#8217;informations (événement data),1. clôture de la transmission (événement end&amp;#160;— cf. exemple suivant)<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {get} = require('https');<text:line-break/>let count = 0;<text:line-break/><text:line-break/>get('https://oncletom.io/node.js/index.html', (response) =&amp;gt; {<text:line-break/>  response.on('data', (data) =&amp;gt; {<text:line-break/>    console.log('Morceau #%d : %iKo', ++count, data.length/1024); 1<text:line-break/>  });<text:line-break/><text:line-break/>  response.on('end', () =&amp;gt; {                                      2<text:line-break/>    console.log('Transmission finie en %d morceaux', count);      3<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17214 {list_context: "colist", text: "Affiche ce message à chaque morceau/paquet reçu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17224 {list_context: "colist", text: "L'événement `end` se déclenche lorsque la requête n'a plus de données à recevoir.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17234 {list_context: "colist", text: "Affiche le nombre de morceaux reçus pour obtenir une _réponse complète_.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17278 {list_context: "dlist", text: "`http.createServer()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17280 {list_context: "dlist", text: "Initialise un serveur HTTP et fournit une boîte à outil pour\ngérer les connexions entrantes via &lt;&lt;http.Server,`http.Server`>>", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17296 {list_context: "dlist", text: "`http.get()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17298 {list_context: "dlist", text: "Crée une connexion HTTP de type `GET`.\nIl s'agit d'une version simplifiée de `http.request()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17314 {list_context: "dlist", text: "`http.request()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17316 {list_context: "dlist", text: "Crée une connexion HTTP du type de son choix (`GET`, `POST`, `OPTION`, `PUT`,\netc.).", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const https = require('https');<text:line-break/>const options = {                                           1<text:line-break/>  protocol: 'https:',<text:line-break/>  host: 'oncletom.io',<text:line-break/>  path: '/node.js/package.json',<text:line-break/>  method: 'HEAD',<text:line-break/>};<text:line-break/><text:line-break/>const request = https.request(options);<text:line-break/>request.setHeader('Accept', 'application/json');            2<text:line-break/>request.end();                                              3<text:line-break/><text:line-break/>request.on('response', (response) =&amp;gt; {<text:line-break/>  const lastModified = response.headers['last-modified'];<text:line-break/><text:line-break/>  console.log('Dernière modification : %s', lastModified);  4<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17372 {list_context: "colist", text: "Construction des paramètres de requête pour `http.request()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17382 {list_context: "colist", text: "Explicite au serveur distant la nature du contenu que l'on s'apprête à recevoir.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17392 {list_context: "colist", text: "Déclenche l'envoi de la requête sur le réseau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17402 {list_context: "colist", text: "Affiche la date de modification de la ressource distante.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const https = require('https');<text:line-break/>const {parse} = require('url');<text:line-break/>const url = parse('https://oncletom.io/node.js/package.json');<text:line-break/><text:line-break/>const request = https.request({ ...url, method: 'HEAD'});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17470 {list_context: "dlist", text: "`request.on('response')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17472 {list_context: "dlist", text: "Déclenché lorsque la ressource distante a accepté la requête et s'apprête\nà nous transmettre les données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17488 {list_context: "dlist", text: "`request.on('end')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17490 {list_context: "dlist", text: "Délenché lorsque la ressource distante a signalé ne plus avoir de données\nà nous transmettre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17506 {list_context: "dlist", text: "`request.end()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17508 {list_context: "dlist", text: "Termine l'initialisation et entame la connexion vers la ressource distante. +\nDans le cas d'une requête `POST`, `PUT` ou `DELETE`, le premier paramètre\nsert à passer une donnée au serveur distant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17526 {list_context: "dlist", text: "`request.getHeader()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17528 {list_context: "dlist", text: "Retourne la valeur d'une entête de requête.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17542 {list_context: "dlist", text: "`request.setHeader()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17544 {list_context: "dlist", text: "Change la valeur d'une entête de requête.\nC'est une pratique courante pour préciser nos intentions auprès du serveur\ndistant{nbsp}: format de fichier à réponse attendu (`Accept`), agent utilisateur\n(`User-Agent`), nature des données envoyées (`Content-Type`), etc.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17564 {list_context: "dlist", text: "`request.setTimeout()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17566 {list_context: "dlist", text: "Définit un chronomètre pour déclarer la requête en erreur si aucune réponse\nn'a été obtenue dans ce délai imparti.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17582 {list_context: "dlist", text: "`request.write()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17584 {list_context: "dlist", text: "Transmets un morceau de contenu vers la ressource distante.\nCette méthode s'utilise lorsque l'on effectue un téléversement progressif.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17614 {list_context: "dlist", text: "`message.on('data')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17616 {list_context: "dlist", text: "Déclenché quand un morceau de données est obtenu par le client.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17630 {list_context: "dlist", text: "`message.on('end')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17632 {list_context: "dlist", text: "Déclenché quand nous avons obtenu toutes les données émises par le serveur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17646 {list_context: "dlist", text: "`message.on('readable')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17648 {list_context: "dlist", text: "Déclenché quand nous pouvons commencer à lire les données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17662 {list_context: "dlist", text: "`message.read()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17664 {list_context: "dlist", text: "Obtient un morceau de données manuellement{nbsp}— au lieu d'utiliser\nl'événement `data`, automatique.\nOn apprendra mieux comment manipuler cette fonction dans la section\n&lt;&lt;stream,module `streams`>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17684 {list_context: "dlist", text: "`message.destroy()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17686 {list_context: "dlist", text: "Termine la transmission des données sans que le serveur distant\nnous aie tout transmis.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17702 {list_context: "dlist", text: "attribut `message.headers`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17704 {list_context: "dlist", text: "Objet contenant les entêtes de la réponse{nbsp}— c'est le serveur distant qui décide\nde leur contenu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17720 {list_context: "dlist", text: "attribut `message.statusCode`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17722 {list_context: "dlist", text: "Code qui reflète l'état de compréhension de notre requête par le serveur distant.\n`200` correspond à _tout va bien_, `404` à _ressource introuvable_,\n`301` à _la ressource a été déplacée_.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const http = require('http');<text:line-break/>const server = http.createServer();<text:line-break/><text:line-break/>server.listen(4000, 'localhost');                                   1<text:line-break/>server.on('listening', () =&amp;gt; console.log('Serveur démarré !'));     2<text:line-break/>server.on('request', (request, response) =&amp;gt; {<text:line-break/>  console.log('URL demandée : %s %s', request.method, request.url); 3<text:line-break/><text:line-break/>  response.end('Coucou');                                           4<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@17782 {list_context: "colist", text: "Ouverture de l'acceptation des connexions réseaux sur le port `8000`, uniquement sur la boucle locale (`localhost`){nbsp}— une erreur sera affichée si ce port réseau est déjà pris par un autre processus.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17792 {list_context: "colist", text: "Affiche `Serveur démarré{nbsp}!` quand Node a fini de négocier l'accès aux ressources réseau avec le système d'exploitation{nbsp}— à ce stade, le serveur est prêt à recevoir des _connexions entrantes_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17802 {list_context: "colist", text: "Lorsqu'une requête arrive, affiche l'URL demandée par le client.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@17812 {list_context: "colist", text: "Termine la connexion avec le client{nbsp}— ce dernier considère sa _requête_ comme terminée.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node http/server.js<text:line-break/>Serveur démarré !<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl -i http://localhost:4000/test<text:line-break/>$ curl -i -XHEAD http://localhost:4000/test<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const http = require('http');<text:line-break/>const server = http.createServer();<text:line-break/>server.listen(4000, 'localhost');<text:line-break/><text:line-break/>server.on('request', (request, response) =&amp;gt; {<text:line-break/>  response.write('&amp;lt;h1&amp;gt;Salut à toi&amp;lt;/h1&amp;gt;');<text:line-break/>  response.end();<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const http = require('http');<text:line-break/>const server = http.createServer();<text:line-break/>server.listen(4000, 'localhost');<text:line-break/><text:line-break/>server.on('request', (request, response) =&amp;gt; {<text:line-break/>  response.setHeader('Content-Type', 'text/html; charset=utf-8'); 1<text:line-break/><text:line-break/>  response.write('&amp;lt;h1&amp;gt;Salut à toi&amp;lt;/h1&amp;gt;');<text:line-break/>  response.end();<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18006 {list_context: "colist", text: "L'entête HTTP `Content-Type` indique explicitement que le contenu transféré est du HTML, encodé en UTF-8.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const http = require('http');<text:line-break/>const server = http.createServer();<text:line-break/>server.listen(4000, 'localhost');<text:line-break/><text:line-break/>server.on('request', (request, response) =&amp;gt; {<text:line-break/>  if (request.url === '/main.css') {                                    1<text:line-break/>    response.setHeader('Content-Type', 'text/css; charset=utf-8');      2<text:line-break/>    response.write('body{ font: 18px/1.5 sans-serif; color: blue; }');<text:line-break/>    response.end();<text:line-break/>  }<text:line-break/>  else {<text:line-break/>    response.setHeader('Content-Type', 'text/html; charset=utf-8');<text:line-break/>    response.write('&amp;lt;link rel="stylesheet" href="/main.css"&amp;gt;');<text:line-break/>    response.end('&amp;lt;h1&amp;gt;Salut à toi&amp;lt;/h1&amp;gt;');<text:line-break/>  }<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18064 {list_context: "colist", text: "Si la requête entrante indique `/main.css` comme chemin, alors on lui renvoie du contenu interprétable comme du CSS.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18074 {list_context: "colist", text: "On indique au client que ce contenu est du texte contenant une feuille de style CSS.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18112 {list_context: "dlist", text: "`server.close()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18114 {list_context: "dlist", text: "Arrête l'écoute de nouvelles connexions.\nLes connexions existantes sont maintenues jusqu'à ce qu'elles soient honorées.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18130 {list_context: "dlist", text: "`server.listen()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18132 {list_context: "dlist", text: "Démarre l'acceptation des connexions sur un port et une adresse donnée.\nCombinée avec &lt;&lt;os,`os.networkInterfaces()`>>, vous pourriez choisir\nsur quelle carte/adresse réseau écouter les requêtes entrantes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18150 {list_context: "dlist", text: "`server.on('close')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18152 {list_context: "dlist", text: "Déclenché lorsque le serveur s'arrête et a terminé d'honorer toutes les\nconnexions déjà ouvertes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18168 {list_context: "dlist", text: "`server.on('connection')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18170 {list_context: "dlist", text: "Déclenché lorsqu'une nouvelle connexion réseau est établie.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18184 {list_context: "dlist", text: "`server.on('request')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18186 {list_context: "dlist", text: "Déclenché lorsqu'une nouvelle requête entrante est adressée au serveur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18200 {list_context: "dlist", text: "`server.on('upgrade')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18202 {list_context: "dlist", text: "Déclenché lorsqu'une requête entrante demande un changement de protocole.\nUtilisé pour basculer vers HTTP/2 et\n&lt;&lt;../chapter-09/index.adoc#io-websocket,WebSocket>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18234 {list_context: "dlist", text: "`response.on('close')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18236 {list_context: "dlist", text: "Déclenché lorsque la requête a été terminée par le client,\navant qu'on ait pu transmettre l'intégralité des données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18252 {list_context: "dlist", text: "`response.on('finish')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18254 {list_context: "dlist", text: "Déclenché lorsqu'on a envoyé le dernier morceau de données au client\nayant initié la requête.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18270 {list_context: "dlist", text: "`response.end()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18272 {list_context: "dlist", text: "Signale au client que nous n'avons plus de données à transmettre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18286 {list_context: "dlist", text: "`response.getHeader()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18288 {list_context: "dlist", text: "Retourne la valeur d'une entête de la réponse.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18302 {list_context: "dlist", text: "`response.removeHeader()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18304 {list_context: "dlist", text: "Supprime une entête de la réponse.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18318 {list_context: "dlist", text: "`response.setHeader()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18320 {list_context: "dlist", text: "Assigne une valeur à une entête de la réponse.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18334 {list_context: "dlist", text: "`response.write()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18336 {list_context: "dlist", text: "Transmet un morceau de données au client.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18350 {list_context: "dlist", text: "`response.writeHead()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18352 {list_context: "dlist", text: "Transmet le code de réponse et un ensemble d'entêtes au client.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18366 {list_context: "dlist", text: "attribut `response.statusCode`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18368 {list_context: "dlist", text: "Contient le code de réponse qui sera transmis au client.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">os : en savoir plus sur les capacités de l&amp;#8217;ordinateur</text:h><text:p>Le module os permet d&amp;#8217;en savoir plus sur l&amp;#8217;environnement système dans lequel<text:line-break/>le script est exécuté.<text:line-break/>Ça permet par exemple de prendre des décisions par rapport aux ressources disponibles<text:line-break/>(mémoire, CPU, réseau, etc.).<text:line-break/>Idem par rapport au type de système d&amp;#8217;exploitation (Windows, Linux, etc.).</text:p><text:p>Node a pour vocation de nous abstraire du système d&amp;#8217;exploitation<text:line-break/>en faisant en sorte que notre code fonctionne partout pareil.<text:line-break/>Pourtant des situations nous obligent à prendre en compte certains critères<text:line-break/>pour déterminer un choix.</text:p><text:p>Par exemple, lister les applications installées sur l&amp;#8217;ordinateur.<text:line-break/>Leur emplacement d&amp;#8217;installation est différent sous Linux, Windows et macOS.</text:p><text:p>L&amp;#8217;exemple précédent se base sur la valeur retournée par la fonction os.type()<text:line-break/>afin de choisir quel est le bon répertoire à lister.</text:p><text:p>On pourrait combiner ce mécanisme avec le module child_process,<text:line-break/>pour appeler une application système différent pour parvenir<text:line-break/>à un résultat similaire.</text:p><text:p>À l&amp;#8217;inverse, on peut accéder à une ressource de manière uniforme, peu importe<text:line-break/>le nom du compte utilisateur ou du type de système d&amp;#8217;exploitation.<text:line-break/>Nous allons maintenant lire le contenu du fichier .npmrc,<text:line-break/>le fichier de configuration de<text:line-break/>l'exécutable npm&amp;#160;:</text:p><text:p>La documentation du module os est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/os.html</text:p><text:p><text:line-break/>----<text:line-break/>const os = require('os');<text:line-break/><text:line-break/>const {username} = os.userInfo();<text:line-break/>const cpus = os.cpus().length;<text:line-break/><text:line-break/>console.log(<text:line-break/>  `L'ordinateur a ${cpus} CPU et une session ouverte par ${username}.`  1<text:line-break/>);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18454 {list_context: "colist", text: "Affiche un message du genre `L'ordinateur a 4 CPU et une session ouverte par anonymous.`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {type} = require('os');<text:line-break/>const {readdir} = require('fs');<text:line-break/><text:line-break/>const log = (label) =&amp;gt; (error, modules) =&amp;gt; {<text:line-break/>  console.log('Applications installées sous %s : %j', label, modules);<text:line-break/>};<text:line-break/><text:line-break/>switch (type()) {<text:line-break/>  case 'Windows_NT':  readdir('C:\\Program Files', log('Windows')); break;<text:line-break/>  case 'Linux':       readdir('/usr/bin', log('Linux')); break;<text:line-break/>  case 'Darwin':      readdir('/Applications', log('macOS')); break;<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {homedir} = require('os');<text:line-break/>const {readFile} = require('fs');<text:line-break/>const {join} = require('path');<text:line-break/><text:line-break/>const file = join(homedir(), '.npmrc');     1<text:line-break/><text:line-break/>readFile(file, (error, content='') =&amp;gt; {<text:line-break/>  if (error &amp;amp;&amp;amp; error.code !== 'ENOENT') {   2<text:line-break/>    return console.log(error);<text:line-break/>  }<text:line-break/><text:line-break/>  console.log(String(content));<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18530 {list_context: "colist", text: "Construit un chemin agnostique du système d'exploitation. Par exemple `C:\\Users\\anonymous\\.npmrc` pour Windows, `/Users/anonymous/.npmrc` pour macOS et `/home/anonymous/.npmrc` pour Linux.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18540 {list_context: "colist", text: "`ENOENT` est un &lt;&lt;fs.errors,code d'erreur>> indiquant que le fichier n'existe pas{nbsp}; on se permet de l'ignorer et de considérer que le fichier est vide.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18558 {list_context: "dlist", text: "`os.arch()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18560 {list_context: "dlist", text: "Retourne l'architecture du CPU.\nLes valeurs les plus courantes sont généralement `x64`, `arm` et `arm64`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18576 {list_context: "dlist", text: "`os.cpus()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18578 {list_context: "dlist", text: "Retourne un tableau contenant des informations à propos du ou des CPU. +\nParmi ces informations, on retrouve leur modèle, leur fréquence et\nle temps passé en attente ou en action depuis le démarrage de l'ordinateur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18596 {list_context: "dlist", text: "`os.homedir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18598 {list_context: "dlist", text: "Retourne le chemin vers le répertoire utilisateur. +\nÉquivalent à la variable `$HOME` sous Unix et `%USERPROFILE%` ou `%AppData%`\nsous Windows.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18616 {list_context: "dlist", text: "`os.hostname()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18618 {list_context: "dlist", text: "Retourne l'identifiant réseau de la machine.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18632 {list_context: "dlist", text: "`os.networkInterfaces()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18634 {list_context: "dlist", text: "Retourne un tableau contenant des informations à propos de la ou des\ncartes réseaux de l'ordinateur. +\nParmi ces informations, on retrouve l'adresse IP (IPv4, IPv6), l'adresse MAC\net le masque réseau.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18654 {list_context: "dlist", text: "`os.platform()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18656 {list_context: "dlist", text: "Retourne la nature du système d'exploitation. +\nLes valeurs les plus courantes sont généralement `win32`, `linux`, `darwin`\net `freebsd`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18674 {list_context: "dlist", text: "`os.tmpdir()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18676 {list_context: "dlist", text: "Retourne l'emplacement du _répertoire temporaire_ fourni par\nle système d'exploitation.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18692 {list_context: "dlist", text: "`os.type()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18694 {list_context: "dlist", text: "Retourne une forme normalisée de nature de système d'exploitation.\nLa valeur est équivalente à ce que retournerait la commande Unix `uname -s`. +\nLes valeurs les plus courantes sont généralement\n`Windows_NT`, `Linux`, `Darwin` et `FreeBSD`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18714 {list_context: "dlist", text: "attribut `os.constants`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18716 {list_context: "dlist", text: "Objet contenant la liste des &lt;&lt;signals,signaux système>> et des codes d'erreur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18730 {list_context: "dlist", text: "attribut `os.EOL`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18732 {list_context: "dlist", text: "Caractère utilisé pour marquer les fins de ligne. +\nEn général le caractère `\\n` sous Unix et `\\r\\n` sous Windows.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">child_process : appeler un exécutable système</text:h><text:p>Le module child_process exécute des programmes externes,<text:line-break/>leur transmet des données et consulte leurs résultats via<text:line-break/>les flux standards.</text:p><text:p>L&amp;#8217;utilisation du module child_process se justifie quand un programme<text:line-break/>externe fournit une fonctionnalité mais ne s&amp;#8217;interface pas avec Node.<text:line-break/>Ou encore quand on veut sortir l&amp;#8217;exécution d&amp;#8217;un script Node du processus courant<text:line-break/>pour tirer parti des autres CPU de l&amp;#8217;ordinateur sans ralentir l&amp;#8217;application principale.</text:p><text:p>La fonction child_process.exec accepte un deuxième argument optionnel.<text:line-break/>cwd (current working directory) est une des options utiles de cet argument.</text:p><text:p>Exécutons le script pour observer le résultat&amp;#160;:</text:p><text:p>Le constat est similaire à celui produit avec le module fs&amp;#160;:<text:line-break/>les fichiers listés sont ceux du répertoire courant,<text:line-break/>notre emplacement dans le terminal.</text:p><text:p>Modifions maintenant la valeur de l&amp;#8217;option cwd&amp;#160;:</text:p><text:p>La liste des fichiers et répertoires affichée est désormais différente,<text:line-break/>même si la commande passée à child_process.exec est la même.<text:line-break/>cwd a changé le répertoire courant l&amp;#8217;espace d&amp;#8217;une commande.</text:p><text:p>Si on arrive au même résultat en utilisant exec('ls'), pourquoi utiliser<text:line-break/>la fonction fs.readdir du module fs&amp;#160;?<text:line-break/>fs.readdir a au moins 3 avantages&amp;#160;:</text:p><text:p>env est une deuxième option à passer à child_process.exec.<text:line-break/>Elle redéfinit les variables d&amp;#8217;environnement utilisables<text:line-break/>par le processus enfant&amp;#160;:</text:p><text:p>Si on ne transmettait pas les valeurs de process.env au processus enfant,<text:line-break/>la variable d&amp;#8217;environnement PATH ne serait pas définie.<text:line-break/>Le processus enfant ne saurait plus où chercher l&amp;#8217;exécutable ping.<text:line-break/>On aurait pu appeler le programme ping en utilisant un chemin absolu comme<text:line-break/>/sbin/ping mais son emplacement varie selon les systèmes d&amp;#8217;exploitation.</text:p><text:p>Le programme externe peut ne pas exister sur tous les systèmes d&amp;#8217;exploitation,<text:line-break/>voire il ne s&amp;#8217;appelle pas avec les mêmes arguments, ni avec le même nom.</text:p><text:p>Une des solutions pourrait consister à se reposer sur le module os<text:line-break/>et adapter la commande en fonction du système d&amp;#8217;exploitation.</text:p><text:p>child_process.spawn est une autre approche de démarrage<text:line-break/>et de communication avec un processus externe.</text:p><text:p>Les arguments et options à transmettre au programme sont passées dans un tableau.<text:line-break/>Dans le programme externe, on y accède avec process.argv.</text:p><text:p>Pour transmettre un volume de données plus important en paramètre,<text:line-break/>il vaut mieux faire appel appel à la propriété stdin.<text:line-break/>C&amp;#8217;est un Stream d&amp;#8217;écriture dont le fonctionnement est identique<text:line-break/>à process.stdin&amp;#160;:</text:p><text:p>L&amp;#8217;exécutable tr (fr.wikipedia.org/wiki/Tr_(Unix))<text:line-break/>substitue des plages de caractères.<text:line-break/>On lui a transmis des caractères en entrée et spécifié les plages de traduction<text:line-break/>en arguments.<text:line-break/>Nous avons utilisé la sortie standard pour lire les résultats.</text:p><text:p>L&amp;#8217;exemple précédent revient au même que cette commande&amp;#160;:</text:p><text:p>Dans ce cas précis, je trouve que le scripting shell est plus concis<text:line-break/>que l&amp;#8217;utilisation d&amp;#8217;un script Node faisant appel à child_process.spawn.<text:line-break/>J&amp;#8217;aurais plutôt tendance à transmettre le résultat de cette commande<text:line-break/>à l'entrée standard d&amp;#8217;un script Node.</text:p><text:p>La documentation du module child_process est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/child_process.html</text:p><text:p><text:line-break/>----<text:line-break/>const {exec} = require('child_process');<text:line-break/><text:line-break/>exec('npm --version', (error, stdout, stderr) =&amp;gt; {              1<text:line-break/>  console.log(`version installée de npm : ${stdout.trim()}`);   2<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18814 {list_context: "colist", text: "L'exécution de la commande exécute la fonction de callback, avec comme arguments la &lt;&lt;process.std,sortie standard>> et la &lt;&lt;process.std,sortie erreur>> du processus enfant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@18824 {list_context: "colist", text: "Affiche `version installée de npm{nbsp}: {npmV}`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {exec} = require('child_process');<text:line-break/><text:line-break/>exec('ls .', {cwd: null}, (error, stdout, stderr) =&amp;gt; {  1<text:line-break/>  console.log(stdout);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18866 {list_context: "colist", text: "On lance la commande système `ls` sans spécifier le répertoire de travail.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node child_process/ls.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {exec} = require('child_process');<text:line-break/><text:line-break/>exec('ls .', {cwd: '/'}, (error, stdout, stderr) =&amp;gt; { 1<text:line-break/>  console.log(stdout);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@18914 {list_context: "colist", text: "La valeur de `cwd` est réglée sur `/`, c'est-à-dire le répertoire racine du système de fichiers.", blocks: 0}><text:line-break/>----<text:line-break/>$ node child_process/ls-root.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. elle est plus rapide&amp;#160;— à écrire, à exécuter, à diagnostiquer,1. on économise la création d&amp;#8217;un processus système,1. compatibilité avec tous les systèmes d&amp;#8217;exploitation<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {exec} = require('child_process');<text:line-break/><text:line-break/>const env = {PING_COUNT: 1, ...process.env};                        1<text:line-break/><text:line-break/>exec('ping -c $PING_COUNT oncletom.io', {env}, (error, stdout) =&amp;gt; { 2<text:line-break/>  if (error) {<text:line-break/>    return console.error(error);<text:line-break/>  }<text:line-break/><text:line-break/>  console.log(stdout);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19014 {list_context: "colist", text: "On transmet les variables d'environnement existantes au processus enfant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19024 {list_context: "colist", text: "Utilisation de la variable d'environnement `PING_COUNT` comme valeur d'option du programme `ping`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node child_process/ping.js<text:line-break/>PING oncletom.io (185.31.40.11): 56 data bytes<text:line-break/>64 bytes from 185.31.40.11: icmp_seq=0 ttl=56 time=23.763 ms<text:line-break/><text:line-break/>--- oncletom.io ping statistics ---<text:line-break/>1 packets transmitted, 1 packets received, 0.0% packet loss<text:line-break/>round-trip min/avg/max/stddev = 23.763/23.763/23.763/0.000 ms<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {spawn} = require('child_process');<text:line-break/><text:line-break/>const subprocess = spawn('cat', ['package.json']);  1<text:line-break/><text:line-break/>subprocess.stdout.on('data', (data) =&amp;gt; {            2<text:line-break/>  console.log(String(data));                        3<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19094 {list_context: "colist", text: "`cat` est un programme qui affiche le contenu d'un fichier{nbsp}— un peu comme `fs.readFile`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19104 {list_context: "colist", text: "Les données retournées par la commande externe se lisent depuis les &lt;&lt;process.std,flux de sorties>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19114 {list_context: "colist", text: "Affiche le contenu du fichier `package.json`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {spawn} = require('child_process');<text:line-break/><text:line-break/>const subprocess = spawn('tr', ['0-9a-f', 'a-p']);<text:line-break/>subprocess.stdout.on('data', (data) =&amp;gt; {<text:line-break/>  console.log(String(data));              3<text:line-break/>});<text:line-break/><text:line-break/>subprocess.stdin.write('0123 abcd');      1<text:line-break/>subprocess.stdin.end();                   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19160 {list_context: "colist", text: "Écrit `0123 abcd` dans le flux d'entrée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19170 {list_context: "colist", text: "Signale au processus externe qu'il n'aura plus de donnée{nbsp}— le programme `tr` rendra la main dès qu'il nous aura tout transmis.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19180 {list_context: "colist", text: "Affiche `abcd klmn`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ echo -n '0123 abcd' | tr 0-9a-f a-p<text:line-break/>abcd klmn<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19208 {list_context: "dlist", text: "`child_process.exec()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19210 {list_context: "dlist", text: "Exécute une commande et retourne son _résultat_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19224 {list_context: "dlist", text: "`child_process.spawn()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19226 {list_context: "dlist", text: "Exécute une commande et retourne un objet &lt;&lt;process,processus>>.\nLe script Node et le nouveau processus peuvent communiquer entre eux.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19250 {list_context: "dlist", text: "`process.on('message')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19252 {list_context: "dlist", text: "Déclenché lorsque le processus enfant reçoit un message envoyé par l'autre script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19266 {list_context: "dlist", text: "`process.kill()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19268 {list_context: "dlist", text: "Envoie un &lt;&lt;signals,signal d'arrêt>> au processus enfant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19282 {list_context: "dlist", text: "`process.send()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19284 {list_context: "dlist", text: "Envoie un message au processus enfant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19298 {list_context: "dlist", text: "`process.stdin`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19310 {list_context: "dlist", text: "`process.stdout`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19322 {list_context: "dlist", text: "`process.stderr`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19324 {list_context: "dlist", text: "&lt;&lt;process.std,Flux standards>> du processus enfant.\nIdéal pour envoyer et récupérer des données en continu.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">process : en savoir plus sur le processus en cours</text:h><text:p>La module process retourne des informations<text:line-break/>sur l&amp;#8217;environnement dans lequel le script est exécuté.<text:line-break/>À l&amp;#8217;instar du module console, la variable process<text:line-break/>est globale.</text:p><text:p>Notre code peut être interprété par Node<text:line-break/>sur plusieurs types de machines<text:line-break/>(ordinateur récent ou fatigué, Raspberry Pi, etc.),<text:line-break/>sur différents systèmes d&amp;#8217;exploitation (Windows, Linux, macOS, etc.).<text:line-break/>Nous avons ainsi tout le loisir d&amp;#8217;adapter notre code<text:line-break/>à ces différents environnements.</text:p><text:p>Les variables d&amp;#8217;environnement sont des<text:line-break/>variables définies au niveau du système d&amp;#8217;exploitation.<text:line-break/>Elles contiennent des informations comme le répertoire courant, langue du système d&amp;#8217;exploitation, l&amp;#8217;utilisateur système courant, le type de terminal, les emplacements d&amp;#8217;installation des exécutables, etc.</text:p><text:p>On retrouve ces variables sous la forme d&amp;#8217;un<text:line-break/>objet ECMAScript nommé process.env&amp;#160;:</text:p><text:p>Nous pouvons créer des variables d&amp;#8217;environnement pour<text:line-break/>transmettre des informations contextuelles à nos programmes&amp;#160;:<text:line-break/>des chemins d&amp;#8217;accès à une base de données, si on est en situation de test<text:line-break/>ou de production, l&amp;#8217;emplacement de fichiers nécessaires au fonctionnement<text:line-break/>de notre programme, etc.</text:p><text:p>Par exemple et par convention, la variable NODE_ENV est utilisée pour indiquer au programme<text:line-break/>s&amp;#8217;il est lancé dans le cadre du développement, de l&amp;#8217;exécution des tests<text:line-break/>ou s&amp;#8217;il tourne sur le serveur de production.</text:p><text:p>L&amp;#8217;opérateur unset dans un terminal efface le contenu<text:line-break/>d&amp;#8217;une variable d&amp;#8217;environnement.</text:p><text:p>Voici le contenu du fichier process/env.js utilisé dans les exemples précédents&amp;#160;:</text:p><text:p>On notera que son comportement s&amp;#8217;adapte à la présence et à la valeur<text:line-break/>de la variable d&amp;#8217;environnement NODE_ENV.<text:line-break/>Elle est accessible dans Node en tant que process.env.NODE_ENV.</text:p><text:p>Nous verrons d&amp;#8217;autres mises en situation des variables d&amp;#8217;environnement pour<text:line-break/>configurer une application<text:line-break/>dans le chapitre 6 et pour<text:line-break/>déboguer une application en ligne de commande<text:line-break/>dans le chapitre 8.</text:p><text:p>Les arguments d&amp;#8217;exécution sont des morceaux d&amp;#8217;information transmis<text:line-break/>à un script Node.<text:line-break/>On les place à la droite du nom du fichier, comme illustré dans cet exemple&amp;#160;:</text:p><text:p>On utilise les arguments pour affiner le comportement d&amp;#8217;un programme.<text:line-break/>Je pense par exemple au numéro du port sur lequel lancer un serveur web,<text:line-break/>une liste de fichiers à traiter ou<text:line-break/>encore de fonctionnalités à activer ou à désactiver.</text:p><text:p>Il faut imaginer les arguments comme des paramètres de fonction,<text:line-break/>accessibles dans un programme Node dans<text:line-break/>le tableau process.argv&amp;#160;:</text:p><text:p>Les deux premiers éléments de process.argv sont rarement utilisés.<text:line-break/>Ils correspondent respectivement à l&amp;#8217;emplacement de l&amp;#8217;exécutable Node<text:line-break/>et à l&amp;#8217;emplacement du script.</text:p><text:p>Tous les autres arguments sont accessibles à partir de l&amp;#8217;index 2 de<text:line-break/>process.argv, dans l&amp;#8217;ordre où ils sont placés&amp;#160;:</text:p><text:p>Le script print-first.js affiche le premier argument.<text:line-break/>On peut en conclure que les arguments sont séparés par le caractère "espace".</text:p><text:p>Dans le cas où un argument doit contenir un espace, on l&amp;#8217;encadre alors<text:line-break/>entre guillemets&amp;#160;:</text:p><text:p>L&amp;#8217;inconvénient des arguments est que leur ordre compte<text:line-break/>et qu&amp;#8217;il devient difficile de connaitre leur rôle sans se référer<text:line-break/>au manuel d&amp;#8217;utilisation.</text:p><text:p>C&amp;#8217;est là qu&amp;#8217;interviennent les options.<text:line-break/>Comme le nom l&amp;#8217;indique, ce sont des arguments optionnels.<text:line-break/>Elles sont préfixées de deux traits d&amp;#8217;union (--).<text:line-break/>On peut choisir de leur associer ou non une valeur.</text:p><text:p>Quand on n&amp;#8217;associe pas de valeur à une option,<text:line-break/>on considère qu&amp;#8217;elle équivaut à un booléen<text:line-break/>de valeur true.</text:p><text:p>Les options se combinent très bien avec les arguments.<text:line-break/>Il faut les imaginer comme des interrupteurs.</text:p><text:p>Dans d&amp;#8217;autres situations, on a besoin de passer une valeur à une option&amp;#160;:</text:p><text:p>L&amp;#8217;exemple précédent illustre la césure d&amp;#8217;une phrase à 2 mots<text:line-break/>lorsque l&amp;#8217;option --limit est associée à la valeur 2.</text:p><text:p>Au fond, les options sont des repères pour les utilisateurs de nos programmes.<text:line-break/>Elles leur permettent de s&amp;#8217;interfacer avec leurs fonctionnalités.<text:line-break/>Un peu à la manière des différents boutons qu&amp;#8217;on retrouve<text:line-break/>en façade d&amp;#8217;une machine à laver.</text:p><text:p>L&amp;#8217;exemple suivant est totalement fictif mais il illustre comment<text:line-break/>on s&amp;#8217;interfacerait avec une machine à laver<text:line-break/>si elle mettait à disposition en ligne de commande&amp;#160;:</text:p><text:p>Ce qu&amp;#8217;il faut en comprendre, c&amp;#8217;est qu&amp;#8217;on démarrerait la machine située<text:line-break/>dans la cuisine avec un programme économique et à 40°C,<text:line-break/>en activant l&amp;#8217;option rapide et en désactivant l&amp;#8217;option séchage.</text:p><text:p>Nous verrons d&amp;#8217;autres mises en situation pour<text:line-break/>passer des paramètres à une application en ligne de commande<text:line-break/>dans le chapitre 8.</text:p><text:p>Chaque processus système est doté de 3 flux de données&amp;#160;:<text:line-break/>le flux d&amp;#8217;entrée (stdin), le flux de sortie (stdout)<text:line-break/>et le flux d&amp;#8217;erreur (stderr).</text:p><text:p>Les flux standards peuvent être alimentés pendant la durée de vie du processus<text:line-break/>en utilisant peu de mémoire.<text:line-break/>On les utilisera pour passer le résultat d&amp;#8217;un autre programme<text:line-break/>à notre script Node, pour informer l&amp;#8217;utilisateur de notre programme<text:line-break/>mais aussi pour consigner les erreurs.</text:p><text:p>Node expose ces flux standards via les variables process.stdin (entrée),<text:line-break/>process.stdout (sortie) et process.stderr (erreur).<text:line-break/>Chacune de ces variables possède des méthodes pour écouter ce qu&amp;#8217;il s&amp;#8217;y passe,<text:line-break/>pour y écrire du contenu et pour rediriger leur flux.</text:p><text:p>Commençons par l&amp;#8217;utilisation de process.stdout pour écrire un message<text:line-break/>dans notre terminal&amp;#160;:</text:p><text:p>Le code source de process/stdout.js fait appel à la fonction<text:line-break/>process.stdout.write par deux fois.<text:line-break/>On notera que le caractère \n symbolise un retour à la ligne<text:line-break/>(\r\n sous Windows)&amp;#160;:</text:p><text:p>Ça ne vous rappelle pas nos précédentes utilisations de la fonction<text:line-break/>console.log&amp;#160;?<text:line-break/>Pas étonnant puisque console.log se repose sur process.stdout<text:line-break/>(voir encadré ci-contre).</text:p><text:p>La fonction d&amp;#8217;affichage console.log écrit dans le flux de sortie<text:line-break/>process.stdout.<text:line-break/>Sans surprise, console.error écrit dans le flux d&amp;#8217;erreur<text:line-break/>process.stderr.</text:p><text:p>Elles ajoutent un retour à la ligne et des options de formatage pour<text:line-break/>notre confort.</text:p><text:p>On en parlera davantage dans la section console.</text:p><text:p>Les flux de sortie et d&amp;#8217;erreur sont manipulables en continu.<text:line-break/>Comment&amp;#160;?<text:line-break/>À l&amp;#8217;aide d&amp;#8217;utilitaires systèmes existants (grep, awk etc.)<text:line-break/>ou des programmes spécifiques (analyse de logs, etc.).<text:line-break/>On peut ainsi se concentrer sur un programme qui<text:line-break/>fait juste ce dont on a besoin.<text:line-break/>On laisse le travail de spécialisation à d&amp;#8217;autres programmes.</text:p><text:p>Filtrons la sortie de l&amp;#8217;exemple précédent sans écrire une ligne de code de plus.<text:line-break/>Le programme grep (fr.wikipedia.org/wiki/Grep)<text:line-break/>est fourni par défaut sur les systèmes Linux et macOS.<text:line-break/>Il ne retourne que les lignes qui contiennent le motif<text:line-break/>donné en argument&amp;#160;:</text:p><text:p>La sortie standard de process/stdout.js est devenue l&amp;#8217;entrée standard<text:line-break/>de grep grâce à l&amp;#8217;utilisation du pipe (|).</text:p><text:p>C&amp;#8217;est le moment idéal pour regarder du côté de l&amp;#8217;entrée standard de Node.<text:line-break/>Implémentons quelque chose qui transforme un message&amp;#160;:</text:p><text:p>On aurait aussi pu réutiliser la sortie de l&amp;#8217;exemple process/stdout.js&amp;#160;:</text:p><text:p>Voyons comment ça fonctionne sous le capot&amp;#160;:</text:p><text:p>Terminons avec la sortie erreur (process.stderr).<text:line-break/>Elle fonctionne de manière identique à la sortie standard (process.stdout).<text:line-break/>S&amp;#8217;il n&amp;#8217;y a visuellement aucune différence, la sortie erreur écrit son contenu<text:line-break/>dans un canal différent&amp;#160;— un descripteur différent.<text:line-break/>On l&amp;#8217;utilise pour déboguer des programmes, pour lister des erreurs ou des<text:line-break/>contenus que l&amp;#8217;on souhaite dissocier de la sortie standard.</text:p><text:p>L&amp;#8217;exemple suivant affiche un nombre toutes les demi-secondes et l&amp;#8217;état<text:line-break/>du compteur de nombres tous les 10 affichages&amp;#160;:</text:p><text:p>Un programme peut être interrompu à tout moment en utilisant la combinaison<text:line-break/>de touches .</text:p><text:p>On pourrait décider de n&amp;#8217;afficher que le flux d&amp;#8217;erreur.<text:line-break/>Utilisons l&amp;#8217;opérateur &amp;gt; pour rediriger la sortie standard vers un fichier&amp;#160;:</text:p><text:p>En ouvrant le fichier stdout.txt, on voit<text:line-break/>la liste de nombre générée par notre programme.</text:p><text:p>En maitrisant les flux standards, on peut créer des programmes modulaires<text:line-break/>qui consomment du contenu sans avoir à connaître leur provenance.<text:line-break/>Les données peuvent aller et venir depuis et vers des programmes externes,<text:line-break/>des fichiers ou des sites web distants.</text:p><text:p>Pour mieux comprendre la logique de flux continu que l&amp;#8217;on vient de découvrir,<text:line-break/>je vous invite à lire la section liée au module stream<text:line-break/>de ce même chapitre.<text:line-break/>On y détaillera la liste des événements à écouter ainsi que les différentes<text:line-break/>méthodes d&amp;#8217;écriture, de pause et de lecture.</text:p><text:p>Un processus système reçoit et émet des données mais il peut aussi<text:line-break/>écouter des événements grâce à la fonction process.on.</text:p><text:p>L&amp;#8217;exemple ci-dessus illustre l&amp;#8217;événement exit.<text:line-break/>Cet événement est déclenché quand le processus se termine.<text:line-break/>À ce titre, un code de sortie est fourni pour signaler l&amp;#8217;état dans<text:line-break/>lequel le programme se termine.<text:line-break/>On parlera davantage du code de sortie et de leur signification<text:line-break/>dans la section ci-après, Mettre fin au processus.</text:p><text:p>Essayons de lancer l&amp;#8217;exemple précédent pour voir&amp;#160;:</text:p><text:p>Tout s&amp;#8217;est passé correctement.<text:line-break/>Le code de sortie équivaut alors à 0.</text:p><text:p>Si le programme venait à se terminer de manière imprévue, nous pouvons<text:line-break/>supposer que le code serait différent.<text:line-break/>L&amp;#8217;exemple suivant provoque volontairement une erreur en faisant<text:line-break/>référence à une variable qui n&amp;#8217;existe pas&amp;#160;:</text:p><text:p>Que verrions-nous si on lançait le script&amp;#160;?</text:p><text:p>Cette fois-ci le code de sortie est 1.<text:line-break/>Cela correspond à une erreur qui n&amp;#8217;a pas été capturée.<text:line-break/>Le reste du message décrit pourquoi l&amp;#8217;erreur s&amp;#8217;est manifestée.</text:p><text:p>&amp;lt;i&amp;gt;On peut écouter d&amp;#8217;autres événements liés au cycle de vie de nos applications&amp;#160;:</text:p><text:p>La méthode process.on est à l&amp;#8217;écoute des signaux système.<text:line-break/>Vous vous souvenez de la combinaison de touches <text:line-break/>utilisée précédemment&amp;#160;?<text:line-break/>Cette combinaison émet en réalité un signal d&amp;#8217;interruption.<text:line-break/>Un signal d&amp;#8217;interruption répond à l&amp;#8217;identifiant SIGINT.</text:p><text:p>Node gère ces signaux pour nous.<text:line-break/>Mais on peut aussi se mettre à les écouter et décider de faire autrement<text:line-break/>que son comportement par défaut.</text:p><text:p>On pourrait par exemple afficher l&amp;#8217;heure de l&amp;#8217;arrêt<text:line-break/>du processus avant de rendre la main&amp;#160;:</text:p><text:p>En pratique le résultat ressemblerait à ceci&amp;#160;:</text:p><text:p>En plus du signal SIGINT, Node nous relaie les signaux suivants&amp;#160;:</text:p><text:p>SIGKILL est un autre événement important mais on ne peut pas l&amp;#8217;écouter.<text:line-break/>Quand il est émis, le processus doit être arrêté quoiqu&amp;#8217;il arrive.<text:line-break/>On l&amp;#8217;utilise justement en cas de dernier recours, quand SIGINT<text:line-break/>et SIGTERM ne font pas effet&amp;#160;; par exemple à cause d&amp;#8217;un bug dans notre code,<text:line-break/>ou une ressource qui ne rend pas la main.</text:p><text:p>Un processus Node se termine quand il n&amp;#8217;a plus d&amp;#8217;instructions à exécuter.<text:line-break/>Un processus Node peut être terminé via<text:line-break/>l'émission d&amp;#8217;un signal extérieur.<text:line-break/>Mais on peut aussi y mettre fin de l&amp;#8217;intérieur par l&amp;#8217;intermédiaire<text:line-break/>de la fonction process.exit.</text:p><text:p>On utilise cette fonction car le programme a atteint son but.<text:line-break/>On le fait aussi lorsqu&amp;#8217;on intercepte une erreur en souhaitant<text:line-break/>effectuer un traitement spécial avant de mettre fin au processus.<text:line-break/>Il se peut aussi qu&amp;#8217;il vaille mieux terminer l&amp;#8217;application en cas de perte<text:line-break/>d&amp;#8217;accès à des ressources distantes (base de données, stockage de fichiers, etc)<text:line-break/>et ce, au lieu de présenter une application web instable.</text:p><text:p>L&amp;#8217;exemple suivant illustre que l&amp;#8217;on souhaite clôturer notre script<text:line-break/>si on trouve le bon nombre&amp;#160;:</text:p><text:p>Dans cet exemple, on écoute l&amp;#8217;utilisateur de manière indéfinie, jusqu&amp;#8217;à ce qu&amp;#8217;il<text:line-break/>ou elle trouve le bon nombre.<text:line-break/>Lorsque c&amp;#8217;est le cas, on peut interrompre le programme en transmettant<text:line-break/>un code de sortie de réussite&amp;#160;: le code 0 (zéro).</text:p><text:p>On pourrait tout à fait imaginer une variante de ce script dans laquelle<text:line-break/>on limiterait le nombre de mauvaises réponses.<text:line-break/>Lorsqu&amp;#8217;on attendrait cette limite, le programme utiliserait un code de sortie<text:line-break/>différent de zéro.<text:line-break/>Le code 9 ferait l&amp;#8217;affaire puisqu&amp;#8217;il indique qu&amp;#8217;un argument invalide a été<text:line-break/>passé.</text:p><text:p>À la manière de process.exit, le programme est terminé immédiatement.<text:line-break/>On l&amp;#8217;utilise quand quelque chose d&amp;#8217;inopiné et nécessitant un débogage<text:line-break/>avancé se produit.</text:p><text:p>La fonction génère un fichier de débogage qui contient tout le contenu<text:line-break/>de la mémoire utilisée par Node (core file).<text:line-break/>Ce fichier dit core file s&amp;#8217;analyse avec des logiciels avancés comme mdb_v8.</text:p><text:p>La documentation du module process est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/process.html</text:p><text:p><text:line-break/>----<text:line-break/>const variables = Object.keys(process.env);<text:line-break/><text:line-break/>console.log(variables);                     1<text:line-break/>console.log(process.argv);                  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19406 {list_context: "colist", text: "Affiche quelque chose comme `['LANG', 'SHELL', 'PATH', 'HOME', 'USER', ...]`{nbsp}— cf.{nbsp}&lt;&lt;process.env,variables d'environnement>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19416 {list_context: "colist", text: "Affiche `[ '.../v{nodeV}/bin/node', '.../chapter-04/examples/process/intro.js' ]`{nbsp}— cf.{nbsp}&lt;&lt;process.argv,arguments d'exécution>>.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node -p 'process.env'<text:line-break/>{ ITERM_PROFILE: 'Default',<text:line-break/>  LANG: 'en_GB.UTF-8',<text:line-break/>  PWD: '/Users/oncletom/workspace/nodebook',<text:line-break/>  SHELL: '/bin/zsh',<text:line-break/>  TERM_PROGRAM_VERSION: '3.1.5',<text:line-break/>  TERM_PROGRAM: 'iTerm.app',<text:line-break/>  ...<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19442 {list_context: "dlist", text: "Variable d'environnement éphémère", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19444 {list_context: "dlist", text: "La variable n'existe que pendant la durée de vie du programme.\nLa définition `CLÉ=valeur` est placée sur la même ligne que le programme\nen question.", blocks: 0}><text:line-break/>----<text:line-break/>$ NODE_ENV=production node process/env.js<text:line-break/>mode : production<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19462 {list_context: "dlist", text: "Variable d'environnement permanente", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19464 {list_context: "dlist", text: "La variable existe pendant la durée de la session\ngrâce à l'opérateur `export` sous Linux et macOS et\navec l'opérateur `set` sous Windows. +\nLa définition `export CLÉ=valeur` est placée sur sa propre ligne.\nElle restera accessible à _tout programme_ jusqu'à la fin de la session\nou jusqu'à ce qu'on efface la variable.", blocks: 0}><text:line-break/>----<text:line-break/>$ export NODE_ENV=production<text:line-break/>$ node process/env.js<text:line-break/>mode : production<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ export NODE_ENV=dev<text:line-break/>$ echo $NODE_ENV<text:line-break/>$ unset NODE_ENV<text:line-break/>$ echo $NODE_ENV<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {NODE_ENV} = process.env;<text:line-break/><text:line-break/>if (NODE_ENV === 'dev') {<text:line-break/>  console.log('On est en mode développement.');<text:line-break/>}<text:line-break/><text:line-break/>console.log('mode : %s', NODE_ENV);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ NODE_ENV=dev node process/env.js<text:line-break/>On est en mode développement.<text:line-break/>mode : dev<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node print-first.js salut<text:line-break/>"salut"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const [,,first_arg] = process.argv;<text:line-break/><text:line-break/>console.log(first_arg);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node print-first.js salut ça va ?<text:line-break/>"salut"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node print-first.js "salut ça va ?" "oui et toi ?"<text:line-break/>"salut ça va ?"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node print-text.js "salut ça va ?" --uppercase<text:line-break/>SALUT ÇA VA ?<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>let [,,text] = process.argv;<text:line-break/><text:line-break/>if (process.argv.includes('--uppercase')) { 1<text:line-break/>  text = text.toLocaleUpperCase();<text:line-break/>}<text:line-break/><text:line-break/>console.log(text);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19632 {list_context: "colist", text: "La condition est positive si l'on détecte `--uppercase` dans la liste des arguments.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node print-text-limit.js "salut ça va ?" --limit 2<text:line-break/>salut ça<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>let [,,text] = process.argv;<text:line-break/><text:line-break/>const limitIndex = process.argv.indexOf('--limit');     1<text:line-break/><text:line-break/>if (limitIndex &amp;gt;= 2) {<text:line-break/>  const limitValue = process.argv[limitIndex + 1];      2<text:line-break/>  text = text.split(' ').slice(0, limitValue).join(' ');3<text:line-break/>}<text:line-break/><text:line-break/>console.log(text);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19684 {list_context: "colist", text: "On récupère l'index de l'option `--limit` dans le tableau `process.argv`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19694 {list_context: "colist", text: "On récupère la valeur de l'élément suivant `--limit` dans `process.argv`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19704 {list_context: "colist", text: "La troncature est paramétrée en fonction de la valeur associée à `--limit`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ machine-a-laver P-ECO 40 --fast --no-dry --room kitchen<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/stdout.js<text:line-break/>un deuxtrois<text:line-break/>quatre<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>process.stdout.write('un deux');<text:line-break/>process.stdout.write('trois\nquatre');<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/stdout.js | grep 'tre'<text:line-break/>qua&amp;lt;i&amp;gt;tre&amp;lt;/i&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ echo "un deuxtrois\nquatre" | node process/stdin-uppercase.js<text:line-break/>UN DEUXTROIS<text:line-break/>QUATRE<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/stdout.js | node process/stdin-uppercase.js<text:line-break/>UN DEUXTROIS<text:line-break/>QUATRE<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>process.stdin.on('data', (chunk) =&amp;gt; {             1<text:line-break/>  const text = chunk.toString();                  2<text:line-break/><text:line-break/>  process.stdout.write(text.toLocaleUpperCase()); 3<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19848 {list_context: "colist", text: "Chaque afflux de donnée appelle notre fonction en lui fournissant un seul paramètre contenant les données en question.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19858 {list_context: "colist", text: "Le paramètre est de &lt;&lt;buffer,type Buffer>>{nbsp}— on souhaite le transformer en &lt;&lt;../chapter-03/index.adoc#string,chaîne de caractères>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19868 {list_context: "colist", text: "La _chaîne de caractères_ est transformable en majuscules, que l'on écrit dans le flux de sortie.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/stdout-long.js<text:line-break/>7<text:line-break/>24<text:line-break/>3<text:line-break/>19<text:line-break/>25<text:line-break/>Compteur = 5<text:line-break/>22<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const random = (limit) =&amp;gt; Math.floor(Math.random() * limit);<text:line-break/>let counter = 0;<text:line-break/><text:line-break/>setInterval(() =&amp;gt; {<text:line-break/>  counter++;<text:line-break/>  process.stdout.write(`${random(30)}\n`);                1<text:line-break/><text:line-break/>  if (Number.isInteger(counter / 5)) {                    2<text:line-break/>    process.stderr.write(`Compteur = ${counter}\n`);      3<text:line-break/>  }<text:line-break/>}, 500);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@19936 {list_context: "colist", text: "Écrit un nombre entre 0 et 30 dans la _sortie standard_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19946 {list_context: "colist", text: "On vérifie si la valeur du compteur est divisible par 5{nbsp}— c'est le cas si la division produit un entier au lieu d'un nombre à virgule.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@19956 {list_context: "colist", text: "Affiche `Compteur = 5` puis `Compteur = 10` (et ainsi de suite) dans la _sortie erreur_.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node process/stdout-long.js &amp;gt; stdout.txt<text:line-break/>Compteur = 5<text:line-break/>Compteur = 10<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>console.log('Le processus démarre');<text:line-break/><text:line-break/>process.on('exit', (code) =&amp;gt; {<text:line-break/>  console.log(`Le processus termine avec le code ${code}`);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/exit.js<text:line-break/>Le processus démarre<text:line-break/>Le processus termine avec le code 0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>process.on('exit', (code) =&amp;gt; {<text:line-break/>  console.log(`Le processus termine avec le code ${code}`);<text:line-break/>});<text:line-break/><text:line-break/>/* eslint-disable-next-line no-undef */<text:line-break/>console.log(jenexistepas);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/exit-error.js<text:line-break/>Le processus termine avec le code 1<text:line-break/><text:line-break/>&amp;lt;i&amp;gt;ReferenceError&amp;lt;/i&amp;gt;: jenexistepas is not defined<text:line-break/>    at Object.&amp;lt;anonymous&amp;gt; (/.../examples/process/&amp;lt;i&amp;gt;exit-error.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;5&amp;lt;/i&amp;gt;:13)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const log = (msg) =&amp;gt; {<text:line-break/>  console.log(`${new Date().toISOString()} - ${msg}`);<text:line-break/>}<text:line-break/><text:line-break/>log('Processus démarré');                     1<text:line-break/><text:line-break/>process.on('SIGINT', () =&amp;gt; {                  2<text:line-break/>  log('Processus terminé (manuellement)');<text:line-break/>  process.exit(0);                            3<text:line-break/>});<text:line-break/><text:line-break/>setTimeout(() =&amp;gt; {                            4<text:line-break/>  log('Processus terminé (timeout)');<text:line-break/>  process.exit(0);<text:line-break/>}, 5000)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20194 {list_context: "colist", text: "Un premier message s'affichera au démarrage du script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20204 {list_context: "colist", text: "Cette &lt;&lt;../chapter-03/index.adoc#function,fonction>> se déclenche lors de la réception du _signal d'interruption_ (`SIGINT`), lorsque le système d'exploitation lui relaie notre combinaison de touches kbd:[Ctrl+C].", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20214 {list_context: "colist", text: "La fonction &lt;&lt;process.exit,`process.exit`>> nous permet de mettre fin manuellement au processus (voir section ci-après).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20224 {list_context: "colist", text: "Sinon ce _timer_ mettra fin au processus au bout de 5 secondes.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node process/interrupt.js<text:line-break/>2018-03-16T10:58:32.855Z - Processus démarré<text:line-break/><text:line-break/>2018-03-16T10:58:40.000Z - Processus terminé (manuellement)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/exit-devinette.js<text:line-break/>JEU ! Trouve le nombre auquel je pense :<text:line-break/>10<text:line-break/>Hm hm, essaie encore.<text:line-break/>3<text:line-break/>Tu as trouvé, bravo !<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const secret_number = Number(process.argv[2] || 3);       1<text:line-break/><text:line-break/>console.log('JEU ! Trouve le nombre auquel je pense :');<text:line-break/>process.stdin.on('data', (chunk) =&amp;gt; {                     2<text:line-break/>  if (parseFloat(chunk) === secret_number) {<text:line-break/>    console.log('Tu as trouvé, bravo !');<text:line-break/>    process.exit(0);                                      3<text:line-break/>  }<text:line-break/>  else {<text:line-break/>    console.log('Hm hm, essaie encore.');                 4<text:line-break/>  }<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20408 {list_context: "colist", text: "Le nombre secret est `3` par défaut, sauf s'il est passé &lt;&lt;process.argv,en argument>> du script.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20418 {list_context: "colist", text: "Cette fonction est invoquée à chaque saisie suivie de l'utilisation de la touche kbd:[ENTER].", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20428 {list_context: "colist", text: "Cette ligne met fin immédiatement au script, après avoir affiché un message de félicitations.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20438 {list_context: "colist", text: "Ce message s'affichera à chaque saisie erronée, jusqu'à ce que le nombre secret soit trouvé.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">stream : manipuler des flux de données</text:h><text:p>Le module stream contient les éléments de base pour lire, écrire et<text:line-break/>transformer des flux de données rapidement et avec peu de mémoire.</text:p><text:p>Créer ses propres flux est une chose assez compliquée à réaliser.<text:line-break/>Dans cette section nous allons nous focaliser sur l&amp;#8217;utilisation des modules<text:line-break/>Node qui génèrent de tels flux.</text:p><text:p>Un flux de lecture consomme les données en morceaux.<text:line-break/>Il correspond à une instance de l&amp;#8217;objet stream.Readable.<text:line-break/>L&amp;#8217;exemple précédent n&amp;#8217;a affiché qu&amp;#8217;un seul morceau car la taille maximale<text:line-break/>par défaut est d&amp;#8217;environ 16Ko.</text:p><text:p>L&amp;#8217;option highWaterMark adapte le débit de lecture.<text:line-break/>Cette valeur est exprimé en octets.<text:line-break/>Plus ce nombre est petit, moins Node utilise de mémoire&amp;#160;:</text:p><text:p>Le mécanisme de flux s&amp;#8217;applique également à l&amp;#8217;écriture.<text:line-break/>Un flux d&amp;#8217;écriture nous permet d&amp;#8217;écrire des données par morceaux.<text:line-break/>Il correspond à une instance de l&amp;#8217;objet stream.Writeable.</text:p><text:p>L&amp;#8217;exemple suivant illustre une succession d&amp;#8217;écriture dans un même flux&amp;#160;:</text:p><text:p>Cette écriture par morceaux a pour effet de réduire la pression mémoire<text:line-break/>exercée par Node sur le système d&amp;#8217;exploitation et pour le reste du programme.<text:line-break/>Ce mécanisme est particulièrement adapté lorsque l&amp;#8217;écriture prendra du temps<text:line-break/>ou implique un certain volume de données.</text:p><text:p>Les flux de lecture et d&amp;#8217;écriture peuvent être combinés.<text:line-break/>Les données lues depuis une source (Readable) sont redirigées vers<text:line-break/>une destination (Writeable) à l&amp;#8217;aide de la fonction pipe()&amp;#160;:</text:p><text:p>Dans cet exemple, nous avons pris deux fichiers comme source de lecture<text:line-break/>et destination d&amp;#8217;écriture.<text:line-break/>Nous avons assemblé les deux flux avec pipe() puis détecté la fin de la copie.</text:p><text:p>La fonction stream.pipe() correspond littéralement à l&amp;#8217;opérateur Unix |.</text:p><text:p>Les morceaux de données d&amp;#8217;un premier programme sont transmis en entrée à un<text:line-break/>second programme.<text:line-break/>Ici, le mécanisme s&amp;#8217;applique à des fonctions Node.</text:p><text:p>L&amp;#8217;utilisation de pipe() peut paraitre superflue pour copier des fichiers.<text:line-break/>À vrai dire, la fonction fs.copyFile fait exactement la même chose.<text:line-break/>Le mécanisme de redirection proposé par pipe() est modulaire et composable.</text:p><text:p>On peut par exemple diriger une source de données vers plusieurs flux d&amp;#8217;écriture.<text:line-break/>En même temps&amp;#160;:</text:p><text:p>Cette technique agit comme une gare de triage&amp;#160;: nous avons la liberté<text:line-break/>d&amp;#8217;agir sur les données avant de les envoyer vers leur flux d&amp;#8217;écriture distinct.</text:p><text:p>On peut aussi transformer les contenus à la volée en utilisant plusieurs<text:line-break/>fois la fonction pipe().<text:line-break/>Les données sont passées à des objets capable de lire et d&amp;#8217;écrire des flux.<text:line-break/>C&amp;#8217;est le cas du module zlib, responsable de compresser et de<text:line-break/>décompresser des données&amp;#160;:</text:p><text:p>Cet exemple devrait afficher le contenu de notre fichier source avec une taille<text:line-break/>réduite grâce à la compression gzip&amp;#160;:</text:p><text:p>L&amp;#8217;affichage semble bizarre et c&amp;#8217;est normal&amp;#160;: ce sont des données compressées<text:line-break/>au format gzip&amp;#160;— un format de compression libre.</text:p><text:p>Le programme Unix gzip sait décoder des données compressées dans ce format.<text:line-break/>Il sait aussi les décoder à la volée avec un pipe&amp;#160;:</text:p><text:p>Nous avons vu comment transmettre des flux de données de manière interopérable<text:line-break/>entre un script Node et un programme externe, entre deux programmes externes<text:line-break/>et entre deux scripts Node.</text:p><text:p>La documentation du module stream est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/stream.html</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const {createReadStream} = require('fs');<text:line-break/><text:line-break/>createReadStream(__filename)                    1<text:line-break/>  .on('data', (data) =&amp;gt; {                       2<text:line-break/>    console.log('%d octets lus', data.length);  3<text:line-break/>  });<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20540 {list_context: "colist", text: "On crée un _flux de lecture_ qui ouvre le fichier courant (`+__filename+`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20550 {list_context: "colist", text: "Invoque cette fonction à chaque morceau de données lu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20560 {list_context: "colist", text: "Affiche le nombre d'octets lus dans ce morceau.", blocks: 0}><text:line-break/>----<text:line-break/>$ node stream/intro.js<text:line-break/>214 octets lus<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {createReadStream} = require('fs');<text:line-break/><text:line-break/>createReadStream(__filename, {highWaterMark: 100})          1<text:line-break/>  .on('end', () =&amp;gt; console.log('Lecture terminée'))         2<text:line-break/>  .on('data', (data) =&amp;gt; {<text:line-break/>    console.log('%d octets reçus', data.length);<text:line-break/>  });<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20608 {list_context: "colist", text: "On spécifie cette fois qu'on lit `100 octets` à la fois.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20618 {list_context: "colist", text: "Affiche `Lecture terminée` lorsque tous les morceaux ont été lus.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node stream/read.js<text:line-break/>100 octets lus<text:line-break/>100 octets lus<text:line-break/>78 octets lus<text:line-break/>Lecture terminée<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {createWriteStream, readFile} = require('fs');<text:line-break/>const {join} = require('path');<text:line-break/><text:line-break/>const dest = join(__dirname, 'debug.txt');<text:line-break/>const stream = createWriteStream(dest);                       1<text:line-break/><text:line-break/>stream.on('finish', () =&amp;gt; {<text:line-break/>  readFile(dest, (error, data) =&amp;gt; console.log(String(data))); 4<text:line-break/>});<text:line-break/><text:line-break/>stream.write('Hell');                                         2<text:line-break/>stream.write('o Worl');<text:line-break/>stream.end('d!');                                             3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20672 {list_context: "colist", text: "On crée un _flux d'écriture_ vers le fichier `stream/debug.txt`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20682 {list_context: "colist", text: "Écrit `Hell` dans le flux.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20692 {list_context: "colist", text: "Écrit `d!` dans le flux et signale que nous n'avons plus de données à transmettre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20702 {list_context: "colist", text: "Lit le contenu du fichier en une seule fois et affiche `Hello World!`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {createReadStream, createWriteStream} = require('fs');<text:line-break/>const {join} = require('path');<text:line-break/><text:line-break/>const source = createReadStream(__filename);                  1<text:line-break/>const dest = createWriteStream(join(__dirname, 'copie.js'));  2<text:line-break/><text:line-break/>source.pipe(dest)                                             3<text:line-break/>      .on('finish', () =&amp;gt; console.log('Copie terminée !'));   4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20750 {list_context: "colist", text: "On crée un flux de lecture.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20760 {list_context: "colist", text: "On crée un flux d'écriture.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20770 {list_context: "colist", text: "On _redirige_ le flux de lecture _vers_ le flux d'écriture.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20780 {list_context: "colist", text: "La redirection retourne le flux d'écriture, que l'on écoute pour savoir quand il a terminé d'écrire sur le disque.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {createReadStream, createWriteStream} = require('fs');<text:line-break/>const {join} = require('path');<text:line-break/><text:line-break/>const read = createReadStream(__filename);<text:line-break/>read.on('end', () =&amp;gt; console.log('Lecture terminée !'));<text:line-break/><text:line-break/>read.pipe(createWriteStream(join(__dirname, 'copie.js')));  1<text:line-break/>read.pipe(process.stdout);                                  2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20846 {list_context: "colist", text: "Écrit une copie du fichier comme dans l'exemple `stream/pipe.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20856 {list_context: "colist", text: "Redirige le contenu de lecture vers la &lt;&lt;process.std,sortie standard>> de notre terminal.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const {createReadStream} = require('fs');<text:line-break/>const {createGzip} = require('zlib');<text:line-break/><text:line-break/>createReadStream(__filename)<text:line-break/>  .pipe(createGzip())         1<text:line-break/>  .pipe(process.stdout);      2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20900 {list_context: "colist", text: "Compresse les données à la volée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20910 {list_context: "colist", text: "Les données compressées sont transmises à la &lt;&lt;process.std,sortie standard>>.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node stream/pipe-transform.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node stream/pipe-transform.js | gzip<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@20944 {list_context: "dlist", text: "`stream.pipe()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20946 {list_context: "dlist", text: "Redirige un flux de lecture vers un flux d'écriture.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20960 {list_context: "dlist", text: "`stream.on('data')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20962 {list_context: "dlist", text: "Déclenché lorsqu'un morceau de données a été lu.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20976 {list_context: "dlist", text: "`stream.on('error')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20978 {list_context: "dlist", text: "Déclenché lorqu'une erreur se produit.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20992 {list_context: "dlist", text: "`stream.on('end')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@20994 {list_context: "dlist", text: "Déclenché lorsqu'il n'y a plus de données à lire.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21008 {list_context: "dlist", text: "`stream.on('readable')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21010 {list_context: "dlist", text: "Déclenché lorsque la lecture de données est prête à démarrer.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21038 {list_context: "dlist", text: "`stream.write()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21040 {list_context: "dlist", text: "Écrit des données dans le flux.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21054 {list_context: "dlist", text: "`stream.end()`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21056 {list_context: "dlist", text: "Signale que nous n'avons plus de données à transmettre.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21070 {list_context: "dlist", text: "`stream.on('drain')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21072 {list_context: "dlist", text: "Déclenché lorque la mémoire d'écriture est vide et prête à accepter\nde nouvelles données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21088 {list_context: "dlist", text: "`stream.on('error')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21090 {list_context: "dlist", text: "Déclenché lorqu'une erreur se produit.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21104 {list_context: "dlist", text: "`stream.on('finish')`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21106 {list_context: "dlist", text: "Déclenché lorsqu'on a clôturé le flux d'écriture.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">D&amp;#8217;autres modules pour aller plus loin</text:h><text:p>Node embarque d&amp;#8217;autres modules que ceux listés précédemment.<text:line-break/>Ils nécessitent des connaissances sur des sujets bas niveau,<text:line-break/>plus proches du matériel et des protocoles réseaux.</text:p><text:p><text:line-break/>#&lt;Asciidoctor::ListItem@21168 {list_context: "dlist", text: "[[cluster]]module `cluster`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21170 {list_context: "dlist", text: "Gère la distribution d'une application sur plusieurs CPU d'un même ordinateur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21184 {list_context: "dlist", text: "[[crypto]]module `crypto`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21186 {list_context: "dlist", text: "Fonctions cryptographiques pour chiffrer, signer et vérifier des données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21200 {list_context: "dlist", text: "[[dgram]]module `dgram`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21202 {list_context: "dlist", text: "Création et consommation de ressources UDP.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21216 {list_context: "dlist", text: "[[dns]]module `dns`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21218 {list_context: "dlist", text: "Fonctions de résolution et de lecture d'enregistrements DNS.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21232 {list_context: "dlist", text: "[[net]]module `net`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21234 {list_context: "dlist", text: "Création et consommation de ressources TCP. +\nLes modules `http`, `https` et `http2` se basent dessus.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21250 {list_context: "dlist", text: "[[readline]]module `readline`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21252 {list_context: "dlist", text: "Manipulation ligne par ligne d'un &lt;&lt;stream,stream>>.\nLe module est particulièrement utilisé dans des\n&lt;&lt;../chapter-08/index.adoc#,applications en ligne de commande>> (chapitre 8),\npour mettre à jour une barre de progression et animer des éléments d'affichage.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21272 {list_context: "dlist", text: "[[tty]]module `tty`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21274 {list_context: "dlist", text: "Gestion d'interface de terminal en mode texte.\nLe module `readline` se base dessus.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21290 {list_context: "dlist", text: "[[v8]]module `v8`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21292 {list_context: "dlist", text: "Fonctions de lecture et d'écriture d'instructions de la machine virtuelle V8\ndans le processus actuel.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21308 {list_context: "dlist", text: "[[vm]]module `vm`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21310 {list_context: "dlist", text: "Fonctions de création de nouveaux contextes d'interprétation de la machine virtuelle V8.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21324 {list_context: "dlist", text: "[[zlib]]module `zlib`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21326 {list_context: "dlist", text: "Fonctions de compression et de décompression de données (Gzip, Inflate/Deflate). +\nCes formats sont utilisés pour la compression de requêtes HTTP.", blocks: 0}></text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const fs = require('fs');             1<text:line-break/><text:line-break/>fs.readdir('.', (error, files) =&amp;gt; {   2<text:line-break/>  console.log(files);                 3<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14138 {list_context: "colist", text: "On assigne les fonctions et attributs du module `fs` dans la variable `fs`{nbsp}— on pourrait l'appeler autrement si on en avait envie.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14148 {list_context: "colist", text: "L'appel à la fonction `fs.readdir` passe un objet d'erreur ainsi que la liste des fichiers et répertoires contenus dans le chemin indiqué.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14158 {list_context: "colist", text: "Affiche un tableau contenant les noms de fichiers et de répertoires présents dans le dossier courant.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@14226 {list_context: "dlist", text: "*déprécié*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14228 {list_context: "dlist", text: "Le module sera supprimé dans une prochaine version majeure.\nÀ l'avenir, il vaut mieux ne pas se compter dessus.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14244 {list_context: "dlist", text: "*expérimental*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14246 {list_context: "dlist", text: "Le module est en cours de développement.\nUne fonctionnalité expérimentale peut changer radicalement entre deux\nversions de Node.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14264 {list_context: "dlist", text: "*stable*", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@14266 {list_context: "dlist", text: "On peut faire confiance à ce module.\nDes choses peuvent changer exceptionnellement mais l'intention est d'offrir\nune stabilité.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Créer ses propres modules Node</text:h><text:p>Le chargement des modules de base nous a aidé à utiliser<text:line-break/>des fonctionnalités fournies directement par Node.<text:line-break/>Nous pouvons exploiter ce mécanisme pour<text:line-break/>organiser son code dans plusieurs fichiers.<text:line-break/>C&amp;#8217;est un mécanisme comparable à ce que l&amp;#8217;on retrouve en Python (import),<text:line-break/>PHP (require) et Ruby (require et require_relative).</text:p><text:h text:outline-level="3">Importer et exporter des valeurs</text:h><text:p>Le fichier d&amp;#8217;exemple modules/enfant.js contient une variable, number.<text:line-break/>Essayons de la réutiliser dans le fichier modules/parent.js<text:line-break/>à l&amp;#8217;aide de la fonction require()&amp;#160;:</text:p><text:p>Exécutons le fichier modules/parent.js avec Node pour en avoir le cœur net&amp;#160;:</text:p><text:p>De là nous pouvons en tirer un apprentissage important&amp;#160;:<text:line-break/>on ne peut pas voir ce qu&amp;#8217;il y a dans un module depuis l&amp;#8217;extérieur.</text:p><text:p>Choisissons maintenant ce que l&amp;#8217;on souhaite exporter en assignant<text:line-break/>la valeur de notre choix à module.exports&amp;#160;:</text:p><text:p>Comment est-ce que ça se traduit lorsqu&amp;#8217;on l&amp;#8217;appelle avec require()&amp;#160;?</text:p><text:p>module.exports rend visible ce qui est exporté par un module.<text:line-break/>Les éléments exportés sont visibles depuis l&amp;#8217;extérieur.<text:line-break/>Par défaut, module.exports est un objet.</text:p><text:p>Essayons maintenant d&amp;#8217;exporter plusieurs valeurs en une seule fois&amp;#160;:</text:p><text:p>Nous avons créé deux nouvelles valeurs&amp;#160;: number (un nombre) et<text:line-break/>random (une fonction).</text:p><text:p>L&amp;#8217;utilisation de la syntaxe d&amp;#8217;objet raccourcie évite la répétition<text:line-break/>du nom des variables lors de l&amp;#8217;export.</text:p><text:p>En résumé, pour Node tout fichier .js est un module.<text:line-break/>Le mécanisme d&amp;#8217;import et d&amp;#8217;export est basé sur des chemins de fichiers.<text:line-break/>Si on n&amp;#8217;utilise pas de chemin de fichiers, Node pense que l&amp;#8217;on fait<text:line-break/>référence à un module de base ou à un<text:line-break/>module npm<text:line-break/>(cf. chapitre 5).</text:p><text:p>Le mécanisme de modules implémenté dans Node est basé sur la<text:line-break/>spécification CommonJS, à peu de choses près.</text:p><text:p>www.commonjs.org/specs/modules/1.0/</text:p><text:p>----<text:line-break/>const number = 42;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const enfant = require('./enfant.js');    1<text:line-break/><text:line-break/>console.log(enfant.number);               2<text:line-break/>console.log(enfant);                      3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21424 {list_context: "colist", text: "Contrairement aux &lt;&lt;modules-builtin,modules de base>>, on passe un *chemin relatif au fichier courant*.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21434 {list_context: "colist", text: "Est-ce que cela affichera la valeur de la variable `number`{nbsp}?", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21444 {list_context: "colist", text: "Mais au fond, que contient notre variable `enfant`{nbsp}?", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node modules/parent.js<text:line-break/>undefined<text:line-break/>{}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const number = 42;<text:line-break/><text:line-break/>module.exports = number;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const enfant = require('./enfant-export.js');<text:line-break/><text:line-break/>console.log(enfant.number);               1<text:line-break/>console.log(enfant);                      2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21522 {list_context: "colist", text: "Affiche `undefined`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21532 {list_context: "colist", text: "Affiche `42`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const number = 42;<text:line-break/><text:line-break/>module.exports.number = number;<text:line-break/>module.exports.random = (limit = 100) =&amp;gt; Math.floor(Math.random() * limit);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const enfant = require('./enfant-export-multiple.js');<text:line-break/><text:line-break/>console.log(enfant.number);               1<text:line-break/>console.log(enfant.random());             2<text:line-break/><text:line-break/>module.exports = enfant.random;           3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21606 {list_context: "colist", text: "Affiche `42`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21616 {list_context: "colist", text: "Affiche un nombre aléatoire entre 0 et 100.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21626 {list_context: "colist", text: "Réexporte la fonction `enfant.number`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const number = 42;<text:line-break/>const random = (limit = 100) =&amp;gt; Math.floor(Math.random() * limit);<text:line-break/><text:line-break/>module.exports = {number, random};      1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21680 {list_context: "colist", text: "Liste des valeurs retournée par l'objet `module.exports`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Aller plus loin avec require()</text:h><text:p>Lorsqu&amp;#8217;on fait appel à la fonction require(), Node effectue la liste d&amp;#8217;actions suivantes&amp;#160;:</text:p><text:p>L&amp;#8217;utilisation de require() est synchrone et bloquante.<text:line-break/>Si l&amp;#8217;exécution du code dans le module chargé prend du temps<text:line-break/>—&amp;#160;code lent, accès à une ressource distante&amp;#160;— le chargement<text:line-break/>du module en prendra un coup.</text:p><text:p>require() permet de charger 3 types de modules&amp;#160;:</text:p><text:p>Node met les modules en cache.<text:line-break/>Si on inclut deux fois le même module, le deuxième import ira directement<text:line-break/>à la dernière étape de la liste d&amp;#8217;actions.<text:line-break/>Ça implique aussi que si le module modifie une de ses variables privée,<text:line-break/>cette modification impactera le deuxième import.</text:p><text:p>Voici un module illustrant une variable privée et une variable exportée&amp;#160;:</text:p><text:p>Nous allons importer ce module par deux fois, dans deux variables différentes&amp;#160;:</text:p><text:p>Quel est le verdict à votre avis&amp;#160;?<text:line-break/>Rien ne vaut une vérification, quitte à remettre en question<text:line-break/>notre avis initial&amp;#160;:</text:p><text:p>Il faut garder cette information en tête lorsqu&amp;#8217;on importe un module.<text:line-break/>Sans oublier que ce mécanisme se transforme en atout afin de partager<text:line-break/>une variable entre plusieurs modules.<text:line-break/>Pratique dans le cas d&amp;#8217;un cache de données ou d&amp;#8217;une configuration partagée.</text:p><text:p>Enfin, plusieurs problèmes peuvent apparaitre lors du chargement d&amp;#8217;un module&amp;#160;:</text:p><text:p>Node lancera une exception et<text:line-break/>le programme s&amp;#8217;arrêtera aussitôt.</text:p><text:p>L&amp;#8217;intégralité des variables, fonctions et classes du module modules<text:line-break/>est documentée sur le site web du projet Node.<text:line-break/>La documentation contient des informations à jour et qui ne sont pas<text:line-break/>forcément listées dans cet ouvrage.</text:p><text:p>nodejs.org/docs/latest-v10.x/api/modules.html</text:p><text:p><text:line-break/>1. résolution du chemin vers le module en question,1. lecture du fichier,1. interprétation du code,1. exécution du code,1. retourne la valeur de module.exports<text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. des fichiers relatifs au module actuel<text:line-break/>require('./module.js') cherchera le fichier module.js dans le répertoire courant.<text:line-break/>require('../module.js') cherchera module.js dans le répertoire parent.,1. des modules Node<text:line-break/>Ils sont disponibles avec chaque installation de Node.<text:line-break/>On en parle plus en détail dans la section modules Node<text:line-break/>de ce même chapitre.,1. des modules npm<text:line-break/>Ils sont disponibles avec une étape d&amp;#8217;installation supplémentaire.<text:line-break/>On en parle plus en détails dans le chapitre 5<text:line-break/>consacré à npm.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>let counter = 0;                      1<text:line-break/><text:line-break/>const increment = () =&amp;gt; ++counter;<text:line-break/><text:line-break/>module.exports = increment;           2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21884 {list_context: "colist", text: "Variable privée.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21894 {list_context: "colist", text: "`increment` est rendue publique à cet endroit{nbsp}— la fonction incrémente la variable privée `counter`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>const first = require('./increment.js');<text:line-break/>const second = require('./increment.js');<text:line-break/><text:line-break/>console.log(first());   1<text:line-break/>console.log(first());   2<text:line-break/>console.log(second());  3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@21938 {list_context: "colist", text: "Affiche `1`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21948 {list_context: "colist", text: "Affiche `2`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@21958 {list_context: "colist", text: "Affiche `1` ou `3`{nbsp}?", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node modules/double-import.js<text:line-break/>1<text:line-break/>2<text:line-break/>3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* le chemin vers le module est erroné&amp;#160;;,* le module contient une erreur de syntaxe.<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Le futur : les modules ECMAScript</text:h><text:p>Pendant que le mécanisme de modules de Node montait en puissance,<text:line-break/>les navigateurs web étaient en attente d&amp;#8217;une solution native.<text:line-break/>La spécification des modules ECMAScript a été validée en 2013<text:line-break/>mais les navigateurs ont tardé à implémenter le mécanisme.</text:p><text:p>La plupart d&amp;#8217;entre eux ont implémenté les modules ECMAScript en 2017.<text:line-break/>C&amp;#8217;est le cas du navigateur web Chrome et de<text:line-break/>sa machine virtuelle V8.</text:p><text:p>Si la syntaxe des modules ECMAScript est standardisée,<text:line-break/>ce n&amp;#8217;est pas encore aussi stable du côté de Node.</text:p><text:p>Les modules ECMAScript sont suffixés de l&amp;#8217;extension .mjs<text:line-break/>et nécessitent l&amp;#8217;utilisation de l'option de démarrage<text:line-break/>--experimental-modules.</text:p><text:p>Reprenons l&amp;#8217;exemple modules/increment.js pour le<text:line-break/>transformer en module ECMAScript&amp;#160;:</text:p><text:p>La syntaxe export sert à exporter des variables.<text:line-break/>Elle se combine avec import&amp;#160;:</text:p><text:p>Il ne nous reste maintenant plus qu&amp;#8217;à exécuter notre script .mjs<text:line-break/>pour observer le résultat.<text:line-break/>On notera l&amp;#8217;utilisation de --experimental-modules&amp;#160;:</text:p><text:p>Reprenons cet exemple pour importer plusieurs exports d&amp;#8217;un coup&amp;#160;:</text:p><text:p>On notera au passage qu&amp;#8217;on utilise la<text:line-break/>destructuration d&amp;#8217;objet<text:line-break/>pour extraire un export nommé depuis un module ECMAScript.</text:p><text:p>La fonction reset a bien remis à zéro le compteur entre temps.<text:line-break/>Objectif accompli&amp;#160;!</text:p><text:p>Résumons les différences notables avec le mécanisme de modules Node&amp;#160;:</text:p><text:p>Ce dernier point est le plus embêtant car il ralentit l&amp;#8217;interopérabilité<text:line-break/>entre les scripts destinés au développement web front-end et les scripts Node.</text:p><text:p>L&amp;#8217;histoire nous dira si les modalités s&amp;#8217;assoupliront avec le temps.</text:p><text:p>Le module npm esm<text:line-break/>(npmjs.com/esm) a pris le parti de déblayer le chemin<text:line-break/>de l&amp;#8217;interopérabilité.<text:line-break/>Il suffit de charger le module esm avant de démarrer un script Node,<text:line-break/>peu importe son mécanisme de chargement de modules&amp;#160;:<text:line-break/>esm rendra le chargement des modules totalement transparent.</text:p><text:p>Pour en savoir plus sur l&amp;#8217;option -r, rendez-vous<text:line-break/>dans la section précharger un module</text:p><text:p>L&amp;#8217;intégralité des fonctionnalités des modules ECMAScript<text:line-break/>est documentée sur le site web du projet Node.<text:line-break/>La documentation contient des informations à jour et qui ne sont pas<text:line-break/>forcément listées dans cet ouvrage.</text:p><text:p>nodejs.org/docs/latest-v10.x/api/esm.html</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>let counter = 0;<text:line-break/><text:line-break/>export default () =&amp;gt; ++counter;           1<text:line-break/>export const reset = () =&amp;gt; counter = 0;   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22086 {list_context: "colist", text: "Export _par défaut_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22096 {list_context: "colist", text: "Export _nommé_.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>import increment from './increment.js';     1<text:line-break/><text:line-break/>console.log(increment());<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22136 {list_context: "colist", text: "On n'importe ici que la _valeur par défaut_.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node --experimental-modules modules/ecmascript.mjs<text:line-break/>(node:35074) ExperimentalWarning: The ESM module loader is experimental.<text:line-break/>1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import increment, {reset} from './increment.mjs'; 1<text:line-break/><text:line-break/>increment();<text:line-break/>console.log(increment());<text:line-break/><text:line-break/>reset();                                          2<text:line-break/>console.log(increment());<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22184 {list_context: "colist", text: "On importe la _valeur par défaut_ ainsi qu'une _valeur nommée_{nbsp}— c'est particulièrement pratique pour sélectionner avec finesse ce que l'on veut utiliser d'un module.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22194 {list_context: "colist", text: "La fonction `reset` remet le compteur à zéro.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node --experimental-modules modules/ecmascript-multiple.mjs<text:line-break/>(node:35074) ExperimentalWarning: The ESM module loader is experimental.<text:line-break/>2<text:line-break/>1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* tous les appels à import doivent se faire en début de fichier,* on ne peut pas utiliser import de manière dynamique<text:line-break/>(dans un if/else par exemple),* on peut exporter une variable par défaut et plusieurs variables nommées,* on peut importer des modules Node depuis un module ECMAScript&amp;#160;—<text:line-break/>l&amp;#8217;inverse n&amp;#8217;est pas vrai,* les fichiers doivent être suffixés par .mjs<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node -r esm modules/ecmascript.js<text:line-break/>1<text:line-break/>$ node -r esm modules/ecmascript.mjs<text:line-break/>1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">S&amp;#8217;en sortir quand ça ne se passe pas comme prévu</text:h><text:p>On fait toutes et tous des erreurs.<text:line-break/>Du coup forcément, notre code va mener à des plantages applicatifs.<text:line-break/>La nature des causes varie et impacte notre lecture des messages d&amp;#8217;erreur.</text:p><text:p>Cette section a pour intention de nous aider à prendre confiance dans ce qu&amp;#8217;on<text:line-break/>voit et de piocher l&amp;#8217;information qui va nous aider à résoudre le problème.</text:p><text:h text:outline-level="3">Une erreur est nichée dans notre code</text:h><text:p>Il y a 2 familles d&amp;#8217;erreurs dans du code ECMAScript&amp;#160;: les erreurs de syntaxe<text:line-break/>et les erreurs d&amp;#8217;exécution.</text:p><text:p>Dans tous les cas, Node lance une exception complétée d&amp;#8217;une trace d&amp;#8217;erreurs.<text:line-break/>Le but est de comprendre où l&amp;#8217;interpréteur se prend les pieds dans le tapis<text:line-break/>et quel est le chemin parcouru au sein du code pour y parvenir.</text:p><text:p>Commençons avec une erreur de syntaxe&amp;#160;:</text:p><text:p>Une erreur de syntaxe est immédiate.<text:line-break/>Node la détecte lorsqu&amp;#8217;il parse notre code.</text:p><text:p>Dans l&amp;#8217;exemple précédent, Node indique qu&amp;#8217;il manque une parenthèse après le<text:line-break/>deuxième guillemet, car c&amp;#8217;est le symbole que l&amp;#8217;interpréteur attend.<text:line-break/>Pourquoi Node attend-il une parenthèse&amp;#160;?<text:line-break/>Car le guillemet indique une intention incorrecte&amp;#160;: on ne veut pas qu&amp;#8217;il<text:line-break/>signifie la fin de la chaîne mais qu&amp;#8217;il représente un caractère apostrophe dans<text:line-break/>la chaîne.</text:p><text:p>La correction à entreprendre ne sera pas d&amp;#8217;ajouter une parenthèse après le<text:line-break/>guillemet mais bien de l&amp;#8217;échapper en le préfixant d&amp;#8217;un caractère \.<text:line-break/>Node l&amp;#8217;interprétera alors comme un caractère.</text:p><text:p>Penchons-nous à présent sur les erreurs d&amp;#8217;exécution,<text:line-break/>provoquée lorsque le code est exécuté&amp;#160;:</text:p><text:p>Le marqueur ^ indique l&amp;#8217;emplacement où le problème est rencontré.<text:line-break/>La ligne en-dessous documente le type d&amp;#8217;erreur (ReferenceError)<text:line-break/>en précisant ce qui n&amp;#8217;est pas défini (la variable jenexistepas).<text:line-break/>La notation exit-error.js:5:13 indique que l&amp;#8217;origine de l&amp;#8217;erreur<text:line-break/>se trouve à la ligne 5 du fichier exit-error.js.</text:p><text:p>Comment y remédier&amp;#160;?<text:line-break/>En vérifiant si on appelle bien la bonne variable ou en la créant<text:line-break/>avec la valeur attendue le cas échéant.</text:p><text:p>Les erreurs d&amp;#8217;exécution sont pernicieuses elles sont parfois<text:line-break/>provoquées après le démarrage de l&amp;#8217;application.<text:line-break/>Dans, elle se produit deux secondes après le démarrage du script&amp;#160;:</text:p><text:p>La notation runtime-error.js:4:37 indique que l&amp;#8217;origine de l&amp;#8217;erreur<text:line-break/>se trouve à la ligne 4 du fichier runtime-error.js, colonne 37.<text:line-break/>Le type d&amp;#8217;erreur (TypeError) signifie qu&amp;#8217;on cherche à manipuler une variable<text:line-break/>de manière inattendue par rapport à son type.<text:line-break/>Le message d&amp;#8217;erreur nous précise qu&amp;#8217;on appelle comme une fonction quelque chose<text:line-break/>qui ne serait donc pas une fonction.</text:p><text:p>Pourquoi toLocaleUperCase n&amp;#8217;est pas une fonction&amp;#160;?<text:line-break/>Une typo s&amp;#8217;est introduite dans notre code&amp;#160;: secret.toLocaleUperCase vaut undefined.<text:line-break/>L&amp;#8217;erreur serait corrigée en utilisant secret.toLocaleUpperCase (avec 2 p).</text:p><text:p>Le module npm eslint (npmjs.com/eslint)<text:line-break/>est un vérificateur syntaxique.<text:line-break/>Son intention est de s&amp;#8217;accorder sur le style d&amp;#8217;écriture et d&amp;#8217;éviter des<text:line-break/>effets de bord du langage<text:line-break/>qui causent des problèmes difficiles à déceler.</text:p><text:p>On apprendra à le configurer dans l'annexe A.</text:p><text:p>Les erreurs affichées affichent des informations importantes.<text:line-break/>Si elles n&amp;#8217;indiquent pas forcément le chemin de résolution évident,<text:line-break/>elles demandent à ce qu&amp;#8217;on cherche à comprendre la nature de l&amp;#8217;erreur.</text:p><text:p>Le module npm pretty-error (npmjs.com/pretty-error) enjolive<text:line-break/>l&amp;#8217;affichage des erreurs.<text:line-break/>Il suffit de l&amp;#8217;installer, de le précharger et<text:line-break/>d&amp;#8217;exécuter un script pour en bénéficier.</text:p><text:p>On apprendra au chapitre 5 comment installer<text:line-break/>des modules npm.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node &amp;lt;i&amp;gt;syntax-error.js&amp;lt;/i&amp;gt;<text:line-break/>console.log(&amp;lt;i&amp;gt;'oups j'&amp;lt;/i&amp;gt;ai fait une erreur de guillemets);<text:line-break/>            ^^^^^^^^<text:line-break/><text:line-break/>&amp;lt;i&amp;gt;SyntaxError&amp;lt;/i&amp;gt;: &amp;lt;i&amp;gt;missing ) after argument list&amp;lt;/i&amp;gt;<text:line-break/>    at new Script (vm.js:74:7)<text:line-break/>    at createScript (vm.js:246:10)<text:line-break/>    at Object.runInThisContext (vm.js:298:10)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node process/exit-error.js<text:line-break/>console.log(&amp;lt;i&amp;gt;jenexistepas&amp;lt;/i&amp;gt;);<text:line-break/>            ^<text:line-break/>&amp;lt;i&amp;gt;ReferenceError&amp;lt;/i&amp;gt;: &amp;lt;i&amp;gt;jenexistepas&amp;lt;/i&amp;gt; &amp;lt;i&amp;gt;is not defined&amp;lt;/i&amp;gt;<text:line-break/>    at Object.&amp;lt;anonymous&amp;gt; (/.../chapter-04/examples/process/&amp;lt;i&amp;gt;exit-error.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;5&amp;lt;/i&amp;gt;:13)<text:line-break/>    at Module._compile (module.js:643:30)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node runtime-error.js<text:line-break/>setTimeout(() =&amp;gt; console.log(&amp;lt;i&amp;gt;secret.toLocaleUperCase()&amp;lt;/i&amp;gt;), 2000);<text:line-break/>                                    ^<text:line-break/>&amp;lt;i&amp;gt;TypeError&amp;lt;/i&amp;gt;: &amp;lt;i&amp;gt;secret.toLocaleUperCase&amp;lt;/i&amp;gt; &amp;lt;i&amp;gt;is not a function&amp;lt;/i&amp;gt;<text:line-break/>    at Timeout.setTimeout [as _onTimeout] (/.../chapter-04/examples/runtime-error.js:4:37)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node -r pretty-error/start process/exit-error.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Une erreur est retournée dans un callback</text:h><text:p>La fonction de callback est un des moyen de retourner le résultat<text:line-break/>d&amp;#8217;une exécution asynchrone.<text:line-break/>Par convention, le premier paramètre est une erreur.</text:p><text:p>Ce paramètre est nul (null) ou indéfini (undefined) lorsqu&amp;#8217;il n&amp;#8217;y a pas eu<text:line-break/>d&amp;#8217;erreurs en cours de route.<text:line-break/>En revanche ce paramètre contient un objet d&amp;#8217;erreur lorsque un problème<text:line-break/>s&amp;#8217;est produit&amp;#160;:</text:p><text:p>L&amp;#8217;erreur affichée nous précise que le fichier demandé n&amp;#8217;existe pas.<text:line-break/>Son code (ENOENT) signifie la même chose mais a l&amp;#8217;avantage d&amp;#8217;être plus<text:line-break/>facile à vérifier dans une condition.</text:p><text:p>L&amp;#8217;objet error donné en argument de la fonction de callback est utile<text:line-break/>pour vérifier des détails précis de l&amp;#8217;erreur et mieux interagir avec<text:line-break/>au niveau du code.<text:line-break/>Nous y retrouvons le type d&amp;#8217;erreur (errno),<text:line-break/>la référence vers la ressource concernée (path) et le nom de la fonction<text:line-break/>système utilisée par Node pour accéder à la ressource (syscall).</text:p><text:p>La valeur et la signification du code d&amp;#8217;erreur varie en fonction<text:line-break/>du module Node employé à ce moment là.<text:line-break/>Le module fs ne retourne pas les mêmes codes<text:line-break/>que le module http.<text:line-break/>Les appels à des ressources système retournent<text:line-break/>une variété de codes d&amp;#8217;erreur.</text:p><text:p>La décision nous appartient de savoir quoi faire quand l&amp;#8217;erreur se produit.<text:line-break/>Doit-on arrêter le programme (avec process.exit())&amp;#160;?<text:line-break/>Est-ce que ce n&amp;#8217;est pas grave et on passe à la suite&amp;#160;?<text:line-break/>Ou peut-être que ce fichier était censé exister et qu&amp;#8217;on devrait<text:line-break/>notifier l&amp;#8217;équipe de maintenance et<text:line-break/>afficher une page d&amp;#8217;erreur côté utilisateur.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const {readFile} = require('fs');<text:line-break/><text:line-break/>readFile('je-n-existe-pas.txt', (error, content) =&amp;gt; {<text:line-break/>  if (error) {                                          1<text:line-break/>    console.error(error.message);                       2<text:line-break/>    console.error(error);                               3<text:line-break/>    return;<text:line-break/>  }<text:line-break/><text:line-break/>  console.log(String(content));<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22494 {list_context: "colist", text: "On vérifie la présence de l'erreur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22504 {list_context: "colist", text: "`error.message` contient une raison textuelle de l'erreur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22514 {list_context: "colist", text: "Affichage de l'objet d'erreur complet.", blocks: 0}><text:line-break/>----<text:line-break/>$ node errors/callback.js<text:line-break/>&amp;lt;i&amp;gt;ENOENT&amp;lt;/i&amp;gt;: &amp;lt;i&amp;gt;no such file or directory&amp;lt;/i&amp;gt;, open '&amp;lt;i&amp;gt;je-n-existe-pas.txt&amp;lt;/i&amp;gt;'<text:line-break/>{ Error: ENOENT: no such file or directory, open 'je-n-existe-pas.txt'<text:line-break/>  errno: -2,<text:line-break/>  code: 'ENOENT',<text:line-break/>  syscall: 'open',<text:line-break/>  path: 'je-n-existe-pas.txt' }<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Une erreur est retournée dans une promesse</text:h><text:p>La gestion d&amp;#8217;erreurs des promesses<text:line-break/>s&amp;#8217;effectue à l&amp;#8217;aide de la fonction .catch().</text:p><text:p>Le contenu de l&amp;#8217;erreur est accessible dans le premier et seul argument de<text:line-break/>la fonction de callback passée à .catch().</text:p><text:p>La trace indique que l&amp;#8217;erreur s&amp;#8217;est produite à la ligne 5,<text:line-break/>dans la méthode .then() suite à l&amp;#8217;utilisation de Promise.resolve().</text:p><text:p>L&amp;#8217;utilisation multiple de .catch() nous aide à gérer finement les erreurs&amp;#160;:</text:p><text:p>L&amp;#8217;absence de .catch() provoque un plantage applicatif et le délenchement<text:line-break/>de l'événement de processus unhandledRejection&amp;#160;:</text:p><text:p>L&amp;#8217;affichage de UnhandledPromiseRejectionWarning indique que l&amp;#8217;erreur s&amp;#8217;est<text:line-break/>produite mais qu&amp;#8217;aucun .catch() ne l&amp;#8217;a pris en charge.<text:line-break/>Nous savons cependant que l&amp;#8217;erreur s&amp;#8217;est produite dans la méthode .then()<text:line-break/>suite à l&amp;#8217;utilisation de Promise.resolve().</text:p><text:p><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>Promise.resolve('ok')<text:line-break/>  .then((message) =&amp;gt; {<text:line-break/>    throw new Error('Oops !');                      1<text:line-break/>  })<text:line-break/>  .catch((error) =&amp;gt; console.error(error));          2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22590 {list_context: "colist", text: "On génère une erreur dans notre code.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22600 {list_context: "colist", text: "L'objet d'erreur est transmis à la prochaine occurrence de `.catch()`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node errors/promise.js<text:line-break/>Error: &amp;lt;i&amp;gt;Oops !&amp;lt;/i&amp;gt;<text:line-break/>    at &amp;lt;i&amp;gt;Promise.resolve&amp;lt;/i&amp;gt;.&amp;lt;i&amp;gt;then&amp;lt;/i&amp;gt; (/.../chapter-04/examples/errors/&amp;lt;i&amp;gt;promise.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;5&amp;lt;/i&amp;gt;:11)<text:line-break/>    at process._tickCallback (internal/process/next_tick.js:178:7)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>Promise.reject(new Error('Oops !'))<text:line-break/>  .catch((error) =&amp;gt; {<text:line-break/>    console.error('Une erreur s\'est produite : %s', error.message);  1<text:line-break/>    return 'Aaah';                                                    2<text:line-break/>  })<text:line-break/>  .then((message) =&amp;gt; console.log(message))                            3<text:line-break/>  .catch((error) =&amp;gt; console.error(error));                            4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22654 {list_context: "colist", text: "On gère l'erreur en la signalant dans le terminal.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22664 {list_context: "colist", text: "Le _callback_ d'erreur a la possibilité de retourner un résultat.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22674 {list_context: "colist", text: "Ce résultat est transmis à la prochaine occurrence de `.then()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22684 {list_context: "colist", text: "Dans ce cas, le dernier `.catch()` n'affiche rien car nous n'avons pas rencontré d'autre erreur entre temps.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>Promise.resolve('ok')<text:line-break/>  .then(() =&amp;gt; {<text:line-break/>    throw new Error('Oops !');<text:line-break/>  });<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node errors/promise-no-catch.js<text:line-break/>(node:27412) &amp;lt;i&amp;gt;UnhandledPromiseRejectionWarning&amp;lt;/i&amp;gt;: Error: Oops !<text:line-break/>    at &amp;lt;i&amp;gt;Promise.resolve&amp;lt;/i&amp;gt;.&amp;lt;i&amp;gt;then&amp;lt;/i&amp;gt; (/.../chapter-04/examples/errors/&amp;lt;i&amp;gt;promise-no-catch.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;5&amp;lt;/i&amp;gt;:11)<text:line-break/>    at process._tickCallback (internal/process/next_tick.js:178:7)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Une erreur est retournée dans un événement</text:h><text:p>Tout élément dôté d&amp;#8217;une méthode .on() a un événement spécial&amp;#160;: .on('error').<text:line-break/>Il est appelé à chaque fois qu&amp;#8217;une erreur se produit.</text:p><text:p>La trace d&amp;#8217;erreur est similaire à celle des promesses et des callbacks.<text:line-break/>Le message d&amp;#8217;erreur précise le problème tandis que son origine (fichier, ligne)<text:line-break/>nous indiquent quoi regarder pour mieux comprendre la cause.</text:p><text:p>Si une erreur est émise et qu&amp;#8217;aucune fonction n&amp;#8217;est à l&amp;#8217;écoute,<text:line-break/>l&amp;#8217;événement uncaughtException est produit&amp;#160;:</text:p><text:p>La section liée au module events explique plus en détails<text:line-break/>la gestion des événements.<text:line-break/>On les retrouve par exemple dans les modules http, stream<text:line-break/>et process.</text:p><text:p><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>process.emit('error', new Error('Oops !'));             1<text:line-break/><text:line-break/>process.on('error', (error) =&amp;gt; console.error(error));   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@22780 {list_context: "colist", text: "On émet un événement `error` avec un objet `Error` précisant la nature du problème.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@22790 {list_context: "colist", text: "L'objet d'erreur est transmis à l'événement `error`.", blocks: 0}><text:line-break/>----<text:line-break/>$ node errors/on-error.js<text:line-break/>Error: &amp;lt;i&amp;gt;Oops !&amp;lt;/i&amp;gt;<text:line-break/>    at Object.&amp;lt;i&amp;gt;&amp;amp;lt;anonymous&amp;amp;gt;&amp;lt;/i&amp;gt; (/.../chapter-04/examples/errors/&amp;lt;i&amp;gt;on-error.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;5&amp;lt;/i&amp;gt;:23)<text:line-break/>    at Module._compile (internal/modules/cjs/loader.js:678:30)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>process.emit('error', new Error('Oops !'));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node errors/on-error-uncaught.js<text:line-break/>events.js:167<text:line-break/>      throw er; // &amp;lt;i&amp;gt;Unhandled 'error'&amp;lt;/i&amp;gt; event<text:line-break/>      ^<text:line-break/><text:line-break/>Error: Oops !<text:line-break/>    at Object.&amp;lt;i&amp;gt;&amp;amp;lt;anonymous&amp;amp;gt;&amp;lt;/i&amp;gt; (/.../chapter-04/examples/errors/&amp;lt;i&amp;gt;on-error-uncaught.js&amp;lt;/i&amp;gt;:&amp;lt;i&amp;gt;3&amp;lt;/i&amp;gt;:23)<text:line-break/>    at Module._compile (internal/modules/cjs/loader.js:678:30)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Une erreur est renvoyée par le système d&amp;#8217;exploitation</text:h><text:p>L&amp;#8217;accès à une ressource distante est plus complexe qu&amp;#8217;il n&amp;#8217;y parait<text:line-break/>car la nature des erreurs est variée et sujet à interprétation au cas par cas,<text:line-break/>en fonction de notre intention et du contexte d&amp;#8217;exécution.</text:p><text:p>Les erreurs systèmes indiquent la raison du problème.<text:line-break/>À vous de trouver pourquoi un tel problème se produit.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Le programme ne se termine pas</text:h><text:p>Il arrive qu&amp;#8217;un programme ne se termine pas contrairement à nos attentes.<text:line-break/>Il peut y avoir plusieurs raisons à ça&amp;#160;:</text:p><text:p>Il faudra inspecter le système pour en savoir plus et observer la<text:line-break/>consommation mémoire et CPU du processus Node en question.</text:p><text:p>Peut-être qu&amp;#8217;il faudra sonder le programme pour déceler le point de blocage.<text:line-break/>L'inspecteur Node est un outil particulièrement adapté à cet usage.</text:p><text:p>Le module npm debug (npmjs.com/debug) affiche des<text:line-break/>messages dans la console de manière conditionnelle.<text:line-break/>Les messages s&amp;#8217;affichent lorsque les variables d&amp;#8217;environnement de notre choix<text:line-break/>sont renseignées au démarrage de l&amp;#8217;application.</text:p><text:p>On apprendra à le configurer dans l'annexe A.</text:p><text:p><text:line-break/>* une ressource distante met du temps à répondre&amp;#160;—<text:line-break/>un timeout déclenchera une erreur (généralement sous 30 secondes),* un traitement prend du temps,* un événement est en cours d&amp;#8217;écoute&amp;#160;— typiquement un serveur web qui attend<text:line-break/>des requêtes entrantes,* une erreur n&amp;#8217;a pas été capturée et perturbe les instructions suivantes<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Une alerte de dépréciation s&amp;#8217;affiche</text:h><text:p>Un des objectifs de l&amp;#8217;équipe de développement de Node est de maintenir<text:line-break/>la stabilité de la plate-forme.<text:line-break/>Certains de leurs choix de conception sont revisités en changeant<text:line-break/>leur comportement ou en les retirant des modules de base.</text:p><text:p>Quand ce changement affecte notre code,<text:line-break/>une alerte de dépréciation s&amp;#8217;affiche.<text:line-break/>Par exemple&amp;#160;:</text:p><text:p>Nous avons ainsi le temps de modifier notre code pour migrer<text:line-break/>vers la nouvelle recommandation petit à petit.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const a = new Buffer(10);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node deprecation-warning.js<text:line-break/>(node:8130) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Les différences de JavaScript entre Node et les navigateurs web</text:h><text:p>Puisqu&amp;#8217;on utilise du code JavaScript avec Node et avec les navigateurs web,<text:line-break/>qu&amp;#8217;est-ce qui les distingue vraiment&amp;#160;?</text:p><text:p>Cette section détricotte les derniers doutes que l&amp;#8217;on pourrait avoir dans notre tête.</text:p><text:h text:outline-level="3">L&amp;#8217;absence du DOM et des variables window et document</text:h><text:p>Dans Node, il n&amp;#8217;est pas possible de faire appel aux variables window<text:line-break/>et document (raccourci pour window.document).</text:p><text:p>Ces variables représentent respectivement la fenêtre/onglet et le document<text:line-break/>HTML interprété par le navigateur web.<text:line-break/>L&amp;#8217;appel aux fonctions document.querySelector() et document.createElement()<text:line-break/>relèvent du DOM (Document Object Model), une représentation JavaScript interactive<text:line-break/>du document HTML.</text:p><text:p>L&amp;#8217;équivalent de window pour Node serait la variable process&amp;#160;:<text:line-break/>elle décrit le processus exécutant notre code.</text:p><text:p>La documentation des variables globales est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/globals.html</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Il n&amp;#8217;y a pas d&amp;#8217;interface graphique</text:h><text:p>Suite logique du point précédent&amp;#160;: Node n&amp;#8217;a pas d&amp;#8217;interface graphique.<text:line-break/>Le code exécuté n&amp;#8217;affiche rien en tant que tel, à part les messages dirigés<text:line-break/>vers la console.</text:p><text:p>L'inspecteur Node est un moyen de visualiser l&amp;#8217;état interne<text:line-break/>d&amp;#8217;un script .</text:p><text:p>On peut toutefois construire des applications graphiques en ligne de commande.<text:line-break/>Nous verrons comment faire dans le chapitre 8.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Le mécanisme de modules</text:h><text:p>Node utilise un mécanisme de modules (CommonJS) différent<text:line-break/>des modules ECMAScript des navigateurs web.</text:p><text:p>La convergence vers les modules ECMAScript est en cours.<text:line-break/>Il y a fort à parier qu&amp;#8217;ils soient supportés nativement par Node dans une<text:line-break/>version ultérieure.</text:p><text:p>Nous verrons comment utiliser les modules Node dans les navigateurs web<text:line-break/>dans le chapitre 9.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">L&amp;#8217;interfaçage avec le système d&amp;#8217;exploitation</text:h><text:p>Les fonctions JavaScript spécifiques aux navigateurs web sont liées<text:line-break/>à la récupération d&amp;#8217;informations (AJAX, fetch()),<text:line-break/>à l&amp;#8217;affichage (Canvas, WebGL, WebVR) ainsi qu&amp;#8217;à la manipulation de documents HTML.</text:p><text:p>Les fonctions JavaScript fournies par les modules Node<text:line-break/>sont liées à la gestion des ressources dont le système d&amp;#8217;exploitation<text:line-break/>se fait l&amp;#8217;interface&amp;#160;: fichiers (module fs),<text:line-break/>réseau (module http, module net, module dns,<text:line-break/>module dgram), terminal (module tty,<text:line-break/>module readline) et processus<text:line-break/>(module process, module child_process).</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">Node est un processus système</text:h><text:p>Le système d&amp;#8217;exploitation crée un nouveau processus dès<text:line-break/>qu&amp;#8217;on exécute le programme node.<text:line-break/>Ce processus peut être de courte durée ou de longue durée,<text:line-break/>selon qu&amp;#8217;il dure quelques secondes ou un temps indéfini.</text:p><text:p>Le processus s&amp;#8217;arrête en cas d&amp;#8217;erreur, lorsqu&amp;#8217;il n&amp;#8217;y a plus d&amp;#8217;opération<text:line-break/>à effectuer ou en cas d&amp;#8217;interruption volontaire.</text:p><text:p>Le code JavaScript exécuté dans un navigateur web dépasse rarement la durée<text:line-break/>d&amp;#8217;une session utilisateur, de quelques secondes à quelques heures.<text:line-break/>En cas de problème, un rafraîchissement de la page remet à zéro l&amp;#8217;état de la page.</text:p><text:p>Un processus Node est mono CPU.<text:line-break/>Tous les autres processus système assignés à ce même CPU<text:line-break/>se partageront une quantité finie de puissance.</text:p><text:p>Par exemple, si un processus Node partage le même CPU qu&amp;#8217;une base de données<text:line-break/>et qu&amp;#8217;une requête gourmande s&amp;#8217;exécute, la rapidité de notre application<text:line-break/>en sera affectée.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Options utiles pour démarrer Node</text:h><text:p>L&amp;#8217;exécutable node accepte plusieurs options afin de personnaliser<text:line-break/>son comportement et l&amp;#8217;affichage des résultats.</text:p><text:p>La documentation de l&amp;#8217;exécutable node est disponible sur le site officiel de Node&amp;#160;:<text:line-break/>nodejs.org/docs/latest-v10.x/api/cli.html</text:p><text:h text:outline-level="3">Afficher le résultat d&amp;#8217;une expression, sans script</text:h><text:p>L&amp;#8217;interpréteur Node sait interpréter du code qu&amp;#8217;on lui donnerait<text:line-break/>via l&amp;#8217;option -p (pour print, c&amp;#8217;est-à-dire afficher).<text:line-break/>L&amp;#8217;interpréteur affichera le résultat de l&amp;#8217;expression ou<text:line-break/>détaillera la raison de l&amp;#8217;erreur.</text:p><text:p>J&amp;#8217;utilise cette forme d&amp;#8217;interaction pour obtenir un résultat rapide,<text:line-break/>sans créer de nouveau fichier.<text:line-break/>Par exemple, le résultat d&amp;#8217;une opération mathématique&amp;#160;:</text:p><text:p>Toute expression ECMAScript valide est acceptée&amp;#160;:</text:p><text:p>Ce dernier exemple illustre la transformation de<text:line-break/>chaîne de caractères documentée<text:line-break/>dans le chapitre 3.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ node -p '2 + 2'<text:line-break/>4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node -p '"abc".toLocaleUpperCase()'<text:line-break/>ABC<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Précharger un module</text:h><text:p>L&amp;#8217;option de démarrage --require charge le module indiqué avant le script Node.</text:p><text:p>Dans cet exemple, le module print-exit.js sera chargé<text:line-break/>avant url/intro.js.</text:p><text:p>Le chargement de ce module aura pour effet d&amp;#8217;afficher un message<text:line-break/>avec le chemin du fichier chargé et le code de sortie.</text:p><text:p>On peut appeler l&amp;#8217;option --require plusieurs fois.<text:line-break/>On peut aussi utiliser l&amp;#8217;option raccourcie -r.</text:p><text:p>Ce mécanisme fonctionne très bien avec des<text:line-break/>modules npm conçus pour<text:line-break/>rendre nos scripts compatibles avec les modules ECMAScript<text:line-break/>ou pour simplifier les erreurs affichées<text:line-break/>lors d&amp;#8217;un plantage applicatif, entre autres.</text:p><text:p><text:line-break/>----<text:line-break/>$ node --require ./print-exit.js url/intro.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>process.on('exit', (code) =&amp;gt; {<text:line-break/>  const {filename} = process.mainModule;<text:line-break/><text:line-break/>  console.log('Le fichier %s s\'arrête avec un code %d', filename, code);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Inspecter notre code avec Google Chrome</text:h><text:p>Node accepte deux options --inspect et --inspect-brk.<text:line-break/>Elles exposent toutes deux un protocole de débogage<text:line-break/>auquel on peut se connecter avec le navigateur Google Chrome.</text:p><text:p>Cette commande lance un de nos exemples de la section<text:line-break/>arguments d&amp;#8217;exécution du module process.<text:line-break/>L&amp;#8217;option --inspect-brk démarre l&amp;#8217;inspecteur<text:line-break/>et met son exécution en pause aussitôt.</text:p><text:p>Le logo de Node s&amp;#8217;affiche dans les outils de développement de Google Chrome&amp;#160;:</text:p><text:p>Un clic sur le logo Node ouvre une nouvelle fenêtre.<text:line-break/>Cette fenêtre est outillée pour inspecter ce qu&amp;#8217;il se passe dans notre script Node.</text:p><text:p>Un point d&amp;#8217;arrêt se crée en cliquant sur le numéro de ligne souhaité.</text:p><text:p>Le débogueur se mettra en pause à chaque fois que le chemin d&amp;#8217;exécution<text:line-break/>de l&amp;#8217;interpréteur atteindra cette ligne.</text:p><text:p>La valeur des variables ECMAScript courantes s&amp;#8217;affichent au survol de la souris<text:line-break/>ou en interagissant avant la console.</text:p><text:p>C&amp;#8217;est le moment idéal pour placer un ou plusieurs points d&amp;#8217;arrêt.</text:p><text:p>Un clic sur le bouton &amp;#9654; met alors fin à la pause.<text:line-break/>Le script s&amp;#8217;exécutera jusqu&amp;#8217;à l&amp;#8217;épuisement des instructions<text:line-break/>ou jusqu&amp;#8217;au prochain point d&amp;#8217;arrêt.</text:p><text:p>L&amp;#8217;option d&amp;#8217;invocation --inspect est adaptée à des processus de longue durée,<text:line-break/>comme un serveur HTTP.<text:line-break/>L&amp;#8217;option --inspect-brk est adaptée à des processus de courte durée et qui<text:line-break/>se termineraient avant qu&amp;#8217;on ait le temps de jeter un œil au contenu.</text:p><text:p><text:line-break/>----<text:line-break/>$ node --inspect-brk print-text.js texte --uppercase<text:line-break/>Debugger listening on ws://127.0.0.1:9229/ddd9bbfd-09ac-4426-a53e-c8abe4fc36da<text:line-break/>For help see https://nodejs.org/en/docs/inspector<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Ajuster les options de compatibilité et de traçabilité de V8</text:h><text:p>Node repose sur la machine virtuelle V8<text:line-break/>pour interpréter nos instructions ECMAScript.<text:line-break/>Node expose différentes options de V8 pour affiner son comportement en fonction<text:line-break/>de notre environnement.</text:p><text:p>L&amp;#8217;intégralité des options de configuration de V8 s&amp;#8217;affiche<text:line-break/>avec l&amp;#8217;option --v8-options&amp;#160;:</text:p><text:p>Il n&amp;#8217;y a pas de meilleure configuration qui conviendrait à chacun de nos usages.<text:line-break/>Le mieux reste encore d&amp;#8217;explorer les options possibles, les différents concepts<text:line-break/>et d&amp;#8217;ajuster les valeurs offrant le meilleur rapport stabilité/performances.</text:p><text:p>Le ramasse-miettes est un mécanisme informatique qui libère les objets inutilisés<text:line-break/>de la mémoire.<text:line-break/>Il est déclenché de manière cyclique par la machine virtuelle<text:line-break/>V8.</text:p><text:p>En savoir plus sur fr.wikipedia.org/wiki/Ramasse-miettes_(informatique).</text:p><text:p>Les options préfixées par harmony activent la prise en charge<text:line-break/>de fonctionnalités ECMAScript qui ne font pas encore partie du standard.<text:line-break/>Elles sont encore au stade expérimental.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ node --v8-options<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@23630 {list_context: "dlist", text: "`--optimize_for_size`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23632 {list_context: "dlist", text: "Optimise le fonctionnement interne pour utiliser moins de mémoire,\nau détriment de la vitesse. +\nIdéal pour l'exécution de scripts Node sur des environnement à faible mémoire,\ncomme les Raspberry Pi.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23652 {list_context: "dlist", text: "`--mem_old_space_limit`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23654 {list_context: "dlist", text: "Détermine la quantité de mémoire maximale qu'un processus Node pourra utiliser. +\nIdéal pour confiner Node sur des environnements à faible mémoire.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23670 {list_context: "dlist", text: "`--gc_inverval`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23672 {list_context: "dlist", text: "Détermine le nombre de cycles entre chaque déclenchement du ramasse-miettes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23686 {list_context: "dlist", text: "`--expose_gc`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23688 {list_context: "dlist", text: "Expose les fonctions de manipulation du ramasse-miettes. +\nIdéal si vous souhaitez contrôler finement l'optimisation de la mémoire.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23704 {list_context: "dlist", text: "`--stack_trace_limit`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23706 {list_context: "dlist", text: "Change la limite du nombre de lignes affichées dans une trace d'erreurs. +\nPar défaut{nbsp}: 10 lignes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23722 {list_context: "dlist", text: "`--trace-deopt`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23724 {list_context: "dlist", text: "Signale les optimisations invalidées par V8.\nLes portions de code indiquées gagneraient à être retravaillées, pour rendre\nuniforme le type de variables passées en arguments par exemple.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23742 {list_context: "dlist", text: "`--trace-gc`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@23744 {list_context: "dlist", text: "Signale les moments où le ramasse-miettes se déclenche.\nOn peut ainsi mieux comprendre les raisons qui le pousse à se déclencher.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* Interagir avec l&amp;#8217;interpréteur Node,* Les modules de base,* Créer ses propres modules,* S&amp;#8217;en sortir quand ça ne se passe pas comme prévu,* Les différences de JavaScript entre Node et les navigateurs web,* Options utiles pour démarrer Node<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Jouer avec npm</text:h><text:p>Savoir naviguer dans la richesse de l&amp;#8217;écosystème npm est une force pour<text:line-break/>la durabilité de nos projets.<text:line-break/>Ces modules nous aident à façonner un outillage résilient et adapté à chacun<text:line-break/>de nos projets.</text:p><text:p>Ce chapitre va nous permettre d&amp;#8217;y voir plus clair du côté des modules npm.<text:line-break/>Nous apprendrons comment identifier des module de confiance, les installer et<text:line-break/>les mettre à jour sans casser nos projets.</text:p><text:p>Nous nous tournerons ensuite du côté des scripts npm pour créer<text:line-break/>un outillage sur mesure et de qualité.<text:line-break/>Grâce à eux, nous serons en mesure d&amp;#8217;automatiser les tâches répétitives à notre<text:line-break/>rythme.</text:p><text:p>Enfin, nous découvrirons des commandes moins connues de npm.<text:line-break/>Elles pourrons nous faciliter la vie ou nous débloquer quand ça ne va pas.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>Le mot npm correspond à trois concepts différents que nous aborderons<text:line-break/>tout au long de ce chapitre&amp;#160;:</text:p><text:p>Je préciserai toujours si l&amp;#8217;utilisation de npm fait référence<text:line-break/>à l&amp;#8217;exécutable, au registre ou à un module.</text:p><text:p>L&amp;#8217;exécutable npm est installé par défaut avec Node.<text:line-break/>Vérifions la version installée en ouvrant un terminal<text:line-break/>et en écrivant la commande suivante&amp;#160;:</text:p><text:p>Si un message s&amp;#8217;affiche en indiquant que npm n&amp;#8217;est pas un programme reconnu,<text:line-break/>veuillez vous référer au chapitre 2 et<text:line-break/>vérifier que Node v10 est bien installé.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:h text:outline-level="2">Créer un fichier package.json</text:h><text:p>La présence d&amp;#8217;un fichier package.json devient nécessaire dès qu&amp;#8217;un projet<text:line-break/>inclut un module npm ou a vocation à être publié pour être repris<text:line-break/>dans un autre projet&amp;#160;— que ça soit dans un cadre professionnel ou personnel.</text:p><text:p>Le fichier package.json est une clé de voute pour reproduire l&amp;#8217;installation<text:line-break/>du projet et créer un outillage autonome.<text:line-break/>La commande npm init génère un tel fichier.<text:line-break/>L&amp;#8217;utilisation de l&amp;#8217;option --yes va plus vite car elle nous évite<text:line-break/>de répondre aux questions&amp;#160;:</text:p><text:p>Si un fichier package.json n&amp;#8217;existe pas dans le répertoire courant,<text:line-break/>il sera créé avec des valeurs par défaut&amp;#160;— le nom du module correspondra<text:line-break/>au nom du répertoire courant.<text:line-break/>Si ce fichier existait déjà, il sera alors préservé et son contenu sera affiché&amp;#160;:</text:p><text:p>Nous reviendrons sur la structure du fichier dans la section<text:line-break/>anatomie du fichier package.json.<text:line-break/>En attendant, focalisons-nous sur les opérations courantes comme<text:line-break/>l&amp;#8217;installation de modules.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm init --yes<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "nodebook.chapter-05",<text:line-break/>  "private": true,<text:line-break/>  "version": "1.0.0",<text:line-break/>  "main": "./examples/index.js",<text:line-break/>  "description": "",<text:line-break/>  "scripts": {<text:line-break/>    "lint": "eslint ./examples",<text:line-break/>    "print-args": "node examples/print-args.js",<text:line-break/>    "start": "micro examples/app.js",<text:line-break/>    "test": "mocha examples/tests.js",<text:line-break/>    "pretest": "npm run lint"<text:line-break/>  },<text:line-break/>  "engines": {<text:line-break/>    "node": "^10.0.0"<text:line-break/>  },<text:line-break/>  "author": "Thomas Parisot (https://oncletom.io)",<text:line-break/>  "license": "MIT",<text:line-break/>  "bugs": {<text:line-break/>    "url": "https://github.com/oncletom/nodebook/issues"<text:line-break/>  },<text:line-break/>  "homepage": "https://github.com/oncletom/nodebook",<text:line-break/>  "dependencies": {<text:line-break/>    "cowsay": "^1.3.0",<text:line-break/>    "lodash": "^4.17.10",<text:line-break/>    "micro": "^9.3.2"<text:line-break/>  },<text:line-break/>  "devDependencies": {<text:line-break/>    "eslint": "^4.19.1",<text:line-break/>    "mocha": "^5.2.0"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Installer des modules npm</text:h><text:p>Le mécanisme de modules est documenté dans<text:line-break/>le chapitre 4.<text:line-break/>Les fonctions require() et import chargent nos propres modules mais aussi<text:line-break/>les modules de base, installés avec Node.<text:line-break/>Les modules npm sont des modules complémentaires et téléchargeables à l&amp;#8217;aide<text:line-break/>de l&amp;#8217;exécutable npm.</text:p><text:p>Cette section va nous aider à comprendre ce qu&amp;#8217;il se passe sous le capot<text:line-break/>pendant les phases d&amp;#8217;installation, de mise à jour et de désinstallation<text:line-break/>des modules npm.</text:p><text:h text:outline-level="3">Depuis le registre npm</text:h><text:p>Le registre npm (npmjs.com) est l&amp;#8217;hébergement principal<text:line-break/>des modules JavaScript.</text:p><text:p>La commande npm install s&amp;#8217;utilise directement quand nous connaissons déjà<text:line-break/>le nom d&amp;#8217;un module à installer,<text:line-break/>par exemple le module cowsay (npmjs.com/cowsay)&amp;#160;:</text:p><text:p>Le module est installé et prêt à être inclus dans un script.<text:line-break/>Nous pouvons aussi constater que le champ dependencies est apparu<text:line-break/>dans le fichier package.json&amp;#160;:</text:p><text:p>L&amp;#8217;exécutable npm tient les comptes des modules installés à notre demande.<text:line-break/>Ça nous sera utile pour installer les modules sur un autre ordinateur.<text:line-break/>Nous reviendrons plus tard sur la notation des versions<text:line-break/>—&amp;#160;on en reparlera sous le nom de versions sémantiques (Semantic Versionning).</text:p><text:p>Nous pouvons remarquer que l&amp;#8217;inclusion d&amp;#8217;un module npm est identique<text:line-break/>à celle d&amp;#8217;un module de base.<text:line-break/>Regardons le résultat sans plus tarder&amp;#160;:</text:p><text:p>L&amp;#8217;utilisation d&amp;#8217;un module npm nous a permis d&amp;#8217;utiliser du code sans avoir à le<text:line-break/>créer alors qu&amp;#8217;il n&amp;#8217;était pas fourni par la plate-forme Node.</text:p><text:p>Maintenant que nous savons installer un module npm, nous pouvons en chercher<text:line-break/>d&amp;#8217;autres et comprendre comment les utiliser.</text:p><text:p>Les modules npm et leurs dépendances sont stockés dans un répertoire<text:line-break/>node_modules.<text:line-break/>Ce répertoire est situé au même niveau que le fichier package.json.</text:p><text:p>L&amp;#8217;exécutable npm effectue un bon nombre d&amp;#8217;actions après avoir<text:line-break/>saisi la commande npm install cowsay&amp;#160;:</text:p><text:p>Il existe une variante de la commande pour distinguer les dépendances<text:line-break/>spécifiques à l&amp;#8217;outillage du projet.<text:line-break/>Rendez-vous dans la section dépendances de développement<text:line-break/>pour en savoir plus.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install cowsay<text:line-break/>+ cowsay@1.3.0<text:line-break/>added 10 packages from 3 contributors in 1.667s<text:line-break/>found 0 vulnerabilities<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "dependencies": {<text:line-break/>    "cowsay": "^1.3.0"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const {say} = require('cowsay');<text:line-break/>const message = say({ text: 'Bonjour !' });<text:line-break/><text:line-break/>console.log(message);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node cow.js<text:line-break/>___________<text:line-break/>&amp;lt; Bonjour ! &amp;gt;<text:line-break/>-----------<text:line-break/>       \   ^__^<text:line-break/>        \  (oo)\_______<text:line-break/>           (__)\       )\/\<text:line-break/>               ||----w |<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. il interroge le registre npmjs.com pour obtenir des informations sur le module demandé&amp;#160;;,1. il détermine que 1.3.0 est la version la plus récente&amp;#160;;,1. il télécharge une archive compressée (.tar.gz) qui contient tous les fichiers de la version 1.3.0&amp;#160;;,1. l&amp;#8217;archive est décompressée dans le répertoire node_modules&amp;#160;;,1. les dépendances sont elles aussi téléchargées puis décompressées dans le répertoire node_modules&amp;#160;;,1. le module cowsay est inscrit dans le fichier package.json.<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Trouver son bonheur dans le registre npm</text:h><text:p>Le registre npm (npmjs.com) fourmille de modules<text:line-break/>—&amp;#160;de simples fonctions, des librairies ou des frameworks complets.<text:line-break/>Ils couvrent un spectre d&amp;#8217;usages allant de l&amp;#8217;accès aux bases de données,<text:line-break/>à des frameworks web, à des outils front-end, des utilitaires de test,<text:line-break/>de compression de données, du paiement bancaire, des frameworks mobiles, etc.</text:p><text:p>Essayons de chercher une librairie qui puisse nous connecter à une<text:line-break/>base de données MySQL ou MariaDB.<text:line-break/>Tapez mysql dans le champ de recherche du registre npm ou saisissez<text:line-break/>directement l&amp;#8217;URL menant aux résultats de cette recherche en vous<text:line-break/>rendant sur npmjs.com/search?q=mysql&amp;#160;:</text:p><text:p>Les résultats sont triés par pertinence&amp;#160;— un mélange entre popularité,<text:line-break/>qualité et maintenance des projets.</text:p><text:p>Je trouve qu&amp;#8217;il est difficile de décider uniquement en regardant la liste.<text:line-break/>J&amp;#8217;ai tendance à ouvrir un onglet par module pour lire leur documentation.<text:line-break/>Prenons le cas du module mysql2 (npmjs.com/mysql2) justement&amp;#160;:</text:p><text:p>Plusieurs éléments de cette page tendent à me rassurer<text:line-break/>et m&amp;#8217;aident à juger de la robustesse de ce module&amp;#160;:</text:p><text:p>J&amp;#8217;ai un doute quand je lis 108 issues et 13 pull requests.<text:line-break/>Dans ce cas-là je me dis que les personnes qui maintiennent le projet ne sont<text:line-break/>pas forcément très réactives.</text:p><text:p>Cependant, il y a suffisamment d&amp;#8217;indicateurs au vert pour l&amp;#8217;installer à coup de<text:line-break/>npm install mysql2 puis à l&amp;#8217;essayer dans un script.</text:p><text:p>Le module mysql-libmysqlclient (npmjs.com/mysql-libmysqlclient)<text:line-break/>ne me fait pas du tout le même effet&amp;#160;:</text:p><text:p>La page du module ne met pas d&amp;#8217;exemple simple à comprendre et fait référence<text:line-break/>à des versions de Node antédiluviennes.<text:line-break/>Rien n&amp;#8217;indique qu&amp;#8217;il ne peut pas fonctionner avec Node v10<text:line-break/>mais la présence du mot binding m&amp;#8217;évoque que l&amp;#8217;installation du module<text:line-break/>compile un programme écrit dans un autre langage<text:line-break/>—&amp;#160;en l&amp;#8217;occurrence, libmysqlclient.</text:p><text:p>Point positif&amp;#160;: il n&amp;#8217;y a que 14 issues GitHub.<text:line-break/>C&amp;#8217;est peu mais l&amp;#8217;une d&amp;#8217;entre elle est intitulée<text:line-break/>«&amp;#160;Does not work with any modern version of Node.js&amp;#160;».<text:line-break/>Ça confirme les doutes du paragraphe précédent&amp;#160;:<text:line-break/>c&amp;#8217;est suffisant pour que je passe mon chemin.</text:p><text:p>En continuant plus loin dans la liste des résultats de recherche,<text:line-break/>je suis tombé sur le module npm nommé falchion&amp;#160;:</text:p><text:p>Il n&amp;#8217;y a qu&amp;#8217;une seule version du module, qui date de quatre années<text:line-break/>avec une documentation qui tient sur une ligne.<text:line-break/>Il y a très peu de chances que nous puissions en faire quelque chose.</text:p><text:p>Voici au final ce que j&amp;#8217;estime être le plus important pour me faire<text:line-break/>une idée d&amp;#8217;un module et décider de l&amp;#8217;installer ou non&amp;#160;:</text:p><text:p>Ce sont des critères subjectifs.<text:line-break/>Un module peut être populaire par ancienneté alors qu&amp;#8217;il existe des alternatives,<text:line-break/>plus légères ou plus simple d&amp;#8217;utilisation.<text:line-break/>C&amp;#8217;est le cas du module moment.js qui est plus populaire que date-fns<text:line-break/>—&amp;#160;alors que je préfère ce dernier.</text:p><text:p>Il y a aussi des modules dans lesquels j&amp;#8217;ai une confiance quasi-aveugle.<text:line-break/>Ils sont publiés par les personnes présentes dans cette liste non-exhaustive&amp;#160;:</text:p><text:p>J&amp;#8217;ai compilé une liste de modules utiles pour mieux démarrer<text:line-break/>dans vos projets.<text:line-break/>Vous la trouverez en annexe A.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* les badges colorés qui affichent le statut d&amp;#8217;exécution des tests&amp;#160;;,* une introduction de documentation claire et concise&amp;#160;;,* un nombre de téléchargements en progrès réguliers&amp;#160;;,* il s&amp;#8217;utilise avec des promesses&amp;#160;;,* le nombre important de modules dépendants&amp;#160;;,* je reconnais une autrice qui contribue du code de qualité&amp;#160;— Rebecca Turner (npmjs.com/~iarna).<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* présence d&amp;#8217;une documentation&amp;#160;— je peux me faire une idée des fonctionnalités<text:line-break/>et de la complexité d&amp;#8217;utilisation du module&amp;#160;;,* des badges d&amp;#8217;intégration continue&amp;#160;— je sais ainsi qu&amp;#8217;il y a des tests<text:line-break/>unitaires qui sont exécutés automatiquement avant que le module soit publié&amp;#160;;,* le nombre de téléchargements&amp;#160;— je sais si d&amp;#8217;autres personnes s&amp;#8217;en servent<text:line-break/>en espérant qu&amp;#8217;ils remontent les problèmes rencontrés&amp;#160;;,* le nombre de versions&amp;#160;— ça me donne une idée de la maturité du projet<text:line-break/>et de la réactivité aux demandes de la communauté.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Désinstaller un module</text:h><text:p>L&amp;#8217;utilisation de la commande npm uninstall supprime un module npm<text:line-break/>et les fichiers qu&amp;#8217;il a installé en toute sécurité.<text:line-break/>La commande le retire ensuite de la liste des dépendances<text:line-break/>du fichier package.json.</text:p><text:p>Le module cowsay n&amp;#8217;est plus installé.<text:line-break/>Que se passe-t-il si nous exécutons à nouveau un l&amp;#8217;exemple cow.js&amp;#160;?</text:p><text:p>Le chargement du module cowsay a échoué car Node n&amp;#8217;arrive pas à le trouver<text:line-break/>—&amp;#160;et c&amp;#8217;est normal.</text:p><text:p>Nous devons à nouveau lancer la commande npm install cowsay<text:line-break/>pour que le script fonctionne à nouveau.</text:p><text:p><text:line-break/>----<text:line-break/>$ npm uninstall cowsay<text:line-break/>removed 10 packages in 1.963s<text:line-break/>found 0 vulnerabilities<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node cow.js<text:line-break/>internal/modules/cjs/loader.js:596<text:line-break/>    throw err;<text:line-break/>    ^<text:line-break/><text:line-break/>Error: Cannot find module 'cowsay'<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Depuis un fichier package.json</text:h><text:p>Jusqu&amp;#8217;à présent, nous avons installé des modules en les ajoutant un par un.<text:line-break/>La procédure est légèrement différente quand nous installons le projet de zéro<text:line-break/>ou quand le fichier package.json a été mis à jour par un·e collègue, par exemple.</text:p><text:p>L&amp;#8217;exemple suivante illustre la remise à zéro des modules<text:line-break/>utilisés en exemple de ce chapitre&amp;#160;— cf. la notice d&amp;#8217;installation<text:line-break/>du module nodebook&amp;#160;:</text:p><text:p>Nous nous sommes positionnés dans un répertoire qui contient<text:line-break/>un fichier package.json puis nous avons supprimé tout ce qui aurait pu<text:line-break/>être installé.</text:p><text:p>La commande npm install s&amp;#8217;utilise de manière systématique quand<text:line-break/>nous récupérons du code avec Git pour la première fois (git clone)<text:line-break/>ou après une mise à jour, par exemple avec git pull.</text:p><text:p>L&amp;#8217;exécutable npm vérifie que la correspondance est bien respectée<text:line-break/>entre ce qui est installé dans le répertoire node_modules et<text:line-break/>les modules listés dans le fichier package.json.<text:line-break/>La commande npm install installe, met à jour et retire les modules nécessaires.</text:p><text:p>La commande npm ci réinstalle un projet de zéro de manière prédictible.<text:line-break/>Rendez-vous dans la section npm ci pour en savoir plus à son sujet.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ cd $(nodebook dir {chapter-id} --root)<text:line-break/>$ rm -rf node_modules<text:line-break/>$ npm install<text:line-break/>added 164 packages from 583 contributors in 4.781s<text:line-break/>found 0 vulnerabilities<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Spécifier une version</text:h><text:p>Par défaut, l&amp;#8217;exécutable npm installe la dernière version d&amp;#8217;un module.<text:line-break/>Nous avons la liberté d&amp;#8217;en installer d&amp;#8217;autres qui sont antérieures.<text:line-break/>C&amp;#8217;est pratique quand des modules npm arrêtent de supporter<text:line-break/>des navigateurs web ou des versions de Node alors que nous les utilisons encore.</text:p><text:p>Nous allons utiliser le module lodash (npmjs.com/lodash)<text:line-break/>pour illustrer nos allées et venues entre différentes versions.<text:line-break/>À l&amp;#8217;heure où j&amp;#8217;écris ces lignes, la version la plus récente lodash<text:line-break/>est la 4.17.10.<text:line-break/>C&amp;#8217;est ce que rapporte le résultat de la commande npm install lodash&amp;#160;:</text:p><text:p>L&amp;#8217;utilisation du caractère @ conjointe à un numéro de version précise<text:line-break/>la version à installer&amp;#160;:</text:p><text:p>Nous avons installé une version précise mais il y a surement des mises à jour<text:line-break/>qui ont suivi pour corriger des bugs.<text:line-break/>Le problème est qu&amp;#8217;à ce stade, nous ne connaissons pas le numéro de version<text:line-break/>à spécifier.<text:line-break/>Idéalement, je préfèrerais installer la version la plus récente de la série 3.<text:line-break/>Il se trouve que l&amp;#8217;exécutable npm sait le faire pour nous et sans effort&amp;#160;:</text:p><text:p>Nous pouvons faire la même chose avec la version<text:line-break/>la plus récente de la série 3 et de la série 2.2&amp;#160;:</text:p><text:p>La commande npm view affiche les informations d&amp;#8217;un module npm<text:line-break/>directement depuis notre terminal.<text:line-break/>Elle affiche toutes les versions publiées avec l&amp;#8217;argument versions&amp;#160;:</text:p><text:p>Revenons à la version la plus récente en réutilisant la<text:line-break/>commande d&amp;#8217;installation abordée auparavant&amp;#160;:</text:p><text:p>Quelque chose d&amp;#8217;inattendu s&amp;#8217;est produit&amp;#160;: la version la plus récente<text:line-break/>de la série 2 a été installée au lieu de la version 4.17.10.<text:line-break/>Nous trouverons un élément de réponse dans le fichier package.json&amp;#160;:</text:p><text:p>L&amp;#8217;exécutable npm respecte la version précisée dans le fichier package.json<text:line-break/>si elle n&amp;#8217;est pas précisée dans la commande.<text:line-break/>Si la dépendance n&amp;#8217;est pas listée, alors l&amp;#8217;exécutable npm installe la version<text:line-break/>la plus récente.</text:p><text:p>L&amp;#8217;étiquette latest explicite notre envie d&amp;#8217;installer la version<text:line-break/>la plus récente et sans tenir compte du fichier package.json&amp;#160;:</text:p><text:p>Nous sommes désormais en mesure de choisir entre différentes versions<text:line-break/>d&amp;#8217;un module et de manière plus ou moins fine.</text:p><text:p>Nous prendrons le temps d&amp;#8217;explorer le mécanisme de numérotation des versions<text:line-break/>dans la section suivante afin de mieux comprendre ce qui est renseigné<text:line-break/>dans le fichier package.json.</text:p><text:p>La commande npm view va à nouveau nous aider.<text:line-break/>Elle affiche toutes les versions publiées avec l&amp;#8217;argument dist-tags&amp;#160;:</text:p><text:p>Ce mécanisme d&amp;#8217;étiquette sert de raccourci pour associer un numéro de version<text:line-break/>(qui change) à un intitulé (qui reste dans le temps).</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash<text:line-break/>+ lodash@4.17.10<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@3.0.0<text:line-break/>+ lodash@3.0.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@3<text:line-break/>+ lodash@&amp;lt;i&amp;gt;3.10.1&amp;lt;/i&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@3<text:line-break/>+ lodash@3.10.1<text:line-break/>$ npm install lodash@2.2<text:line-break/>+ lodash@2.2.1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm view lodash &amp;lt;i&amp;gt;versions&amp;lt;/i&amp;gt;<text:line-break/>[ '0.1.0',<text:line-break/>  '0.2.0',<text:line-break/>  ...<text:line-break/>  '1.0.0',<text:line-break/>  '1.0.1',<text:line-break/>  '1.0.2',<text:line-break/>  ... ]<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash<text:line-break/>+ lodash@2.4.2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "dependencies": {<text:line-break/>    "cowsay": "^1.3.0",<text:line-break/>    "lodash": "&lt;i>^2.4.2&lt;/i>"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@&amp;lt;i&amp;gt;latest&amp;lt;/i&amp;gt;<text:line-break/>+ lodash@4.17.10<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm view lodash dist-tags<text:line-break/>{ &amp;lt;i&amp;gt;latest&amp;lt;/i&amp;gt;: '4.17.10' }<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Comprendre les numéros de versions (Semantic Versioning)</text:h><text:p>Les numéros de versions ont été utilisées de deux manières dans les<text:line-break/>sections précédentes&amp;#160;: avec l&amp;#8217;exécutable npm et en observant la liste<text:line-break/>de dépendances dans le fichier package.json.</text:p><text:p>L&amp;#8217;exécutable npm découpe un numéro de version en trois parties&amp;#160;:<text:line-break/>majeur, mineur et patch.<text:line-break/>Pour le numéro de version 1.2.3, 1 est le numéro de version majeur,<text:line-break/>2 est le numéro de version mineur tandis que  3 est le numéro de version patch.</text:p><text:p>Si nous devions mettre à jour lodash@2.2.0&amp;#160;:</text:p><text:p>Une mise à jour majeure demande de lire attentivement la documentation du module<text:line-break/>pour comprendre le volume de travail à fournir avant de monter en version.<text:line-break/>La mise à jour mineure peut occasionnellement demander du travail selon<text:line-break/>interprétation des développeurs de modules npm.</text:p><text:p>Je ne pense pas qu&amp;#8217;il soit nécessaire de se sentir obligé·e de toujours<text:line-break/>être positionné·e sur la dernière version majeure.<text:line-break/>Les versions patch et mineures sont plus importantes à mes yeux<text:line-break/>car elles contiennent des corrections qui peuvent bénéficier à nos applications.</text:p><text:p>L&amp;#8217;outil en ligne semver.npmjs.com sert à tester<text:line-break/>la syntaxe des versions sémantiques avec de véritables modules npm.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* vers lodash@2.2.1&amp;#160;: mise à jour patch&amp;#160;— des bugs sont corrigés&amp;#160;;,* vers lodash@2.4.2&amp;#160;: mise à jour mineure&amp;#160;— des fonctionnalités sont ajoutées,<text:line-break/>corrigées ou modifiées et ce, sans affecter notre code&amp;#160;;,* vers lodash@4.17.10&amp;#160;: mise à jour majeure&amp;#160;— des fonctionnalités ont<text:line-break/>été modifiées, remaniées ou supprimées et peuvent casser notre code qui repose dessus.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Mises à jour</text:h><text:p>Nous avons appris à installer des modules npm dans les versions de notre choix<text:line-break/>et à les réinstaller depuis la liste contenue dans le fichier package.json.<text:line-break/>Comment savoir si ces derniers sont à mettre à jour&amp;#160;?</text:p><text:p>L&amp;#8217;utilisation combinée des commandes npm outdated et npm update va<text:line-break/>nous permettre d&amp;#8217;y arriver.<text:line-break/>Il sera plus facile de comprendre cette partie si vous vous êtes familiarisé·e<text:line-break/>avec la notion de version sémantique.</text:p><text:p>Commençons par installer d&amp;#8217;anciennes versions des modules lodash et cowsay&amp;#160;:</text:p><text:p>La commande npm outdated affiche les dépendances qui ne sont pas à jour&amp;#160;:</text:p><text:p>Le numéro de version affiché dans la colonne Wanted est celui qui sera atteint<text:line-break/>avec la commande npm update.</text:p><text:p>Observons ce qui a changé dans les résultats de la commande npm oudated&amp;#160;:</text:p><text:p>Seul le module lodash est désormais listé.<text:line-break/>Les modules cowsay et lodash ont été mis à jour au plus sûr.<text:line-break/>Le module lodash peut rester en l&amp;#8217;état si nous n&amp;#8217;avons pas le temps<text:line-break/>de rendre notre code compatible avec ses changements.</text:p><text:p>Sinon, une installation manuelle s&amp;#8217;impose<text:line-break/>avec l&amp;#8217;étiquette latest&amp;#160;:</text:p><text:p>Un dernier appel à npm outdated nous permet d&amp;#8217;en avoir le cœur net&amp;#160;:</text:p><text:p>Si rien ne s&amp;#8217;affiche, c&amp;#8217;est que tout est bon&amp;#160;: nos modules sont à jour&amp;#160;!</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@2.0.0 cowsay@1.0.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm outdated<text:line-break/>Package  Current  Wanted   Latest  Location<text:line-break/>cowsay     1.0.0   1.3.0    1.3.0  nodebook.chapter-05<text:line-break/>lodash     2.0.0   2.4.2  4.17.10  nodebook.chapter-05<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm update<text:line-break/>+ cowsay@1.3.0<text:line-break/>+ lodash@2.4.2<text:line-break/>added 7 packages and updated 3 packages in 2.717s<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm outdated<text:line-break/>Package  Current  Wanted   Latest  Location<text:line-break/>lodash     2.4.2   2.4.2  4.17.10  nodebook.chapter-05<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@latest<text:line-break/>+ lodash@4.17.10<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm outdated<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Autres manières d&amp;#8217;installer et d&amp;#8217;utiliser des modules npm</text:h><text:p>Dans la section précédente, nous avons appris à installer des modules<text:line-break/>depuis le registre npm.<text:line-break/>Dans cette section, nous allons apprendre à les installer depuis des sources<text:line-break/>variées, uniquement à des fins de développement ou en tant que<text:line-break/>commandes exécutables au niveau du système d&amp;#8217;exploitation.</text:p><text:h text:outline-level="3">Depuis GitHub, GitLab ou un dépôt Git</text:h><text:p>Il arrive que l&amp;#8217;auteur ou autrice d&amp;#8217;un module npm corrige un problème<text:line-break/>sans publier le correctif sur le registre npm.<text:line-break/>Il arrive aussi qu&amp;#8217;un module npm soit hébergé de manière publique ou privée<text:line-break/>sur une plate-forme d&amp;#8217;hébergement Git comme GitLab ou GitHub et ce,<text:line-break/>sans passer par le registre npm.</text:p><text:p>Le module npm cowsay est publié sur le registre npm mais il est aussi<text:line-break/>hébergé sur GitHub à l&amp;#8217;adresse github.com/piuccio/cowsay.<text:line-break/>Installons-le depuis cette source&amp;#160;:</text:p><text:p>L&amp;#8217;exéxutable npm vérifie qu&amp;#8217;un fichier package.json est situé à la racine<text:line-break/>du dépôt.<text:line-break/>Dans ce cas de figure, il utilise le programme Git pour obtenir le code source<text:line-break/>du module npm.</text:p><text:p>Une écriture raccourcie existe pour installer un module depuis un hébergement<text:line-break/>Git populaire, sans avoir à écrire l&amp;#8217;URL en entier&amp;#160;:</text:p><text:p>L&amp;#8217;installation est plus lente depuis un dépôt Git que depuis un registre npm.<text:line-break/>L&amp;#8217;exécutable npm fait appel à l&amp;#8217;exécutable git pour cloner l&amp;#8217;historique<text:line-break/>du dépôt et de ses dépendances pour extraire la version adéquate<text:line-break/>de la copie de travail.</text:p><text:p>Le temps de téléchargement sera proportionnel au nombre de commits.</text:p><text:p>L&amp;#8217;exécutable npm sait aussi installer des modules avec le protocole<text:line-break/>Secure Shell (SSH) désigné par git+ssh&amp;#160;:</text:p><text:p>Les clients Git et SSH doivent être configurés au niveau du système pour<text:line-break/>être en mesure de s&amp;#8217;authentifier sur l&amp;#8217;hôte distant.<text:line-break/>C&amp;#8217;est une solution intéressante pour automatiser l&amp;#8217;installation de modules privés.<text:line-break/>L&amp;#8217;étape suivante serait de déployer un registre npm privé ou de souscrire<text:line-break/>une option payante sur le registre npm principal.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install https://github.com/piuccio/cowsay<text:line-break/>+ cowsay@1.3.0<text:line-break/>updated 1 package in 5.866s<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install github:piuccio/cowsay<text:line-break/>+ cowsay@1.3.0<text:line-break/>updated 1 package in 4.513s<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install git+ssh://git@github.com:piuccio/cowsay.git<text:line-break/>+ cowsay@1.3.0<text:line-break/>updated 1 package in 10.263s<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Dépendance de développement</text:h><text:p>Les dépendances de développement sont des modules npm utilisés<text:line-break/>pour exécuter les tests unitaires.<text:line-break/>Les modules utilisés pour de l&amp;#8217;outillage sont aussi des dépendances de développement.<text:line-break/>Ce sont des modules que nous n&amp;#8217;appelons pas directement avec les<text:line-break/>fonctions require() et import.</text:p><text:p>Par exemple, le module npm mocha est utilisé pour structurer et exécuter<text:line-break/>des tests unitaires pour Node et les navigateurs web.<text:line-break/>Il serait donc logique de l&amp;#8217;installer comme dépendance de développement.<text:line-break/>L&amp;#8217;option --save-dev permet de signaler cette intention à l&amp;#8217;exécutable npm&amp;#160;:</text:p><text:p>L&amp;#8217;exécutable npm range alors ce module dans une nouvelle section du<text:line-break/>fichier package.json&amp;#160;— la section devDependencies&amp;#160;:</text:p><text:p>La commande npm install accepte l&amp;#8217;option --production.<text:line-break/>Elle installe seulement les dépendances listées dans la section dependencies&amp;#160;:</text:p><text:p>Le poids d&amp;#8217;installation est ainsi réduit.<text:line-break/>C&amp;#8217;est l&amp;#8217;idéal dans le cas du déploiement de<text:line-break/>fonctions événementielles<text:line-break/>(cf. chapitre 6).</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --save-dev mocha<text:line-break/>+ mocha@5.2.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "dependencies": {<text:line-break/>    "cowsay": "^1.3.0",<text:line-break/>    "lodash": "^4.17.10"<text:line-break/>  },<text:line-break/>  "&lt;i>devDependencies&lt;/i>": {<text:line-break/>    "mocha": "^5.2.0"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --production<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Exécutable système (installation globale)</text:h><text:p>Certains modules npm s&amp;#8217;installent comme des programmes exécutables.<text:line-break/>Ils s&amp;#8217;appellent ensuite dans un terminal, exactement comme nous le faisions<text:line-break/>jusqu&amp;#8217;à présent avec l&amp;#8217;exécutable npm.</text:p><text:p>C&amp;#8217;est le cas du module serve (npmjs.com/serve), par exemple.<text:line-break/>Il démarre un serveur web en ligne de commande pour tester le rendu<text:line-break/>de fichiers HTML sans avoir à configurer de logiciels comme Apache ou nginx.</text:p><text:p>L&amp;#8217;installation est rendue globale&amp;#160;— à l&amp;#8217;échelle du système d&amp;#8217;exploitation<text:line-break/>—&amp;#160;avec l&amp;#8217;utilisation de l&amp;#8217;option --global&amp;#160;:</text:p><text:p>En général, les modules npm qui se prêtent bien au jeu du npm install --global<text:line-break/>sont ceux qui documentent des exemples de commande à exécuter,<text:line-break/>qui se décrivent comme des outils en ligne de commande ou qui<text:line-break/>mentionnent explicitement l&amp;#8217;installation globale.</text:p><text:p>L&amp;#8217;exécutable serve est disponible suite à l&amp;#8217;installation globale&amp;#160;:</text:p><text:p>Le module npm s&amp;#8217;exécute de manière transparente, sans invoquer Node ni<text:line-break/>l&amp;#8217;exécutable npm&amp;#160;:</text:p><text:p>Par convention, les modules npm qui s&amp;#8217;utilisent en ligne de commande<text:line-break/>sont accompagnés d&amp;#8217;une documentation.<text:line-break/>Ce manuel décrit des cas d&amp;#8217;usages ainsi que les options à disposition.</text:p><text:p>Un module npm installé de manière globale se désinstalle en passant l&amp;#8217;option<text:line-break/>--global à la commande npm uninstall&amp;#160;:</text:p><text:p>Le chapitre 8 sera l&amp;#8217;occasion d&amp;#8217;entrer plus en détails<text:line-break/>dans le développement d&amp;#8217;exécutables système écrits en ECMAScript.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install &amp;lt;i&amp;gt;--global&amp;lt;/i&amp;gt; serve<text:line-break/>+ serve@7.2.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ serve --version<text:line-break/>7.2.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ serve .<text:line-break/>INFO: Accepting connections at http://localhost:3000<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ serve --help<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm uninstall -g serve<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Outiller un projet avec les scripts npm</text:h><text:p>Les scripts npm sont des outils puissants qui autonomisent l&amp;#8217;outillage projet,<text:line-break/>automatisent des actions manuelles et simplifient des actions trop<text:line-break/>complexes à mémoriser.</text:p><text:p>Les scripts npm sont consignés dans la section scripts du fichier package.json.<text:line-break/>Ils se basent sur des scripts Node et des modules npm pour<text:line-break/>lancer des actions quand des fichiers sont modifiés,<text:line-break/>transformer des feuilles de style, exécuter des tests unitaires ou fonctionnels,<text:line-break/>déployer le projet, entre autres.</text:p><text:p>Les scripts npm permettent de créer des conventions entre nos projets.<text:line-break/>Nous pouvons ainsi réutiliser les mêmes noms et adapter les commandes<text:line-break/>au projet en question.</text:p><text:h text:outline-level="3">Démarrer l&amp;#8217;application</text:h><text:p>Le script npm start concerne les projets dont le script principal<text:line-break/>tourne en continu&amp;#160;— une application web par exemple.</text:p><text:p>L&amp;#8217;exemple suivant démarre un serveur web sans que nous ayons à connaître<text:line-break/>la commande associée pour démarrer le-dit serveur&amp;#160;:</text:p><text:p>Nous sommes libre de renseigner la valeur du champ scripts.start<text:line-break/>du fichier package.json comme bon nous semble&amp;#160;:</text:p><text:p>Nous avons utilisé le module npm micro (npmjs.com/micro)<text:line-break/>pour démarrer une application web.<text:line-break/>Plus exactement, nous avons utilisé l&amp;#8217;exécutable fourni par ce module.</text:p><text:p>Les modules npm exécutables sont disponibles au niveau du<text:line-break/>système lorsqu&amp;#8217;ils sont installés avec l&amp;#8217;option --global.</text:p><text:p>Les exécutables des modules npm listés dans dependencies et devDependencies<text:line-break/>sont utilisables dans les scripts npm.</text:p><text:p>Nous pouvons ainsi contenir tous les exécutables nécessaires dans les<text:line-break/>dépendances du projet.</text:p><text:p>Nous verrons dans le chapitre 6 que les<text:line-break/>plates-formes de service utilisent aussi la valeur du champ scripts.start<text:line-break/>pour déterminer comment démarrer notre application.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm start<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 start         1<text:line-break/>&amp;gt; micro examples/app.js                   2<text:line-break/><text:line-break/>micro: Accepting connections on port 3000<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@25544 {list_context: "colist", text: "L'exécutable `npm` affiche le nom du script npm en cours d'exécution", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@25554 {list_context: "colist", text: "`micro examples/app.js` est la commande réellement exécutée par npm", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "start": "micro examples/app.js"<text:line-break/>  },<text:line-break/>  "dependencies": {<text:line-break/>    "micro": "^9.3.2"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Exécuter des tests</text:h><text:p>Le script npm test concerne tous les projets pour qui nous avons écrit<text:line-break/>des tests qu&amp;#8217;ils soient unitaires ou fonctionnels.</text:p><text:p>L&amp;#8217;intention de la commande lancée par le script npm est de terminer<text:line-break/>en erreur si un des tests n&amp;#8217;aboutit pas au résultat escompté.</text:p><text:p>L&amp;#8217;exemple suivant lance un test unitaire qui s&amp;#8217;assure de la cohérence<text:line-break/>d&amp;#8217;un des exemples précédents&amp;#160;:</text:p><text:p>Cette fois-ci, nous avons personnalisé la valeur du champ scripts.test<text:line-break/>du fichier package.json&amp;#160;:</text:p><text:p>Nous avons eu recourt au module npm mocha (npmjs.com/mocha).<text:line-break/>De même qu&amp;#8217;avec le script de démarrage, nous avons eu recourt<text:line-break/>à l&amp;#8217;exécutable fourni par le module.<text:line-break/>En revanche nous l&amp;#8217;avons listé dans la section devDependencies<text:line-break/>car il est relatif à l&amp;#8217;outillage du projet.</text:p><text:p>Les services d&amp;#8217;intégration continue lancent le script npm test<text:line-break/>lorsqu&amp;#8217;ils détectent qu&amp;#8217;ils ont affaire à un projet Node.</text:p><text:p>D&amp;#8217;autres scripts que test et start sont définis par l&amp;#8217;exécutable npm.<text:line-break/>Ils sont tous documentés sur docs.npmjs.com/misc/scripts.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm test<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 test  1<text:line-break/>&amp;gt; mocha examples/tests.js         2<text:line-break/><text:line-break/>app.js<text:line-break/>  ✓ prints a cow as a response<text:line-break/><text:line-break/>1 passing<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@25628 {list_context: "colist", text: "L'exécutable `npm` affiche le nom du script npm en cours d'exécution", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@25638 {list_context: "colist", text: "`mocha examples/tests.js` est la commande réellement exécutée par npm", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "test": "mocha examples/tests.js"<text:line-break/>  },<text:line-break/>  "devDependencies": {<text:line-break/>    "mocha": "^5.2.0"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Créer un script npm personnalisé</text:h><text:p>Les scripts npm personnalisés sont utiles lorsque nous souhaitons outiller<text:line-break/>notre projet sans forcément que ça soit en rapport avec le lancement des tests<text:line-break/>ou de l&amp;#8217;application.</text:p><text:p>Les scripts personnalisés se démarrent avec npm run&amp;#160;:</text:p><text:p>Nous avons créé ce script en configurant la valeur du champ scripts.print-args<text:line-break/>du fichier package.json&amp;#160;:</text:p><text:p>La commande npm run (sans argument) liste tous les scripts npm du projet.</text:p><text:p>J&amp;#8217;ai développé ces conventions avec le temps&amp;#160;:</text:p><text:p>Une option spéciale nous aide à transmettre des arguments au script en question.<text:line-break/>Les arguments doivent être placés à droite de l&amp;#8217;option --&amp;#160;:</text:p><text:p>Un script npm peut faire appel à d&amp;#8217;autres scripts npm&amp;#160;:</text:p><text:p>J&amp;#8217;ai plutôt tendance à découper mes scripts de sorte à ce qu&amp;#8217;ils fassent<text:line-break/>tous une chose et une seule.<text:line-break/>Je peux ainsi les appeler de manière individuelle pour réduire la boucle<text:line-break/>de feedback.</text:p><text:p>La section suivante va nous aider à orchestrer l&amp;#8217;exécution des scripts<text:line-break/>les uns par rapport aux autres.</text:p><text:p>Toutes les sections du fichier package.json sont accessibles depuis<text:line-break/>les scripts npm sous forme de<text:line-break/>variables d&amp;#8217;environnement.<text:line-break/>Leur nom est préfixé par npm_package suivi de leur nom "mis à plat".<text:line-break/>Ainsi le champ version est accessible en tant que $npm_package_version<text:line-break/>et le champ config.port en tant que $npm_package_config_port&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm &amp;lt;i&amp;gt;run&amp;lt;/i&amp;gt; print-args<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 print-args<text:line-break/>&amp;gt; node examples/print-args.js<text:line-break/><text:line-break/>Rien à signaler.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "print-args": "node examples/print-args.js"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npm run build&amp;#160;: construit les artéfacts à déployer&amp;#160;;,* npm run deploy&amp;#160;: déploie le projet vers l&amp;#8217;hébergeur&amp;#160;;,* npm run lint&amp;#160;: applique un vérificateur syntaxique au code du projet&amp;#160;;,* npm run watch&amp;#160;: démarre l&amp;#8217;application et la relance à chaque changement.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run print-args un --test=true<text:line-break/>['un']<text:line-break/>$ npm run print-args -- un --test=true<text:line-break/>['un', '--test=true']<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "lint": "eslint ./examples",<text:line-break/>    "test": "npm run lint &lt;i>&amp;&amp;&lt;/i> mocha examples/tests.js"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "lint": "eslint ./examples",<text:line-break/>    "test": "npm run lint &amp;&amp; npm run test:unit",<text:line-break/>    "test:unit": "mocha examples/tests.js"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "&lt;i>config&lt;/i>": {<text:line-break/>    "&lt;i>port&lt;/i>": "4000"<text:line-break/>  };<text:line-break/>  "scripts": {<text:line-break/>    "start": "node server --port $npm_package_&lt;i>config&lt;/i>_&lt;i>port&lt;/i>",<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Exécuter des commandes avant et après des scripts npm</text:h><text:p>L&amp;#8217;ordre d&amp;#8217;exécution des scripts se contrôle en utilisant les préfixes<text:line-break/>pre et post.<text:line-break/>Par exemple, les scripts nommés pretest et posttest seront exécutés<text:line-break/>respectivement avant et après le script test.</text:p><text:p>Dans cet exemple de configuration, l&amp;#8217;exécution de la commande npm test<text:line-break/>lancera d&amp;#8217;abord le script pretest, puis le script lint<text:line-break/>puis enfin le script test&amp;#160;:</text:p><text:p>Ce mécanisme est utile pour s&amp;#8217;intercaler sur des temps particuliers<text:line-break/>du cycle de vie d&amp;#8217;un projet node.<text:line-break/>Voici une sélection</text:p><text:p><text:line-break/>----<text:line-break/>{<text:line-break/>  ...<text:line-break/>  "scripts": {<text:line-break/>    "lint": "eslint ./examples",<text:line-break/>    "test": "mocha examples/tests.js",<text:line-break/>    "&lt;i>pre&lt;/i>test": "npm run lint"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm test<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 pretest<text:line-break/>&amp;gt; npm run lint<text:line-break/>...<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 lint<text:line-break/>&amp;gt; eslint ./examples<text:line-break/>...<text:line-break/><text:line-break/>&amp;gt; nodebook.chapter-05@1.0.0 test<text:line-break/>&amp;gt; mocha examples/tests.js<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Automatiser tout l&amp;#8217;outillage projet</text:h><text:p>Les scripts npm suffisent à outiller la majorité des projets.<text:line-break/>Cependant ils peuvent devenir difficiles à lire lorsque les<text:line-break/>lignes deviennent trop longues.<text:line-break/>Il manquerait presque un moyen de les regrouper.</text:p><text:p>Le module npm npm-run-all (npmjs.com/npm-run-all) est un<text:line-break/>module qui parallélise l&amp;#8217;exécution des scripts et simplifie l&amp;#8217;appel d&amp;#8217;un groupe<text:line-break/>de scripts.</text:p><text:p>Il est aussi possible de déclencher des actions parallèles après une première<text:line-break/>action séquentielle&amp;#160;:</text:p><text:p>Libre à vous d&amp;#8217;orchestrer les scripts en les groupant avec un motif de noms<text:line-break/>ainsi qu&amp;#8217;en combinant les options --parallel (alias -p)<text:line-break/>et --sequential (alias -s) pour activer ou désactiver<text:line-break/>le parallélisme d&amp;#8217;exécution.</text:p><text:p>L&amp;#8217;énorme avantage d&amp;#8217;outiller un projet avec la commande npm run et<text:line-break/>l&amp;#8217;exécutable npm-run-script est que nous utilisons directement les outils<text:line-break/>dont nous avons besoin.</text:p><text:p>Gulp et Grunt introduisent une complexité d&amp;#8217;apprentissage et des couches<text:line-break/>d&amp;#8217;abstraction qui augmentent la fragilité de l&amp;#8217;outillage et augmentent<text:line-break/>la barrière d&amp;#8217;entrée de nos projets.</text:p><text:p>Tant mieux si nous pouvons nous en passer pour façonner nos propres outils.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "scripts": {<text:line-break/>    "build": "npm-run-all --parallel 'build:*'", 1<text:line-break/>    "build:front-end": "browserify ...",<text:line-break/>    "build:backend": "browserify ...",<text:line-break/>    "build:css": "sass ..."<text:line-break/>  }<text:line-break/>  "devDependencies": {<text:line-break/>    "npm-run-all": "*"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@26042 {list_context: "colist", text: "Les trois scripts préfixés par `build:` seront appelés en parallèle en exécutant `npm run build`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "scripts": {<text:line-break/>    "clean": "rm -rf ./dist",<text:line-break/>    "build": "npm-run-all clean --parallel 'build:*'", 1<text:line-break/>    "build:front-end": "browserify ...",<text:line-break/>    "build:backend": "browserify ..."<text:line-break/>  }<text:line-break/>  "devDependencies": {<text:line-break/>    "npm-run-all": "*"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@26062 {list_context: "colist", text: "`npm-run-all` exécute le script `clean` avant les autres scripts préfixés par `build:`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Anatomie du fichier package.json</text:h><text:p>Le fichier package.json est essentiel pour tirer parti de l&amp;#8217;exécutable npm.<text:line-break/>Tout projet intéressé par l'installation de modules npm ou par<text:line-break/>l'outillage des scripts va forcément avoir ce fichier quelque<text:line-break/>part dans son arborescence.</text:p><text:p>On peut décomposer ce fichier en plusieurs parties&amp;#160;:<text:line-break/>les informations générales qui aident les utilisateurs et utilisatrices<text:line-break/>à découvrir le module en effectuant une recherche,<text:line-break/>les points d&amp;#8217;entrée pour inclure ou exécuter le module<text:line-break/>et la configuration projet qui impacte le fonctionnement de l&amp;#8217;exécutable npm.</text:p><text:p>La page docs.npmjs.com/files/package.json documente<text:line-break/>de manière exhaustive les sections du fichier package.json.</text:p><text:p>En la lisant, vous apprendrez l&amp;#8217;existence d&amp;#8217;autres sections qui pourraient<text:line-break/>peut-être vous intéresser.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Quelques commandes pour aller plus loin</text:h><text:p>Nous venons de voir les commandes les plus utilisées de l&amp;#8217;exécutable npm.<text:line-break/>D&amp;#8217;autres commandes complètent son utilisation.<text:line-break/>Leur intérêt varie en fonction de vos envies et de vos pratiques de développement.<text:line-break/>Pas d&amp;#8217;inquiétude donc si vous ne les utilisez pas toutes&amp;#160;:<text:line-break/>j&amp;#8217;en parle pour éclairer quelques points intéressants à explorer.</text:p><text:h text:outline-level="3">npm view : voir les informations d&amp;#8217;un module</text:h><text:p>La commande npm view est une vue synthétique d&amp;#8217;un module npm donné.<text:line-break/>Elle est similaire à celle que nous pourrions trouver sur le registre npm<text:line-break/>mais condensée pour l&amp;#8217;affichage dans un terminal.</text:p><text:p>Nous y retrouvons des informations fournies par les auteurs et autrices du module<text:line-break/>ainsi que d&amp;#8217;autres, fournies par le registre npm.</text:p><text:p>Nous pouvons aussi zoomer sur une métadonnée.<text:line-break/>Par exemple, le champ dependencies pour ne lister que les dépendances directes&amp;#160;:</text:p><text:p>Il est même possible de zoomer sur un niveau plus fin de métadonnée,<text:line-break/>avec une annotation similaire à celle d&amp;#8217;un objet ECMAScript&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm view nodebook<text:line-break/><text:line-break/>nodebook@0.9.1 | CC-BY-NC-SA-4.0 | deps: 6 | versions: 21<text:line-break/>Node.js — Apprendre par l'exemple<text:line-break/><text:line-break/>keywords: nodejs, book, french, livre, learn, apprendre<text:line-break/><text:line-break/>bin: nodebook<text:line-break/><text:line-break/>dist<text:line-break/>.tarball https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz<text:line-break/>.shasum: 5ea87e9b85782e23164705a49cb7bd2dc4063775<text:line-break/>.integrity: sha512-...<text:line-break/>.unpackedSize: 15.0 MB<text:line-break/><text:line-break/>dependencies:<text:line-break/>finalhandler: ^1.1.1  serve-static: ^1.13.2<text:line-break/>get-port: ^3.2.0      update-check: ^1.5.2<text:line-break/>glob: ^7.1.2          yargs: ^11.1.0<text:line-break/><text:line-break/>maintainers:<text:line-break/>- oncletom<text:line-break/><text:line-break/>dist-tags:<text:line-break/>latest: 0.9.1<text:line-break/><text:line-break/>published 23 hours ago by oncletom<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@26876 {list_context: "dlist", text: "`bin`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26878 {list_context: "dlist", text: "Indique la présence d'un ou plusieurs &lt;&lt;install.global,exécutables>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26892 {list_context: "dlist", text: "`dist`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26894 {list_context: "dlist", text: "Informations à propos du fichier téléchargé quand\nnous faisons `npm install &lt;module>`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26910 {list_context: "dlist", text: "`dependencies`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26912 {list_context: "dlist", text: "Les modules additionnels téléchargés lors de l'installation.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26926 {list_context: "dlist", text: "`dist-tags`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@26928 {list_context: "dlist", text: "Les étiquettes définies par les auteurs et autrices, utiles quand nous souhaitons\n&lt;&lt;install.version,jongler entre différentes versions>> du module.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ npm view nodebook dependencies<text:line-break/>{ finalhandler: '^1.1.1',<text:line-break/>  'get-port': '^3.2.0',<text:line-break/>  glob: '^7.1.2',<text:line-break/>  'serve-static': '^1.13.2',<text:line-break/>  'update-check': '^1.5.2',<text:line-break/>  yargs: '^11.1.0' }<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm view nodebook dist.&lt;i>unpackedSize&lt;/i><text:line-break/>14985184<text:line-break/>$ npm view nodebook dist<text:line-break/>{ integrity:<text:line-break/>   'sha512-...',<text:line-break/>  shasum: '5ea87e9b85782e23164705a49cb7bd2dc4063775',<text:line-break/>  tarball:<text:line-break/>    'https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz',<text:line-break/>  fileCount: 486,<text:line-break/>  &lt;i>unpackedSize&lt;/i>: 14985184 }<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npx : exécuter un module sans l&amp;#8217;installer</text:h><text:p>L'installation globale est idéale pour installer un module<text:line-break/>npm sous forme d&amp;#8217;exécutable système.<text:line-break/>On peut cependant vite arriver à en installer beaucoup sans vraiment penser à<text:line-break/>les enlever quand on n&amp;#8217;en a plus besoin.</text:p><text:p>L&amp;#8217;exécutable npx (pour npm executable) s&amp;#8217;installe automatiquement avec npm.<text:line-break/>Il agit comme un raccourci en allantrécupérer le module npm désiré<text:line-break/>et l&amp;#8217;exécute en lui passant les arguments souhaités.</text:p><text:p>C&amp;#8217;est l&amp;#8217;équivalent de ces trois commandes, en quelque sorte&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npx cowsay Magique !<text:line-break/>npx: installed 10 in 2.122s<text:line-break/> ___________<text:line-break/>&amp;lt; Magique ! &amp;gt;<text:line-break/> -----------<text:line-break/>        \   ^__^<text:line-break/>         \  (oo)\_______<text:line-break/>            (__)\       )\/\<text:line-break/>                ||----w |<text:line-break/>                ||     ||<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global cowsay<text:line-break/>$ cowsay Magique !<text:line-break/>$ npm uninstall cowsay<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npm home : visiter le site web d&amp;#8217;un module</text:h><text:p>Vous vous demandez où trouver davantage de documentation à propos d&amp;#8217;un<text:line-break/>module npm&amp;#160;?<text:line-break/>npm home ouvre un nouvel onglet de navigateur et dirige ce dernier<text:line-break/>vers sur le site web du module de votre choix.</text:p><text:p><text:line-break/>----<text:line-break/>$ npm home lodash<text:line-break/>$ npm home micro<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npm audit : vérifier la sécurité des dépendances</text:h><text:p>La commande npm audit part à la recherche de vulnérabilités connues<text:line-break/>dans l&amp;#8217;intégralité des dépendances d&amp;#8217;un projet.</text:p><text:p>npm install effectue un audit de manière implicite afin de s&amp;#8217;assurer<text:line-break/>que notre projet n&amp;#8217;est pas compromis à notre insu.<text:line-break/>Les deux dernières lignes sont issues de la fonctionnalité d&amp;#8217;audit de sécurité&amp;#160;:</text:p><text:p>Un affichage plus détaillé est présenté en exécutant npm audit&amp;#160;:</text:p><text:p>Chaque module concerné par une faille connue est listée à l&amp;#8217;écran (champ Package).<text:line-break/>Le champ Path spécifie l&amp;#8217;arbre de dépendances qui mène à la vulnérabilité<text:line-break/>—&amp;#160;c&amp;#8217;est utile pour identifier quelle dépendance directe actualiser.</text:p><text:p>La commande npm audit précise la marche à suivre dès qu&amp;#8217;elle le peut.<text:line-break/>Ici, elle indique qu&amp;#8217;une mise à jour majeure est<text:line-break/>nécessaire pour se débarasser du problème.<text:line-break/>Le seul hic est que ça occasionnera peut-être d&amp;#8217;ajuster le code utilisant cette<text:line-break/>dépendance sous peine de casser notre application.</text:p><text:p>La commande npm audit fix corrigera toutes les dépendances pour lesquelles<text:line-break/>il est possible de changer la version de manière automatique et sans risque.<text:line-break/>Les mises à jour majeures sont toujours manuelles et demandent votre intervention.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install lodash@3<text:line-break/>+ lodash@3.10.1<text:line-break/>added 1 package from 5 contributors in 1.95s<text:line-break/>found 1 low severity vulnerability<text:line-break/>  run `npm audit fix` to fix them, or `npm audit` for details<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm audit<text:line-break/><text:line-break/># Run  npm install lodash@4.17.10  to resolve 1 vulnerability<text:line-break/>Recommended action is a potentially breaking change<text:line-break/>┌───────────────┬───────────────────────────────────────────┐<text:line-break/>│ Low           │ Prototype Pollution                       │<text:line-break/>├───────────────┼───────────────────────────────────────────┤<text:line-break/>│ Package       │ &lt;i>lodash&lt;/i>                                    │<text:line-break/>├───────────────┼───────────────────────────────────────────┤<text:line-break/>│ Dependency of │ lodash                                    │<text:line-break/>├───────────────┼───────────────────────────────────────────┤<text:line-break/>│ &lt;i>Path&lt;/i>          │ lodash                                    │<text:line-break/>├───────────────┼───────────────────────────────────────────┤<text:line-break/>│ More info     │ https://nodesecurity.io/advisories/577    │<text:line-break/>└───────────────┴───────────────────────────────────────────┘<text:line-break/><text:line-break/>found 1 low severity vulnerability<text:line-break/>  1 vulnerability requires semver-major dependency updates.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npm ci : installer à toute vitesse</text:h><text:p>La commande npm ci est destinée à installer les modules listés dans<text:line-break/>le fichier package.json.<text:line-break/>Cette commande vise à s&amp;#8217;exécuter plus rapidement et dans des environnements<text:line-break/>qui sont autres que ceux de développement (en intégration continue, en production, etc.).</text:p><text:p>Cette commande fait une chose de plus que la commande npm install&amp;#160;:<text:line-break/>elle supprime systématiquement le répertoire node_modules pour rendre<text:line-break/>chaque installation reproductible à l&amp;#8217;identique.<text:line-break/>Elle fait aussi une chose de moins&amp;#160;: elle se contente d&amp;#8217;installer les<text:line-break/>modules tels que listés dans le fichier package-lock.json.<text:line-break/>C&amp;#8217;est ce dernier point qui rend cette commande si rapide&amp;#160;— moins de vérifications,<text:line-break/>moins d&amp;#8217;aller-retours, moins de complexité.</text:p><text:p>La commande npm ci est pratique pour remettre un projet à zéro,<text:line-break/>en cas de problème d&amp;#8217;installation ou après avoir bidouillé dans le répertoire<text:line-break/>node_modules par exemple.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>language: node_js<text:line-break/>node_js: v10<text:line-break/>install: npm ci   1<text:line-break/>script: npm test<text:line-break/>cache: npm        2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@27102 {list_context: "colist", text: "Surcharge la commande par défaut (`npm install`)", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27112 {list_context: "colist", text: "Les modules npm seront sauvegardés entre deux jobs{nbsp}— l'installation ira plus vite si les modules sont obtenus depuis le cache plutôt que depuis le registre npm.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">npm doctor : vérifier l&amp;#8217;état du système</text:h><text:p>npm doctor est une commande utilitaire qui vérifie que npm trouve<text:line-break/>tout ce qu&amp;#8217;il faut pour bien fonctionner.</text:p><text:p>L&amp;#8217;exécutable npm inspecte le système à la recherche de Git,<text:line-break/>teste la connectivité vers le registre npm et s&amp;#8217;assure qu&amp;#8217;il a accès en écriture<text:line-break/>à des répertoires essentiels à son bon fonctionnement.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm doctor<text:line-break/>Check                               Value<text:line-break/>npm ping                            OK<text:line-break/>npm -v                              v6.1.0<text:line-break/>node -v                             v10.0.0<text:line-break/>npm config get registry             https://registry.npmjs.org<text:line-break/>which git                           /usr/local/bin/git<text:line-break/>Perms check on cached files         ok<text:line-break/>Perms check on global node_modules  ok<text:line-break/>Perms check on local node_modules   ok<text:line-break/>Verify cache contents               verified 4066 tarballs<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npm config : changer les réglages de l&amp;#8217;exécutable npm</text:h><text:p>La commande npm config est affiche et modifie la configuration<text:line-break/>de l&amp;#8217;exécutable npm.<text:line-break/>Elle se découpe en plusieurs sous-commandes comme en atteste cette tentative<text:line-break/>d&amp;#8217;utilisation&amp;#160;:</text:p><text:p>La sous-commande get affiche la valeur par défaut d&amp;#8217;une clé de configuration&amp;#160;:</text:p><text:p>Cette configuration reflète la verbosité d&amp;#8217;affichage de l&amp;#8217;exécutable.<text:line-break/>Elle agit comme un curseur pour choisir une vue plus ou moins détaillée de<text:line-break/>ce qui se trame sous le capot.<text:line-break/>Augmentons la verbosité d&amp;#8217;affichage avec la sous-commande set.<text:line-break/>Nous verrons ainsi les tentatives d&amp;#8217;accès à Internet de l&amp;#8217;exécutable npm&amp;#160;:</text:p><text:p>Nous voyons désormais les requêtes HTTP effectuées.<text:line-break/>Ici, en rejouant l&amp;#8217;exemple d'installation globale de module&amp;#160;:</text:p><text:p>La sous-commande ls récapitule tous nos changements de configuration.<text:line-break/>Elle affiche tous les réglages par défaut en la suffixant de l&amp;#8217;option --long&amp;#160;:</text:p><text:p>Chaque appel à npm config set enregistre les changements dans un fichier<text:line-break/>de configuration ~/.npmrc.</text:p><text:p>Il est propre à l&amp;#8217;utilisateur actif de notre ordinateur.<text:line-break/>Libre à vous de le sauvegardez ou d&amp;#8217;en fournir un spécifique dans le cadre<text:line-break/>de votre environnement de production ou d&amp;#8217;intégration continue.</text:p><text:p>Pour y voir plus clair, j&amp;#8217;ai effectué une petite sélection des éléments<text:line-break/>de configuration que vous seriez peut-être amené à modifier sur votre<text:line-break/>machine de développement ou sur votre configuration de production&amp;#160;:</text:p><text:p>La page docs.npmjs.com/misc/config#config-settings documente<text:line-break/>de manière exhaustive toutes les clés de configuration et leur impact sur<text:line-break/>l&amp;#8217;exécutable npm.</text:p><text:p><text:line-break/>----<text:line-break/>$ npm config<text:line-break/>npm ERR! Usage:<text:line-break/>npm ERR! npm config set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;<text:line-break/>npm ERR! npm config get [&amp;lt;key&amp;gt;]<text:line-break/>npm ERR! npm config delete &amp;lt;key&amp;gt;<text:line-break/>npm ERR! npm config list [--json]<text:line-break/>npm ERR! npm config edit<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm config get loglevel<text:line-break/>notice<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm config set loglevel http<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global serve<text:line-break/>GET 200 https://registry.npmjs.org/serve 653ms<text:line-break/>GET 304 https://registry.npmjs.org/chalk 271ms (from cache)<text:line-break/>GET 304 https://registry.npmjs.org/arg 274ms (from cache)<text:line-break/>...<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm config ls<text:line-break/>$ npm config ls --long<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">npm publish : publier un module npm</text:h><text:p>Nous savons comment installer des modules depuis le registre<text:line-break/>mais nous n&amp;#8217;avions pas encore vu comment contribuer nous-même à cet écosystème.</text:p><text:p>L&amp;#8217;option --dry-run est peut-être la première option à utiliser avec cette<text:line-break/>commande puisqu&amp;#8217;elle fait comme si nous voulions publier le module, mais<text:line-break/>sans aller jusqu&amp;#8217;à téléverser le code sur le registre npm.<text:line-break/>Je la recommande pour voir de nos propres yeux ce qui serait transmis<text:line-break/>et rectifier un problème avant qu&amp;#8217;il ne se produise&amp;#160;— vous n&amp;#8217;avez pas envie<text:line-break/>de mettre en ligne un fichier qui contient un mot de passe n&amp;#8217;est-ce pas&amp;#160;?</text:p><text:p>La section de configuration private est à ajouter dans le fichier package.json<text:line-break/>d&amp;#8217;un module pour empêcher toute publication involontaire.</text:p><text:p>La publication d&amp;#8217;un module implique que vous ayiez configuré les sections<text:line-break/>main ou bin du fichier package.json pour respectivement indiquer<text:line-break/>quel fichier charger avec require('&amp;lt;nom du module&amp;gt;')<text:line-break/> ou exécuter avec npx &amp;lt;nom du module&amp;gt;.<text:line-break/>Si ça ne vous parle pas du tout, je vous invite à aller lire la section<text:line-break/>anatomie du fichier package.json.</text:p><text:p>La publication d&amp;#8217;un module nécessite de se créer un compte sur le registre<text:line-break/>npmjs.com.<text:line-break/>Si vous publiez un module pour la première fois, l&amp;#8217;exécutable npm vous<text:line-break/>demandera alors de vous identifier&amp;#160;— le module sera ensuite publié en votre nom.</text:p><text:p>Idéalement, je recommande de ne pas publier de module à la main mais de<text:line-break/>préférer l&amp;#8217;utilisation d&amp;#8217;un service d&amp;#8217;intégration continue comme<text:line-break/>Travis CI (travisci.com).<text:line-break/>La configuration d&amp;#8217;un tel service permet de publier une nouvelle version<text:line-break/>seulement si les tests passent au vert.</text:p><text:p>L&amp;#8217;exécutable npm ignore par défaut les mêmes fichiers que Git.<text:line-break/>Il honore la présence des fichiers .gitignore et exclut les fichiers<text:line-break/>et répertoires concernés de la publication.</text:p><text:p>Le fichier .npmignore remplace le fichier .gitignore dans le cas<text:line-break/>où votre besoin de fichiers à versionner est différent de celui de fichiers<text:line-break/>à publier sur le registre npm.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm publish --dry-run<text:line-break/>npm notice<text:line-break/>npm notice 📦  nodebook.chapter-05@1.0.0<text:line-break/>npm notice === Tarball Contents ===<text:line-break/>npm notice 754B    package.json<text:line-break/>npm notice 59B     .eslintrc.yaml<text:line-break/>npm notice 59.3kB  index.adoc<text:line-break/>npm notice 133B    examples/app.js<text:line-break/>npm notice 115B    examples/cow.js<text:line-break/>npm notice 65B     examples/hello.js<text:line-break/>npm notice 138B    examples/print-args.js<text:line-break/>npm notice 223B    examples/tests.js<text:line-break/>npm notice 46.3kB  images/module-content.png<text:line-break/>npm notice 75.6kB  images/npm-package-falchion.png<text:line-break/>npm notice 219.5kB images/npm-package-mysql-libmysqlclient.png<text:line-break/>npm notice 170.2kB images/npm-package-mysql2.png<text:line-break/>npm notice 172.7kB images/npm-registry-search.png<text:line-break/>npm notice === Tarball Details ===<text:line-break/>npm notice name:          nodebook.chapter-05<text:line-break/>npm notice version:       1.0.0<text:line-break/>npm notice package size:  656.8 kB<text:line-break/>npm notice unpacked size: 745.1 kB<text:line-break/>npm notice shasum:        7f2887b8840124cf8d0c2fa72e8d61cd739<text:line-break/>npm notice integrity:     sha512-a6yvb8WO[...]yUeLy2jg/viXQ==<text:line-break/>npm notice total files:   13<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "...",<text:line-break/>  "private": true<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>.DS_Store       1<text:line-break/>node_modules    2<text:line-break/><text:line-break/>src/*.html      3<text:line-break/>!src/index.html 4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@27626 {list_context: "colist", text: "Ignore un fichier nommé `.DS_Store`{nbsp}— courant sous macOS.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27636 {list_context: "colist", text: "Ignore le répertoire `node_modules` et tout ce qu'il contient.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27646 {list_context: "colist", text: "Ignore tous les fichiers `.html` contenus dans le répertoire `src`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27656 {list_context: "colist", text: "À l'exception du fichier `index.html` contenu dans le répertoire `src`.", blocks: 0}></text:p><text:h text:outline-level="3">npm version : déterminer une nouvelle version sans se tromper</text:h><text:p>Nous ne pouvons pas publier deux fois une même version d&amp;#8217;un<text:line-break/>module npm.<text:line-break/>Nous devons donc à minima modifier la valeur de la section version<text:line-break/>dans le fichier package.json.</text:p><text:p>La commande npm version automatise le calcul du prochain numéro de version,<text:line-break/>reflète cette version dans le champ version du fichier package.json<text:line-break/>et procède à un commit Git, tagué avec cette nouvelle version.<text:line-break/>Je trouve cette manière élégante, notamment en complément de la<text:line-break/>publication automatique par le biais d&amp;#8217;un service d&amp;#8217;intégration continue.</text:p><text:p>La commande npm version se complète forcément d&amp;#8217;un argument pour<text:line-break/>indiquer la granularité de version sémantique concernée.<text:line-break/>Ainsi, si nous voulons mettre à jour la version d&amp;#8217;un module en version 1.0.0&amp;#160;:</text:p><text:p>Cette montée en version se complète optionnellement de scripts npm<text:line-break/>pour automatiser d&amp;#8217;autres actions lors d&amp;#8217;une montée en version&amp;#160;:</text:p><text:p>Peut-être que vous gérez vous-même le numéro de version en l&amp;#8217;attribuant<text:line-break/>directement avec un tag Git (git tag &amp;#8230;&amp;#8203;).</text:p><text:p>Dans ce cas, la commande npm version from-git reporte le numéro de version<text:line-break/>du dernier tag Git dans le fichier package.json.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* npm version patch la changera en 1.0.1&amp;#160;;,* npm version minor la changera en 1.1.0&amp;#160;;,* npm version major la changera en 2.0.0.<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@27728 {list_context: "dlist", text: "`preversion`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27730 {list_context: "dlist", text: "Le nouveau numéro de version n'a pas encore été appliqué.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27744 {list_context: "dlist", text: "`version`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27746 {list_context: "dlist", text: "Le nouveau numéro de version est appliqué{nbsp}— vous pouvez encore ajouter de nouveaux fichiers au commit Git.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27760 {list_context: "dlist", text: "`postversion`", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27762 {list_context: "dlist", text: "Le nouveau numéro de version est appliqué et un commit a été ajouté à l'historique Git.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Questions et mystères autour de npm</text:h><text:p>L&amp;#8217;exécutable npm et le registre du même nom ont accompagné Node quasiment<text:line-break/>depuis le début.<text:line-break/>Il paraît simple de prime abord et je pense que c&amp;#8217;est normal de se sentir<text:line-break/>surpris·e par ses résultats.</text:p><text:p>Passons en revue des critiques ou questionnements que j&amp;#8217;entends régulièrement<text:line-break/>afin d&amp;#8217;y voir plus clair.</text:p><text:h text:outline-level="3">Quand mettre à jour l&amp;#8217;exécutable npm ?</text:h><text:p>L&amp;#8217;exécutable npm est mis à jour régulièrement.<text:line-break/>Un message s&amp;#8217;affiche dans notre terminal lorsque nous l&amp;#8217;utilisons et qu&amp;#8217;il<text:line-break/>détecte qu&amp;#8217;une version plus récente est disponible.</text:p><text:p>Le module qui contient l&amp;#8217;exécutable npm suit le principe de<text:line-break/>versions sémantiques.<text:line-break/>Ainsi, la mise à jour sera sans effort si le numéro majeur de la<text:line-break/>nouvelle version reste le même.</text:p><text:p>J&amp;#8217;ai tendance à regarder du côté de github.com/npm/npm/releases<text:line-break/>pour lire tous les Breaking Changes et comprendre en quoi la mise à jour<text:line-break/>majeure m&amp;#8217;affecte.</text:p><text:p><text:line-break/>----<text:line-break/>╭─────────────────────────────────────╮<text:line-break/>│                                     │<text:line-break/>│   Update available 6.0.0 → 6.1.0    │<text:line-break/>│     Run npm i -g npm to update      │<text:line-break/>│                                     │<text:line-break/>╰─────────────────────────────────────╯<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Je ne vois pas l&amp;#8217;intérêt du fichier package-lock.json</text:h><text:p>Le fichier package-lock.json est créé automatiquement par l&amp;#8217;exécutable npm<text:line-break/>dès que vous ajoutez votre première dépendance à un projet.</text:p><text:p>Jetons un œil à son contenu pour tenter d&amp;#8217;en cerner les contours&amp;#160;:</text:p><text:p>Il ressemble beaucoup au fichier package.json.<text:line-break/>On notera qu&amp;#8217;il contient exclusivement des données liées aux dépendances<text:line-break/>ainsi que toutes les dépendances des dépendances.</text:p><text:p>Si le fichier package.json contient une version sémantique,<text:line-break/>celui contient la version exacte de chaque dépendance ainsi que deux<text:line-break/>autres types d&amp;#8217;informations&amp;#160;: l&amp;#8217;URL de téléchargement et une signature<text:line-break/>qui permet de vérifier si le fichier télécharger est le bon (intégrité).</text:p><text:p>La représentation complète de l&amp;#8217;arbre de dépendances dans le fichier package-lock.json<text:line-break/>traduit deux intentions&amp;#160;:<text:line-break/>rendre l&amp;#8217;installation des dépendances possibles en se basant uniquement sur<text:line-break/>ce fichier et accélérer le processus d&amp;#8217;installation.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "nodebook.chapter-05",<text:line-break/>  "version": "1.0.0",<text:line-break/>  "lockfileVersion": 1,<text:line-break/>  "requires": true,<text:line-break/>  "dependencies": {<text:line-break/>    "acorn": {<text:line-break/>      "version": "5.6.1",<text:line-break/>      "resolved":<text:line-break/>        "https://registry.npmjs.org/acorn/-/acorn-5.6.1.tgz",<text:line-break/>      "integrity": "sha512-...",<text:line-break/>      "dev": true<text:line-break/>    },<text:line-break/>    "cowsay": {<text:line-break/>      "version": "1.3.0",<text:line-break/>      "resolved":<text:line-break/>        "https://registry.npmjs.org/cowsay/-/cowsay-1.3.0.tgz",<text:line-break/>      "integrity": "sha512-...",<text:line-break/>      "requires": {<text:line-break/>        "get-stdin": "^5.0.1",<text:line-break/>        "optimist": "~0.6.1",<text:line-break/>        "string-width": "~2.1.1",<text:line-break/>        "strip-eof": "^1.0.0"<text:line-break/>      }<text:line-break/>    },<text:line-break/>    ...<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@27870 {list_context: "dlist", text: "Avantages", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27872 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@27914 {list_context: "dlist", text: "Inconvénients", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27916 {list_context: "dlist", text: nil, blocks: 1}></text:p><text:h text:outline-level="3">npm c&amp;#8217;est pour le back-end et bower pour le front-end</text:h><text:p>bower (bower.io) est un gestionnaire de modules<text:line-break/>spécialisé dans le développement front-end.</text:p><text:p>Je pense que bower était utile à une époque où l&amp;#8217;outillage front-end disponible<text:line-break/>dans Node était encore confidentiel.<text:line-break/>Je pense aussi que cette époque est révolue, au sens où l&amp;#8217;outillage dédié à<text:line-break/>Node et aux navigateurs web tend à se confondre.</text:p><text:p>En apprenant JavaScript, Node et npm, nous gagnons non seulement un outillage<text:line-break/>disponible immédiatement mais aussi la capacité à créer le nôtre.<text:line-break/>Pour en savoir plus sur comment développer pour le front-end comme on développe<text:line-break/>pour Node, je vous invite à lire le chapitre 9.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@27966 {list_context: "dlist", text: "Avantages", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@27968 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@28000 {list_context: "dlist", text: "Inconvénients", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@28002 {list_context: "dlist", text: nil, blocks: 1}></text:p><text:h text:outline-level="3">Est-ce que je dois versionner le répertoire node_modules ?</text:h><text:p>Le contenu du répertoire node_modules se recrée automatiquement<text:line-break/>en utilisant l&amp;#8217;exécutable npm, que ça soit avec la<text:line-break/>commande npm install ou la commande npm update.<text:line-break/>Mieux vaut versionner les fichiers package.json et<text:line-break/>package-lock.json pour être certain·e<text:line-break/>de les recréer comme il faut.</text:p><text:p>Le répertoire node_modules n&amp;#8217;a donc pas besoin d&amp;#8217;être versionné.<text:line-break/>Je vous encourage à ajouter node_modules dans le fichier .gitignore.<text:line-break/>Ce fichier texte se situe en général à la racine de votre projet.</text:p><text:p><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@28072 {list_context: "dlist", text: "Avantages", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@28074 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@28096 {list_context: "dlist", text: "Inconvénients", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@28098 {list_context: "dlist", text: nil, blocks: 1}></text:p><text:h text:outline-level="3">Il paraît que Yarn, c&amp;#8217;est mieux</text:h><text:p>L&amp;#8217;application yarn (yarnpkg.com) se veut être une alternative<text:line-break/>à l&amp;#8217;exécutable npm.<text:line-break/>Le programme vise une installation rapide, hors-ligne et sécurisée.</text:p><text:p>npm rattrape régulièrement les fonctionnalités qui "donnent de l&amp;#8217;avance" à yarn.<text:line-break/>Le choix tient donc plutôt du goût ou de l&amp;#8217;idéologie.<text:line-break/>Essayez donc yarn et gardez-le pour les bonnes raisons&amp;#160;— les vôtres.</text:p><text:p><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@28156 {list_context: "dlist", text: "Avantages", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@28158 {list_context: "dlist", text: nil, blocks: 1}><text:line-break/>#&lt;Asciidoctor::ListItem@28180 {list_context: "dlist", text: "Inconvénients", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@28182 {list_context: "dlist", text: nil, blocks: 1}></text:p><text:h text:outline-level="3">npm est lent, il installe la moitié d&amp;#8217;Internet à chaque fois</text:h><text:p>L&amp;#8217;exécutable npm passe le plus clair de son temps à faire des aller-retours<text:line-break/>vers le registre npm en utilisant votre connexion Internet.<text:line-break/>Il téléchargera un module seulement s&amp;#8217;il ne l&amp;#8217;a pas déjà téléchargé à une autre<text:line-break/>reprise, sur un autre projet.</text:p><text:p>L&amp;#8217;équipe de développement de l&amp;#8217;exécutable npm travaille à améliorer<text:line-break/>ses performances et sa qualité d&amp;#8217;utilisation.<text:line-break/>Cette équipe n&amp;#8217;a pas d&amp;#8217;influence sur les choix faits par les autrices et auteurs<text:line-break/>de modules npm.</text:p><text:p>Le temps de téléchargement d&amp;#8217;un module npm dépend de deux choses&amp;#160;:<text:line-break/>du nombre de dépendances à installer et de leur poids respectif.<text:line-break/>Le poids d&amp;#8217;un module correspond à la somme du poids de chaque script et<text:line-break/>des ressources additionnelles (images, documentation, etc).<text:line-break/>Dans les deux cas, plus il y&amp;#8217;en a, plus ça prendra de temps à installer.</text:p><text:p>Par exemple, le seul ajout de webpack 4 (npmjs.com/webpack)<text:line-break/>augmente le coût de téléchargement de 14Mo lors de npm install.<text:line-break/>Ce n&amp;#8217;est pas rien et ce n&amp;#8217;est certainement pas la faute à l&amp;#8217;exécutable npm.</text:p><text:p>Le service en ligne Package Phobia (packagephobia.now.sh)<text:line-break/>garde un historique du poids des modules npm.<text:line-break/>Celui de webpack se trouve sur<text:line-break/>packagephobia.now.sh/result?p=webpack.</text:p><text:p>Le module npm cost-of-modules (npmjs.com/cost-of-modules)<text:line-break/>calcule la quantité et le poids des dépendances listées<text:line-break/>dans un fichier package.json.</text:p><text:p>Pratique pour identifier quel module remplacer par un autre, plus léger et donc<text:line-break/>plus rapide à installer.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npx cost-of-modules               1<text:line-break/>┌───────────┬─────────────┬───────┐<text:line-break/>│ name      │ children    │ size  │<text:line-break/>├───────────┼─────────────┼───────┤<text:line-break/>│ lodash    │ 0           │ 1.34M │<text:line-break/>├───────────┼─────────────┼───────┤<text:line-break/>│ micro     │ 19          │ 0.67M │<text:line-break/>├───────────┼─────────────┼───────┤<text:line-break/>│ cowsay    │ 9           │ 0.22M │<text:line-break/>├───────────┼─────────────┼───────┤<text:line-break/>│ 3 modules │ 28 children │ 2.22M │<text:line-break/>└───────────┴─────────────┴───────┘<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@28262 {list_context: "colist", text: "La &lt;&lt;npx,commande `npx`>> est un raccourci pour exécuter des modules npm sans les installer.", blocks: 0}></text:p><text:h text:outline-level="3">Que signifient les erreurs affichées pendant npm install ?</text:h><text:p>L&amp;#8217;exécutable npm est généreux en messages pendant l&amp;#8217;installation<text:line-break/>de modules.<text:line-break/>C&amp;#8217;est parfois difficile à lire, notamment pour comprendre la raison du message<text:line-break/>et la solution à apporter.</text:p><text:p>Si npm WARN s&amp;#8217;affiche, ce n&amp;#8217;est pas une erreur mais un message<text:line-break/>à caractère informatif.<text:line-break/>Si npm ERR débute la ligne, il y a un problème sur lequel nous<text:line-break/>avons une action immédiate à mener.</text:p><text:h text:outline-level="4">Module déprécié</text:h><text:p>Un module est déprécié quand il n&amp;#8217;est plus maintenu par ses auteurs ou autrices,<text:line-break/>s&amp;#8217;il est développé sous un nouveau nom ou si nous sommes encouragé·e·s à<text:line-break/>faire une mise à jour majeure.</text:p><text:p>Un module déprécié ne nous regarde pas sauf s&amp;#8217;il est listé dans le champ<text:line-break/>dependencies ou devDependencies d&amp;#8217;un fichier package.json.</text:p><text:p>Un module qui n&amp;#8217;est plus maintenu ne recevra probalement plus de mises à jour.<text:line-break/>Il vaut mieux dans ce cas en trouver un autre qui fait plus ou moins la même chose.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>npm WARN deprecated babel-preset-es2017@6.24.1:<text:line-break/>  Thanks for using Babel: &lt;i>we recommend using babel-preset-env&lt;/i><text:line-break/>  now: please read babeljs.io/env to update!<text:line-break/><text:line-break/>npm WARN deprecated babel-preset-babili@0.0.10: babili has<text:line-break/>  been &lt;i>renamed to babel-minify&lt;/i>.<text:line-break/>  Please update to babel-preset-minify<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>npm WARN deprecated nomnom@1.6.2: &lt;i>Package no longer supported&lt;/i>.<text:line-break/>  Contact support@npmjs.com for more info.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="4">Problème avec une dépendance optionnelle</text:h><text:p>Certains modules effectuent une opération de compilation&amp;#160;: une partie de leur<text:line-break/>code source est écrit dans un autre langage que l&amp;#8217;ECMAScript et ils<text:line-break/>font en sorte de créer un pont avec Node.</text:p><text:p>Il arrive que l&amp;#8217;opération de compilation n&amp;#8217;aboutisse pas pour diverses raisons<text:line-break/>—&amp;#160;il manque un logiciel, incompatibilité avec le système d&amp;#8217;exploitation<text:line-break/>ou avec l&amp;#8217;architecture du CPU.</text:p><text:p>Le fait qu&amp;#8217;il y ait marqué SKIPPING et OPTIONAL me laisse penser<text:line-break/>que ce n&amp;#8217;est pas grave si l&amp;#8217;opération ne se passe pas comme prévu.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3<text:line-break/>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY:<text:line-break/>  Unsupported platform for fsevents@1.1.3:<text:line-break/>  wanted {"os":"darwin","arch":"any"}<text:line-break/>  (current: {"os":"win32","arch":"x64"})<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="4">Module introuvable</text:h><text:p>Le module que vous cherchez à installer n&amp;#8217;existe pas.<text:line-break/>Il s&amp;#8217;agit peut-être d&amp;#8217;une erreur de frappe ou alors le module a été retiré<text:line-break/>de la circulation.</text:p><text:p><text:line-break/>----<text:line-break/>$ npm i aria-roless<text:line-break/>npm ERR! code E404<text:line-break/>npm ERR! 404 Not Found: aria-roless@latest<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="4">Caractère de fin de ligne sous Windows</text:h><text:p>Les anciennes versions de npm avaient du mal à concilier les caractères de fin<text:line-break/>de ligne sous Windows (\r\n), caractère différent des autres systèmes Linux (\n).</text:p><text:p>Mettez à jour npm vers une version plus récente pour<text:line-break/>régler le problème.</text:p><text:p><text:line-break/>----<text:line-break/>npm error Expected linebreaks to be 'LF' but<text:line-break/>  found 'CRLF' linebreak-style<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="4">Fichier package.json incomplet</text:h><text:p>Les messages suivants s&amp;#8217;affichent quand les champs description et<text:line-break/>repository manquent à l&amp;#8217;appel de notre fichier package.json.</text:p><text:p>Réferrez-vous à la section anatomie du fichier package.json<text:line-break/>pour savoir comment remplir ces champs manquants.</text:p><text:p><text:line-break/>----<text:line-break/>npm WARN tmp@1.0.0 No description<text:line-break/>npm WARN tmp@1.0.0 No repository field.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="4">Dépendance complémentaire à installer</text:h><text:p>Certains modules nécessitent un ou plusieurs modules complémentaires pour<text:line-break/>fonctionner.<text:line-break/>Toutefois ces modules complémentaires sont à installer manuellement.<text:line-break/>C&amp;#8217;est la signification du message d&amp;#8217;erreur suivant.</text:p><text:p>L&amp;#8217;exemple précédent laisse à penser que nous avons installé le module npm<text:line-break/>react-power-picture.<text:line-break/>L&amp;#8217;installation du module signale que le module npm complémentaire react<text:line-break/>est nécessaire mais que nous ne l&amp;#8217;avons pas installé.</text:p><text:p>Si c&amp;#8217;est quelque chose qui vous parle, installez alors react<text:line-break/>avec npm install react.</text:p><text:p>Si vous pensez que c&amp;#8217;est une erreur ou une incompréhension, désinstallez<text:line-break/>le module et cherchez une alternative.<text:line-break/>Ça se produit généralement quand on n&amp;#8217;aperçoit pas qu&amp;#8217;un module est dédié<text:line-break/>à un certain framework&amp;#160;— et qu&amp;#8217;on ne veut pas utiliser ce framework.</text:p><text:p><text:line-break/>----<text:line-break/>npm WARN &lt;i>react-power-picture&lt;/i>@1.0.0 &lt;i>requires&lt;/i> a peer of<text:line-break/>  &lt;i>react&lt;/i>@^15.0.0-0 || ^16.0.0-0 but none is installed.<text:line-break/>  You must install peer dependencies yourself.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>L&amp;#8217;exécutable npm est un outil qui va bien au-delà de la simple installation<text:line-break/>de modules&amp;#160;: il va jusqu&amp;#8217;à créer un outillage autonome pour chacun de nos projets.</text:p><text:p>Nous avons appris à jongler entre les différentes versions d&amp;#8217;un module<text:line-break/>pour comprendre la notion de version sémantique et son impact<text:line-break/>sur les commandes d&amp;#8217;installation et de mises à jour.</text:p><text:p>Nous avons vu que les scripts npm représentent un outillage à portée de main.<text:line-break/>Ils nous facilitent la vie en plus d&amp;#8217;être partagés avec<text:line-break/>les personnes impliquées dans un même projet.</text:p><text:p>Avec le langage ECMAScript (chapitre 3),<text:line-break/>l&amp;#8217;environnement Node (chapitre 4)<text:line-break/>et maintenant avec npm, nous avons des fondations solides pour<text:line-break/>déployer du code (chapitre 6) et créer toutes<text:line-break/>sortes d&amp;#8217;applications entièrement en JavaScript.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/>* Créer un fichier package.json,* Installer un module npm,* Outiller un projet avec les scripts npm,* Anatomie du fichier package.json,* Quelques commandes pour aller plus loin,* Questions et mystères autour de npm<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* l&amp;#8217;exécutable npm&amp;#160;— un programme écrit en JavaScript&amp;#160;;,* le registre npm&amp;#160;— une plate-forme de distribution de modules&amp;#160;;,* un module npm&amp;#160;— en général installé depuis le registre et utilisable<text:line-break/>avec les fonctions require() et import.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm --version<text:line-break/>6.1.0<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-05<text:line-break/>$ cd $(nodebook dir chapter-05)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Déployer notre code</text:h><text:p>Le déploiement d&amp;#8217;une application Node nous permettra d&amp;#8217;améliorer la<text:line-break/>qualité de notre code en gommant les derniers bugs et en automatisant<text:line-break/>la détection des erreurs et des failles de sécurité.</text:p><text:p>Ce chapitre nous permettra d&amp;#8217;y voir plus clair du côté de l&amp;#8217;hébergement<text:line-break/>et de la mise en ligne d&amp;#8217;une application Node.<text:line-break/>Nous pourrons choisir ce qui nous paraît le plus abordable,<text:line-break/>que ça soit en termes d&amp;#8217;argent ou de complexité d&amp;#8217;utilisation.</text:p><text:p>Nous mettrons en œuvre les<text:line-break/>variables d&amp;#8217;environnement<text:line-break/>du chapitre 4 pour que nos applications en ligne<text:line-break/>fonctionnent de la même manière que sur notre ordinateur.</text:p><text:p>Enfin, nous verrons différents types de service pour être tenu·e informé·e<text:line-break/>des erreurs applicatives et des failles de sécurité sans effort et sans<text:line-break/>être des expert·e.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:h text:outline-level="2">Déployer une application Node</text:h><text:p>Le choix de la technique de déploiement dépend de plusieurs facteurs qui se<text:line-break/>renvoient à eux-mêmes&amp;#160;: l&amp;#8217;hébergement peut dépendre du déploiement et vice-versa.</text:p><text:p>Je vous propose de partir balayer les différentes techniques de déploiement<text:line-break/>avec des exemples et de voir quelles seraient les raisons d&amp;#8217;opter pour l&amp;#8217;une<text:line-break/>d&amp;#8217;entre elles.</text:p><text:p>Le choix est subjectif et vous appartient, en fonction de l&amp;#8217;aisance que vous avez<text:line-break/>à vous en emparer.<text:line-break/>C&amp;#8217;est un sujet qui prend du temps avant d&amp;#8217;être maitrisé donc n&amp;#8217;hésitez pas<text:line-break/>à vous y reprendre à plusieurs fois.</text:p><text:h text:outline-level="3">En codant dans un navigateur web</text:h><text:p>Le moyen le plus rapide d&amp;#8217;exécuter du code Node sans avoir à se préoccuper<text:line-break/>du déploiement est d&amp;#8217;utiliser un service en ligne et de modifier du code<text:line-break/>avec un navigateur web.</text:p><text:p>Je recommande RunKit (runkit.com/) pour créer rapidement<text:line-break/>du code qui tient dans un seul fichier, sans installer Node sur sa machine.<text:line-break/>Le code est exécuté sur les serveurs de RunKit, le résultat s&amp;#8217;affiche chez nous.<text:line-break/>Les modules npm<text:line-break/>(chapitre 5) sont installés automatiquement dans<text:line-break/>leur version la plus récente.</text:p><text:p>RunKit propose aussi un modèle de fonction éphémère dont le<text:line-break/>résultat devient accessible depuis une URL dédiée.<text:line-break/>Essayez de copier/coller le code suivant dans un nouveau notebook en vous<text:line-break/>rendant sur runkit.com/new&amp;#160;:</text:p><text:p>Une fois sauvegardé et après avoir cliqué sur le lien endpoint,<text:line-break/>un nouvel onglet s&amp;#8217;ouvre et affiche un nom aléatoire de Pokémon.<text:line-break/>C&amp;#8217;est la valeur de retour passé à la réponse, comme on l&amp;#8217;aurait fait<text:line-break/>avec le module http<text:line-break/>(chapitre 4) ou dans une<text:line-break/>application web (chapitre 7).</text:p><text:p>Le service en ligne glitch (glitch.com/) permet d&amp;#8217;aller<text:line-break/>plus loin en développant, hébergeant et partageant des applications complètes.<text:line-break/>Le service redéploie notre application à chaque changement.<text:line-break/>Le fichier .env stocke les<text:line-break/>variables d&amp;#8217;environnement de manière<text:line-break/>sécurisée&amp;#160;— nous seul y avons accès.</text:p><text:p>Glitch nous offre même une console web&amp;#160;: un terminal<text:line-break/>entièrement fonctionnel, depuis un navigateur web&amp;#160;!</text:p><text:p>Parfait pour coder un outil en ligne de commande<text:line-break/>(chapitre 8) en travaillant depuis plusieurs<text:line-break/>ordinateurs sans avoir à tout réinstaller à chaque fois.</text:p><text:p>Vous pouvez créer votre premier projet sur glitch.<text:line-break/>Remixez cet ouvrage en cliquant en vous rendant sur<text:line-break/>https://glitch.com/edit/#!/remix/nodebook.</text:p><text:p>Le contenu et les exemples seront copiés dans un nouveau projet,<text:line-break/>exécutable et modifiable selon vos envies.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const pokemon = require('pokemon-random-name'); 1<text:line-break/><text:line-break/>exports.endpoint = (request, response) =&amp;gt; {     2<text:line-break/>  response.end(pokemon());<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@29112 {list_context: "colist", text: "Le module npm [URL]#https://npmjs.com/pokemon-random-name# exporte une fonction qui retourne un nom aléatoire de Pokémon.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29122 {list_context: "colist", text: "`exports.endpoint` est spécifique à RunKit et accepte une fonction identique à l'événement `server.on('request')` du &lt;&lt;../chapter-04/index.adoc#http,module `http`>> (&lt;&lt;../chapter-04/index.adoc#,chapitre 4>>).", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">En transférant des fichiers via SSH</text:h><text:p>Transférer des fichiers est idéal pour débuter et lorsqu&amp;#8217;on n&amp;#8217;utilise pas Git<text:line-break/>pour versionner son code.</text:p><text:p>Les services d&amp;#8217;hébergement mutualisé, virtualisé ou dédié accordent<text:line-break/>un accès à votre espace en ligne par le biais du protocole<text:line-break/>SSH (fr.wikipedia.org/wiki/Secure_Shell).<text:line-break/>Ce protocole crée une connexion sécurisée&amp;#160;: les commandes saisies dans votre<text:line-break/>terminal font effet sur la machine sur laquelle vous êtes connecté·e.</text:p><text:p>Des logiciels comme FileZilla Client (filezilla-project.org/)<text:line-break/>servent d&amp;#8217;interfaces graphiques pour transférer des fichiers de notre machine<text:line-break/>vers une machine distante.<text:line-break/>Les codes d&amp;#8217;accès SSH se trouvent en général dans la section Aide ou Guides<text:line-break/>de votre hébergeur.</text:p><text:p>WinSCP (winscp.net) est une alternative libre à<text:line-break/>FileZilla pour Windows.</text:p><text:p>Notre terminal peut aussi servir à transférer des fichiers.<text:line-break/>Deux programmes se basent sur SSH et sont installés par défaut sur la plupart<text:line-break/>des ordinateurs Linux et macOS&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* scp pour envoyer des fichiers de machine à machine,* rsync pour n&amp;#8217;envoyer que les fichiers qui ont été modifiés ou supprimés<text:line-break/></text:p><text:h text:outline-level="3">En important du code depuis GitHub</text:h><text:p>Importer du code depuis GitHub est la manière la plus simple de transférer<text:line-break/>tous les fichiers versionnés sans être familier avec Git.</text:p><text:p>La plate-forme de programmation en ligne glitch<text:line-break/>offre une option pour importer n&amp;#8217;importe quel projet GitHub&amp;#160;— à partir du moment<text:line-break/>où le dépôt est public.</text:p><text:p>Un clic sur le bouton Import from GitHub ouvre une invite de saisie<text:line-break/>destinée à mentionner le nom du dépôt GitHub à importer.<text:line-break/>Le projet en cours sera entièrement remplacé par le contenu du dépôt distant.<text:line-break/>C&amp;#8217;est pratique pour récupérer des exercices ou pour apprendre en travaillant<text:line-break/>sur du code écrit par quelqu&amp;#8217;un d&amp;#8217;autre.</text:p><text:p>Récupérez tout le contenu et les exemples de cet ouvrage<text:line-break/>en recopiant oncletom/nodebook dans l&amp;#8217;invite de saisie.</text:p><text:p>La plate-forme de services Heroku (heroku.com)<text:line-break/>pousse l&amp;#8217;import GitHub un peu plus loin.<text:line-break/>Sa fonctionnalité déploie l&amp;#8217;application à chaque nouveau commit.<text:line-break/>L&amp;#8217;application redémarre ensuite automatiquement pour prendre les changements en compte.</text:p><text:p>Une option nous permet de déployer une nouvelle version de l&amp;#8217;application<text:line-break/>à la suite d&amp;#8217;une intégration continue réussie.<text:line-break/>Nous réduisons ainsi les risques de déployer une version défectueuse.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Avec l&amp;#8217;outil en ligne de commande de l&amp;#8217;hébergeur</text:h><text:p>L&amp;#8217;outil en ligne de commande d&amp;#8217;un hébergeur permet de gérer les déploiements<text:line-break/>et d&amp;#8217;autres aspects de l&amp;#8217;hébergement en même temps.</text:p><text:p>La plate-forme de services now (zeit.co/now)<text:line-break/>est un exemple de simplicité à ce niveau.</text:p><text:p>Dans un terminal, déplacez-vous vers le répertoire de l&amp;#8217;application à déployer.<text:line-break/>Il suffit de taper now pour transférer les fichiers.<text:line-break/>Les dépendances s&amp;#8217;installent et le déploiement est accessible quelques secondes<text:line-break/>plus tard&amp;#160;:</text:p><text:p>En optant pour l&amp;#8217;offre payante, nous pouvons aussi gérer les noms de domaine et<text:line-break/>sous-domaines en leur attribuant l&amp;#8217;URL du déploiement&amp;#160;:</text:p><text:p>Le client en ligne de commande existe en version graphique.<text:line-break/>Un glissé/déposé de fichiers suffit à lancer un déploiement.</text:p><text:p>Il se télécharge sur zeit.co/download.</text:p><text:p>L&amp;#8217;outil de la plate-forme de services Heroku suit une approche<text:line-break/>légèrement différente.<text:line-break/>Il nous informe de l&amp;#8217;état de nos applications et en augmente ou diminue<text:line-break/>la quantité de ressources allouée à leur fonctionnement.<text:line-break/>Il simplifie la configuration de Git et<text:line-break/>délègue le déploiement à ce dernier.<text:line-break/>L&amp;#8217;outil se télécharge sur<text:line-break/>devcenter.heroku.com/articles/heroku-cli.</text:p><text:p>La commande heroku apps:create crée une nouvelle application chez Heroku.<text:line-break/>On peut faire la même chose dans un navigateur web en nous rendant sur<text:line-break/>dashboard.heroku.com/new-app.<text:line-break/>La commande heroku git:remote associe notre copie locale Git à cette application&amp;#160;:</text:p><text:p>Il ne nous reste plus qu&amp;#8217;à pousser notre code avec Git<text:line-break/>pour terminer la mise en ligne.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ npm install -g now<text:line-break/>$ now login<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ now<text:line-break/>Deploying ~/workspace/dtc-innovation/food-coops-dashboards<text:line-break/>&amp;gt; Using Node.js 9.10.1 (requested: `&amp;gt;=8.0.0`)<text:line-break/>&amp;gt; https://food-coops-dashboards-okgwzegyus.now.sh<text:line-break/>&amp;gt; Synced 1 file (169.84KB) [11s]<text:line-break/>&amp;gt; Building...<text:line-break/>&amp;gt; ▲ npm install<text:line-break/>&amp;gt; ✓ Using "package-lock.json"<text:line-break/>&amp;gt; ⧗ Installing 9 main dependencies...<text:line-break/>&amp;gt; ▲ npm install<text:line-break/>&amp;gt; added 389 packages in 8.609s<text:line-break/>&amp;gt; ▲ Snapshotting deployment<text:line-break/>&amp;gt; Build completed<text:line-break/>&amp;gt; Verifying instantiation in bru1<text:line-break/>&amp;gt; ✔ Scaled 1 instance in bru1 [31s]<text:line-break/>&amp;gt; Success! Deployment ready<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ now alias food-coops-dashboards-okgwzegyus.now.sh my-domain.com<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ heroku login<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ heroku apps:create --region eu<text:line-break/>Creating app... done, ⬢ &amp;lt;i&amp;gt;polar-taiga-61296&amp;lt;/i&amp;gt;, region is eu<text:line-break/>https://polar-taiga-61296.herokuapp.com/<text:line-break/>https://git.heroku.com/polar-taiga-61296.git<text:line-break/>$ heroku git:remote --app &amp;lt;i&amp;gt;polar-taiga-61296&amp;lt;/i&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">En faisant git push depuis sa machine</text:h><text:p>Le déploiement d&amp;#8217;une branche Git est le moyen le plus facile d&amp;#8217;automatiser<text:line-break/>tous les aspects d&amp;#8217;un déploiement.</text:p><text:p>Cette méthode est privilégiée par les plates-formes de services<text:line-break/>comme Heroku, now et Clever Cloud.<text:line-break/>Chaque projet d&amp;#8217;application est accessible via un dépôt Git distant<text:line-break/>(remote)&amp;#160;: un dépôt est utilisé pour versionner notre code (GitHub par exemple)<text:line-break/>tandis qu&amp;#8217;un autre dépôt est utilisé pour réceptionner le code à déployer.</text:p><text:p>L&amp;#8217;exemple suivant part du principe que notre terminal est positionné dans un<text:line-break/>répertoire qui est un projet Git contenant au moins 1 commit.<text:line-break/>Vous avez déjà configuré le dépôt distant à l&amp;#8217;aide de<text:line-break/>l'outil de déploiement Heroku (cf. section précédente).</text:p><text:p>Nous pouvons vérifier si le dépôt est bien configuré à l&amp;#8217;aide de la<text:line-break/>commande git remote&amp;#160;:</text:p><text:p>Dans le cas d&amp;#8217;Heroku, la commande heroku git:remote crée un remote nommé<text:line-break/>heroku.<text:line-break/>Heroku redéploie notre application dès qu&amp;#8217;on lui envoie du code en faisant<text:line-break/>git push heroku&amp;#160;:</text:p><text:p>L&amp;#8217;URL de l&amp;#8217;application est rappelée dans les logs du déploiement.<text:line-break/>En cas d&amp;#8217;erreur, la version précédente de l&amp;#8217;application reste en ligne.<text:line-break/>Nous avons ainsi le temps de corriger le problème sans interruption de service.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ git remote -v<text:line-break/>&amp;lt;i&amp;gt;heroku&amp;lt;/i&amp;gt;	https://git.heroku.com/mon-application.git (fetch)<text:line-break/>&amp;lt;i&amp;gt;heroku&amp;lt;/i&amp;gt;	https://git.heroku.com/mon-application.git (push)<text:line-break/>origin	git@github.com:mon-compte/mon-application.git (fetch)<text:line-break/>origin	git@github.com:mon-compte/mon-application.git (push)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ git push heroku<text:line-break/>&amp;gt; Counting objects: 4, done.<text:line-break/>&amp;gt; Delta compression using up to 4 threads.<text:line-break/>&amp;gt; Compressing objects: 100% (4/4), done.<text:line-break/>&amp;gt; Writing objects: 100% (4/4), 17.77 KiB | 5.92 MiB/s, done.<text:line-break/>&amp;gt; Total 4 (delta 2), reused 0 (delta 0)<text:line-break/>&amp;gt; remote: Compressing source files... done.<text:line-break/>&amp;gt; remote: Building source:<text:line-break/>&amp;gt; remote:<text:line-break/>&amp;gt; remote: -----&amp;gt; Node.js app detected<text:line-break/>&amp;gt; remote:<text:line-break/>&amp;gt; remote: -----&amp;gt; Creating runtime environment<text:line-break/>&amp;gt; ...<text:line-break/>&amp;gt; remote: -----&amp;gt; Launching...<text:line-break/>&amp;gt; remote:        Released v30                     1<text:line-break/>&amp;gt; remote:        https://mon-application.herokuapp.com/ deployed<text:line-break/>&amp;gt; remote:<text:line-break/>&amp;gt; remote: Verifying deploy... done.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@29454 {list_context: "colist", text: "C'est le trentième déploiement{nbsp}— on peut revenir à une version antérieure si nécessaire.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">En faisant git pull lors d&amp;#8217;une session SSH</text:h><text:p>La récupération du code source à distance avec Git et SSH est une manière de déployer<text:line-break/>similaire à la mise à jour et au démarrage d&amp;#8217;une application sur notre ordinateur.</text:p><text:p>Cette technique s&amp;#8217;applique si notre application est placée sur un<text:line-break/>hébergement mutualisé,<text:line-break/>dédié ou virtualisé ou une offre cloud.</text:p><text:p>L&amp;#8217;exemple suivant illustre l&amp;#8217;initialisation d&amp;#8217;un projet via la connexion<text:line-break/>SSH à un hébergement mutualisé chez alwaysdata.</text:p><text:p>Nous avons cloné un projet comme nous aurions pu le faire si on installait<text:line-break/>notre projet depuis zéro sur notre ordinateur.</text:p><text:p>Dans le cas d&amp;#8217;une mise à jour, nous récupérons les changements depuis le dépôt<text:line-break/>distant en faisant git pull.<text:line-break/>npm install mettra à jour les dépendances s&amp;#8217;il y a des différences entre<text:line-break/>le contenu du fichier package.json et les modules déjà installés<text:line-break/>—&amp;#160;voir le chapitre 5&amp;#160;:</text:p><text:p>Dans le cas d&amp;#8217;alwaysdata, l&amp;#8217;application se redémarre depuis leur<text:line-break/>interface d&amp;#8217;administration.<text:line-break/>Dans les autres cas, redémarrez l&amp;#8217;application selon le procédé choisi après<text:line-break/>avoir lu la section démarrer automatiquement nos applications.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ssh moncompte@ssh-moncompte.alwaysdata.net<text:line-break/>$$ git clone https://github.com/moncompte/monprojet .<text:line-break/>$$ npm install<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ssh moncompte@ssh-moncompte.alwaysdata.net<text:line-break/>$$ git pull<text:line-break/>$$ npm install<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Avec une recette de déploiement (Ansible, Chef, etc.)</text:h><text:p>La recette de déploiement est la manière la plus complète de partager et<text:line-break/>d&amp;#8217;automatiser un déploiement complexe.</text:p><text:p>Cette méthode se place dans la continuité de<text:line-break/>git pull lors d&amp;#8217;une session SSH&amp;#160;: nous orchestrons les<text:line-break/>actions nécessaires au déploiement en les listant dans un<text:line-break/>fichier de configuration, en choisissant dans quel ordre les déclencher<text:line-break/>et sur quel(s) serveur(s).</text:p><text:p>Nous retrouvons Puppet (puppet.com),<text:line-break/>Chef (www.chef.io) et Ansible (ansible.com)<text:line-break/>parmi les outils les plus utilisés et les mieux documentés.<text:line-break/>Ils ont chacun une philosophie de configuration et d&amp;#8217;exécution différente<text:line-break/>—&amp;#160;l&amp;#8217;idéal est encore d&amp;#8217;essayer d&amp;#8217;écrire une première recette avec chacun d&amp;#8217;entre<text:line-break/>eux pour voir celui qui vous semble le plus naturel à utiliser.</text:p><text:p>Ma préférence va vers Ansible car le logiciel s&amp;#8217;installe facilement<text:line-break/>sur macOS et Linux, se configure avec une syntaxe que je connais déjà (YAML)<text:line-break/>et je trouve ses messages d&amp;#8217;erreurs informatifs.</text:p><text:p>L&amp;#8217;exemple suivant illustre le déploiement de l&amp;#8217;application Node Slackin<text:line-break/>(github.com/rauchg/slackin) sur<text:line-break/>l'hébergement mutualisé alwaysdata&amp;#160;:</text:p><text:p>La commande précédente a eu pour effet de créer des connexions SSH avec les<text:line-break/>machines listées dans le fichier inventory.yaml puis de jouer les actions<text:line-break/>listées dans le fichier playbook.yaml.</text:p><text:p>Le playbook suivant illustre 2 tâches appliquées uniquement sur<text:line-break/>les serveurs étiquetés dans notre inventaire en tant que webservers&amp;#160;:</text:p><text:p>Les tâches sont réplicables sur les serveurs listés dans un fichier d&amp;#8217;inventaire&amp;#160;:</text:p><text:p>Nous déployons sur un seul serveur dans ce cas de figure.<text:line-break/>Mais nous pourrions tout à fait déployer une même application avec la même<text:line-break/>configuration sur une dizaine de serveurs (application à fort trafic)<text:line-break/>ou une même application déployée chez plusieurs centaines de clients.<text:line-break/>Dans tous les cas, l&amp;#8217;application serait dans un état consistant sur toutes les<text:line-break/>machines, avec peu de chances d&amp;#8217;oublier une opération et une plus grande facilité<text:line-break/>à revenir en arrière.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ansible-playbook  -i ansible/inventory.yaml ansible/playbook.yaml<text:line-break/><text:line-break/>PLAY [webservers] *******************************<text:line-break/><text:line-break/>TASK [Gathering Facts] **************************<text:line-break/>ok: [ssh-moncompte.alwaysdata.net]<text:line-break/><text:line-break/>TASK [code source via git] **********************<text:line-break/>ok: [ssh-moncompte.alwaysdata.net]<text:line-break/><text:line-break/>TASK [mise à jour des modules npm] **************<text:line-break/>ok: [ssh-moncompte.alwaysdata.net]<text:line-break/><text:line-break/>PLAY RECAP **************************************<text:line-break/>ssh-moncompte.alwaysdata.net : ok=3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@29550 {list_context: "dlist", text: "Inventaire", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29552 {list_context: "dlist", text: "*Liste de serveurs connus* sur lesquels effectuer des déploiements. +\nLes serveurs peuvent être catégorisés (par type, par emplacement)\npour contrôler finement les actions à déclencher.\nPar exemple{nbsp}: uniquement les serveurs web de production,\nles bases de données de test, l'API de la région Europe.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29574 {list_context: "dlist", text: "Playbook", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29576 {list_context: "dlist", text: "*Liste des actions possibles* en fonction des types de serveurs. +\nCes actions peuvent être rejouées à l'infini et de manière prédictible.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>---<text:line-break/>- hosts: webservers<text:line-break/>  tasks:<text:line-break/>    - name: code source via git<text:line-break/>      git:                                            1<text:line-break/>        repo: "https://github.com/rauchg/slackin.git" 2<text:line-break/>        dest: "{{ ansible_env.HOME }}"<text:line-break/>        clone: yes                                    3<text:line-break/>        update: yes                                   4<text:line-break/>    - name: mise à jour des modules npm<text:line-break/>      npm:                                            5<text:line-break/>        state: present                                6<text:line-break/>        path: "{{ ansible_env.HOME }}"<text:line-break/>        production: true                              7<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@29634 {list_context: "colist", text: "Actions Git{nbsp}— pour en savoir plus [URL]#https://docs.ansible.com/ansible/2.5/modules/git_module#.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29644 {list_context: "colist", text: "Adresse du dépôt Git à récupérer.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29654 {list_context: "colist", text: "Indique de cloner le dépôt s'il n'est pas déjà présent.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29664 {list_context: "colist", text: "Indique de récupérer les commits du dépôt en faisant `git pull`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29674 {list_context: "colist", text: "Actions npm{nbsp}— pour en savoir plus [URL]#https://docs.ansible.com/ansible/2.5/modules/npm_module#.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29684 {list_context: "colist", text: "Indique d'installer les dépendances npm en faisant `npm install`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@29694 {list_context: "colist", text: "Indique de lancer la mise en jour des modules npm avec l'option `--production`{nbsp}— c'est-à-dire sans les dépendances listées dans le champ `devDependencies`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>webservers:<text:line-break/>  hosts:<text:line-break/>    ssh-moncompte.alwaysdata.net<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">En publiant une image Docker</text:h><text:p>Une image Docker est un moyen fiable de reproduire le même environnement<text:line-break/>applicatif et ses dépendances sur plusieurs systèmes d&amp;#8217;exploitation<text:line-break/>—&amp;#160;y compris Windows, Linux et macOS.</text:p><text:p>Un des objectifs de Node est de pouvoir faire fonctionner un script<text:line-break/>sur tout système d&amp;#8217;exploitation compatible.<text:line-break/>Docker (www.docker.com) pousse cette compatibilité plus<text:line-break/>loin en empaquetant tout ce qui est nécessaire au bon fonctionnement<text:line-break/>de l&amp;#8217;application (dépendances, logiciels système).<text:line-break/>Le mécanisme d&amp;#8217;exécution aide à la fois à orchestrer plusieurs conteneurs entre<text:line-break/>eux&amp;#160;— y compris bases de données et moteurs de recherche&amp;#160;— et de pouvoir<text:line-break/>revenir dans l&amp;#8217;état applicatif initial.</text:p><text:p>Le fichier suivant est un exemple fonctionnel d&amp;#8217;image Docker.<text:line-break/>Son intention est de créer un environnement Node v10<text:line-break/>pour une application web (cf. chapitre 7)<text:line-break/>qui comporte une dépendance npm (cf. chapitre 5)&amp;#160;:</text:p><text:p>Nous pouvons constater le choix de l&amp;#8217;environnement Node (FROM),<text:line-break/>avant de procéder à la copie des fichiers applicatifs vers l&amp;#8217;image (COPY).<text:line-break/>Suite à ça nous installons aussi les dépendances de l&amp;#8217;application et spécifions<text:line-break/>quelle commande effectuer lorsque l&amp;#8217;image Docker est lancée (CMD).</text:p><text:p>L&amp;#8217;image se construit et le conteneur se démarre sur notre ordinateur comme suit&amp;#160;:</text:p><text:p>Le transfert de l&amp;#8217;image Docker vers un registre comme Docker Hub<text:line-break/>(hub.docker.com) garantit l&amp;#8217;exécution de ce même environnement<text:line-break/>applicatif, partout.</text:p><text:p>Nous avons déjà parlé de l'outil en ligne de commande<text:line-break/>du service now (zeit.co/now) dans la section du même nom.<text:line-break/>Il est aussi capable de déployer un conteneur Docker en se basant sur un fichier<text:line-break/>Dockerfile en rajoutant l&amp;#8217;option --docker&amp;#160;:</text:p><text:p>Une autre solution consiste à publier notre image sur Docker Hub,<text:line-break/>la plate-forme officielle de partage d&amp;#8217;images Docker.<text:line-break/>Docker Hub dispose d&amp;#8217;une fonctionnalité de construction automatique connectée<text:line-break/>à GitHub.<text:line-break/>Docker Hub construit l&amp;#8217;image à chaque nouveau commit, puis la met à disposition.</text:p><text:p>Il ne reste alors plus qu&amp;#8217;à la collecter sur un ordinateur avec la commande<text:line-break/>docker pull&amp;#160;— que ce soit sur notre machine, chez notre hébergeur<text:line-break/>ou par le biais du service d&amp;#8217;intégration continue.</text:p><text:p>Le fournisseur cloud Amazon Web Services intègre<text:line-break/>un registre privé d&amp;#8217;images Docker pour chaque compte client.</text:p><text:p>Elastic Container Registry (ECR, aws.amazon.com/ecr/)<text:line-break/>se connecte à d&amp;#8217;autres services comme Amazon CodeDeploy pour déclencher<text:line-break/>des mises à jour d&amp;#8217;infrastructure à chaque nouvelle image Docker.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>FROM node:8-alpine<text:line-break/><text:line-break/>WORKDIR /app<text:line-break/><text:line-break/>COPY ./app.js ./app.js<text:line-break/>COPY ./package.json ./package.json<text:line-break/>RUN npm install --production<text:line-break/><text:line-break/>EXPOSE 4000<text:line-break/><text:line-break/>CMD ["npm", "start"]<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ docker build -t nodebook/demo .<text:line-break/>$ docker run -ti --rm -p 4000:4000 nodebook/demo<text:line-break/>$ curl -L http://localhost:4000<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ now &amp;lt;i&amp;gt;--docker&amp;lt;/i&amp;gt; --public<text:line-break/>&amp;gt; Deploying ~/.../examples under oncletom<text:line-break/>&amp;gt; https://examples-zlssezfiej.now.sh [in clipboard] (bru1) [7s]<text:line-break/>&amp;gt; Synced 1 file (156B) [7s]<text:line-break/>&amp;gt; Building…<text:line-break/>&amp;gt; ▲ docker build<text:line-break/>&amp;gt; Sending build context to Docker daemon 17.92 kBkB<text:line-break/>&amp;gt; ▲ Storing image<text:line-break/>&amp;gt; Build completed<text:line-break/>&amp;gt; Verifying instantiation in bru1<text:line-break/>&amp;gt; ✔ Scaled 1 instance in bru1 [18s]<text:line-break/>&amp;gt; Success! Deployment ready<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">En paramétrant un logiciel d&amp;#8217;intégration continue</text:h><text:p>L&amp;#8217;utilisation d&amp;#8217;un logiciel d&amp;#8217;intégration continue est la manière la plus<text:line-break/>flexible d&amp;#8217;automatiser tout type de déploiement.</text:p><text:p>L&amp;#8217;intégration continue vise à vérifier si des régressions se sont glissées<text:line-break/>dans notre code.<text:line-break/>L&amp;#8217;idée est de livrer régulièrement du code pour détecter les erreurs au plus tôt.<text:line-break/>Les services d&amp;#8217;intégration continue automatisent cette pratique.<text:line-break/>Ils s&amp;#8217;intègrent avec d&amp;#8217;autres services pour prévisualiser les branches,<text:line-break/>compiler la documentation mais aussi pour déployer des artéfacts sur d&amp;#8217;autres<text:line-break/>plates-formes&amp;#160;: registre npm,<text:line-break/>GitHub Pages, Heroku ou même Amazon Lambda.</text:p><text:p>Le logiciel Jenkins (jenkins.io/) s&amp;#8217;installe sur notre propre<text:line-break/>infrastructure tandis que des services en ligne comme<text:line-break/>Circle CI (circleci.com), Travis CI (travis-ci.com)<text:line-break/>et CodeShip (codeship.com) mette à disposition leur<text:line-break/>infrastructure gratuitement pour les projets open source.<text:line-break/>GitLab (www.gitlab.com) combine l&amp;#8217;hébergement de dépôts Git<text:line-break/>et l&amp;#8217;intégration continue.</text:p><text:p>J&amp;#8217;utilise AppVeyor (appveyor.com) en complément d&amp;#8217;un autre<text:line-break/>service d&amp;#8217;intégration continue quand il s&amp;#8217;agit de tester<text:line-break/>la compatibilité du code avec Windows<text:line-break/>—&amp;#160;ce qui est le cas des exemples de cet ouvrage.</text:p><text:p>J&amp;#8217;ai une préférence pour GitLab lorsque le projet y est hébergé.<text:line-break/>Le reste du temps, j&amp;#8217;utilise Travis CI car j&amp;#8217;aime la clarté du fichier de configuration,<text:line-break/>l&amp;#8217;exhaustivité de leur documentation et la qualité des échanges avec leur support technique.</text:p><text:p>Le fichier suivant est un exemple de configuration pour Travis CI.<text:line-break/>Il se place à la racine d&amp;#8217;un projet à tester et s&amp;#8217;écrit avec la syntaxe YAML&amp;#160;:</text:p><text:p>Cet exemple est structuré en 3 parties&amp;#160;:</text:p><text:p>Ici, le déploiement consiste à<text:line-break/>déployer le code sur le registre npm<text:line-break/>quand les tests passent lors de la création d&amp;#8217;un tag Git.<text:line-break/>Les variables d&amp;#8217;environnement $NPM_EMAIL et $NPM_TOKEN se configurent de<text:line-break/>manière sécurisée sur l&amp;#8217;écran de configuration du projet<text:line-break/>(voir illustration ci-après).</text:p><text:p>Une documentation adaptée aux projets Node est disponible à cette adresse&amp;#160;:<text:line-break/>docs.travis-ci.com/user/languages/javascript-with-nodejs/</text:p><text:p>L&amp;#8217;exemple suivant illustre l&amp;#8217;utilisation de<text:line-break/>l'outil en ligne de commande now dès qu&amp;#8217;un nouveau commit<text:line-break/>est poussé sur la branche master et que les tests passent au vert&amp;#160;:</text:p><text:p>Les informations d&amp;#8217;exécution des tests sont consignés au même titre que le statut<text:line-break/>du déploiement&amp;#160;— voir image ci-contre.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>language: node_js<text:line-break/>node_js: v10<text:line-break/><text:line-break/>script: npm test<text:line-break/><text:line-break/>deploy:<text:line-break/>  provider: npm<text:line-break/>  on:<text:line-break/>    tags: true<text:line-break/>  email: "$NPM_EMAIL"<text:line-break/>  api-key: "$NPM_TOKEN"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. la configuration de l&amp;#8217;environnement&amp;#160;— en l&amp;#8217;occurrence Node v10&amp;#160;;,1. la commande de test&amp;#160;;,1. la configuration du déploiement en cas de succès.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>language: node_js<text:line-break/>node_js: v10<text:line-break/><text:line-break/>before_deploy: npm install --global now<text:line-break/><text:line-break/>deploy:<text:line-break/>  provider: script<text:line-break/>  script: now --token $NOW_TOKEN<text:line-break/>  on:<text:line-break/>    branch: master<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Choisir son hébergement</text:h><text:p>Nous allons nous intéresser aux différentes possibilités d&amp;#8217;hébergement<text:line-break/>d&amp;#8217;applications Node.</text:p><text:p>Côté tarifs, certaines sont gratuites sous certaines conditions,<text:line-break/>d&amp;#8217;autres se paient à l&amp;#8217;heure et d&amp;#8217;autres à l&amp;#8217;année.<text:line-break/>Certaines offres sont figées, d&amp;#8217;autres permettent de rajouter des machines<text:line-break/>voire même de changer la puissance en cours de route.</text:p><text:h text:outline-level="3">Plate-forme de services (Platform as a Service, PaaS)</text:h><text:p>Les plates-formes de services automatisent la configuration et le déploiement<text:line-break/>de nos applications Node mais également Ruby, Python et PHP, entre autres.<text:line-break/>Elles se spécialisent dans des déploiements rapides, une allocation des<text:line-break/>ressources flexible, à la demande et en un clic.</text:p><text:p>C&amp;#8217;est le moyen le plus facile de déployer une application Node, surtout si<text:line-break/>on utilise déjà Git pour versionner son code.</text:p><text:p>Leur philosophie est de tout penser en termes de ressources modulaires.<text:line-break/>On paie pour une certaine capacité de CPU et de RAM, à la minute ou à l&amp;#8217;heure.<text:line-break/>Ces capacités s&amp;#8217;augmentent ou se réduisent en quelques clics et sans changer<text:line-break/>une seule ligne de code dans notre application.</text:p><text:p>Une application se déploie avec un outil en ligne de commande ou<text:line-break/>en faisant git push.<text:line-break/>Et nous pouvons l&amp;#8217;automatiser avec une recette de déploiement<text:line-break/>et de l'intégration continue.</text:p><text:p>La startup californienne Zeit (zeit.co) édite le service<text:line-break/>now (zeit.co/now).<text:line-break/>Ce service est focalisé sur l&amp;#8217;hébergement de sites statiques,<text:line-break/>d&amp;#8217;applications Node et de conteneurs Docker.</text:p><text:p>Sa particularité est de créer une nouvelle instance d&amp;#8217;application par déploiement.<text:line-break/>On ne modifie donc jamais un déploiement déjà existant.<text:line-break/>On parle alors de déploiement immuable.</text:p><text:p>C&amp;#8217;est un service que j&amp;#8217;apprécie pour sa simplicité.<text:line-break/>C&amp;#8217;est probablement le plus pratique à utiliser pour déployer votre première application,<text:line-break/>si vous n&amp;#8217;utilisez pas Git ou si l&amp;#8217;application n&amp;#8217;utilise pas de base de données.</text:p><text:p>Heroku (heroku.com) est une autre alternative plus complète,<text:line-break/>toujours pour démarrer en douceur et sans sortir la carte bleue.<text:line-break/>Des modules optionnels couvrent nos besoins en bases de données comme<text:line-break/>MySQL, MariaDB, redis ou postgreSQL par exemple.<text:line-break/>D&amp;#8217;autres services gèrent l&amp;#8217;envoi d&amp;#8217;emails,<text:line-break/>l&amp;#8217;indexation de contenus, le monitoring, les logs, etc.<text:line-break/>La majorité offre un petit espace de stockage gratuit pour tester le produit.</text:p><text:p>S&amp;#8217;il est facile de déployer sur ces infrastructures et de gérer les ressources<text:line-break/>allouées à nos applications, à l&amp;#8217;inverse la facture peut vite devenir salée<text:line-break/>à mesure qu&amp;#8217;on augmente leur puissance.<text:line-break/>Ce coût est tout relatif&amp;#160;: il est surement inférieur à celui de notre temps<text:line-break/>passé à gérer les machines si on devait tout faire à la main.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Hébergement mutualisé</text:h><text:p>Les hébergements mutualisés ont l&amp;#8217;avantage d&amp;#8217;être bon marché et sans entretien.<text:line-break/>Cette formule est un excellent compromis prix/services.<text:line-break/>Elle demande un peu plus d&amp;#8217;efforts que les plates-formes de services<text:line-break/>car tout le travail d&amp;#8217;automatisation repose sur nos épaules, si on le souhaite.</text:p><text:p>Ce modèle est adapté pour l&amp;#8217;hébergement de fichiers statiques ou des sites web<text:line-break/>construits avec des langages de scripts comme Python ou PHP.<text:line-break/>Rares sont ceux qui ont adapté leur fonctionnement au modèle applicatif de Node.</text:p><text:p>Alwaysdata (alwaysdata.com) fait exception à la règle.<text:line-break/>Ce service d&amp;#8217;hébergement indépendant dispose d&amp;#8217;une formule gratuite avec 100Mo<text:line-break/>d&amp;#8217;espace disque pour démarrer.</text:p><text:p>Le déploiement de nos applications se fait via<text:line-break/>SSH ou SFTP, en utilisant Git,<text:line-break/>avec un service d&amp;#8217;intégration continue ou bien en<text:line-break/>utilisant une recette.</text:p><text:p>L&amp;#8217;interface d&amp;#8217;administration référence une section Sites dans la barre de<text:line-break/>navigation.<text:line-break/>Cette section liste les différents sites de notre compte.<text:line-break/>Si vous venez juste de créer le vôtre, un site a automatiquement été créé.<text:line-break/>Son URL est déterminée à partir du nom d&amp;#8217;utilisateur que vous avez choisi<text:line-break/>lors de la phase d&amp;#8217;inscription.</text:p><text:p>Un clic sur le bouton Modifier nous aidera à changer ses réglages&amp;#160;:</text:p><text:p>Le nouvel écran mentionne les adresses auxquel le site répond.<text:line-break/>En basculant vers un compte payant, on pourra assigner un ou plusieurs domaines<text:line-break/>ou sous-domaines à ce même site.</text:p><text:p>Les réglages liés à Node se trouvent sous les adresses.<text:line-break/>Le type de site doit être changé en Node.js pour afficher<text:line-break/>les champs de configuration qui nous intéressent.</text:p><text:p>La commande se configure de la même manière<text:line-break/>que l'exécution d&amp;#8217;un script Node<text:line-break/>—&amp;#160;cf. chapitre 4.<text:line-break/>On peut aussi faire appel au<text:line-break/>script npm start comme vu pendant<text:line-break/>la lecture du chapitre 5&amp;#160;:</text:p><text:p>La commande complète devrait apparaître dans la section Processus<text:line-break/>une fois la configuration sauvegardée.</text:p><text:p>En cas de doute, un bouton Redémarrer est affiché à côté du bouton Modifier<text:line-break/>dans la liste des sites.<text:line-break/>L&amp;#8217;application sera alors interrompue et relancée.<text:line-break/>Cette opération est nécessaire pour que l&amp;#8217;application prenne en compte<text:line-break/>les changements après une mise à jour ou un plantage.</text:p><text:p>Alwaysdata nous permet d&amp;#8217;associer un seul processus à un seul site.</text:p><text:p>Pour rendre une application Node accessibles sur Internet, il faudra<text:line-break/>alors créer un nouveau site et lui associer un autre nom de domaine,<text:line-break/>ou un sous-domaine.</text:p><text:p>L&amp;#8217;équipe et la communauté alwaysdata (forum.alwaysdata.com) sont<text:line-break/>sympathiques et à l&amp;#8217;écoute.<text:line-break/>C&amp;#8217;est un endroit idéal pour chercher des informations et poser des questions<text:line-break/>pour mieux comprendre ce qui empêche votre application de fonctionner<text:line-break/>sur leurs services.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Serveur virtualisé, dédié ou cloud</text:h><text:p>La location d&amp;#8217;un serveur dédié revient à payer pour un ordinateur complet,<text:line-break/>son entretien physique et son placement dans un datacenter&amp;#160;— un immense<text:line-break/>parking à ordinateurs connecté à un réseau haute-capacité.</text:p><text:p>Les Virtual Private Servers (VPS) sont des machines virtuelles<text:line-break/>(Virtual Machine, VM)&amp;#160;: un serveur dédié dont les ressources sont réparties<text:line-break/>en plusieurs unités indépendantes les unes des autres, les VM.</text:p><text:p>Les offres cloud sont une version "élastique" des VM&amp;#160;: la puissance de calcul,<text:line-break/>la bande-passante et la mémoire allouées sont ajustables sans avoir à<text:line-break/>changer de machine, sans avoir à tout réinstaller.<text:line-break/>Ces ressources sont considérées comme étant "à la demande"&amp;#160;: elles s&amp;#8217;obtiennent<text:line-break/>en quelques secondes et peuvent être mises en pause, réduites, augmentées ou<text:line-break/>supprimées à tout moment.</text:p><text:p>Leur modèle de facturation s&amp;#8217;adapte à la souplesse d&amp;#8217;allocation des ressources&amp;#160;:</text:p><text:p>Les modes de déploiement adaptés sont l'utilisation de Git<text:line-break/>pour obtenir le code, l'orchestration d&amp;#8217;applications avec Docker<text:line-break/>en combinaison avec des recettes de déploiement et de<text:line-break/>l'intégration continue.</text:p><text:p>L&amp;#8217;offre de serveurs virtualisés et dédiés (VPS, VM) est adaptée à des<text:line-break/>besoins constants et pour héberger plusieurs applications sur une même machine<text:line-break/>—&amp;#160;à coût constant.</text:p><text:p>L&amp;#8217;offre cloud est plus intéressante si vos besoins sont<text:line-break/>singulièrement fluctuants&amp;#160;— par exemple lorsqu&amp;#8217;il y a besoin de doubler le CPU<text:line-break/>pendant 2 heures, à heure fixe ou en fonction de la charge mais aussi quand il<text:line-break/>s&amp;#8217;agit d&amp;#8217;ajouter 10 serveurs d&amp;#8217;un coup pour traiter un calcul gourmand.</text:p><text:p>Le logiciel Terraform (terraform.io/) a pour intention<text:line-break/>de documenter une infrastructure (serveurs, DNS, stockage, etc.) sous forme<text:line-break/>d&amp;#8217;un fichier de configuration&amp;#160;— versionnable avec Git.</text:p><text:p>C&amp;#8217;est un outil idéal pour automatiser le déploiement d&amp;#8217;une infrastructure de zéro<text:line-break/>mais pour la faire évoluer d&amp;#8217;une version à une autre.<text:line-break/>Nous pouvons ainsi créer une architecture combinant plusieurs fournisseurs<text:line-break/>sans gérer la complexité et la non-interopérabilité de leurs API.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* au mois&amp;#160;: VPS, serveur virtualisé, serveur dédié,* à l&amp;#8217;heure&amp;#160;: serveur cloud,* à la (milli)seconde&amp;#160;: fonction événementielle<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Fonction événementielle (Serverless, Lambda)</text:h><text:p>La fonction événementielle est l&amp;#8217;évolution ultime des offres cloud.<text:line-break/>Au lieu de payer une machine ou une VM à l&amp;#8217;heure,<text:line-break/>nous payons pour exécuter du code à la milliseconde.<text:line-break/>Ce code se déclenche en réaction à événement se produisant ailleurs<text:line-break/>sur l&amp;#8217;infrastructure&amp;#160;: une requête HTTP entrante, un nouveau fichier ou encore<text:line-break/>un appel de l&amp;#8217;API de l&amp;#8217;hébergeur.</text:p><text:p>C&amp;#8217;est le moyen le plus économique pour<text:line-break/>exécuter du code à tout instant sans payer le temps d&amp;#8217;inactivité d&amp;#8217;une machine.<text:line-break/>On pourrait comparer ce modèle à celui de la téléphonie mobile lorsqu&amp;#8217;on a à choisir<text:line-break/>entre un forfait (coût fixe même si on ne consomme pas tout) et un paiement à la carte<text:line-break/>(coût dépendant de la consommation).</text:p><text:p>Les applications destinées à être exécutées comme fonction événementielle<text:line-break/>ont une architecture un peu différente.<text:line-break/>Au lieu de démarrer un serveur web basé sur le<text:line-break/>module http, nous exposons<text:line-break/>une fonction qui retourne un résultat de manière asynchrone&amp;#160;:</text:p><text:p>Ce code est très similaire à ce que nous pourrions écrire lors de l&amp;#8217;événement<text:line-break/>server.on('request') du module http.</text:p><text:p>Voyons ça en contexte dans l&amp;#8217;interface web du service Webtask<text:line-break/>(webtask.io/make)&amp;#160;:</text:p><text:p>Un nom de Pokémon est affiché lorsque nous accédons à l&amp;#8217;URL indiquée en bas<text:line-break/>de l&amp;#8217;écran.</text:p><text:p>Chaque fournisseur de fonction événementielle a sa propre vision des paramètres<text:line-break/>qui nous sont donnés mais leur fonctionnement reste très proche.</text:p><text:p>Je trouve que Webtask est le service avec la plus faible courbe d&amp;#8217;apprentissage.<text:line-break/>Son interface y est pour beaucoup.</text:p><text:p>Le service now est intéressant à plus d&amp;#8217;un titre.<text:line-break/>Il déploie avec un outil en ligne de commande minimaliste,<text:line-break/>y compris des conteneurs Docker.<text:line-break/>Il se transforme en fonction événementielle avec l&amp;#8217;aide du<text:line-break/>module npm<text:line-break/>micro (npmjs.com/micro).</text:p><text:p>Le service Amazon Lambda représente une marche d&amp;#8217;apprentissage un peu plus importante.<text:line-break/>C&amp;#8217;est un service important de par l&amp;#8217;outillage et la documentation disponibles<text:line-break/>à son sujet.<text:line-break/>Le service est complet, surtout une fois couplé avec le service<text:line-break/>Amazon API Gateway.</text:p><text:p>Les Lambda d&amp;#8217;Amazon ne sont pas accessibles depuis Internet par défaut.</text:p><text:p>Pour ce faire, il faut les relier au service  et associer<text:line-break/>chaque route à une Lambda.<text:line-break/>Le service se charge de transformer le résultat<text:line-break/>—&amp;#160;une chaîne de caractère, un tableau ou un objet ECMAScript&amp;#160;—<text:line-break/>en une réponse HTTP.</text:p><text:p>Ce type d&amp;#8217;infrastructure a été nommé serverless suite à une organisation<text:line-break/>du marché pour proposer des alternatives aux Lambda d&amp;#8217;Amazon.</text:p><text:p>Quand on entend le mot serverless&amp;#160;— littéralement, sans serveur&amp;#160;— il faut comprendre<text:line-break/>"sans serveur à gérer soi-même".<text:line-break/>L&amp;#8217;hébergeur dispose quand même de machines pour exécuter le code.<text:line-break/>Leurs ressources sont mutualisées au maximum.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const getPokemonName = require('pokemon-random-name');<text:line-break/><text:line-break/>module.exports = (context, send) =&amp;gt; {     1<text:line-break/>  return send(null, getPokemonName());<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@30900 {list_context: "colist", text: "Le paramètre `context` contient des informations à propos de la requête entrante{nbsp}— paramètres, corps du message, etc.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Améliorer la portabilité applicative</text:h><text:p>Le fonctionnement d&amp;#8217;une application Node peut être impacté suite à son<text:line-break/>déploiement en ligne.</text:p><text:p>Cette section a pour but de mettre en lumière des<text:line-break/>points importants qui contribuent à la portabilité de l&amp;#8217;application<text:line-break/>—&amp;#160;c&amp;#8217;est-à-dire son bon fonctionnement une fois en fonctionnement autre part<text:line-break/>que sur un ordinateur de développement et ce,<text:line-break/>indépendamment du service d&amp;#8217;hébergement retenu.</text:p><text:h text:outline-level="3">Utiliser la bonne version de Node</text:h><text:p>Les plates-formes de services et certains<text:line-break/>services d&amp;#8217;intégration continue utilisent deux mécanismes<text:line-break/>pour déterminer notre préférence quant à la version de Node à utiliser&amp;#160;:</text:p><text:p>Dans les deux cas, cela revient à préciser la version de Node<text:line-break/>pour chacun de nos projets.</text:p><text:p>Je trouve qu&amp;#8217;il est plus facile de gérer la version de Node au cas par cas<text:line-break/>au lieu de m&amp;#8217;imposer une seule version pour tout le code que j&amp;#8217;écris.</text:p><text:p>C&amp;#8217;est très utile quand je reprends le code après plusieurs mois d&amp;#8217;inactivité.</text:p><text:p>Si vous avez décidé d&amp;#8217;utiliser nvm<text:line-break/>(cf. chapitre 2) ou que vous utilisez un service<text:line-break/>compatible avec nvm, sachez que cet outil sait s&amp;#8217;adapter à la version<text:line-break/>de Node précisée dans le fichier .nvmrc.</text:p><text:p>Un fichier .nvmrc ressemble à ceci&amp;#160;:</text:p><text:p>Avec cette valeur, cela revient au même de faire<text:line-break/>nvm install v10 et nvm install.<text:line-break/>La commande nvm use lit également la version contenue dans .nvmrc<text:line-break/>et bascule automatiquement vers celle-ci&amp;#160;:</text:p><text:p>Les plates-formes de services qui ne se basent pas sur nvm<text:line-break/>vont en général jeter un œil du côté du fichier package.json&amp;#160;:</text:p><text:p>Cette notation signifie "la version la plus récente de Node v10".</text:p><text:p>Enfin, la dernière version de Node est utilisée si cette information<text:line-break/>ne peut pas être déterminée avec les deux mécanismes précédemment cités.</text:p><text:p><text:line-break/>* le fichier .nvmrc&amp;#160;;,* la valeur engines.node du fichier package.json.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>v10<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ nvm install<text:line-break/>$ nvm use<text:line-break/>$ node --version<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "my-app",<text:line-break/>  "engines": {<text:line-break/>    "node": "10.x.x"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">L&amp;#8217;application tourne mais elle est injoignable</text:h><text:p>Il est nécessaire de renseigner un port lorsqu&amp;#8217;on démarre un serveur<text:line-break/>avec le module http<text:line-break/>(cf. chapitre 4).<text:line-break/>Pourtant nous allons faire face à un "problème" si le code suivant est déployé<text:line-break/>sur une plate-forme de services&amp;#160;:</text:p><text:p>Le déploiement sera considéré comme réussi mais l&amp;#8217;application est injoignable.<text:line-break/>C&amp;#8217;est parce que les plates-formes de service choisissent ce port pour nous<text:line-break/>et l&amp;#8217;associent à l&amp;#8217;URL de notre application<text:line-break/>—&amp;#160;`monapplication.heroku.com` par exemple.</text:p><text:p>Le port est exposé au travers d&amp;#8217;une<text:line-break/>variable d&amp;#8217;environnement<text:line-break/>(cf. chapitre 4).<text:line-break/>Par convention, c&amp;#8217;est la variable PORT qui est utilisée.</text:p><text:p>Nous n&amp;#8217;avons qu&amp;#8217;à adapter le script précédent de cette manière&amp;#160;:</text:p><text:p>La variable d&amp;#8217;environnement PORT sera utilisée si elle existe et sinon,<text:line-break/>le port 8000 sera la valeur par défaut&amp;#160;:</text:p><text:p>C&amp;#8217;est un premier pas pour s&amp;#8217;affranchir des<text:line-break/>éléments de configuration écrits en dur.</text:p><text:p><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const server = require('http').createServer();<text:line-break/><text:line-break/>server.listen(8000, () =&amp;gt; console.log('localhost:8000'));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const server = require('http').createServer();<text:line-break/>const {PORT=8000} = process.env;  1<text:line-break/><text:line-break/>server.listen(PORT, () =&amp;gt; console.log(`localhost:${PORT}`));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@31320 {list_context: "colist", text: "Extrait la valeur de la variable d'environnement `process.env.PORT`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ node server-port-dynamic.js             1<text:line-break/>$ &amp;lt;i&amp;gt;PORT=4000&amp;lt;/i&amp;gt; node server-port-dynamic.js   2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@31340 {list_context: "colist", text: "Affiche `localhost:8000`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31350 {list_context: "colist", text: "Affiche `localhost:4000`.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">S&amp;#8217;affranchir des chemins et configurations écrits "en dur"</text:h><text:p>La configuration du port de l&amp;#8217;application n&amp;#8217;est pas le seul<text:line-break/>élément contextuel à changer entre notre ordinateur et un autre<text:line-break/>—&amp;#160;que ce soit celui d&amp;#8217;une personne contribuant au projet,<text:line-break/>au service d&amp;#8217;intégration continue ou au serveur d&amp;#8217;hébergement.</text:p><text:p>Les variables d&amp;#8217;environnement<text:line-break/>sont à privilégier pour configurer nos applications avec souplesse.<text:line-break/>Elles s&amp;#8217;appliquent aux&amp;#160;:</text:p><text:p>L&amp;#8217;accès à une base de données est un parfait exemple.<text:line-break/>Le nom d&amp;#8217;utilisateur, mot de passe et adresse du serveur<text:line-break/>peuvent d&amp;#8217;ailleurs se combiner en une seule variable composée sous forme d&amp;#8217;URL.</text:p><text:p>Par exemple, si vous avez connaissance des identifiants et de l&amp;#8217;adresse d&amp;#8217;une<text:line-break/>base de données MySQL ou MariaDB, composez l&amp;#8217;URL de configuration comme suit&amp;#160;:</text:p><text:p>Le script d&amp;#8217;exemple devrait avoir affiché la liste des tables contenues<text:line-break/>dans cette base de données ou un message d&amp;#8217;erreur le cas échéant.</text:p><text:p>La documentation du module npm<text:line-break/>mysql2 (npmjs.com/mysql2) détaille les différentes fonctions<text:line-break/>utilisables pour interagir avec les bases de données compatibles.</text:p><text:p>Docker est un outil utile pour créer une base de données en<text:line-break/>une ligne de commande et ce, sans avoir à installer MySQL sur notre ordinateur.</text:p><text:p>Vous pourrez ainsi utiliser l&amp;#8217;URL mysql://root:demo@localhost/mysql<text:line-break/>comme variable d&amp;#8217;environnement MYSQL_URL avec<text:line-break/>le script d&amp;#8217;exemple sql-connect.js</text:p><text:p>Certaines variables d&amp;#8217;environnement sont tellement spécifiques à chaque usage<text:line-break/>qu&amp;#8217;elles doivent être obligatoirement configurées&amp;#160;— identifiants, URL de la<text:line-break/>base de données, etc.<text:line-break/>Je trouve pratique de proposer une valeur par défaut pour les autres&amp;#160;— le port<text:line-break/>de l&amp;#8217;application ou d&amp;#8217;autres éléments plus "cosmétiques".</text:p><text:p>Enfin, j&amp;#8217;ai aussi pris l&amp;#8217;habitude de documenter les variables d&amp;#8217;environnement<text:line-break/>dans le fichier README.md à la racine de chaque projet.<text:line-break/>Nous pouvons ainsi avoir une vue d&amp;#8217;ensemble de la complexité de configuration<text:line-break/>en un rapide coup d&amp;#8217;œil&amp;#160;— et ça nous évite de fouiller dans le code applicatif.</text:p><text:p>Certains modules npm comme express<text:line-break/>(npmjs.com/express) lisent la valeur de process.env.NODE_ENV.<text:line-break/>Ils s&amp;#8217;en servent pour procéder à des optimisations et masquer des informations<text:line-break/>sensibles dans un contexte de production<text:line-break/>—&amp;#160;l&amp;#8217;environnement qui fait face à nos utilisateurs.</text:p><text:p><text:line-break/><text:line-break/>* URL d&amp;#8217;accès aux bases de données, à des API distantes&amp;#160;;,* clés d&amp;#8217;API pour utiliser des services externes&amp;#160;;,* réglages influençant le comportement de l&amp;#8217;application&amp;#160;;,* chemins d&amp;#8217;accès vers des fichiers ou répertoires&amp;#160;— stockage, cache, etc&amp;#160;;,* environnements d&amp;#8217;exécution&amp;#160;— développement, test, production, etc.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ MYSQL_URL=mysql://user:password@server/database \<text:line-break/>  node sql-connect.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const mysql = require('mysql2/promise');<text:line-break/>const url = process.env.MYSQL_URL;<text:line-break/><text:line-break/>mysql.createConnection(url).then((connection) =&amp;gt; {  1<text:line-break/>  console.log('Connexion réussie :-)');             2<text:line-break/>  connection.end();                                 3<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@31468 {list_context: "colist", text: "Connexion à la base de données en utilisant la variable d'environnement `MYSQL_URL`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31478 {list_context: "colist", text: "Affiche `Connexion réussie{nbsp}:-)` en cas de succès de connexion à la base de données.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31488 {list_context: "colist", text: "Clôture de la connexion{nbsp}— autrement le script ne se terminerait pas sans avoir recours à kbd:[Ctrl+C].", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ docker run -ti --rm -e MYSQL_ROOT_PASSWORD=demo \<text:line-break/>  -p 3306:3306 mysql:5<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ NODE_ENV=production node app.js<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Persister les fichiers en dehors de notre application</text:h><text:p>Les fichiers écrits par notre application devraient être persistés en dehors<text:line-break/>de son arborescence de fichiers.</text:p><text:p>Prenons cet exemple d&amp;#8217;arborescence&amp;#160;:</text:p><text:p>Les images sont stockées à deux endroits&amp;#160;:</text:p><text:p>Un inconvénient se présente à nous&amp;#160;: nous perdons tout si nous supprimons<text:line-break/>le répertoire app pour réinstaller l&amp;#8217;application de zéro.<text:line-break/>Je conseille donc d&amp;#8217;écrire tout nouveau fichier dans un répertoire indépendant.<text:line-break/>L&amp;#8217;arborescence évoquée ci-dessus se transformerait ainsi&amp;#160;:</text:p><text:p>Le chemin d&amp;#8217;accès devient flexible dès lors que nous le rendons configurable<text:line-break/>avec une variable d&amp;#8217;environnement.</text:p><text:p>En savoir plus en lisant la section précédente.</text:p><text:p>Ce qui peut sembler être une précaution s&amp;#8217;avère encore plus utile<text:line-break/>dès lors que nous utilisons une plate-forme de services<text:line-break/>ou lorsque nous démarrons une nouvelle machine virtuelle.<text:line-break/>Chaque nouveau déploiement remet le système de fichiers à zéro.</text:p><text:p>Une solution complémentaire s&amp;#8217;offre à nous lorsqu&amp;#8217;il devient compliqué<text:line-break/>de partager un même stockage de fichiers entre plusieurs machines ou VM&amp;#160;:<text:line-break/>c&amp;#8217;est le stockage d&amp;#8217;objets.</text:p><text:p>Le stockage d&amp;#8217;objets est une solution de stockage élastique où la facturation<text:line-break/>est basée sur la quantité de données stockées et téléchargées.<text:line-break/>Nous accédons aux ressources stockées et à leur contenu avec des requêtes HTTP.<text:line-break/>Les fichiers sont ainsi disponibles à tout moment, sans limite et<text:line-break/>pour tous nos contextes applicatifs.</text:p><text:p>Amazon S3 est le premier service à avoir rendu populaire le stockage d&amp;#8217;objets<text:line-break/>en 2006.<text:line-break/>C&amp;#8217;était la première fois que nous pouvions stocker des fichiers de manière infinie,<text:line-break/>sans limitation de taille de fichiers.</text:p><text:p>Son interface d&amp;#8217;accès (API) est même devenue un standard de facto&amp;#160;: il est<text:line-break/>utilisé par la plupart des concurrents afin de pouvoir passer d&amp;#8217;un fournisseur<text:line-break/>à un autre sans avoir à changer grand-chose à ses applications.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>└── app<text:line-break/>    ├── images<text:line-break/>    └── uploads<text:line-break/>        └── images<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* app/images&amp;#160;: images statiques affichées par notre application web&amp;#160;— on les versionne avec Git;,* app/uploads/images&amp;#160;: fichiers enregistrés sur le disque par l&amp;#8217;intermédiaire<text:line-break/>de notre application&amp;#160;— on ne les versionne pas avec Git.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>├── app<text:line-break/>│   └── images<text:line-break/>└── uploads<text:line-break/>    └── images<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ UPLOAD_DIR=/uploads npm start<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Versionner les schémas de base de données</text:h><text:p>Le contenu et la structure d&amp;#8217;une application peuvent changer selon qu&amp;#8217;elle tourne<text:line-break/>sur notre ordinateur ou sur notre hébergement.<text:line-break/>Nous pourrions reporter les changements de structure à la main mais c&amp;#8217;est<text:line-break/>sujet à erreurs, difficile à reproduire et difficile à intégrer dans le<text:line-break/>processus de déploiement.</text:p><text:p>L&amp;#8217;idéal serait de synchroniser la structure de nos bases de données.<text:line-break/>Ou plutôt, l&amp;#8217;idéal est de reproduire les changements de structure.</text:p><text:p>L&amp;#8217;exemple suivant illustre la création d&amp;#8217;un nouveau champ&amp;#160;:</text:p><text:p>Ce fichier représente une étape de migration.<text:line-break/>L&amp;#8217;idée est de créer une nouvelle étape pour chaque changement de structure<text:line-break/>et de les jouer au prochain déploiement.</text:p><text:p>Cet exemple de migration se base sur le module npm db-migrate<text:line-break/>(npmjs.com/db-migrate).<text:line-break/>Il se connecte à la base de données de notre choix, charge la liste des<text:line-break/>migrations et exécute celles qui n&amp;#8217;ont pas encore été jouées.</text:p><text:p>Les migrations ne s&amp;#8217;utilisent pas que pour changer la structure.<text:line-break/>Elles s&amp;#8217;utilisent aussi pour créer la structure de notre base de données&amp;#160;:</text:p><text:p>Si on met ces deux exemples bout à bout, nous sommes alors en mesure<text:line-break/>de créer une table puis d&amp;#8217;y appliquer un changement en ajoutant une nouvelle<text:line-break/>colonne.</text:p><text:p>Ainsi, nous pouvons répliquer les changements de structures sur d&amp;#8217;autres ordinateurs<text:line-break/>et reproduire l&amp;#8217;évolution du schéma de la base de données en partant de zéro.<text:line-break/>Nous avons ainsi rejoué toutes les migrations sur notre outil d&amp;#8217;intégration<text:line-break/>continue pour nous assurer de leur robustesse et revenir en arrière si nécessaire.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>module.exports = {<text:line-break/>  up (database) {                                  1<text:line-break/>    return database.addColumn('fromages', 'aoc', { 2<text:line-break/>      type: 'boolean',                             3<text:line-break/>      defaultValue: false,<text:line-break/>    });<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@31808 {list_context: "colist", text: "Fonction exécutée lors de la migration.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31818 {list_context: "colist", text: "Nous ajoutons un champ `aoc` dans la table `fromages`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31828 {list_context: "colist", text: "Ce champ est de type _booléen_ avec `false` comme valeur par défaut.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>module.exports = {<text:line-break/>  up (database) {<text:line-break/>    return database.createTable('fromages', { 1<text:line-break/>      columns: {<text:line-break/>        id: {                                 2<text:line-break/>          type: 'int',<text:line-break/>          primaryKey: true,<text:line-break/>          autoIncrement: true<text:line-break/>        },<text:line-break/>        name: {                               3<text:line-break/>          type: 'string'<text:line-break/>        }<text:line-break/>      }<text:line-break/>    });<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@31876 {list_context: "colist", text: "Création d'une nouvelle table `fromages` avec 2 colonnes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31886 {list_context: "colist", text: "La première colonne se nomme `id`{nbsp}— elle est numérique et s'auto-incrémente à chaque nouvel enregistrement.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@31896 {list_context: "colist", text: "La seconde colonne se nomme `name`{nbsp}— c'est une chaîne de caractères.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Démarrer automatiquement une application</text:h><text:p>Jusqu&amp;#8217;à présent, nous avons démarré les scripts de cet ouvrage<text:line-break/>avec l&amp;#8217;exécutable node ou avec la commande npm start.<text:line-break/>C&amp;#8217;est un processus manuel qui nécessite de conserver un onglet ouvert<text:line-break/>dans notre terminal pour maintenir l&amp;#8217;application en fonctionnement.</text:p><text:p>Cette section explore des mécanismes pour détacher le processus du terminal<text:line-break/>et pour lancer l&amp;#8217;application au démarrage ou redémarrage d&amp;#8217;un ordinateur.</text:p><text:h text:outline-level="3">L&amp;#8217;hébergeur s&amp;#8217;en occupe à notre place</text:h><text:p>Les plates-formes de service automatisent le démarrage de<text:line-break/>l&amp;#8217;application.<text:line-break/>Elles exécutent la commande npm start<text:line-break/>dès que le déploiement est terminé.</text:p><text:p>C&amp;#8217;est tout.</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">Avec un gestionnaire de processus</text:h><text:p>Un gestionnaire de processus a deux utilités&amp;#160;:</text:p><text:p>pm2 (pm2.keymetrics.io) est un gestionnaire de processus<text:line-break/>disponible en tant que module npm<text:line-break/>(npmjs.com/pm2).<text:line-break/>Il fonctionne sous Linux, Windows et macOS.</text:p><text:p>La commande suivante démarre un script et le place aussitôt en tâche de fond&amp;#160;:</text:p><text:p>Cette même application s&amp;#8217;arrête avec la commande pm2 stop et<text:line-break/>se relance pour prendre en compte des changements de code avec pm2 restart.</text:p><text:p>Les gestionnaires de processus facilitent l&amp;#8217;intégration<text:line-break/>d&amp;#8217;une application en tant que service système<text:line-break/>(cf. section suivante).<text:line-break/>C&amp;#8217;est mon choix de prédilection pour ne pas avoir à apprendre un nouveau<text:line-break/>fichier de configuration.</text:p><text:p>La commande suivante nous guide dans la configuration de notre système<text:line-break/>d&amp;#8217;exploitation&amp;#160;:</text:p><text:p>Celle-ci sauvegarde les applications démarrées avec le gestionnaire de processus.<text:line-break/>Elles seront restaurées au prochain redémarrage de l&amp;#8217;ordinateur&amp;#160;:</text:p><text:p>On peut aussi revenir en arrière et décider de désactiver le démarrage<text:line-break/>automatique de nos applications&amp;#160;:</text:p><text:p>La commande pm2 startup pose problème sous Windows.<text:line-break/>Je recommande d&amp;#8217;utiliser le module npm pm2-windows-service<text:line-break/>(www.npmjs.com/package/pm2-windows-service) pour simplifier<text:line-break/>cette procédure.</text:p><text:p><text:line-break/>1. détacher un processus de notre terminal&amp;#160;— si on le ferme, l&amp;#8217;application tourne toujours&amp;#160;;,1. gérer plusieurs processus par application&amp;#160;— un frontal web et l&amp;#8217;admin par exemple.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ pm2 start app.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ pm2 startup<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ pm2 save<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ pm2 unstartup<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">En créant un service système</text:h><text:p>Tous les systèmes d&amp;#8217;exploitation ont un mécanisme pour<text:line-break/>démarrer des applications en fonction de certains critères&amp;#160;:<text:line-break/>quand le réseau ou une connexion Internet est disponible,<text:line-break/>lorsqu&amp;#8217;une session utilisateur s&amp;#8217;est ouverte<text:line-break/>ou même quand un autre logiciel est actif.</text:p><text:p>Systemd, Upstart et launchd sont des gestionnaires de services système parmi d&amp;#8217;autres.<text:line-break/>Ils se configurent avec des fichiers écrits dans des formats différents.</text:p><text:p>Voici un exemple de fichier de configuration pour systemd<text:line-break/>(doc.ubuntu-fr.org/systemd).<text:line-break/>C&amp;#8217;est le gestionnaire de services des distributions Linux Ubuntu,<text:line-break/> Debian, Fedora et CentOS.</text:p><text:p>Le service associé au fichier de configuration précédent peut être démarré<text:line-break/>manuellement comme suit&amp;#160;:</text:p><text:p>Les commandes systemctl stop et systemctl restart<text:line-break/>arrêtent et relancent un service.</text:p><text:p>Dans tous les cas, le service sera lancé automatiquement au prochain<text:line-break/>démarrage du système d&amp;#8217;exploitation.</text:p><text:p>Le gestionnaire de services Windows est compliqué à utiliser.<text:line-break/>Je recommande d&amp;#8217;utiliser le module npm<text:line-break/>node-windows (npmjs.com/node-windows).</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>[Unit]<text:line-break/>Description="Application Node.js"<text:line-break/>After=NetworkManager.service            1<text:line-break/><text:line-break/>[Service]<text:line-break/>Restart=on-failure                      2<text:line-break/>DefaultStartLimitBurst=5<text:line-break/>StartLimitIntervalSec=120<text:line-break/>User=nobody                             3<text:line-break/><text:line-break/>Environment="NODE_ENV=production"<text:line-break/>WorkingDirectory=/usr/local/node-app    4<text:line-break/>ExecStart=/usr/bin/npm start            5<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32102 {list_context: "colist", text: "L'application démarrera dès que l'interface réseau sera opérationnelle.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32112 {list_context: "colist", text: "L'application sera relancée en cas de plantage{nbsp}— maximum 5 fois dans un délai de 120 secondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32122 {list_context: "colist", text: "Le processus sera démarré au nom de l'utilisateur système `nobody`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32132 {list_context: "colist", text: "C'est comme si nous faisions `cd /usr/local/node-app` avant de lancer l'application{nbsp}— c'est la valeur qu'on retrouve avec `process.cwd()`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32142 {list_context: "colist", text: "Commande à exécuter pour démarrer l'application.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/># Cf. /etc/systemd/&amp;lt;i&amp;gt;nodebook&amp;lt;/i&amp;gt;.d/app.conf<text:line-break/>$ sudo systemctl start &amp;lt;i&amp;gt;nodebook&amp;lt;/i&amp;gt;.service<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Avec un serveur d&amp;#8217;applications web</text:h><text:p>Un serveur d&amp;#8217;applications web est un logiciel informatique<text:line-break/>qui a deux objectifs&amp;#160;: être toujours disponible<text:line-break/>et répartir le trafic HTTP vers des fichiers et des applications web.<text:line-break/>C&amp;#8217;est une sorte de parapluie optimisé et résistant qui se met au-devant<text:line-break/>de nos applications.</text:p><text:p>Les serveurs d&amp;#8217;applications sont excellents pour gérer la charge des requêtes,<text:line-break/>se protéger de failles de sécurité HTTP et être performants dans le<text:line-break/>traitement des fichiers statiques.</text:p><text:p>Leur capacité à redémarrer une application Node en cas de plantage ou de<text:line-break/>nouveau déploiement nous enlève une épine du pied.<text:line-break/>Certains ont même des facultés de répartition de charge (load balancing)&amp;#160;:<text:line-break/>plusieurs instances de la même application tournent alors en parallèle<text:line-break/>—&amp;#160;une par CPU.<text:line-break/>Le trafic est réparti vers l&amp;#8217;instance qui a le plus de CPU disponible.</text:p><text:p>Phusion Passenger (phusionpassenger.com/) est un<text:line-break/>serveur d&amp;#8217;applications web open source, léger et performant.<text:line-break/>Il est compatible avec des applications Ruby, Node et Python.<text:line-break/>Il s&amp;#8217;installe de manière autonome ou en complément des serveurs nginx<text:line-break/>(nginx.org) et Apache httpd (httpd.apache.org).</text:p><text:p>Regardons ensemble à quoi ressemble un fichier de configuration nginx<text:line-break/>minimaliste&amp;#160;:</text:p><text:p>Si nginx est lancé sur notre ordinateur avec ce fichier de configuration<text:line-break/>et que le fichier image.jpg est placé dans le répertoire /var/www,<text:line-break/>alors nous pourrons y accéder dans un navigateur web<text:line-break/>sur localhost/image.jpg.</text:p><text:p>Transformons maintenant ce fichier de configuration<text:line-break/>après avoir installé le module Phusion Passenger pour nginx<text:line-break/>(phusionpassenger.com/library/install/nginx/)&amp;#160;:</text:p><text:p>Phusion Passenger démarre l&amp;#8217;application Node pour nous.<text:line-break/>Il la maintient en vie en cas de plantage.<text:line-break/>Son comportement se configure finement à l&amp;#8217;aide de directives dont la liste<text:line-break/>intégrale se trouve sur<text:line-break/>phusionpassenger.com/library/config/nginx/reference/.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>server {<text:line-break/>  listen 80 default_server;<text:line-break/>  server_name _;<text:line-break/><text:line-break/>  root /var/www;       1<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32246 {list_context: "colist", text: "Répertoire racine où _nginx_ va chercher les fichiers.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>server {<text:line-break/>  listen 80 default_server;<text:line-break/>  server_name _;<text:line-break/>  root /var/www;<text:line-break/><text:line-break/>  passenger_enabled on;                             1<text:line-break/>  passenger_app_type node;                          2<text:line-break/>  passenger_app_root /var/apps/my-app;              3<text:line-break/>  passenger_startup_file app.js;                    4<text:line-break/>  passenger_document_root /var/apps/my-app/public;  5<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32300 {list_context: "colist", text: "Activation du module _Phusion Passenger_ pour _nginx_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32310 {list_context: "colist", text: "Nous indiquons à _Phusion Passenger_ qu'il s'agit d'une application Node.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32320 {list_context: "colist", text: "L'application se trouve dans le répertoire `/var/apps/my-app`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32330 {list_context: "colist", text: "Le script à démarrer est `app.js`{nbsp}— c'est-à-dire `/var/apps/my-app/app.js`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32340 {list_context: "colist", text: "Emplacement où _Phusion Passenger_ ira chercher les fichiers statiques.", blocks: 0}><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">À quoi penser après la mise en ligne ?</text:h><text:p>De la programmation au déploiement, nous sommes toujours en mesure<text:line-break/>de savoir quand quelque chose ne va pas&amp;#160;: les erreurs se produisent sous nos yeux.</text:p><text:p>Les problèmes commencent à échapper à notre attention dès la mise en ligne.<text:line-break/>Regardons ensemble ce que nous pouvons faire pour intervenir au bon moment.</text:p><text:h text:outline-level="3">L&amp;#8217;application a planté</text:h><text:p>Que se passe-t-il lorsqu&amp;#8217;une application plante en plein milieu du week-end&amp;#160;?<text:line-break/>Rien.<text:line-break/>Nous n&amp;#8217;en savons rien tant que nous n&amp;#8217;allons pas sur l&amp;#8217;application en question.<text:line-break/>L&amp;#8217;action la plus simple à mettre en œuvre est de recevoir une alerte<text:line-break/>par e-mail ou par SMS.</text:p><text:p>Pingdom (www.pingdom.com/free) répond exactement à ce besoin.<text:line-break/>Il est gratuit pour un site web et payant au-delà.</text:p><text:p>Uptime Robot (uptimerobot.com) est un service similaire.<text:line-break/>Il offre en plus un flux RSS d&amp;#8217;alertes et une intégration avec Slack.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">S&amp;#8217;informer des erreurs applicatives</text:h><text:p>Lorsque nous prenons connaissance d&amp;#8217;un plantage applicatif, comment déterminer<text:line-break/>ce qui l&amp;#8217;a causé&amp;#160;?</text:p><text:p>S&amp;#8217;il s&amp;#8217;agit d&amp;#8217;une application personnelle ou sans enjeu,<text:line-break/>nous pouvons nous contenter de reproduire le problème localement.<text:line-break/>Dans le cas d&amp;#8217;une application professionnelle,<text:line-break/>nous aurons besoin d&amp;#8217;avoir plus de précisions, rapidement.</text:p><text:p>Sentry (sentry.io) est un service en ligne qui s&amp;#8217;intègre<text:line-break/>dans notre code comme une sonde.<text:line-break/>Une fois placée, la sonde transmet les erreurs vers la plate-forme Sentry.<text:line-break/>Cette plate-forme affiche les erreurs connues sous forme de tableau de bord&amp;#160;—<text:line-break/>leur nature, combien de fois elles se répètent.<text:line-break/>Elle nous envoie également une notification par e-mail avec une indication<text:line-break/>de sévérité, pour que nous puissions réagir plus ou moins rapidement.</text:p><text:p>L&amp;#8217;inclusion d&amp;#8217;une sonde basique revient à insérer 2 lignes dans notre code&amp;#160;:</text:p><text:p>Sentry nous communique une clé d&amp;#8217;API pour chaque projet à monitorer.<text:line-break/>Quand vous obtenez la vôtre, modifiez la ligne de commande suivante afin<text:line-break/>de provoquer l&amp;#8217;erreur, de recevoir l&amp;#8217;e-mail d&amp;#8217;alerte et de la visualiser<text:line-break/>en détails sur le tableau de bord&amp;#160;:</text:p><text:p>Un guide complet (en anglais) documente comment aller plus loin<text:line-break/>dans l&amp;#8217;utilisation de Sentry.</text:p><text:p>Il se lit sur docs.sentry.io/clients/node/.</text:p><text:p>Le service New Relic (newrelic.com/nodejs)<text:line-break/>est une alternative à Sentry.<text:line-break/>Il mesure également les performances et les sources de ralentissement.<text:line-break/>New Relic s&amp;#8217;installe gratuitement et en quelques clics sur la<text:line-break/>plate-forme de services Heroku.<text:line-break/>Il devient payant à partir d&amp;#8217;un certain volume de requêtes.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const sentry = require('raven');                  1<text:line-break/>sentry.config(process.env.SENTRY_DSN).install();  2<text:line-break/><text:line-break/>const express = require('express');<text:line-break/>const app = express();<text:line-break/><text:line-break/>test;                                             3<text:line-break/><text:line-break/>app.get('/', (request, response) =&amp;gt; response.send('OK!'));<text:line-break/>app.listen(process.env.PORT || 4000);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32478 {list_context: "colist", text: "_raven_ est le nom du module npm édité par Sentry pour collecter les erreurs.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32488 {list_context: "colist", text: "Configuration du client Sentry{nbsp}— il collectera et enverra les erreurs auprès du service Sentry.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32498 {list_context: "colist", text: "Cette ligne est la source de notre erreur{nbsp}— la variable n'est pas définie.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ SENTRY_DSN=https://0c...@sentry.io/1201870 node sentry.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Notre version de Node fait l&amp;#8217;objet d&amp;#8217;une faille de sécurité</text:h><text:p>Certaines versions de Node sortent pour apporter de nouvelles fonctionnalités<text:line-break/>ou pour corriger des bugs.<text:line-break/>D&amp;#8217;autres sont publiées pour corriger des failles de sécurité.<text:line-break/>Ces failles sont critiques pour nos applications.</text:p><text:p>Lorsqu&amp;#8217;une faille est exploitée, la personne à l&amp;#8217;origine de l&amp;#8217;attaque<text:line-break/>peut ralentir, faire planter ou extraire des informations confidentielles<text:line-break/>de notre application.<text:line-break/>En cas de faille critique, l&amp;#8217;attaquant·e peut aussi gagner un accès<text:line-break/>à l&amp;#8217;ordinateur et aux bases de données hébergeant l&amp;#8217;application.</text:p><text:p>Solution&amp;#160;: redéployer nos applications avec une version de Node plus récente.</text:p><text:p>Je vous encourage à recevoir des alertes par e-mail ou en<text:line-break/>vous abonnant au fil RSS pour être prevenu·e au bon moment.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32564 {list_context: "dlist", text: "E-mail", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32566 {list_context: "dlist", text: "[URL]#https://groups.google.com/group/nodejs-sec#", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32580 {list_context: "dlist", text: "Fil RSS", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32582 {list_context: "dlist", text: "[URL]#https://nodejs.org/en/feed/vulnerability.xml#", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">Un des modules npm fait l&amp;#8217;objet d&amp;#8217;une faille de sécurité</text:h><text:p>Les modules npm sont aussi affectés par des failles de sécurité.</text:p><text:p>Les conséquences de leur exploitation sont similaires aux failles de Node&amp;#160;:<text:line-break/>les personnes à l&amp;#8217;origine des attaques peuvent saturer le serveur et<text:line-break/>paralyser l&amp;#8217;application.<text:line-break/>Elles sont aussi en mesure de subtiliser des informations confidentielles<text:line-break/>stockées en base de données ou saisies par les usagers.</text:p><text:p>Snyk (snyk.io) est un service de sécurité gratuit pour les<text:line-break/>projets open source.<text:line-break/>Il scanne les vulnérabilités de nos dépendances et<text:line-break/>des dépendances de nos dépendances.<text:line-break/>Il nous alerte sur la sévérité des failles décelées dans nos projets.</text:p><text:p>Ces failles sont classées en 3 niveaux&amp;#160;: dangereuses, modérées et superficielles.<text:line-break/>Mieux vaut mettre à jour les dépendances affectées par une faille dangereuse<text:line-break/>le plus rapidement possible.</text:p><text:p>Ce n&amp;#8217;est pas grave si nous ne mettons pas à jour un vieux module npm.<text:line-break/>Ça peut avoir un impact négatif si cette vieille version est affectée par une faille.</text:p><text:p>La capture d&amp;#8217;écran suivante illustre une vulnérabilité décelée dans le module<text:line-break/>npm restify dans sa version 4&amp;#160;:</text:p><text:p>La correction du problème implique de passer à la version 5.<text:line-break/>Cette action nous demandera surement d&amp;#8217;adapter notre code car nous changeons<text:line-break/>de version majeure&amp;#160;— de la version 4 à la version 5.<text:line-break/>Ces migrations sont souvent documentées par les auteurs des modules.</text:p><text:p>Snyk s&amp;#8217;intègre à d&amp;#8217;autres services que GitHub&amp;#160;: GitLab, Heroku, BitBucket, etc.</text:p><text:p>Les applications au code source privé peuvent être vérifiées gratuitement<text:line-break/>avec l&amp;#8217;API de Snyk ou son application en ligne de commande.</text:p><text:p>Nous avons parlé de la commande npm audit dans<text:line-break/>le chapitre 5.<text:line-break/>Elle dispose d&amp;#8217;une option pour mettre à jour automatiquement<text:line-break/>les dépendances dangereuses&amp;#160;: npm audit fix.</text:p><text:p>Rester à l&amp;#8217;écoute des vulnérabilités en combinaison de l&amp;#8217;utilisation<text:line-break/>de Snyk ou de npm audit fix suffit à prendre des mesures de correction<text:line-break/>efficaces sans avoir à trop s&amp;#8217;y connaitre.</text:p><text:p>La lecture des rapports de vulnérabilité est un bon moyen de comprendre<text:line-break/>comment ces exploits fonctionnent, et comment penser nos applications<text:line-break/>pour éviter d&amp;#8217;exposer une surface d&amp;#8217;attaque minimale.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@32694 {list_context: "dlist", text: "Base de données", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32696 {list_context: "dlist", text: "[URL]#https://snyk.io/vuln/?type=npm#", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32710 {list_context: "dlist", text: "Fil RSS", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@32712 {list_context: "dlist", text: "[URL]#https://snyk.io/vuln/feed.xml?type=npm#", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ npm audit fix<text:line-break/>&amp;gt; fixed 20 of 21 vulnerabilities in 1867 scanned packages<text:line-break/>&amp;gt;   1 vulnerability required manual review and could not be updated<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>Nous avons désormais toutes les clés pour partager notre code et le<text:line-break/>résultat de son exécution de manière publique.</text:p><text:p>Nous avons appris à choisir un hébergement et un mode de déploiement<text:line-break/>adapté à notre temps disponible ainsi qu&amp;#8217;à nos envies.<text:line-break/>Nous sommes en mesure d&amp;#8217;aller vite ou de prendre le temps de configurer<text:line-break/>une machine pour des besoins très précis.</text:p><text:p>La configuration d&amp;#8217;une application avec des variables d&amp;#8217;environnement<text:line-break/>est une des clés pour automatiser le déploiement.</text:p><text:p>L&amp;#8217;automatisation du démarrage d&amp;#8217;une application demande d&amp;#8217;investir du temps<text:line-break/>pour être à l&amp;#8217;aise.<text:line-break/>Ce temps est utile car le principe s&amp;#8217;applique à d&amp;#8217;autres langages<text:line-break/>et ouvre la porte de la maîtrise de l&amp;#8217;hébergement applicatif,<text:line-break/>quand les plate-formes de service commencent à nous<text:line-break/>coûter trop cher.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/>* Déployer une application Node,* Choisir son hébergement,* Améliorer la portabilité,* Démarrer automatiquement nos applications,* À quoi penser après la mise en ligne&amp;#160;?<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-06<text:line-break/>$ cd $(nodebook dir chapter-06)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Créer une application web</text:h><text:p>TBD.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:h text:outline-level="2">Comment ça marche HTTP ?</text:h><text:p>Une personne qui vient de PHP + Apache<text:line-break/>-&amp;#8594; pourquoi lancer un serveur&amp;#160;?<text:line-break/>Parce que moi j&amp;#8217;ai Apache qui fait déjà ça pour moi.<text:line-break/>J&amp;#8217;ai mon fichier index.php et ensuite Symfony fait le reste.</text:p><text:p><text:line-break/>* la page PHP est interpétée le temps de la requête, puis tout est mis à la poubelle (en termes de  mémoire, donc les valeurs des variables),* j&amp;#8217;ai apache ou nginx devant, j&amp;#8217;ai pas besoin d&amp;#8217;un serveur web,* modèle Apache + script ou Apache + port,* pourquoi Apache lancerait pas un script Node comme il ferait avec php&amp;#160;?,* on cherche à s&amp;#8217;éloigner du modèle où on recrée et détruit tout à chaque requête,* c&amp;#8217;est rassurant parce que ça encapsule,* mais le coût il est en termes de  perf (charger tous les modules, résoudre les chemins, connecter à la base de données, i/o disque/réseau), pour chaque requête, et donc en termes de  perception de l&amp;#8217;autre côté de la ligne&amp;#160;: le spinner il tourne côté navigateur,* au bout de combien de temps un utilisateur quitte un site web s&amp;#8217;il ne voit rien s&amp;#8217;afficher&amp;#160;?,* stats sur la perception d&amp;#8217;instantanéité (400ms de Halt &amp;amp; Catch Fire), observé en publicité, effondrement du taux de clic,* plus intéressant de servir "à chaud" (réduire les ressources et temps de calcul avant de pouvoir commencer à effectivement traiter la requête),* quand une requête arrive ça veut dire quoi,* browser&amp;#160;: GET monsite.com,* montrer une requête HTTP brute,* surprise&amp;#160;: c&amp;#8217;est que du texte,* c&amp;#8217;est interprété de deux côtés&amp;#160;: par le client (programme qui demande, adresse une requête&amp;#8201;&amp;#8212;&amp;#8201;un navigateur web c&amp;#8217;est un type de client) et le serveur (programme qui reçoit et renvoie des réponses),* et une réponse ça ressemble à quoi&amp;#160;?,* dans la réponse y&amp;#8217;a un statut (200, etc) (c&amp;#8217;est pour ça 404),* dans la réponse y&amp;#8217;a un type de contenu (Content-Type),* le corps de la réponse peut être du texte, qui suit un certain format (HTML, texte, XML, JSON, image/jpg, image/png),* le client interprète en fonction de ses capacités et d&amp;#8217;hypothèses pragmatiques,* un navigateur web&amp;#160;: il interprète le HTML, l&amp;#8217;affiche, et demande les ressources listées dans les différentes balises (img, video, audio),* fait autant de requêtes que nécessaire pour les obtenir et les afficher,* attention s&amp;#8217;il y en a trop, ça fait le même effet que retirer un courier à la Poste à la mauvaise heure,* le poids des ressources à transférer a un impact (plus c&amp;#8217;est lourd, plus c&amp;#8217;est gros, plus c&amp;#8217;est long à charger&amp;#160;— c&amp;#8217;est amplifié par la qualité et le débit de la connexion Internet),* [TIP]&amp;#160;: les WebView ce sont des navigateurs web, genre pour iOS, Android etc.,* un client en ligne de commande (curl, wget)&amp;#160;: il n&amp;#8217;interpète pas, récupère juste,* c&amp;#8217;est utilisé pour faire du scrapping,* c&amp;#8217;est utilisé pour donner ça à d&amp;#8217;autres programmes (enjoliver le résultat, extraire des informations),* voir au chapitre 8 pour en savoir plus sur le fonctionnement d&amp;#8217;applications en ligne de commande<text:line-break/></text:p><text:p>* Créer un serveur HTTP,* Développer rapidement avec un framework web,* Se connecter à une base de données,* Utiliser un moteur de rendu,* Tester son application web<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-07<text:line-break/>$ cd $(nodebook dir chapter-07)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Et si je devais créer un serveur web, comment ça se passe ?</text:h><text:h text:outline-level="2">Développement rapide avec des frameworks web</text:h><text:h text:outline-level="3">Les middlewares</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Router des requêtes vers des modules</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Sécuriser une requête entrante</text:h><text:p>TBD.</text:p><text:p>L&amp;#8217;organisme Open Web Application Security Project (OWASP) recueille et diffuse nombre de critères de sécurité à connaître et vérifier pour déjouer au mieux des attaques.<text:line-break/>Citons quelques uns de ces critères&amp;#160;:</text:p><text:p>Le site d&amp;#8217;OWASP offre guides, référentiels, fiches récapitulatives, applications types, outils et tutoriaux pour sensibiliser à la sécurité applicative.</text:p><text:p><text:line-break/><text:line-break/>* dépendences logicielles&amp;#160;;,* injection de code arbitraire&amp;#160;;,* données d&amp;#8217;authentification (vols, interceptions, brute force etc.)&amp;#160;;,* contrôles d&amp;#8217;accès (impersonnification etc.)&amp;#160;;,* optimisme sécuritaire et absences de vérifications&amp;#160;;,* exposition de données critiques&amp;#160;;,* attaques CSRF (un script tiers actionne des commandes à notre insu)&amp;#160;;,* uploads de fichiers (poids limite, formats, chevaux de Troie etc.),* redirections non-contrôlées.<text:line-break/><text:line-break/><text:line-break/>* www.owasp.org/,* nodegoat.herokuapp.com/tutorial<text:line-break/></text:p><text:h text:outline-level="3">Authentifier des utilisateurs</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Connexion à des bases de données</text:h><text:h text:outline-level="3">Quelle base de données choisir ?</text:h><text:p>Doit-on nécessairement utiliser MongoDB, une base de données orientée documents ou JSON avec une application Node&amp;#160;?<text:line-break/>La réponse est catégorique&amp;#160;: c&amp;#8217;est non.</text:p><text:p>Tout type de base de données s&amp;#8217;interface avec Node, qu&amp;#8217;elle soit relationnelle (Postgres, MariaDB, MySQL), clé/valeur (Redis), en colonnes (Cassandra) ou orientée documents (MongoDB, ElasticSearch).</text:p><text:p>* en mémoire<text:line-break/>Le stockage est dit éphémère car l&amp;#8217;information est stockée dans la mémoire vive de la machine et disparait dès que l&amp;#8217;application est interrompue&amp;#160;;,* sous forme de fichiers<text:line-break/>Le stockage est physiquement lié à la machine hébergeant l&amp;#8217;application.<text:line-break/>Ce support est davantage adapté à un cache n&amp;#8217;ayant pas besoin d&amp;#8217;être actualisé après l&amp;#8217;initialisation de l&amp;#8217;application&amp;#160;;,* via une API<text:line-break/>Le stockage est nécessairement dissocié à la machine hébergeant l&amp;#8217;application.<text:line-break/>L&amp;#8217;accès à la lecture et à l&amp;#8217;écriture de l&amp;#8217;information se fait au travers d&amp;#8217;une interface de données accessible via HTTPS.<text:line-break/>Nous pourrions tout à fait envisager d&amp;#8217;utiliser les APIs de GitHub, Kinto, Google Drive ou KeyBase.io pour persister et collecter des données brutes ou transformées&amp;#160;;,* en base de données<text:line-break/>Le stockage n&amp;#8217;est pas nécessairement lié à la machine hébergeant l&amp;#8217;application.<text:line-break/>L&amp;#8217;information persiste si l&amp;#8217;application est interrompue.<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Modèles de données</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/></text:p><text:h text:outline-level="2">Affichage et templating de données</text:h><text:h text:outline-level="3">Fichiers statiques</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Templating HTML</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Ressources RESTful</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Tester son application</text:h><text:h text:outline-level="3">Tests unitaires</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Tests fonctionnels</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Tests d&amp;#8217;API REST</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>TBD.</text:p><text:p></text:p><text:p>* distingo serveur web/serveur http&amp;#160;? (pas sûr que ça vaille le coup/coût à ce stade là),* c&amp;#8217;est quoi cette histoire d&amp;#8217;ouvrir un port pour lancer un serveur&amp;#160;?,* dans le cas de formulaire, le client envoie des informations en même temps que la requête,* comme on est dans un format texte, il faut l&amp;#8217;interpréter le parser,* les trucs auxquels il faut faire gaffe,* qu&amp;#8217;est-ce qui occupe de la mémoire&amp;#160;?,* ça a d&amp;#8217;autant plus d&amp;#8217;impact qu&amp;#8217;on est sur des processus longs (aka programme qui tourne en continu&amp;#160;— le serveur web),* donc si on nettoie pas (ce qu&amp;#8217;on ouvre, si on charge tout d&amp;#8217;un coup), les ressources disponibles diminuent jusqu&amp;#8217;au plantage<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Créer un outil en ligne de commande</text:h><text:p>TBD.</text:p><text:p>TBD.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>install global&amp;#160;: pour quelqu&amp;#8217;un qui n&amp;#8217;a pas besoin de l&amp;#8217;inclure dans un projet.<text:line-break/>Être autonome.<text:line-break/>En faire un outil système.<text:line-break/>Taper la commande sans avoir à se soucier d&amp;#8217;autre chose.</text:p><text:p>utilisation&amp;#160;: le nom c&amp;#8217;est le même.<text:line-break/>Plus logique.<text:line-break/>Plus facile à retenir.<text:line-break/>Mais ça peut se changer.</text:p><text:h text:outline-level="2">Créer un script exécutable</text:h><text:h text:outline-level="3">Au départ, un simple script Node</text:h><text:p>Dans le répertoire ./bin parce que c&amp;#8217;est la convention</text:p><text:p>Il faudra faire le lien avec le package.json</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>$ node bin/fichier.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-08<text:line-break/>$ cd $(nodebook dir chapter-08)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Modifier les permissions du script</text:h><text:p>pour le rendre exécutable (Linux et macOS)</text:p><text:p>Warning&amp;#160;: +x pour tout le monde</text:p><text:p><text:line-break/>----<text:line-break/>$ chmod +x bin/fichier.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Préciser le contexte d&amp;#8217;exécution (shebang)</text:h><text:p>Il faut parler à bash. #! sert à ça.</text:p><text:p>Chemin absolu vers exécutable.<text:line-break/>/usr/bin/env vs which vs /usr/bin/node&amp;#160;?</text:p><text:p>Runs a program in a modified environment.<text:line-break/>(chercher plus sur pourquoi env)</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Faire le lien avec un module npm</text:h><text:p>Champ bin</text:p><text:p></text:p><text:h text:outline-level="3">Tester une installation globale, localement</text:h><text:p>Prend en compte les changements locaux.</text:p><text:p>----<text:line-break/>$ npm i -g .<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Vers un code testable et réutilisable</text:h><text:p>Obtenir la surface la plus faible possible entre son code et la lecture<text:line-break/>des arguments.</text:p><text:p>réduire le plus possible ce qu&amp;#8217;il y a dans un fichier exécutable<text:line-break/>pour tester le plus facilement</text:p><text:p>exemple inDir outDir&amp;#8201;&amp;#8212;&amp;#8201;réutiliser du code métier</text:p><text:p>idéalement ce qui est dans le main est consommé par le bin</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Du script au programme interactif</text:h><text:h text:outline-level="3">Utiliser des options et arguments</text:h><text:p>process.argv</text:p><text:p>Tableau qui contient toutes les chaines de caractère utilisées pour lancer la commande.</text:p><text:p>(héritage UNIX).</text:p><text:p>process.argv.slice(2)</text:p><text:p>Créer des variables explicites au lieu de process.argv[2].</text:p><text:p>Et la mémoire&amp;#160;?<text:line-break/>Le script utilisera la mémoire disponible, à concurrence des autres applications qui tournent sur la même machine<text:line-break/>Sur un Raspberry Pi, y&amp;#8217;a moins de mémoire donc on peut atteindre plus rapidement des limites si les fichiers dépassent les capacités (centaine de Mo&amp;#160;— vs. plus Go sur des ordinateurs modernes)</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Améliorer la lisibilité grâce aux couleurs</text:h><text:p>* chalk,* un autre module plus fonctionnel,* ANSI (sous Windows c&amp;#8217;est différent je crois)<text:line-break/></text:p><text:h text:outline-level="3">Demander une série d&amp;#8217;informations</text:h><text:p>* demand,* &amp;lt;insérer un module npm qui fait ça bien&amp;gt;<text:line-break/></text:p><text:h text:outline-level="3">Informer de la progression</text:h><text:p>* readline,* spinner,* progressbar<text:line-break/></text:p><text:h text:outline-level="3">Inviter à mettre à jour le module</text:h><text:p>* update-check<text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Tester son code</text:h><text:h text:outline-level="3">Seulement l&amp;#8217;interface</text:h><text:p>avec les outils habituels</text:p><text:p></text:p><text:h text:outline-level="3">Tester l&amp;#8217;exécutable</text:h><text:p>plus dur, plus de code à écrire</text:p><text:p><text:line-break/>* à la main avec spawn/exec,* tape-spawn,* cli-tester,* coffee<text:line-break/></text:p><text:p><text:line-break/></text:p><text:h text:outline-level="2">Aller plus loin</text:h><text:h text:outline-level="3">Utilisation d&amp;#8217;un framework d&amp;#8217;application en ligne de commande</text:h><text:p>ça fait beaucoup de choses qu&amp;#8217;on a fait bout par bout<text:line-break/>pratique si on a besoin de tout utiliser en même temps<text:line-break/>équivalent des express &amp;amp; co pour le web (cf. chapitre 7)</text:p><text:p><text:line-break/>* yargs,* commander,* un autre truc plus léger<text:line-break/></text:p><text:h text:outline-level="3">Lire et écrire des données en continu</text:h><text:p>utilisation des streams</text:p><text:p></text:p><text:h text:outline-level="3">Rendre le programme indépendant de Node</text:h><text:p>packager l&amp;#8217;application (www.npmjs.com/package/pkg).</text:p><text:p></text:p><text:h text:outline-level="3">Templating et interfaces déclaratives</text:h><text:p></text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/>* TBD.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Créer une application front-end</text:h><text:p>La popularité de Node s&amp;#8217;est établie également pour la profusion d&amp;#8217;outillage apportée au développement web front-end.</text:p><text:p>Ce chapitre nous apprendra le rôle de Node en tant qu&amp;#8217;extension au développement front-end.</text:p><text:p>Avant l&amp;#8217;apparition de Node, rare était l&amp;#8217;outillage n&amp;#8217;imposant pas une ou plusieurs plates-formes de développement&amp;#160;: YUICompressor demandait Java, Google Closure Compiler demandait Java, sprockets Ruby et pngquant quelques dépendances système comme libpng.</text:p><text:p>L&amp;#8217;existence de Node et du registre npm a favorisé le développement d&amp;#8217;un écosystème orienté front-end plus simple à appréhender.<text:line-break/>Cela s&amp;#8217;étend de la découverte au téléchargement des librairies tierces ainsi qu&amp;#8217;à la compilation, l&amp;#8217;optimisation et l&amp;#8217;exécution des tests des applications web côté client.</text:p><text:p>Cet écosystème rend l&amp;#8217;écriture de code moderne normale&amp;#160;; un code anticipant les futurs standards d&amp;#8217;ECMAScript et HTML5, sur les navigateurs actuels et anciens.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:h text:outline-level="2">Quel rapport entre Node et les navigateurs web ?</text:h><text:p>Ce chapitre peut sembler confus au premier abord.<text:line-break/>Si Node s&amp;#8217;exécute au niveau du système d&amp;#8217;exploitation&amp;#160;— "côté serveur"&amp;#160;— en quoi est-il lié au développement front-end&amp;#160;— "côté client"&amp;#160;?<text:line-break/>Est-ce parce que du code écrit pour Node peut aussi fonctionner dans un navigateur web&amp;#160;?<text:line-break/>Quid de l&amp;#8217;utilisation de require('fs') pour accéder au système de fichiers&amp;#160;?</text:p><text:p>La réponse courte est&amp;#160;: nous n&amp;#8217;exécutons pas Node dans un navigateur web.</text:p><text:p>Et la réponse longue&amp;#160;: Node est utilisé pour assembler du code, le transformer et le rendre fonctionnel dans une paire de balises &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;.<text:line-break/>Ce code peut être aussi bien fourni par des librairies tierces installées via npm (jQuery, React ou d3 par exemple) que par de l&amp;#8217;outillage (optimiseurs, suite de tests, orchestration de tâches, etc.) ou encore par le code réutilisable de notre propre application web.</text:p><text:p>Il faut également bien comprendre qu&amp;#8217;il y a plusieurs "problèmes" cachés sous une même question&amp;#160;:</text:p><text:p>Ce processus n&amp;#8217;est pas magique et nous verrons graduellement au cours des prochaines sections comment tout ceci fonctionne.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* Les navigateurs web et Node utilisent différentes machines virtuelles JavaScript, avec différents niveaux de complétion dans l&amp;#8217;implémentation d&amp;#8217;ECMAScript&amp;#160;;,* Les navigateurs web et Node n&amp;#8217;ont pas accès aux mêmes APIs&amp;#160;– Node accède à fs et http tandis que les navigateurs ont File et fetch/XmlHttpRequest&amp;#160;;,* Les navigateurs web et Node ne gèrent pas le chargement de modules de la même manière&amp;#160;– voir la section gestion des dépendances&amp;#160;;,* L&amp;#8217;implémentation même d&amp;#8217;ECMAScript va différer selon les versions de Node employées&amp;#160;– un navigateur moderne et Node 6 comprendraient l&amp;#8217;objet natif Promise mais pas Node 0.12.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install chapter-09<text:line-break/>$ cd $(nodebook dir chapter-09)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Écrire dès à présent le code du futur</text:h><text:p>Transformer du code ECMAScript a pendant longtemps été chose pénible.<text:line-break/>Je pense par exemple à de la minification de code (pour réduire les temps de transfert sur les antiques lignes ADSL 128K) ou à de la conversion automatique de code ECMAScript 3 en ECMAScript 5.<text:line-break/>Cela nécessitait systématiquement l&amp;#8217;utilisation d&amp;#8217;un autre environnement qu&amp;#8217;ECMAScript lui-même: Rhino nécessitait Java, Spidermonkey nécessitait C++ et Trident nécessitait un environnement Windows en plus de C++.</text:p><text:p>esprima chamboule les règles du jeu en décembre 2011&amp;#160;: ce parseur ECMAScript&amp;#160;— lui-même écrit en ECMAScript&amp;#160;– exporte une compréhension de code sous forme d&amp;#8217;arbre syntaxique abstrait (abstract syntax tree, AST).<text:line-break/>Cet arbre est lui-même analysable par de nouveaux outils émergents&amp;#160;:</text:p><text:p>Aryia Hidayat introduit esprima dans un billet de blog.<text:line-break/>Il y présente notamment des comparatifs de performances d&amp;#8217;exécution sur différentes VM ECMAScript et face à d&amp;#8217;autres parseurs.</text:p><text:h text:outline-level="3">La fin de l&amp;#8217;approche par le dénominateur commun</text:h><text:p>Qui n&amp;#8217;a pas déjà entamé un projet en posant la question à un client, en regardant les statistiques de trafic ou en se posant une question à soi-même&amp;#160;: quelle est la liste des versions de navigateurs avec lequel notre site ou application web doit être compatible&amp;#160;?</text:p><text:p>La version de navigateur la plus ancienne ou la moins conforme aux standards était celle qui donnait le la (qui a prononcé Internet Explorer 7 dans la salle&amp;#160;?).<text:line-break/>Cela voulait dire se priver de techniques modernes, standardisées ou en cours de standardisation.<text:line-break/>Cela voulait dire des hacks dans ses CSS, dans son code ECMAScript et dans ses ressources graphiques.</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">Écrire au plus proche des standards</text:h><text:p>Fort heureusement l&amp;#8217;arrivée d&amp;#8217;esprima change la donne et permet d&amp;#8217;écrire un code proche des standards qui résiste au temps.<text:line-break/>Son existence facilite l&amp;#8217;émergence d&amp;#8217;outils automatisant les transformations de code pour satisfaire nos besoins spécifiques.</text:p><text:p>Il y a plusieurs éléments à prendre en compte concernant la standardisation de nouvelles versions d&amp;#8217;ECMAScript et les évolutions de sa syntaxe&amp;#160;:</text:p><text:p>Il vaut mieux parier sur les standards comme stratégie à long terme si on tient compte du temps de développement et du temps de maintenance d&amp;#8217;une base de code.</text:p><text:p>Il y a plusieurs organismes prenant part à la standardisation de langages et d&amp;#8217;API lorsque l&amp;#8217;on touche aux navigateurs web&amp;#160;:</text:p><text:p>Lorsque nous écrivons du code, nous pouvons rencontrer quatre cas de figure&amp;#160;:</text:p><text:p>Il arrive que certains éléments de syntaxe soient abandonnés pendant le processus de standardisation&amp;#160;– ou que leur implémentation change beaucoup (on pensera à Object.observe).</text:p><text:p>La question qui nous taraude est&amp;#160;: comment transformer le code pour satisfaire à la fois les navigateurs compatibles et les autres&amp;#160;?<text:line-break/>Babel est un outil de choix  pour parvenir à ces fins d&amp;#8217;écriture de code résistant au(x standards du) temps.</text:p><text:p>Ce module convertit de manière sélective toute syntaxe ECMAScript 2015&amp;#160;– ainsi que ECMAScript 2016, etc.&amp;#160;– vers de l&amp;#8217;ECMAScript 5, compréhensible par les navigateurs web modernes.<text:line-break/>L&amp;#8217;intérêt de sa sélectivité fait que l&amp;#8217;on peut progressivement arrêter de convertir les éléments de syntaxe couverts par 100% des navigateurs web modernes.</text:p><text:p>Traceur est un des premiers transpilateurs ECMAScript 2015 vers ECMAScript 5 à avoir émergé dans l&amp;#8217;écosystème Node.</text:p><text:p>Il a permis de commencer à écrire des modules en ECMAScript 2015 bien avant que la spécification ne soit entièrement terminée.<text:line-break/>Et donc de pouvoir anticiper son apprentissage tout en mettant le langage à l&amp;#8217;épreuve avant sa finalisation.</text:p><text:p>L&amp;#8217;exemple suivant illustre un code utilisant des éléments de syntaxe d&amp;#8217;ECMAScript 2015.</text:p><text:p>Ce code représente l&amp;#8217;idéal de ce que l&amp;#8217;on souhaite écrire.<text:line-break/>Le seul obstacle consiste à traduire ce code pour l&amp;#8217;ensemble des navigateurs web compatibles avec ECMAScript 5.</text:p><text:p>Exécutons cette commande&amp;#160;:</text:p><text:p>La sortie affichée correspond exactement à notre code d&amp;#8217;origine.<text:line-break/>C&amp;#8217;est parce que sans configuration, babel ne transforme rien.<text:line-break/>L&amp;#8217;ouvrage contient un fichier de configuration .babelrc.<text:line-break/>Nous expliquerons son contenu après en avoir observé son impact&amp;#160;:</text:p><text:p>La sortie a changé et renvoie un code totalement fonctionnel sur des navigateurs web ne supportant pas ECMAScript 2015&amp;#160;:</text:p><text:p>Il existe de nombreuses règles de transformation.<text:line-break/>Chacune d&amp;#8217;entre elles cible une fonctionnalité spécifique d&amp;#8217;une version d&amp;#8217;ECMAScript.<text:line-break/>Les presets des modules npm faisant office de groupes logiques.</text:p><text:p>Les presets suivants nous aideront à convertir chaque édition de spécification ECMAScript vers ECMASCript 5.<text:line-break/>Le dernier preset est le plus simple à utiliser, car il se base sur les parts de marché des navigateurs web pour déterminer les règles de conversion&amp;#160;:</text:p><text:p>Ils sont à placer dans un fichier de configuration nommé .babelrc.<text:line-break/>L&amp;#8217;exemple suivant illustre la combinaison de deux presets pour convertir la syntaxe ECMAScript 2015 et ECMAScript 2016 vers ECMAScript 5&amp;#160;:</text:p><text:p>Toutes les options de configuration sont documentées sur le site officiel de babel.<text:line-break/>Une autre page explique où placer et quoi mettre dans les fichiers .babelrc.</text:p><text:p><text:line-break/><text:line-break/>1. la cadence de standardisation a été revue pour devenir prédictible&amp;#160;– une volonté d&amp;#8217;une fois par an&amp;#160;;,1. les fonctionnalités et éléments de syntaxe sont implémentés un par un, à des vitesses différentes par les différents navigateurs web&amp;#160;;,1. deux tiers de navigateurs fonctionnent sur des rythmes de mises à jour en cycle court (de six à neuf semaines)&amp;#160;– le tiers restant est cadencé à une seule mise à jour par an.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* Pour le langage HTML&amp;#160;: WHATWG (html.spec.whatwg.org/)&amp;#160;;,* Pour l&amp;#8217;API DOM&amp;#160;: WHATWG (dom.spec.whatwg.org/)&amp;#160;;,* Pour le langage CSS&amp;#160;: W3C (www.w3.org/standards/techs/css)&amp;#160;;,* Pour le langage ECMAScript&amp;#160;: TC39 (github.com/tc39)&amp;#160;;<text:line-break/><text:line-break/><text:line-break/>* élément de syntaxe non-implémenté&amp;#160;: transformer le code pour l&amp;#8217;adapter aux navigateurs cibles&amp;#160;;,* élément de syntaxe partiellement implémenté&amp;#160;: utiliser l&amp;#8217;implémentation native des navigateurs et à défaut, transformer le code pour l&amp;#8217;adapter aux autres navigateurs&amp;#160;;,* élément de syntaxe totalement implémenté&amp;#160;: utiliser l&amp;#8217;implémentation native des navigateurs.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const getOS = userAgent =&amp;gt; {<text:line-break/>  const [, os, version] = userAgent.match(/\(([^;]+)\s?;\s?([^)]+)\)/);<text:line-break/>  return {os, version};<text:line-break/>};<text:line-break/><text:line-break/>const {userAgent} = window.navigator; 1<text:line-break/><text:line-break/>console.log(getOS(userAgent)); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@35186 {list_context: "colist", text: "Nous déstructurons l'_agent utilisateur_ du navigateur{nbsp}– à noter que ce même code exécuté par Node lancerait une exception car `window` n'existe pas dans cet environnement.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@35196 {list_context: "colist", text: "Affiche un objet content le _nom_ de votre système d'exploitation ainsi que sa _version_.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run babel -- --no-babelrc examples/babel-es2015.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run babel -- examples/babel-es2015.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>var getOS = function getOS(userAgent) {<text:line-break/>  var _userAgent$match = userAgent.match(/\(([^;]+)\s?;\s?([^)]+)\)/),<text:line-break/>      os = _userAgent$match[1],<text:line-break/>      version = _userAgent$match[2];<text:line-break/><text:line-break/>  return { os: os, version: version };<text:line-break/>};<text:line-break/><text:line-break/>var userAgent = window.navigator.userAgent;<text:line-break/><text:line-break/><text:line-break/>console.log(getOS(userAgent));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* preset-es2015 (babeljs.io/docs/plugins/preset-es2015/)&amp;#160;;,* preset-es2016 (babeljs.io/docs/plugins/preset-es2016/)&amp;#160;;,* preset-es2017 (babeljs.io/docs/plugins/preset-es2017/)&amp;#160;;,* preset-latest (babeljs.io/docs/plugins/preset-latest/)&amp;#160;;,* preset-env (npmjs.com/babel-preset-env).<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "presets": [<text:line-break/>    "es2015",<text:line-break/>    "es2016"<text:line-break/>  ]<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* babeljs.io/docs/usage/api/#options,* babeljs.io/docs/usage/babelrc/<text:line-break/></text:p><text:h text:outline-level="3">Combler les manques avec des polyfills</text:h><text:p>Des outils comme babel nous permettent d&amp;#8217;écrire avec une syntaxe moderne.<text:line-break/>Les polyfills sont des bouts de code qui nous permettent de combler les fonctionnalités manquantes&amp;#160;– leur implémentation.</text:p><text:p>Un polyfill harmonise la présence d&amp;#8217;une fonctionnalité au sein d&amp;#8217;une variété de navigateurs web et d&amp;#8217;environnements JavaScript.<text:line-break/>Cela se fera au détriment de quelques kilo-octets de code à charger en plus dans nos applications.<text:line-break/>L&amp;#8217;appel à un service de polyfill externe entrainera un léger ralentissement du chargement de notre page.</text:p><text:p>Prenons le bloc de code suivant&amp;#160;:</text:p><text:p>Comprenons que&amp;#160;:</text:p><text:p>Ce code fonctionnerait donc sur un navigateur moderne mais pas dans IE11.<text:line-break/>L&amp;#8217;inclusion d&amp;#8217;un polyfill de Promise résoudrait le problème.</text:p><text:p>Un polyfill se charge toujours en premier.<text:line-break/>On incluera tous les polyfills d&amp;#8217;un coup avant notre propre code.</text:p><text:p>Nous garantissons ainsi une cohérence et stabilité de comportement au sein de notre application, peu importe l&amp;#8217;ordre d&amp;#8217;exécution de nos scripts.</text:p><text:p>Parlons maintenant des méthodes d&amp;#8217;inclusion des polyfills pour mieux comprendre comment procéder.</text:p><text:p>Le service polyfill.io est de loin la méthode la plus simple à utiliser.<text:line-break/>Il suffit d&amp;#8217;inclure un script dans toutes vos pages web.<text:line-break/>polyfill.io déterminera les polyfills à charger en fonction de la compatibilité du navigateur chargeant la page&amp;#160;:</text:p><text:p>polyfill.io possède une documentation très complète.<text:line-break/>Elle nous aidera à configurer finement le service en fonction de nos besoins.</text:p><text:p>Nous pouvons déduire deux règles de l&amp;#8217;exemple précédent&amp;#160;:</text:p><text:p>La deuxième méthode est d&amp;#8217;embarquer les polyfills dans notre base de code.<text:line-break/>L&amp;#8217;avantage est de maitriser notre base de code et de ne pas dépendre d&amp;#8217;un service externe.<text:line-break/>L&amp;#8217;inconvénient est que nous chargeons du code qui sera inutile dans les navigateurs et environnements disposant déjà de ces fonctionnalités&amp;#160;:</text:p><text:p>Le module npm core-js est une librairie exhaustive de polyfills pouvant être inclus un à un ou par versions d&amp;#8217;ECMAScript.</text:p><text:p>La documentation en ligne de core-js liste l&amp;#8217;ensemble des polyfills supportés par ainsi que des exemples d&amp;#8217;utilisation.</text:p><text:p>babel et son preset babel-preset-env nous facilitent l&amp;#8217;inclusion de polyfills selon la compatibilité navigateurs que l&amp;#8217;on souhaite maintenir au sein de notre application. Le fichier .babelrc suivant configure l&amp;#8217;inclusion des polyfills à l&amp;#8217;aide des clés useBuiltIns et targets&amp;#160;:</text:p><text:p>Cette configuration illustre un souhait de compatibilité avec Internet Explorer 9 et les navigateurs web disposant d&amp;#8217;une part de marché supérieure à 5%.</text:p><text:p>Il faut veiller à ne pas alourdir inutilement une application.</text:p><text:p>Laissons la responsabilité de polyfiller aux utilisateurs de notre code&amp;#160;; particulièrement si celui-ci est redistribué en tant que module npm public.</text:p><text:p>Si plusieurs scripts nécessitent des polyfills, mieux vaut inclure ces derniers en une fois&amp;#160;:</text:p><text:p>Enfin, une dernière méthode est d&amp;#8217;importer la fonction de polyfill sans réécrire les objets globaux.<text:line-break/>Cette pratique a l&amp;#8217;avantage de ne pas entrainer d&amp;#8217;effets secondaires et de garantir le même comportement dans tous les navigateurs web.<text:line-break/>L&amp;#8217;inconvénient est qu&amp;#8217;on n&amp;#8217;utilise pas la fonctionnalité native des navigateurs lorsqu&amp;#8217;elle est présente.<text:line-break/>Nous nous retrouvons tributaires de la qualité d&amp;#8217;implémentation du polyfill.</text:p><text:p>De bons usages des polyfills ainsi les risques liés à leur utilisation sont compilés dans un guide édité par le W3C.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>Promise.resolve('ok');<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* cette syntaxe est valide dans toutes les versions d&amp;#8217;ECMAScript (babel ne changera rien à ce code)&amp;#160;;,* l&amp;#8217;objet global Promise existe dans un navigateur moderne&amp;#160;;,* l&amp;#8217;objet global Promise n&amp;#8217;existe pas dans Internet Explorer 11, entre autres.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>  &amp;lt;head&amp;gt;<text:line-break/>    &amp;lt;title&amp;gt;Example polyfill.io&amp;lt;/title&amp;gt;<text:line-break/>    &amp;lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>  &amp;lt;/head&amp;gt;<text:line-break/>  &amp;lt;body&amp;gt;<text:line-break/>    &amp;lt;script&amp;gt;<text:line-break/>      Promise.resolve('ok')<text:line-break/>        .then(msg =&amp;gt; console.log(msg));<text:line-break/>    &amp;lt;/script&amp;gt;<text:line-break/>  &amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* qa.polyfill.io/v2/docs/<text:line-break/><text:line-break/><text:line-break/>1. inclure les polyfills en tout premier&amp;#160;;,1. inclure les polyfills en dehors de notre code.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>  &amp;lt;head&amp;gt;<text:line-break/>    &amp;lt;title&amp;gt;Exemple polyfill custom&amp;lt;/title&amp;gt;<text:line-break/>    &amp;lt;script type="module"&amp;gt;<text:line-break/>      import 'es6-promise/auto';        1<text:line-break/>      import 'core-js/fn/number/is-nan';2<text:line-break/>    &amp;lt;/script&amp;gt;<text:line-break/>  &amp;lt;/head&amp;gt;<text:line-break/>  &amp;lt;body&amp;gt;<text:line-break/>    &amp;lt;script&amp;gt;<text:line-break/>      Promise.resolve(Number.isNaN(NaN))<text:line-break/>        .then(msg =&amp;gt; console.log(msg));<text:line-break/>    &amp;lt;/script&amp;gt;<text:line-break/>  &amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@35546 {list_context: "colist", text: "Nous verrons &lt;&lt;modules,comment importer des modules>> ci-après.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@35556 {list_context: "colist", text: "On importe un deuxième _polyfill_, celui de la méthode `Number.isNaN`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/core-js<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "comments": false,<text:line-break/>  "presets": [<text:line-break/>    "react",<text:line-break/>    [<text:line-break/>      "env", {<text:line-break/>        "loose": true,<text:line-break/>        "useBuiltIns": true,<text:line-break/>        "targets": {<text:line-break/>          "ie": 9,<text:line-break/>          "browsers": [<text:line-break/>            "&amp;gt; 5%"<text:line-break/>          ]<text:line-break/>        }<text:line-break/>      }<text:line-break/>    ]<text:line-break/>  ]<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;script src="polyfills.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;script src="script-a.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;script src="script-b.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import {Promise as PromisePolyfill} from 'es6-promise';<text:line-break/><text:line-break/>PromisePolyfill.resolve('ok').then(msg =&amp;gt; console.log(msg));<text:line-break/><text:line-break/>console.log('Promise' in window);                1<text:line-break/>console.log(PromisePolyfill === window.Promise); 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@35688 {list_context: "colist", text: "Affiche `true` si le navigateur implémente l'API _Promise_{nbsp}– sinon affiche `false` et l'utilisation d'un _polyfill_ prend tout son sens.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@35698 {list_context: "colist", text: "Affiche `false`, car le _polyfill_ de _Promise_ est une function strictement différente de `window.Promise`.", blocks: 0}><text:line-break/><text:line-break/>* w3ctag.github.io/polyfills/<text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* les source maps pour associer le code transformé au code d&amp;#8217;origine, notamment dans les outils de développement des navigateurs web&amp;#160;;,* des minifieurs plus efficaces et ayant connaissance des portions de code exécutées&amp;#160;;,* des analyseurs de code pour informer le développeur d&amp;#8217;erreurs de syntaxe, de non-respect de styles de développement, etc.&amp;#160;;,* des convertisseurs de code pour passer d&amp;#8217;ECMAScript vers CoffeeScript, de modules CommonJS vers des modules ECMAScript 2015, etc.<text:line-break/><text:line-break/><text:line-break/>* ariya.io/2011/12/introducing-esprima<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Importer des modules</text:h><text:p>Importer des modules est une pratique courante avec Node.<text:line-break/>Ça l&amp;#8217;est en revanche beaucoup moins dans l&amp;#8217;univers du web puisqu&amp;#8217;il n&amp;#8217;existait rien de natif avant les modules ECMAScript 2015.</text:p><text:p>Auparavant, on aura vu débarquer les modules AMD (Asynchronous Module Definition) pour gérer les dépendances entre scripts.<text:line-break/>Les librairies Dojo, RequireJS et YUI ont popularisé ce motif de conception.<text:line-break/>Un désir d&amp;#8217;universalité a ensuite émergé avec le gain de popularité croissant de Node avec les modules UMD, conciliant modules AMD et CommonJS.</text:p><text:p>Les modules ECMAScript 2015 ont émergé de ce bouillonnement.</text:p><text:h text:outline-level="3">La balise &amp;lt;script&amp;gt;</text:h><text:p>Rappelons-le, la méthode incontournable pour charger du code dans un navigateur web est l&amp;#8217;utilisation de la base &amp;lt;script&amp;gt;.<text:line-break/>Le chargement puis l&amp;#8217;évaluation et l&amp;#8217;exécution du script bloque le temps nécessaire le rendu d&amp;#8217;un document HTML.</text:p><text:p>Les différents scripts partagent le même espace mémoire, permettant ainsi à script.js d&amp;#8217;avoir accès à la fonction log définie dans global-dom-log.js.</text:p><text:p>S&amp;#8217;il est facile d&amp;#8217;ajouter du code dans le navigateur, on constate plusieurs problèmes&amp;#160;:</text:p><text:p>Le développement front-end basé sur de l&amp;#8217;outillage Node va justement nous aider à solidifier et renforcer la réutilisabilité de notre code.</text:p><text:p><text:line-break/>----<text:line-break/>&amp;lt;script src="global-dom-log.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/><text:line-break/>&amp;lt;div id="logs"&amp;gt;&amp;lt;/div&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>// eslint-disable-next-line no-unused-vars<text:line-break/>const log = (message) =&amp;gt; {<text:line-break/>  document.querySelector('#logs').textContent = String(message).trim();<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>/* global log */<text:line-break/>window.addEventListener('load', () =&amp;gt; {<text:line-break/>  log('OK');2<text:line-break/>});<text:line-break/><text:line-break/>log('KO');  1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@35858 {list_context: "colist", text: "Affiche une erreur car `&lt;div id=\"logs\">` n'existe pas encore dans le document à ce stade de l'exécution.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@35868 {list_context: "colist", text: "Cette ligne est exécutée une fois le document chargé{nbsp}– `&lt;div id=\"logs\">` contient désormais le texte `OK`.", blocks: 0}><text:line-break/><text:line-break/>* partager du code entre scripts repose sur une attente explicite&amp;#160;;,* le partage de variables entre scripts peut entrainer des collisions (par exemple, deux variables du même nom définies dans des scripts différents)&amp;#160;;,* il n&amp;#8217;y a pas de moyen évident de rendre des bouts de code privé au sein de chaque script.<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Les modules ECMAScript 2015</text:h><text:p>Nous avons évoqué les primitives ECMAScript 2015 dans le Chapitre 3.<text:line-break/>Les modules font partie des fonctionnalités tant attendues.</text:p><text:p>L&amp;#8217;attribut type="module" a été introduit pour maintenir une compatibilité entre scripts classiques et les modules ECMAScript 2015.<text:line-break/>Ce mécanisme de modules introduit plusieurs concepts importants&amp;#160;:</text:p><text:p>Retravaillons le document HTML de la section précédente&amp;#160;:</text:p><text:p>Nous voulons maintenant (sa)voir si la variable pro définie avant l&amp;#8217;inclusion du module script-import.js est constatée.<text:line-break/>Nous voulons également savoir si la syntaxe d&amp;#8217;import de la fonction log fonctionne&amp;#160;:</text:p><text:p>De même que nous avons utilisé import pour importer de manière sélective une fonction du module dom-log.js, l&amp;#8217;opérateur export nous aide à exposer des objets, fonctions et variables&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* toute variable est privée sauf si elle est exportée avec l&amp;#8217;opérateur export&amp;#160;;,* les modules sont explicitement inclus avec l&amp;#8217;opérateur import&amp;#160;;,* les variables globales définies par l&amp;#8217;utilisateur ne sont pas accessibles depuis un module.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;script&amp;gt;const pro = 'test';&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;script type="module" src="script-import.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/><text:line-break/>&amp;lt;div id="logs"&amp;gt;&amp;lt;/div&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import {log} from './dom-log.js';<text:line-break/><text:line-break/>console.log(typeof pro);    1<text:line-break/>console.log(typeof log);    2<text:line-break/>console.log(typeof window); 3<text:line-break/><text:line-break/>window.addEventListener('load', () =&amp;gt; {<text:line-break/>  log('OK');<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@36036 {list_context: "colist", text: "Affiche `undefined`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36046 {list_context: "colist", text: "Affiche `function`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36056 {list_context: "colist", text: "Affiche `object`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>export function log (message, target = '#logs') {<text:line-break/>  document.querySelector(target).textContent = String(message).trim();<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Importer des modules npm pour le web</text:h><text:p>Qu&amp;#8217;en est-il alors des modules npm&amp;#160;?<text:line-break/>Nous pouvons transpiler et importer du code, ce serait très utile si nous pouvions également importer du code tiers.<text:line-break/>Cela nous éviterait de réinventer la roue, d&amp;#8217;avoir accès à du code bien testé et trop coûteux à écrire nous-mêmes.</text:p><text:p>Nous avons vu comment charger des modules npm<text:line-break/>dans le chapitre 5.<text:line-break/>Intéressons-nous à leur utilisation dans le contexte d&amp;#8217;une application front-end.<text:line-break/>Pour cela, adaptons l&amp;#8217;exemple de la section précédente&amp;#160;:</text:p><text:p>Le document HTML chargeant ce module est en tout point similaire au précédent exemple&amp;#160;:</text:p><text:p>Le seul hic, c&amp;#8217;est que cela ne fonctionne pas&amp;#160;:</text:p><text:p>C&amp;#8217;est alors qu&amp;#8217;entre en jeu browserify.<text:line-break/>browserify est un outil générique de transformation de code.<text:line-break/>Il peut être utilisé en ligne de commande, via son API Node mais aussi par le biais de plugins pour d&amp;#8217;autres outils (comme Gulp, Grunt, etc.).</text:p><text:p>browserify a été initialement créé pour transformer du code écrit pour Node en code fonctionnel dans les navigateurs web.<text:line-break/>Il expose notamment un concept d&amp;#8217;intégrations (les transforms) afin d&amp;#8217;effectuer des remplacements ligne à ligne.</text:p><text:p>Là où babel cherche uniquement à traduire un langage vers un autre, browserify est le couteau suisse pour effectuer des remplacements majeurs dans le code&amp;#160;:</text:p><text:p>browserify est intéressant au sens où il nous apprend à nous constituer nous-mêmes notre outillage, pour nos propres besoins.</text:p><text:p>browserify est un outil extrêmement versatile, modulaire et puissant.<text:line-break/>Son apprentissage progressif peut faire de lui un allié de choix dans tous vos projets Node et web.</text:p><text:p>Revenons maintenant à notre code auquel il manque la compréhension des modules npm.<text:line-break/>Nous allons maintenant chercher à transformer le fichier script-import-jquery.js pour à la fois rendre la syntaxe import intelligible  (c&amp;#8217;est le rôle de babel) mais aussi pour faire le lien avec les modules npm&amp;#160;:</text:p><text:p>Cette commande exécute trois choses&amp;#160;:</text:p><text:p>Il en résultera un fichier nommé script-import-jquery-browserify.js compatible ECMAScript 5 et qui inclut désormais le code source de jQuery.<text:line-break/>Il ne nous reste plus qu&amp;#8217;à charger le fichier transformé dans notre page web pour voir le résultat&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>import $ from 'jquery';<text:line-break/><text:line-break/>console.log($.fn.jquery);  1<text:line-break/><text:line-break/>$(document).ready(() =&amp;gt; {<text:line-break/>  $('#logs').text('OK');   2<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@36142 {list_context: "colist", text: "`$.fn.jquery` contient le numéro de version de jQuery.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36152 {list_context: "colist", text: "Substitut jQuery pour remplacer le texte dans `&lt;div id=\"logs\">`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;script type="module" src="script-import-jquery.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/><text:line-break/>&amp;lt;div id="logs"&amp;gt;&amp;lt;/div&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* le navigateur ne peut pas savoir où se trouve la dépendance demandée&amp;#160;;,* rien ne garantit que jquery expose son code en tant que module ECMAScript 2015&amp;#160;;,* on n&amp;#8217;a certainement pas envie d&amp;#8217;exposer publiquement le répertoire node_modules.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* portage de la fonction require() et inclusion du code des modules sous-jacents&amp;#160;;,* suppression de code conditionnel&amp;#160;;,* remplacement d&amp;#8217;API spécifiques à Node par des polyfills pour le web&amp;#160;;,* extraction de CSS&amp;#160;;,* etc.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/browserify,* github.com/substack/browserify-handbook<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run browserify -- \<text:line-break/>  -t babelify \<text:line-break/>  -e examples/import/script-import-jquery.js \<text:line-break/>  -o examples/import/script-import-jquery-browserify.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. -t babelify indique d&amp;#8217;utiliser une intégration babel (un transform) pour transformer la syntaxe ECMAScript 2015&amp;#160;;,1. -e &amp;#8230;&amp;#8203; indique le script d&amp;#8217;entrée à transformer&amp;#160;;,1. -o &amp;#8230;&amp;#8203; indique où stocker le script transformé.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;script src="script-import-jquery-browserify.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/><text:line-break/>&amp;lt;div id="logs"&amp;gt;&amp;lt;/div&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Récapitulatif</text:h><text:p>En résumé, nous avons besoin de nous baser sur deux ou trois outils pour écrire un code modulaire et compatible avec n&amp;#8217;importe quel type de syntaxe&amp;#160;:</text:p><text:p>Ceux-ci ont l&amp;#8217;avantage d&amp;#8217;être faciles à prendre en main, modulaires et évolutifs.<text:line-break/>Nous pourrons aussi nous tourner vers d&amp;#8217;autres outils de transformation de code pour explorer d&amp;#8217;autres horizons&amp;#160;– et il en existe énormément&amp;#160;: webpack, rollup, broccoli, etc.</text:p><text:p><text:line-break/>* babel pour transformer la syntaxe&amp;#160;;,* des polyfills pour harmoniser les fonctionnalités&amp;#160;;,* browserify pour l&amp;#8217;intégration avec les modules npm.<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conception modulaire</text:h><text:p>Un autre paradigme change avec la mise à disposition des modules et de l&amp;#8217;outillage à disposition&amp;#160;: le code que l&amp;#8217;on écrit dépend surtout d&amp;#8217;ECMAScript et de l&amp;#8217;environnement dans lequel on l&amp;#8217;exécute, à savoir Node ou un navigateur web.</text:p><text:p>La section suivante s&amp;#8217;intéresse à l&amp;#8217;évolution de l&amp;#8217;écriture du code, autrefois dirigée par la structure du document HTML vers un monde de fonctions consommant des données, transformées pour un type d&amp;#8217;affichage, que ce soit HTML ou autre.</text:p><text:p>Nous illustrerons cette évolution au travers d&amp;#8217;un exemple relativement simple&amp;#160;: une balise HTML affichant l&amp;#8217;heure dont nous actualisons le contenu toutes les secondes.</text:p><text:p>Les exemples suivants se basent sur l&amp;#8217;utilisation de la librairie jQuery.<text:line-break/>Elle facilite la manipulation du DOM tout en gérant les incompatibilités des différents navigateurs web.<text:line-break/>Son utilisation est devenue moins dominante du fait d&amp;#8217;une nette amélioration de la qualité de ces derniers.</text:p><text:h text:outline-level="3">Le syndrome du plugin jQuery</text:h><text:p>Ce que j&amp;#8217;appelle le "syndrome du plugin jQuery", c&amp;#8217;est une combinaison des éléments suivants&amp;#160;:</text:p><text:p>Voici un exemple de document HTML fragile et mélangeant tous les concepts en même temps.<text:line-break/>Il est parfaitement valide mais illustre un ensemble de pratiques courantes que nous allons chercher à désapprendre.</text:p><text:p>Maintenant que la structure HTML est définie, nous devons désormais écrire le code affichant l&amp;#8217;heure dans un élément HTML toutes les secondes&amp;#160;:</text:p><text:p>Certains motifs illustrés dans la section Importer des modules refont surface&amp;#160;:</text:p><text:p>La faute n&amp;#8217;est pas vraiment celle de jQuery mais plutôt la nôtre&amp;#160;— enfin, la mienne .<text:line-break/>Nous avons mélangé règles de fonctionnement (contenu de balise, classe CSS à ajouter/enlever) et données (date courante, parité des secondes, événement de mise à jour setInterval).</text:p><text:p><text:line-break/>* création de code métier inutilisable en dehors de jQuery&amp;#160;;,* mélange de la présentation des données et de l&amp;#8217;organisation du code métier&amp;#160;;,* un code aveugle car éloigné de la structure HTML nécessaire à son fonctionnement&amp;#160;;,* fragilité du code en cas de changement de la structure HTML associée&amp;#160;;,* en général, un code difficilement testable&amp;#160;– difficile de ne pas aboutir à une interface boguée.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>  &amp;lt;link rel="stylesheet" type="text/css" href="styles.css"&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;time datetime="" data-interval="1000"&amp;gt;---&amp;lt;/time&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;script src="../../node_modules/jquery/dist/jquery.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>  &amp;lt;script src="jquery-plugin.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>/* global jQuery */<text:line-break/><text:line-break/>($ =&amp;gt; {<text:line-break/>  $.fn.displaySeconds = function displaySeconds() {<text:line-break/>    this.each((i, dateElement) =&amp;gt; {<text:line-break/>      setInterval(() =&amp;gt; {                  1<text:line-break/>        const now = new Date();            2<text:line-break/>        const seconds = now.getSeconds();<text:line-break/><text:line-break/>        $(dateElement)                     3<text:line-break/>          .removeClass(seconds % 2 ? 'pair': 'impair')<text:line-break/>          .addClass(seconds % 2 ? 'impair': 'pair')<text:line-break/>          .attr('datetime', now.toISOString())<text:line-break/>          .text(now.toLocaleTimeString());<text:line-break/>      }, $(dateElement).data('interval')); 4<text:line-break/>    });<text:line-break/><text:line-break/>    return this;<text:line-break/>  };<text:line-break/><text:line-break/>  $(document).ready(() =&amp;gt; {      5<text:line-break/>    $('time').displaySeconds();  6<text:line-break/>  });<text:line-break/>})(jQuery);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@36636 {list_context: "colist", text: "Ce bloc de code est exécuté toutes les secondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36646 {list_context: "colist", text: "La donnée de _temps_ est obtenue chaque seconde par notre _plugin jQuery_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36656 {list_context: "colist", text: "Certaines décisions métier sont mélangées avec l'affichage de la donnée _temps_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36666 {list_context: "colist", text: "L'intervalle est déterminé par la _valeur de l'attribut \"data-interval\"_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36676 {list_context: "colist", text: "Ce bloc de code est exécuté dès que le document HTML est prêt{nbsp}— toute sa structure HTML est disponible.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36686 {list_context: "colist", text: "Le _plugin jQuery_ est appliqué à toutes les occurrences de `&lt;time>` dans lequel le _plugin_ est exécuté.", blocks: 0}><text:line-break/><text:line-break/>* variables globales&amp;#160;: que faire si jQuery n&amp;#8217;existe pas&amp;#160;?,* connaissance implicite du document&amp;#160;: que faire si une personne tierce remplace la balise &amp;lt;time&amp;gt; par une autre balise&amp;#160;?,* code JavaScript piloté par le document&amp;#160;: que faire si une personne tierce exprime l&amp;#8217;intervalle en secondes et non en millisecondes&amp;#160;?<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Vers une approche jQuery composite</text:h><text:p>Nous allons maintenant reprendre les concepts appris précédemment et conserver le même outil, à savoir jQuery.<text:line-break/>Certains outils encouragent de bons motifs de conception et donnent la sensation de résoudre des problèmes.<text:line-break/>Apprendre ces motifs et à capitaliser sur les outils que nous connaissons déjà peuvent nous emmener tout aussi loin.</text:p><text:p>Le changement majeur réside dans la réorganisation du code applicatif&amp;#160;:</text:p><text:p>Le code a été divisé en deux sections distinctes&amp;#160;:</text:p><text:p>Nous n&amp;#8217;avons pas réellement besoin de savoir comment fonctionne le minuteur à ce niveau&amp;#160;– nous avons juste besoin de pouvoir compter sur les données qu&amp;#8217;il nous fournit.</text:p><text:p>Pour un résultat identique, nous avons désormais séparé notre code en trois domaines distincts&amp;#160;: le minuteur, l&amp;#8217;intégration du minuteur, la représentation du minuteur sous forme HTML.<text:line-break/>Cerise sur le gâteau, cette distinction se constate visuellement, au premier coup d&amp;#8217;œil.</text:p><text:p>Tout n&amp;#8217;est pas parfait, car nous sommes encore liés à la structure du document HTML.</text:p><text:p><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>  &amp;lt;link rel="stylesheet" type="text/css" href="styles.css"&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;time datetime=""&amp;gt;---&amp;lt;/time&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;script src="jquery-app-browserify.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import $ from 'jquery';<text:line-break/>import timerFn from './timer.js';                              4<text:line-break/><text:line-break/>const displaySeconds = (tickData, dateElement) =&amp;gt; {            5<text:line-break/>  const {className, now} = tickData;<text:line-break/><text:line-break/>  $(dateElement)                                               6<text:line-break/>    .attr('class', className)<text:line-break/>    .attr('datetime', now.toISOString())<text:line-break/>    .text(now.toLocaleTimeString());<text:line-break/>};<text:line-break/><text:line-break/>$(document).ready(() =&amp;gt; {<text:line-break/>  const dateElements = $('time').get();                        1<text:line-break/>  const onTick = tickData =&amp;gt; {<text:line-break/>    dateElements.forEach(el =&amp;gt; displaySeconds(tickData, el));  2<text:line-break/>  };<text:line-break/><text:line-break/>  timerFn({ interval: 1000, onTick });                         3<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@36818 {list_context: "colist", text: "Nous sélectionnons les éléments de la page à actualiser chaque seconde.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36828 {list_context: "colist", text: "Nous définissons quoi faire avec les données transmises chaque seconde.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36838 {list_context: "colist", text: "Nous démarrons un minuteur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36848 {list_context: "colist", text: "Le minuteur est une fonction externe, dont le comportement n'est pas régi par _jQuery_ ou une autre librairie.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36858 {list_context: "colist", text: "Cette fonction est responsable de l'affichage de _données_ dans un _élément HTML_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36868 {list_context: "colist", text: "Cette fois-ci, nous nous contentons de seulement mettre à jour attributs et contenus{nbsp}– la logique métier a été déplacée dans le module `timer.js`.", blocks: 0}><text:line-break/><text:line-break/>1. celui qui décrit la réaction à une donnée&amp;#160;;,1. celui qui intègre le minuteur avec les éléments du DOM.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const tick = () =&amp;gt; {              1<text:line-break/>  const now = new Date;<text:line-break/><text:line-break/>  return {                        2<text:line-break/>    now,<text:line-break/>    className: now.getSeconds() % 2 ? 'impair': 'pair'<text:line-break/>  }<text:line-break/>};<text:line-break/><text:line-break/>module.exports = function timer ({ onTick, interval }) {  3<text:line-break/>  setInterval(() =&amp;gt; onTick(tick()), interval);            4<text:line-break/><text:line-break/>  return tick();                  5<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@36940 {list_context: "colist", text: "Cette fonction (privée) est responsable de décrire le _temps présent_ sous forme d'une *structure de données*.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36950 {list_context: "colist", text: "Cette _structure de données_ pourra retourner de nouvelles clés/valeurs sans remettre en cause le fonctionnement du code y ayant recours.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36960 {list_context: "colist", text: "Le paramètre `onTick` est une fonction passée en argument qui sera appelée à chaque nouvel intervalle de temps.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36970 {list_context: "colist", text: "La responsabilité de `timer` est de communiquer une nouvelle _structure de données_ à un intervalle de temps donné.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@36980 {list_context: "colist", text: "On retourne immédiatement une structure de données par commodité et de manière synchrone.", blocks: 0}><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Partager le code métier avec Node</text:h><text:p>Cette séparation de principes (separation of concerns) va au-delà du plaisir de l&amp;#8217;esthète.<text:line-break/>Nous venons sans le savoir de créer du code ECMAScript universel.</text:p><text:p>Pourquoi universel&amp;#160;?<text:line-break/>Parce que nous pouvons tout aussi bien l&amp;#8217;inclure et l&amp;#8217;exécuter dans Node que dans un navigateur web&amp;#160;:</text:p><text:p>L&amp;#8217;exécution du script node-timer.js afficherait quelque chose du genre dans votre terminal&amp;#160;:</text:p><text:p>Chaque seconde, la fonction console.log est appelée et affiche la structure de données de notre minuteur dans la sortie standard du terminal.</text:p><text:p>Nous pourrions dès à présent utiliser le minuteur dans d&amp;#8217;autres applications, côté client, côté serveur et pourquoi pas un jour, le publier sur le registre npm.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>const timerFn = require('./timer.js');<text:line-break/><text:line-break/>timerFn({ interval: 1000, onTick: console.log });<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node examples/modules/node-timer.js<text:line-break/>{ now: 2017-02-17T11:07:29.752Z, className: 'impair' }<text:line-break/>{ now: 2017-02-17T11:07:30.762Z, className: 'pair' }<text:line-break/>{ now: 2017-02-17T11:07:31.768Z, className: 'impair' }<text:line-break/>{ now: 2017-02-17T11:07:32.770Z, className: 'pair' }<text:line-break/>{ now: 2017-02-17T11:07:33.775Z, className: 'impair' }<text:line-break/>{ now: 2017-02-17T11:07:34.779Z, className: 'pair' }<text:line-break/>^C<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Séparation du fond et de la forme : données, rendu et interactions</text:h><text:p>Les praticien·ne·s de l&amp;#8217;intégration web nous le dirons souvent&amp;#160;: il faut séparer le fond de la forme.<text:line-break/>Il en est de même dans notre code&amp;#160;– et pas que pour le développement front-end.</text:p><text:p>Un code maintenable n&amp;#8217;a pas besoin d&amp;#8217;être complexe.<text:line-break/>Un code maintenable a surtout besoin de bien isoler ses périmètres d&amp;#8217;intervention.</text:p><text:p>Les exemples précédents nous ont permis de déceler trois périmètres phares&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* données&amp;#160;: des structures prédictibles, obtenues ou modifiées&amp;#160;;,* rendu&amp;#160;: la représentation des données en contexte, que ce soit une page HTML, un terminal ou un fichier CSV&amp;#160;;,* interactions&amp;#160;: des événements déclenchés par les utilisateurs, par des facteurs externes ou des règles métier&amp;#160;– ils impactent les données et leur représentation.<text:line-break/></text:p><text:h text:outline-level="3">Rapprocher données, rendu et interactions avec React</text:h><text:p>React a atteint un pic de popularité certain en 2015 et 2016.<text:line-break/>Pas seulement parce qu&amp;#8217;il s&amp;#8217;agit d&amp;#8217;un outil bien conçu mais justement parce qu&amp;#8217;il encourage cette pratique de la représentation des données.</text:p><text:p>Les exemples suivants se basent sur la librairie React.<text:line-break/>Sa documentation offre de bons exemples pour se familiariser avec son utilisation.</text:p><text:p>Notre code HTML n&amp;#8217;est qu&amp;#8217;un résultat exposant des surfaces d&amp;#8217;interaction.<text:line-break/>Notre code se structure en composants.<text:line-break/>Un composant est responsable de deux choses&amp;#160;: la représentation de données et la réaction à des événements.</text:p><text:p>Cela se traduira par un changement de taille&amp;#160;: l&amp;#8217;exemple que nous avons fait évoluer ne fait plus mention de balise &amp;lt;time&amp;gt; mais expose une balise dédiée à contenir notre composant minuteur&amp;#160;:</text:p><text:p>Notre code applicatif est réduit à son plus strict minimum&amp;#160;:</text:p><text:p>Cela ressemble fortement au contenu de nos précédentes invocations de $(document).ready() mais sans avoir à se soucier du fonctionnement interne du minuteur.</text:p><text:p>La représentation et le fonctionnement du minuteur sont désormais regroupés dans un seul composant&amp;#160;:</text:p><text:p>React introduit quatre concepts au sein des composants&amp;#160;:</text:p><text:p>React détermine les opérations à effectuer dans le document HTML en fonction de la lourdeur des opérations&amp;#160;: (re)création complète de &amp;lt;time&amp;gt; dans le nœud parent, simple mise à jour d&amp;#8217;un ou plusieurs attributs ou encore déplacement du composant ailleurs dans le document HTML, etc.</text:p><text:p>L&amp;#8217;intelligence d&amp;#8217;une librairie comme React est d&amp;#8217;encourager à décrire les données et leur rendu pour se charger des opérations d&amp;#8217;écriture dans le DOM.<text:line-break/>Cela permet de créer des composants faciles à isoler, à réutiliser et à tester.</text:p><text:p>Cette approche nous a permis de réutiliser notre minuteur simplement en adaptant son utilisation.<text:line-break/>React nous permet de diriger l&amp;#8217;affichage du document plutôt que d&amp;#8217;en dépendre.</text:p><text:p>Cette extension pour le navigateur Chrome détaille l&amp;#8217;arborescence des composants montés dans le document HTML ainsi qu&amp;#8217;une vue de leurs propriétés respectives.</text:p><text:p><text:line-break/><text:line-break/>* facebook.github.io/react/,* facebook.github.io/react/docs/thinking-in-react.html<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>  &amp;lt;link rel="stylesheet" type="text/css" href="styles.css"&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;script src="react-app-browserify.js"&amp;gt;&amp;lt;/script&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import { createElement } from 'react';<text:line-break/>import ReactDOM from 'react-dom';<text:line-break/>import DateInterval from './date-interval.jsx';<text:line-break/><text:line-break/>ReactDOM.render(                                  1<text:line-break/>  createElement(DateInterval, {interval: 1000}),  2<text:line-break/>  document.querySelector('#app')                  3<text:line-break/>);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37240 {list_context: "colist", text: "Méthode responsable du rendu HTML de notre composant `TimeInterval` dans l'élément `&lt;div id=\"app\">`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37250 {list_context: "colist", text: "Création de notre composant minuteur avec un intervalle de mise à jour de 1000 millisecondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37260 {list_context: "colist", text: "Indication que le rendu du composant sera effectué _dans_ l'élément `&lt;div id=\"app\">`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import React, { Component } from 'react';<text:line-break/>import timerFn from './timer.js';<text:line-break/><text:line-break/>export default class DateInterval extends Component {        1<text:line-break/>  constructor(props) {                                       2<text:line-break/>    super(props);<text:line-break/><text:line-break/>    const {interval} = props;<text:line-break/>    this.onTick = this.onTick.bind(this);<text:line-break/><text:line-break/>    this.state = {<text:line-break/>      tickData: timerFn({ interval, onTick: this.onTick })   3<text:line-break/>    };<text:line-break/>  }<text:line-break/><text:line-break/>  onTick (tickData) {<text:line-break/>    this.setState({ tickData });                   4<text:line-break/>  }<text:line-break/><text:line-break/>  render() {                                       5<text:line-break/>    const {className, now} = this.state.tickData;  6<text:line-break/><text:line-break/>    return (&amp;lt;time className={className} dateTime={now.toISOString()}&amp;gt;<text:line-break/>      {now.toLocaleTimeString()}<text:line-break/>    &amp;lt;/time&amp;gt;);<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37312 {list_context: "colist", text: "Nous exportons un composant _React_ grâce à l'opérateur _ECMAScript 2015_ `extends`{nbsp}– cf. la &lt;&lt;../chapter-03/index.adoc#primitive-class,section Class du Chapitre 3>>.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37322 {list_context: "colist", text: "Le `constructor` est exécuté quand le composant est rendu dans le document.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37332 {list_context: "colist", text: "La propriété `interval` nous est fournie dans `react-app.js` et nous stockons la _structure de donnée_ retournée par le minuteur tout en déclenchant son actualisation toutes les 1000 millisecondes.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37342 {list_context: "colist", text: "À chaque intervalle, nous mettons à jour la valeur `tickData` de l'état interne du composant (`this.state`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37352 {list_context: "colist", text: "La méthode `render()` est exécutée quand le composant est inséré dans un document pour la première fois et dès que l'état interne (`this.state`) change.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37362 {list_context: "colist", text: "Nous déstructurons la valeur connue de `tickData` pour effectuer une opération qui nous rappelle les différents appels à `.attr('class')` et `.text()` de _jQuery_.", blocks: 0}><text:line-break/><text:line-break/>* un cycle de vie basé sur des propriétés (props) et un état interne (state)&amp;#160;;,* des propriétés immuables pour le paramétrage initial&amp;#160;;,* un état interne mutable pour contenir les changements et demander une actualisation de leur représentation dans le document.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi<text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* api.jquery.com/,* learn.jquery.com/using-jquery-core/<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Des requêtes AJAX au temps-réel</text:h><text:p>Les technologies web offrent un panel de fonctionnalités créatives et versatiles.<text:line-break/>Le boom du Web 2.0 a coïncidé avec la redécouverte de XMLHttpRequest, une API initialement créée par Microsoft pour transférer des données entre client et serveur, de manière non-bloquante.<text:line-break/>Cette fonctionnalité a permis de basculer vers un monde de pages dynamiques et rapides à charger.<text:line-break/>Des applications web comme Google Maps, Gmail ou la recherche instantanée de Google ont parachevé la popularisation de cette technique.</text:p><text:p>Toutefois son API est peu intuitive et est unidirectionnelle, dirigée du client vers le serveur.<text:line-break/>Le terme XMLHttpRequest est parfois nommé AJAX ou xhr.</text:p><text:p>Un même exemple côté client sera développé et successivement adapté aux technologies fetch(), EventSource puis WebSocket.<text:line-break/>Il nous permettra d&amp;#8217;en faire émerger les principes, leurs cas d&amp;#8217;usage ainsi que leur possible intégration avec Node.<text:line-break/>L&amp;#8217;implémentation côté serveur est basée sur un serveur Express.js dont l&amp;#8217;usage est expliqué au chapitre 7.</text:p><text:p>fetch(), EventSource et WebSocket reposent sur le protocole HTTP/1 et ses extensions.<text:line-break/>Il est important de comprendre que leur contrepartie "côté serveur" existe aussi dans d&amp;#8217;autres langages et environnements comme Ruby, Python et PHP.</text:p><text:p>Il se trouve que la nature asynchrone même de Node rend cette intégration relativement aisée et triviale, aussi et en grande partie grâce à l&amp;#8217;écosystème npm.</text:p><text:h text:outline-level="3">Échange ponctuel de données avec fetch()</text:h><text:p>fetch() offre une interface très simple pour appeler une ressource HTTP.<text:line-break/>Le résultat est retourné sous forme de promesse (voir la section Promise du Chapitre 3).<text:line-break/>Cette fonction sert aussi bien à obtenir des ressources avec des requêtes de type GET et HEAD qu&amp;#8217;à en créer et modifier avec des requêtes de type POST, PUT, DELETE et PATCH.</text:p><text:p>L&amp;#8217;exemple associé est accessible sur localhost:4000/examples/io/fetch.html.<text:line-break/>Nous pouvons vérifier la compatibilité navigateur de fetch() sur caniuse.com#feat=fetch.</text:p><text:p>Le déroulé d&amp;#8217;exécution d&amp;#8217;un appel à fetch() est le suivant&amp;#160;:</text:p><text:p>Plusieurs décodeurs de réponse sont fournis nativement&amp;#160;: texte (response.text()), JSON (response.json()), ArrayBuffer (response.arrayBuffer()), Blob (response.blob()) et FormData (response.formData()).</text:p><text:p>L&amp;#8217;implémentation d&amp;#8217;une ressource HTTP côté serveur s&amp;#8217;effectue simplement en retournant une réponse lors d&amp;#8217;une requête HTTP&amp;#160;:</text:p><text:p>Le guide communautaire MDN met à disposition une dizaine d&amp;#8217;exemples pour illustrer différents cas d&amp;#8217;utilisation de fetch().</text:p><text:p>En résumé, fetch() est idéal pour des demandes ponctuelles de données, du client vers le serveur.<text:line-break/>Le module npm node-fetch (npmjs.com/node-fetch) est une implémentation de fetch() pour Node tandis que whatwg-fetch (npmjs.com/whatwg-fetch) s&amp;#8217;adresse uniquement à polyfiller les navigateurs web.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>1. construction de la requête (URL ou objet Request, options)&amp;#160;;,1. réception des entêtes de la réponse (objet Response)&amp;#160;;,1. décodage de la réponse.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const userList = document.querySelector('#user-list');<text:line-break/><text:line-break/>setInterval(() =&amp;gt; {<text:line-break/>  fetch('/new-users')                    1<text:line-break/>    .then(response =&amp;gt; response.text())   2<text:line-break/>    .then(data =&amp;gt; {                      3<text:line-break/>      const li = document.createElement('li');<text:line-break/>      li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;<text:line-break/><text:line-break/>      userList.prepend(li);<text:line-break/>    })<text:line-break/>}, 2000);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37586 {list_context: "colist", text: "Exécution de la requête HTTP _GET_ vers `/new-users` depuis le navigateur web courant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37596 {list_context: "colist", text: "Décodage progressif de la réponse.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37606 {list_context: "colist", text: "Une fois le décodage terminé, le résultat de la requête HTTP est mis à disposition{nbsp}– ici, sous forme de chaîne de caractères.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const chance = require('chance').Chance();<text:line-break/><text:line-break/>module.exports = (app) =&amp;gt; {<text:line-break/>  app.get('/new-users', (req, res) =&amp;gt; {<text:line-break/>    res.send(chance.name());<text:line-break/>  });<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* github.com/mdn/fetch-examples<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Approche unidirectionnelle avec EventSource</text:h><text:p>EventSource est un mécanisme moins connu que fetch() ou WebSocket mais tire ses origines de la technologie Comet.<text:line-break/>On peut l&amp;#8217;assimiler à une inversion de fetch()&amp;#160;: le client appelle une ressource serveur, maintient une connexion de longue durée et attend un ou plusieurs messages dudit serveur.</text:p><text:p>Chaque connexion est ouverte en faisant appel à la construction d&amp;#8217;un objet EventSource.<text:line-break/>Cet objet émet alors plusieurs types d&amp;#8217;événements en fonction des actions&amp;#160;:</text:p><text:p>Ce modèle de connexion permet tout aussi bien d&amp;#8217;avoir un canal de données unique avec chaque utilisateur ou encore d&amp;#8217;émettre les mêmes données en temps réel à destination de tous les usagers.</text:p><text:p>L’exemple associé est accessible sur localhost:4000/examples/io/eventsource.html.<text:line-break/>Nous pouvons vérifier la compatibilité navigateur de EventSource sur caniuse.com#feat=eventsource.</text:p><text:p>L&amp;#8217;implémentation d&amp;#8217;EventSource demande un peu d&amp;#8217;efforts côté serveur mais ne nécessite pas de framework particulier.<text:line-break/>La complexité réside dans le maintien d&amp;#8217;une transmission de données dédiée à chaque client ainsi qu&amp;#8217;à la libération de la connexion lorsque le client se déconnecte.</text:p><text:p>Le serveur est responsable de la gestion des connexions demandées par les différents clients.</text:p><text:p>En résumé, EventSource est idéal pour maintenir une connexion avec le serveur et souscrire à des mises à jour en continu.<text:line-break/>Chaque connexion EventSource devrait concerner qu&amp;#8217;un seul et même type d&amp;#8217;événement.</text:p><text:p><text:line-break/><text:line-break/>* open&amp;#160;: lorsque le client a effectué une connexion au serveur&amp;#160;;,* message&amp;#160;: lorsque le serveur émet des données à destination du client&amp;#160;;,* close&amp;#160;: lorsque la connexion est fermée par le serveur&amp;#160;;,* error&amp;#160;: lorsque la connexion est accidentellement interrompue.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const connection = new EventSource('/new-users');      1<text:line-break/>const userList = document.querySelector('#user-list');<text:line-break/><text:line-break/>connection.addEventListener('message', ({data}) =&amp;gt; {   2<text:line-break/>  const li = document.createElement('li');<text:line-break/>  li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;<text:line-break/><text:line-break/>  userList.prepend(li);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37780 {list_context: "colist", text: "Nous ouvrons une nouvelle connexion _Event Source_ de longue durée depuis le navigateur web courant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37790 {list_context: "colist", text: "Fonction appelée à chaque fois que le serveur transmet un message au client.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const WebSocket = require('faye-websocket');<text:line-break/>const {EventSource} = WebSocket;<text:line-break/><text:line-break/>const chance = require('chance').Chance();<text:line-break/><text:line-break/>module.exports = (app) =&amp;gt; {<text:line-break/>  app.get('/new-users', (req, res, next) =&amp;gt; {<text:line-break/>    if (!EventSource.isEventSource(req)) {      1<text:line-break/>      return next();<text:line-break/>    }<text:line-break/><text:line-break/>    let es = new EventSource(req, res);         2<text:line-break/>    const loop = setInterval(() =&amp;gt; {<text:line-break/>      es.send(chance.name());                   3<text:line-break/>    }, 2000);<text:line-break/><text:line-break/>    es.on('close', () =&amp;gt; {<text:line-break/>      clearInterval(loop);<text:line-break/>      es = null;<text:line-break/>      next();<text:line-break/>    });<text:line-break/>  });<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37848 {list_context: "colist", text: "Une connexion _EventSource_ s'effectue (presque) comme une requête HTTP classique{nbsp}– il convient de vérifier qu'elle s'annonce en tant que telle.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37858 {list_context: "colist", text: "Création d'un canal unique entre le client et le serveur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37868 {list_context: "colist", text: "Chaque appel à `es.send` enverra un nouveau message au client.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur EventSource.<text:line-break/>developer.mozilla.org/docs/fr/Server-sent_events<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Échanges en temps-réel avec WebSocket</text:h><text:p>WebSocket est une technologie web favorisant les échanges bidirectionnels entre client et serveur.</text:p><text:p>À l&amp;#8217;inverse du protocole HTTP/1, tout message envoyé par le client ou par le serveur n&amp;#8217;appelle pas à une réponse de la part du receveur.<text:line-break/>Cet élément ainsi que le maintien d&amp;#8217;une connexion permanente expliquent la rapidité du protocole en comparaison avec le modèle requête/réponse.</text:p><text:p>L’exemple associé est accessible sur localhost:4000/examples/io/websocket.html.<text:line-break/>Nous pouvons vérifier la compatibilité navigateur de WebSocket sur caniuse.com#feat=websocket.</text:p><text:p>L&amp;#8217;implémentation côté serveur est légèrement plus compliquée qu&amp;#8217;avec EventSource pour la simple et bonne raison que Websocket est une surcouche du protocole ws.<text:line-break/>HTTP n&amp;#8217;est utilisé que comme canal de communication pour établir un lien avec le serveur ws.<text:line-break/>HTTP sert de tunnel tandis que le dialogue entre client et serveur s&amp;#8217;effectue dans un dialecte compréhensible uniquement de clients WebSocket.</text:p><text:p>Il est nécessaire d&amp;#8217;utiliser un module npm WebSocket comme faye (npmjs.com/faye-websocket) ou socket.io (npmjs.com/socket.io) à moins de vouloir réimplémenter le protocole soi-même.<text:line-break/>Le motif de conception est similaire à EventSource, à la différence près qu&amp;#8217;il faut aussi écouter les messages transmis par le client.</text:p><text:p>Voici ce qui se passe lorsqu&amp;#8217;un client WebSocket se connecte sur ws://example.com&amp;#160;:</text:p><text:p>Par extension et de par la nature même du protocole ws, il serait tout à fait possible que et clients et serveur soient des agents Node.<text:line-break/>Autrement dit, un client WebSocket n&amp;#8217;a pas nécessairement à être un navigateur web.</text:p><text:p>Là aussi, le serveur est responsable de la gestion des connexions demandées par les différents clients.</text:p><text:p>En résumé, WebSocket est idéal pour maintenir une connexion en temps-réel et pour relayer plusieurs messages à l&amp;#8217;initiative du serveur et de tout client connecté&amp;#160;– qu&amp;#8217;il s&amp;#8217;agisse d&amp;#8217;un navigateur web ou d&amp;#8217;un agent Node.<text:line-break/>Chaque connexion WebSocket peut encapsuler plusieurs types de messages.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>let ws = new WebSocket('ws://localhost:4000/users');    1<text:line-break/>const userList = document.querySelector('#user-list');<text:line-break/>let interval;<text:line-break/><text:line-break/>ws.addEventListener('open', () =&amp;gt; {<text:line-break/>  interval = setInterval(() =&amp;gt; {<text:line-break/>    ws.send(JSON.stringify({ action: 'getName' }));     2<text:line-break/>  }, 2000);<text:line-break/>});<text:line-break/><text:line-break/>ws.addEventListener('message', ({data}) =&amp;gt; {            3<text:line-break/>  const li = document.createElement('li');<text:line-break/>  li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;<text:line-break/><text:line-break/>  userList.prepend(li);<text:line-break/>});<text:line-break/><text:line-break/>ws.addEventListener('close', () =&amp;gt; {<text:line-break/>  ws = null;<text:line-break/>  clearInterval(interval);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@37950 {list_context: "colist", text: "Nous ouvrons une connexion _WebSocket_ depuis le navigateur web courant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37960 {list_context: "colist", text: "Émission d'un message à destination du serveur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@37970 {list_context: "colist", text: "Réaction à un message émis par le serveur.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. requête HTTP example.com standard contenant les entêtes Upgrade: websocket et Connection: Upgrade&amp;#160;;,1. le serveur HTTP répond avec un statut 101 Switching Protocols&amp;#160;;,1. le serveur WebSocket prend le relais dans le dialogue client/serveur&amp;#160;;,1. client et serveur communiquent désormais via le protocole ws au sein de la connexion HTTP initiale.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const WebSocket = require('faye-websocket');<text:line-break/>const chance = require('chance').Chance();<text:line-break/><text:line-break/>module.exports = (server) =&amp;gt; {<text:line-break/>  server.on('upgrade', (req, socket, body, next) =&amp;gt; {  1<text:line-break/>    if (!WebSocket.isWebSocket(req)) {           2<text:line-break/>      return next();<text:line-break/>    }<text:line-break/><text:line-break/>    let ws = new WebSocket(req, socket, body);   3<text:line-break/><text:line-break/>    ws.on('message', event =&amp;gt; {                  4<text:line-break/>      const data = JSON.parse(event.data);<text:line-break/><text:line-break/>      if (data.action === 'getName') {<text:line-break/>        ws.send(chance.name());                  5<text:line-break/>      }<text:line-break/>    });<text:line-break/><text:line-break/>    ws.on('close', () =&amp;gt; {<text:line-break/>      ws = null;<text:line-break/>    });<text:line-break/>  });<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@38096 {list_context: "colist", text: "Le serveur HTTP vient de répondre avec un statut `101 Switching Protocols` et délègue désormais la responsabilité du dialogue client/serveur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38106 {list_context: "colist", text: "Nous vérifions que le changement de protocole concerne le protocole `ws`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38116 {list_context: "colist", text: "La connexion réseau (`socket`) est transmise au serveur _WebSocket_ pour amorcer le dialogue client/serveur avec le protocole `ws`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38126 {list_context: "colist", text: "Réaction à la réception d'un message client.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38136 {list_context: "colist", text: "Émission d'un message à destination d'un client.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>Rendez-vous sur MDN web docs pour en savoir plus sur WebSockets.<text:line-break/>developer.mozilla.org/docs/fr/WebSockets<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Développer au quotidien</text:h><text:p>Nous avons beaucoup parlé de nouvelles techniques et de modularisation.<text:line-break/>Cela peut sembler rebutant, notamment par l&amp;#8217;introduction d&amp;#8217;outils auxquels nous ne sommes pas encore familiers.</text:p><text:p>L&amp;#8217;écosystème Node fournit énormément d&amp;#8217;outils qui devraient nous faire gagner du temps, en nous aidant à exécuter des actions lorsqu&amp;#8217;un fichier est modifié, en nous aidant à organiser notre travail mais aussi en actualisant automatiquement notre application web au fil du développement (fini les appuis répétés sur la touche ) ou encore en optimisant nos fichiers graphiques.</text:p><text:h text:outline-level="3">Reconstruire en continu avec watchify</text:h><text:p>L&amp;#8217;utilisation de browserify nous apporte le confort de pouvoir inclure des modules npm dans les navigateurs web.<text:line-break/>En revanche, ça nous demande de générer des artéfacts&amp;#160;– des bundles&amp;#160;– à chaque modification pour consolider ces changements.</text:p><text:p>C&amp;#8217;est à ce moment qu&amp;#8217;intervient le module watchify (npmjs.com/watchify).<text:line-break/>Il fonctionne exactement comme browserify mais au lieu de compiler une seule fois, il compilera dès qu&amp;#8217;un changement sera détecté&amp;#160;– où que ce soit dans l&amp;#8217;arbre de dépendances du point d&amp;#8217;entrée (paramètre -e, --entrypoint).</text:p><text:p>La commande suivante compilerait le fichier examples/modules/react-app.js une fois et une seule&amp;#160;:</text:p><text:p>Il suffit de remplacer browserify par watchify&amp;#160;– le programme garde la main et indique chaque nouvelle compilation sur une nouvelle ligne&amp;#160;:</text:p><text:p>watchify utilise un mécanisme dit de compilation incrémentale&amp;#160;: watchify ne recompile pas tout mais uniquement les différences depuis le dernier changement.<text:line-break/>C&amp;#8217;est beaucoup plus rapide et tout aussi efficace.</text:p><text:p>Trois arguments sont utiles à watchify&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/browserify -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/watchify -dv -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js<text:line-break/>1840601 bytes written to examples/modules/react-app-browserify.js (2.58 seconds) at 4:44:28 PM<text:line-break/>352482 bytes written to examples/modules/react-app-browserify.js (0.10 seconds) at 4:45:09 PM<text:line-break/>1840605 bytes written to examples/modules/react-app-browserify.js (0.25 seconds) at 4:45:15 PM<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* -v (--verbose)&amp;#160;: force la création du fichier compilé au lancement de la commande&amp;#160;;,* -o (--outfile)&amp;#160;: spécifie le chemin d&amp;#8217;enregistrement du fichier compilé&amp;#160;– il est impossible d&amp;#8217;utiliser la sortie standard (cf. Chapitre 4)&amp;#160;;,* -d (--debug)&amp;#160;: (lire Source Maps dans ce même chapitre).<text:line-break/></text:p><text:h text:outline-level="3">Changements en temps-réel dans le navigateur</text:h><text:p>Modifier un fichier. Changer de fenêtre. Recharger. Changer de fenêtre. Re-modifier un fichier. Changer de fenêtre. Recharger. Là c&amp;#8217;est bon.<text:line-break/>La quantité d&amp;#8217;outils à disposition et leurs différentes opinions sur notre manière de travailler nous obligent à prendre des postures de travail qui ne vont pas nécessairement dans le sens de la productivité.</text:p><text:p>L&amp;#8217;intégration de Node avec le système d&amp;#8217;exploitation va nous aider à déclencher des actions lorsqu&amp;#8217;un ou plusieurs fichiers sont modifiés.<text:line-break/>Ces modifications peuvent être de notre fait, directement ou par le biais d&amp;#8217;un autre logiciel (un optimiseur d&amp;#8217;images ou la compilation d&amp;#8217;un fichier Sass par exemple).</text:p><text:p>Nous allons explorer deux stratégies d&amp;#8217;actualisation&amp;#160;:</text:p><text:p>browser-sync est un outil formidable de développement pour rafraichir automatiquement une page web si son contenu ou une des ressources associées change.<text:line-break/>Il offre également la possibilité de propager les changements sur plusieurs fenêtres et terminaux&amp;#160;– y compris les clics, scrolls et toute interaction avec des formulaires.</text:p><text:p>browser-sync maintient la position du scroll lors d&amp;#8217;un rechargement de contenu.<text:line-break/>L&amp;#8217;outil se lance soit de manière autonome, soit en proxy entre l&amp;#8217;utilisateur et tout autre serveur web.<text:line-break/>Il ne nécessite pas non plus de plugin ou d&amp;#8217;extension navigateur pour fonctionner, le rendant idéal pour du prototypage, de la recherche utilisateur ou du développement local.</text:p><text:p>L&amp;#8217;exemple suivant illustre l&amp;#8217;intégration de browser-sync avec le serveur web exposant les exemples de ce chapitre (voir le détail dans le fichier server.js)&amp;#160;:</text:p><text:p>La synchronisation peut être activée avec tous les exemples du chapitre en suffixant la commande npm start&amp;#160;:</text:p><text:p>browser-sync est richement documenté et illustré, y compris ses intégrations avec les outils gulp et grunt.</text:p><text:p>browser-sync a beau maintenir la position du scroll, il n&amp;#8217;en reste pas moins que chaque changement remet à zéro l&amp;#8217;espace mémoire de la page.<text:line-break/>C&amp;#8217;est là qu&amp;#8217;entre en jeu le remplacement des modules à chaud.</text:p><text:p>Le remplacement des modules à chaud (Hot Module Replacement ou HMR) est une technique basée sur le remplacement de fonctions ou d&amp;#8217;objets tout en assurant le maintien de leurs variables ou états internes.<text:line-break/>Cette technique a notamment été popularisée par la combinaison de la librairie React et de l&amp;#8217;outil d&amp;#8217;assemblage Webpack.<text:line-break/>Il est toutefois possible de procéder à du remplacement à chaud sans React et sans Webpack.</text:p><text:p>Quatre actions sont effectuées&amp;#160;:</text:p><text:p>Le plugin browserify nommé livereactload est très certainement le plus facile à mettre en place pour remplacer des modules React à la volée.<text:line-break/>Il nécessite une ligne de configuration côté browserify et ne nécessite aucun changement de code côté client.</text:p><text:p>Des aides à l&amp;#8217;installation du module livereactload sont disponibles dans son fichier README.</text:p><text:p>Le remplacement à chaud n&amp;#8217;est possible que lorsque nous sommes dans un état de reconstruction en continu, par exemple avec watchify.</text:p><text:p>Nous pouvons constater les effets du remplacement à chaud avec un des exemples de ce chapitre accessible sur localhost:4000/examples/livereload/react-app-hmr.html.<text:line-break/>La commande npm run watch de ce chapitre démarre un serveur web et reconstruit en continu le fichier ./examples/livereload/react-app-hmr.js&amp;#160;:</text:p><text:p>Qui n&amp;#8217;est autre qu&amp;#8217;un équivalent de&amp;#160;:</text:p><text:p>Dans cet exemple, le transform (-t) modifie le code source à la volée&amp;#160;—<text:line-break/>ici, adapter le code écrit dans une syntaxe compréhensible par la majorité<text:line-break/>des navigateurs web grâce à l&amp;#8217;outil Babel.</text:p><text:p>Le plugin (-p) ne transforme pas le code mais le fonctionnement de<text:line-break/>watchify pour y ajouter des fonctionnalités&amp;#160;— ici, refléter les<text:line-break/>changements du fichier source vers le navigateur en temps réel.</text:p><text:p>Il faudra ensuite modifier l&amp;#8217;un des deux fichiers suivants&amp;#160;– en décommentant les lignes concernées par exemple&amp;#160;– pour constater les changements dans notre navigateur.</text:p><text:p>Chaque instance du composant livereload/button-count.jsx gère un état interne indépendant des autres instances de même type.<text:line-break/>Nous aurions perdu cet état interne en cas d&amp;#8217;utilisation de browser-sync, sans remplacement à chaud&amp;#160;:</text:p><text:p>Deux modules sont à disposition pour respectivement déclarer des modules remplaçables et pour démarrer un serveur de remplacement à chaud minimaliste.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* le rafraichissement automatique du navigateur&amp;#160;;,* le remplacement de modules à chaud (Hot Module Replacement, HMR).<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/browser-sync start --server --port 4000 .<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const browserSync = require('browser-sync');<text:line-break/><text:line-break/>module.exports = (server) =&amp;gt; {             1<text:line-break/>  return port =&amp;gt; {                         2<text:line-break/>    const PUBLIC_PORT = 4000;              3<text:line-break/>    const bs = browserSync.create();<text:line-break/><text:line-break/>    server.listen(port);                   4<text:line-break/><text:line-break/>    bs.init({                              5<text:line-break/>      files: ['./examples'],<text:line-break/>      port: PUBLIC_PORT,<text:line-break/>      open: false,<text:line-break/>      logPrefix: 'nodebook',<text:line-break/>      proxy: {<text:line-break/>        target: `http://localhost:${port}`,6<text:line-break/>        ws: true,<text:line-break/>      }<text:line-break/>    });<text:line-break/>  };<text:line-break/>};<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@38342 {list_context: "colist", text: "On passe un serveur http en argument (obtenu via `http.createServer()` par exemple).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38352 {list_context: "colist", text: "Ce port sera assigné au serveur web mais ne sera pas voué à être public.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38362 {list_context: "colist", text: "Ce port, lui, est celui qui sera public.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38372 {list_context: "colist", text: "Démarrage du serveur web sur le port privé.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38382 {list_context: "colist", text: "Initialisation de _browser-sync_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38392 {list_context: "colist", text: "Interfaçage avec le serveur web créé au point 4.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ nodebook chapter 4<text:line-break/>$ npm start -- --with-sync<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* browsersync.io/,* npmjs.com/browser-sync<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. un serveur de remplacement à chaud est démarré localement&amp;#160;;,1. l&amp;#8217;outil d&amp;#8217;assemblage (browserify, Webpack, etc.) insère du code client permettant d&amp;#8217;établir un lien entre la page web et le serveur de remplacement à chaud&amp;#160;;,1. l&amp;#8217;outil d&amp;#8217;assemblage déclare les fichiers modifiés, transmis par le serveur de remplacement à chaud vers le navigateur web&amp;#160;;,1. le code client remplace les modules et maintient leur état interne.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/livereactload<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ nodebook chapter 4<text:line-break/>$ npm run watch<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ watchify -dv \<text:line-break/>  -t babelify \<text:line-break/>  -p livereactload \<text:line-break/>  -e ./examples/livereload/react-app-hmr.js \<text:line-break/>  -o ./examples/livereload/react-app-hmr-browserify.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import { createElement } from 'react';<text:line-break/>import ReactDOM from 'react-dom';<text:line-break/>import ButtonCount from './button-count.jsx';<text:line-break/><text:line-break/>ReactDOM.render(<text:line-break/>  createElement('div', {}, [<text:line-break/>    createElement(ButtonCount),<text:line-break/>    createElement(ButtonCount),<text:line-break/>    // createElement(ButtonCount),<text:line-break/>  ]),<text:line-break/>  document.querySelector('#app')<text:line-break/>);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import React, { Component } from 'react';<text:line-break/><text:line-break/>export default class ButtonCount extends Component {<text:line-break/>  constructor(props) {<text:line-break/>    super(props);<text:line-break/><text:line-break/>    this.handleClick = this.handleClick.bind(this);<text:line-break/><text:line-break/>    this.state = {<text:line-break/>      clickCount: 0                                           1<text:line-break/>    };<text:line-break/>  }<text:line-break/><text:line-break/>  handleClick () {<text:line-break/>    this.setState({ clickCount: this.state.clickCount + 1 }); 2<text:line-break/>  }<text:line-break/><text:line-break/>  render() {<text:line-break/>    let style = {};<text:line-break/>    // style = {<text:line-break/>    //   fontFamily: 'monospace',<text:line-break/>    //   fontWeight: 'bold',<text:line-break/>    //   textTransform:' uppercase',<text:line-break/>    // };<text:line-break/><text:line-break/>    return (&amp;lt;button style={style} onClick={this.handleClick}&amp;gt;<text:line-break/>      Clics : {this.state.clickCount}<text:line-break/>    &amp;lt;/button&amp;gt;);<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@38616 {list_context: "colist", text: "Initialisation du compteur de clics propre à chaque instance de `ButtonCount`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38626 {list_context: "colist", text: "Incrémentation du compteur de clics en réaction à un clic sur le composant `ButtonCount`.", blocks: 0}><text:line-break/><text:line-break/>* npmjs.com/ud,* npmjs.com/browserify-hmr<text:line-break/></text:p><text:h text:outline-level="3">Modulariser ses feuilles de style avec Sass</text:h><text:p>La modularité et l&amp;#8217;écriture d&amp;#8217;un code isolé facilitent sa réutilisation et préviennent les effets de bord.<text:line-break/>Dans le cas des feuilles de style CSS, cela peut aider à éviter de faire déborder la cascade&amp;#160;– si l&amp;#8217;on peut dire.</text:p><text:p>Avec le langage Sass (sass-lang.com), nous pourrions songer à générer des blocs de code selon des listes (idéal pour des thèmes de couleurs, des rubriques produits, etc.), à concevoir des composants comme des fonctions ou à bénéficier de fonctions de calcul de couleurs ou d&amp;#8217;unités de mesure.</text:p><text:p>Le langage Sass est originaire du monde Ruby mais il a été depuis rendu accessible nativement à l&amp;#8217;écosystème Node par le biais de node-sass (npmjs.com/node-sass)– et par extension, par la librairie C libsass.</text:p><text:p>Je recommande la lecture de cet ouvrage de référence écrit par Kaelig Deloumeau-Prigent aux éditions Eyrolles.<text:line-break/>Il décrit très bien les tenants et aboutissants de Sass ainsi que de bonnes méthodes d&amp;#8217;organisation du code et de maintenabilité au sein d&amp;#8217;une équipe de travail.</text:p><text:p>node-sass offre un outil en ligne de commande pour compiler un fichier Sass, plusieurs fichiers Sass ou encore une arborescence de répertoires contenant des fichiers Sass vers des fichiers CSS compréhensibles par les navigateurs web.</text:p><text:p>La compilation des fichiers s&amp;#8217;effectue très simplement&amp;#160;:</text:p><text:p>La compilation générera le fichier CSS button.css, lisible par tout navigateur web&amp;#160;:</text:p><text:p>Les navigateurs évoluent plus vite que le cycle de vie de nos projets.<text:line-break/>Certaines propriétés CSS sont abritées derrière des préfixes (-moz, -webkit etc.) avant d&amp;#8217;être standardisées.</text:p><text:p>Ces deux modules nous facilitent la vie en préfixant et réécrivant automatiquement les attributs en fonction de nos exigences de compatibilité navigateurs.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* editions-eyrolles.com/Livre/9782212136401<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$sizes: (                             1<text:line-break/>  small: .8,<text:line-break/>  regular: 1,<text:line-break/>  large: 1.2<text:line-break/>);<text:line-break/><text:line-break/>.btn {<text:line-break/>  @each $size, $factor in $sizes {    2<text:line-break/>    &amp;amp;.btn--#{$size} {                 3<text:line-break/>      font-size: $factor * 1em;       4<text:line-break/>    }<text:line-break/>  }<text:line-break/><text:line-break/>  &amp;amp;.btn--icon {                       5<text:line-break/>    svg {<text:line-break/>      height: 16px;<text:line-break/>      width: 16px;<text:line-break/>      margin-right: .5em;<text:line-break/>    }<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@38760 {list_context: "colist", text: "Définition d'une `Map` nommée `$sizes` (ensemble clé/valeur) décrivant des tailles et leur facteur multiplicateur.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38770 {list_context: "colist", text: "Itération et extraction des clés/valeurs de `$sizes`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38780 {list_context: "colist", text: "Interpolation d'une variable pour composer un sélecteur CSS (`.btn--small`, `.btn--regular` etc.).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38790 {list_context: "colist", text: "Calcul de la taille de la police de caractères (`.8em`, `1em` etc.).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@38800 {list_context: "colist", text: "Composition d'un sélecteur de classe à partir du sélecteur courant (`.btn.btn--icon`).", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/node-sass -o ./examples ./examples/buttons.scss<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>.btn.btn--small {<text:line-break/>  font-size: 0.8em; }<text:line-break/><text:line-break/>.btn.btn--regular {<text:line-break/>  font-size: 1em; }<text:line-break/><text:line-break/>.btn.btn--large {<text:line-break/>  font-size: 1.2em; }<text:line-break/><text:line-break/>.btn.btn--icon svg {<text:line-break/>  height: 16px;<text:line-break/>  width: 16px;<text:line-break/>  margin-right: .5em; }<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/autoprefixer,* npmjs.com/postcss<text:line-break/></text:p><text:h text:outline-level="3">Lier composants visuels et feuilles de style</text:h><text:p>Souvenons-nous de la section expliquant le rapprochement entre données, rendu et interactions avec React de ce même chapitre.<text:line-break/>Finalement nous avons presque tout rapproché, exception faite de la présentation avec Sass ou CSS.</text:p><text:p>En suivant la logique de notre approche modulaire, nous pourrions imaginer un transform browserify pour compiler et/ou extraire notre code Sass ou CSS depuis nos composants CommonJS ou ECMAScript 2015.</text:p><text:p>C&amp;#8217;est exactement la proposition du module sassify.<text:line-break/>Il intègre node-sass en tant que transform browserify et le transforme le code à la volée durant la phase de compilation.<text:line-break/>Il se charge lui-même d&amp;#8217;ajouter les styles dans le document HTML ou expose le code CSS compilé via la fonction require().</text:p><text:p>Une saine stratégie serait de charger des CSS de base dans une feuille de style en tête de &amp;lt;head&amp;gt; puis de laisser les composants graphiques injecter leurs feuilles CSS respectives après coup.</text:p><text:p>L&amp;#8217;exemple suivant expose deux composants React, regroupés dans une thématique de composants de boutons HTML.<text:line-break/>Une feuille de style est importée à même le module afin de gérer à un même niveau, présentation, rendu et interactions&amp;#160;:</text:p><text:p>Sans surprise, le module sassify se charge comme la majorité des transform browserify comme vu dans la section Importer des modules npm pour le web dans ce même chapitre&amp;#160;:</text:p><text:p>La commande suivante injectera automatiquement les feuilles de style compilées dans le document HTML lors de son exécution dans un navigateur web&amp;#160;:</text:p><text:p>Une autre philosophie émergente est de continuer à transformer son code Sass ou CSS en styles en ligne, à leur adjoindre un préfixe unique et à les insérer directement dans le code HTML.<text:line-break/>Elle demande moins d&amp;#8217;outillage et s&amp;#8217;applique pleinement à des composants visuels modulaires&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import React from 'react';<text:line-break/>import './buttons.scss';          1<text:line-break/><text:line-break/>const Icon = (props) =&amp;gt; (&amp;lt;svg aria-hidden="true"&amp;gt;<text:line-break/>  &amp;lt;use xlinkHref={'symbols.svg#' + props.id} /&amp;gt;<text:line-break/>&amp;lt;/svg&amp;gt;);<text:line-break/><text:line-break/>export const BaseButton = (props) =&amp;gt; (<text:line-break/>  &amp;lt;button className={'btn btn--' + props.variant}&amp;gt;{props.children}&amp;lt;/button&amp;gt;<text:line-break/>);<text:line-break/><text:line-break/>export const IconButton = (props) =&amp;gt; (<text:line-break/>  &amp;lt;button className="btn btn--icon"&amp;gt;<text:line-break/>    &amp;lt;Icon id={props.icon} /&amp;gt;<text:line-break/>    {props.children}<text:line-break/>  &amp;lt;/button&amp;gt;<text:line-break/>);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@38938 {list_context: "colist", text: "Import d'un fichier _Sass_ qui sera par la suite compilé en CSS par le _transform sassify_.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/browserify \<text:line-break/>  -t sassify \<text:line-break/>  -t babelify \<text:line-break/>  -e ./examples/Buttons.jsx \<text:line-break/>  -o ./examples/Button-browserify.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/browserify \<text:line-break/>  -t [ sassify --auto-inject ] \<text:line-break/>  -t babelify \<text:line-break/>  -e ./examples/Buttons.jsx \<text:line-break/>  -o ./examples/Button-browserify.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/css-modules,* npmjs.com/css-modulesify<text:line-break/></text:p><text:h text:outline-level="3">Optimiser ses ressources graphiques</text:h><text:p>Node est un outil de choix lorsque l&amp;#8217;on souhaite s&amp;#8217;atteler au développement front-end et ce n&amp;#8217;est pas sans raison.<text:line-break/>Outre l&amp;#8217;outillage lié à la réécriture du code&amp;#160;– comme Babel et browserify évoqués ci-avant&amp;#160;– Node regorge de modules npm réduisant les tâches manuelles répétitives et possiblement sujettes à erreur.</text:p><text:p>Nous retrouvons l&amp;#8217;optimisation des ressources graphiques parmi cet ensemble de tâches rébarbatives.<text:line-break/>Quand j&amp;#8217;écris ressources graphiques, j&amp;#8217;entends par là le redimensionnement ou la création de vignettes d&amp;#8217;images, l&amp;#8217;optimisation de leur poids, la fusion de fichiers SVG sous forme de symboles, la création de piles de polices de caractère et même l&amp;#8217;encodage audio/vidéo&amp;#160;– via des bindings avec des logiciels spécialisés comme ffmpeg ou lame.</text:p><text:p>L&amp;#8217;outil en ligne de commande imagemin-cli (npmjs.com/imagemin-cli) est le module de référence pour optimiser les fichiers graphiques.<text:line-break/>Il est basé sur la librairie imagemin (npmjs.com/imagemin) et se chargera de réduire le poids de nos images JPEG, PNG mais aussi GIF (animés et statiques) ainsi que le format vectoriel SVG.</text:p><text:p>Il existe deux types de compression&amp;#160;: avec et sans perte (lossless).<text:line-break/>Elles ont toutes deux des caractéristiques distinctes&amp;#160;:</text:p><text:p>Il vaut mieux privilégier la compression sans perte pour éviter les artéfacts visuels et respecter fidèlement la création d&amp;#8217;origine.</text:p><text:p>Le redimensionnement d&amp;#8217;images est une autre de ces tâches courantes et récurrentes qui tombe rapidement aux oubliettes de par sa gourmandise en temps.<text:line-break/>On voudra par exemple redimensionner des photos depuis des fichiers originaux, générer des vignettes ou encore générer différentes tailles d&amp;#8217;images adaptées aux différentes dispositions d&amp;#8217;un site web responsive.</text:p><text:p>sharp-cli (npmjs.com/sharp-cli) répond exactement à ce cahier des charges.<text:line-break/>Ce module en ligne de commande est basé sur sharp (npmjs.com/sharp), une librairie Node de modification d&amp;#8217;images écrite en ECMAScript et C++.<text:line-break/>sharp nous aidera entre autres à redimensionner, découper, retourner, recentrer, assembler et appliquer des effets graphiques de manière prédictible.</text:p><text:p>La commande précédente illustre une opération de redimensionnement d&amp;#8217;images&amp;#160;:</text:p><text:p>À l&amp;#8217;inverse, la commande précédente illustre la conversion en noir et blanc d&amp;#8217;images ainsi que leur export dans un répertoire différent.</text:p><text:p>L&amp;#8217;interface en ligne de commande de sharp-cli ne permet pas de créer d&amp;#8217;opérations composites (redimensionner et convertir en niveaux de gris par exemple).<text:line-break/>Il faudra recourir à l&amp;#8217;API Node de sharp et chaîner les opérations en s&amp;#8217;aidant des exemples documentés sur sharp.dimens.io/.</text:p><text:p>Le module gm est le module classique de redimensionnement dans l&amp;#8217;écosystème Node.<text:line-break/>Il s&amp;#8217;interface avec le programme GraphicsMagick et ImageMagick&amp;#160;– et nécessite donc leur présence sur le système d&amp;#8217;exploitation.<text:line-break/>Cela rend l&amp;#8217;utilisation de gm légèrement moins triviale que celle de sharp mais la quantité de ressources et la qualité du module en font une bonne alternative à considérer.</text:p><text:p>L&amp;#8217;utilisation d&amp;#8217;un script npm<text:line-break/>(cf. chapitre 5) est idéale pour décrire les différentes actions d&amp;#8217;optimisation.<text:line-break/>Les scripts sont alors à invoquer manuellement, sur un crochet git<text:line-break/>(git hook) ou automatiquement lors du déploiement avec un<text:line-break/>service d&amp;#8217;intégration continue, par exemple.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/imagemin images/* --out-dir images<text:line-break/>8 images minified<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* destructive&amp;#160;: poids réduit au maximum, possibles artéfacts visuels, destruction potentielle de couleurs dans le cas d&amp;#8217;images complexes&amp;#160;;,* sans perte&amp;#160;: poids réduit, les couleurs supprimées ne sont pas perceptibles à l&amp;#8217;œil nu.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/sharp resize 500 \<text:line-break/>  --min \<text:line-break/>  -i images/*.png \<text:line-break/>  --output ./images/thumbs<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>1. d&amp;#8217;une dimension de 500 pixels de largeur&amp;#160;;,1. minimum (donc respecte)&amp;#160;– sans cet attribut les images seraient des carrés de 500 pixels de large et de 500 pixels de haut&amp;#160;;,1. ciblant toutes les images PNG du répertoire images&amp;#160;;,1. puis exportées dans le répertoire images/thumbs.<text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/sharp grayscale \<text:line-break/>  -i images/*.png \<text:line-break/>  --output ./images/square<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/gm,* aheckmann.github.io/gm/<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Tester son code</text:h><text:p>C&amp;#8217;est bien connu que lorsqu&amp;#8217;on produit du code de qualité, écrire des tests est amplement superflu et ne sert qu&amp;#8217;à nous ralentir.</text:p><text:p>La réalité est toute autre et suit un paradigme très simple&amp;#160;: plus il y a de lignes de code, plus il y a de chances de faire des erreurs.<text:line-break/>Cela vaut aussi bien pour du HTML que du CSS ou encore de l&amp;#8217;ECMAScript.</text:p><text:p>Cette ultime et dernière section de ce chapitre nous aidera à comprendre quoi et comment tester pour diminuer le coût de maintenance de nos applications.</text:p><text:h text:outline-level="3">Que tester ?</text:h><text:p>L&amp;#8217;idée d&amp;#8217;écrire des tests pour améliorer la qualité de son code est attrayante mais quand on en sait pas quoi tester et ni à qui demander pour se lancer, il est évident qu&amp;#8217;on ne va pas s&amp;#8217;y mettre pour s&amp;#8217;assurer que 1+1 valent bien 3 2.</text:p><text:p>Je pense à ces trois règles lorsque je souhaite écrire des tests&amp;#160;:</text:p><text:p>La syntaxe de modules ECMAScript 2015 est idéale pour visualiser les segments de code qui sont exportés par nos différents fichiers.<text:line-break/>Élément marquant&amp;#160;: ce code est simple et devrait arriver à compter le nombre de mots mais nous n&amp;#8217;avons aucune idée s&amp;#8217;il fera correctement le travail sans l&amp;#8217;exécuter dans une application.</text:p><text:p>Une branche est une portion de code qui s&amp;#8217;exécute de manière ponctuelle.<text:line-break/>Ces sections de code s&amp;#8217;activent ou non selon l&amp;#8217;état d&amp;#8217;une structure de données.<text:line-break/>Il faut prévoir au moins autant de tests que de branches pour valider les attentes.</text:p><text:p>Enfin, l&amp;#8217;accès à toute donnée externe est susceptible de mal fonctionner sans que nous puissions maitriser l&amp;#8217;origine des problèmes.<text:line-break/>En revanche l&amp;#8217;écriture de tests nous aidera à accepter ce cas de figure et à le signaler à nos applications.</text:p><text:p>Nous savons désormais à peu près tout ce qu&amp;#8217;il faut flairer pour renforcer nos applications en écrivant quelques tests.</text:p><text:p><text:line-break/><text:line-break/>1. qu&amp;#8217;est-ce qui est public/exporté&amp;#160;?,1. qu&amp;#8217;est-ce qui crée des branches dans mon code&amp;#160;?,1. qu&amp;#8217;est-ce qui vient du monde extérieur&amp;#160;?<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const isWord = (word) =&amp;gt; {<text:line-break/>  return /^[\w\s.,\-?!;+]{2,}$/.test(word) &amp;amp;&amp;amp; Number.isNaN(Number(word));<text:line-break/>};<text:line-break/><text:line-break/>export default function countWords (sentence) { 1<text:line-break/>  return sentence<text:line-break/>    .split(' ')<text:line-break/>    .filter(isWord)<text:line-break/>    .length;<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@39268 {list_context: "colist", text: "La fonction `countWords` le seul élément exporté par notre module et devrait donc être le seul sujet de nos tests.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>export default function isOdd (number) {<text:line-break/>  if (typeof number !== 'number' || Number.isNaN(number)) { 1<text:line-break/>    throw new Error('number devrait être un nombre')<text:line-break/>  }<text:line-break/><text:line-break/>  if (number % 2) { 2<text:line-break/>    return true;<text:line-break/>  }<text:line-break/>  else {            3<text:line-break/>    return false;<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@39312 {list_context: "colist", text: "Première branche activée dans _deux_ cas de figure.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39322 {list_context: "colist", text: "Seconde branche.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39332 {list_context: "colist", text: "Troisième branche.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>export default function getLinkElementContent (linkElement) {<text:line-break/>  const {href} = linkElement;           1<text:line-break/><text:line-break/>  return fetch(href)                    2<text:line-break/>    .then(response =&amp;gt; response.json())  3<text:line-break/>    .then(pkg =&amp;gt; pkg.dependencies);<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@39376 {list_context: "colist", text: "`linkElement` peut ne pas être un lien hypertexte (`document.querySelector` retourne `null`).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39386 {list_context: "colist", text: "Ici tout peut arriver{nbsp}: `href` n'est pas une URL valide (balise `href` vide), serveur indisponible etc.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39396 {list_context: "colist", text: "Et là, le fichier JSON peut être mal formé ou la réponse est exprimée dans un autre format que JSON.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">S&amp;#8217;outiller pour écrire des assertions</text:h><text:p>Avant de nous lancer directement dans la conception et l&amp;#8217;écriture des tests, intéressons-nous à comprendre comment l&amp;#8217;outillage se structure.</text:p><text:p>L&amp;#8217;outillage varie selon chacun de ces niveaux.<text:line-break/>Certains outils offrent une écriture d&amp;#8217;assertion plus fluide, d&amp;#8217;autres proposent une écriture plus spécifiquement adaptée.</text:p><text:p>Les sections suivantes sont complémentaires.<text:line-break/>J&amp;#8217;ai favorisé des approches itératives et modulaires pour faciliter l&amp;#8217;ajout ou le retrait de tout outil de notre outillage&amp;#160;:</text:p><text:p>Ces trois librairies disposent d&amp;#8217;une documentation en ligne expliquant leurs options respectives ainsi que des exemples d&amp;#8217;utilisation.</text:p><text:p>L&amp;#8217;exécuteur de tests karma se configure par le biais d&amp;#8217;un fichier karma.conf.js.<text:line-break/>Nous en trouverons un à la racine du répertoire des ressources de ce chapitre 4.</text:p><text:p><text:line-break/>* l&amp;#8217;assertion<text:line-break/>C&amp;#8217;est la vérification d&amp;#8217;une vérité, d&amp;#8217;une attente, du résultat d&amp;#8217;une opération.<text:line-break/>Une assertion couvre une branche de code.,* le test<text:line-break/>C&amp;#8217;est un regroupement d&amp;#8217;assertions couvrant toutes les branches des fonctionnalités publiques de notre code.,* la suite de tests<text:line-break/>C&amp;#8217;est un ensemble de tests couvrant un aspect logique d&amp;#8217;un code applicatif.<text:line-break/>Une application peut comporter plusieurs suites selon sa complexité&amp;#160;:,* l&amp;#8217;exécuteur de tests<text:line-break/>C&amp;#8217;est le logiciel responsable de créer l&amp;#8217;environnement d&amp;#8217;exécution d&amp;#8217;une suite de tests.<text:line-break/>Ils expriment une opinion sur la structuration des tests ainsi que sur des automatismes à fournir pour accélérer l&amp;#8217;écriture des tests.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* la librairie chai pour les assertions&amp;#160;;,* la librairie mocha pour les tests&amp;#160;;,* la librairie mocha pour la suite de tests exécutable par Node&amp;#160;;,* l&amp;#8217;exécuteur de tests nommé  karma pour faire fonctionner la suite de tests dans les navigateurs web.<text:line-break/><text:line-break/><text:line-break/>* chaijs.com/api/bdd/,* mochajs.org/,* karma-runner.github.io/<text:line-break/><text:line-break/>----<text:line-break/>import {expect} from 'chai';<text:line-break/><text:line-break/>expect(2+2).to.equal(4);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>describe('functionName', () =&amp;gt; {<text:line-break/>  it('should succeed with parameter cheese', () =&amp;gt; {<text:line-break/>    // ...<text:line-break/>  });<text:line-break/><text:line-break/>  it('should throw an error with parameter meat', () =&amp;gt; {<text:line-break/>    // ...<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ mocha tests/**/*.js<text:line-break/>$ karma start<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Tester ses composants React sans navigateur web</text:h><text:p>Un des points forts de React évoqué dans ce chapitre est la description de son rendu à même le composant.<text:line-break/>Nous bénéficions ainsi du résultat final (son HTML par exemple) ainsi que d&amp;#8217;un arbre représentant une structure de sous-éléments et de propriétés.</text:p><text:p>Nous disposons de deux stratégies pour tester un composant React afin d&amp;#8217;en tester les différents comportements&amp;#160;:</text:p><text:p>La librairie Enzyme (npmjs.com/enzyme) s&amp;#8217;occupe très bien des deux, en plus de s&amp;#8217;intégrer avec n&amp;#8217;importe quelle librairie de tests.<text:line-break/>Dans tous les cas, elle nous permettra de monter nos composants soit de manière isolée, soit dans un véritable arbre DOM soit en rendu HTML.</text:p><text:p>L&amp;#8217;équipe d&amp;#8217;Airbnb offre une documentation exhaustive ainsi que des exemples complets d&amp;#8217;intégration avec des outils comme mocha, webpack, tape ou encore ava.</text:p><text:p>Nous allons nous baser sur le composant créé dans la section rapprocher données, rendu et interactions avec React pour s&amp;#8217;assurer de son comportement avant même de l&amp;#8217;inclure dans notre application.</text:p><text:p>En complément à ceci, la librairie chai-enzyme (npmjs.com/chai-enzyme) étend le vocabulaire de chai pour ajouter des assertions de composants.<text:line-break/>C&amp;#8217;est une question de goût plus qu&amp;#8217;une nécessité.<text:line-break/>L&amp;#8217;exemple suivant reprend le composant créé dans la section changements en temps-réel dans le navigateur et illustre une assertion suite à un clic sur le bouton&amp;#160;:</text:p><text:p>Le fichier package.json des ressources du chapitre 4 contient une tâche exécutant les tests exécutables dans un environnement Node uniquement.<text:line-break/>Elle se lance de la manière suivante&amp;#160;:</text:p><text:p>jest est un exécuteur de tests moderne et rapide particulièrement adapté au test de composants côté serveur.<text:line-break/>Au moment d&amp;#8217;écrire cet ouvrage, il n&amp;#8217;était pas encore possible de l&amp;#8217;exécuter dans un navigateur web.</text:p><text:p>Il est intéressant de retenir que les tests navigateurs ne sont pas indispensables pour s&amp;#8217;assurer du bon fonctionnement de nos composants.<text:line-break/>Des librairies comme React sont déjà solidement testées.<text:line-break/>Cela nous laisse l&amp;#8217;opportunité de nous concentrer uniquement sur notre logique métier.</text:p><text:p>Les tests navigateurs sont en revanche utiles pour tester la compatibilité navigateurs, que ce soit au niveau de la syntaxe ECMAScript ou du rendu CSS.</text:p><text:p><text:line-break/><text:line-break/>* tester le rendu en comparant des chaînes de caractères&amp;#160;;,* tester l&amp;#8217;état en validant la présence d&amp;#8217;attributs ou le déclenchement de certaines méthodes du composant.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* airbnb.io/enzyme/,* airbnb.io/enzyme/docs/api/<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import { createElement } from 'react';<text:line-break/>import { expect } from 'chai';<text:line-break/>import { shallow } from 'enzyme';<text:line-break/>import DateInterval from '../modules/date-interval.jsx';    1<text:line-break/><text:line-break/>describe('&amp;lt;DateInterval /&amp;gt;', () =&amp;gt; {<text:line-break/>  it('should render a time element', () =&amp;gt; {                2<text:line-break/>    const component = shallow(createElement(DateInterval)); 3<text:line-break/><text:line-break/>    expect(component.find('time')).to.have.length(1);       4<text:line-break/>  });<text:line-break/><text:line-break/>  it('should populate props.tickData with now+className properties', () =&amp;gt; {<text:line-break/>    const component = shallow(createElement(DateInterval)); 5<text:line-break/>    const {tickData} = component.state();                   6<text:line-break/><text:line-break/>    expect(tickData.now.getTime()).to.be.closeTo(Date.now(), 3);  7<text:line-break/>    expect(tickData.className).to.be.oneOf(['pair', 'impair']);   8<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@39782 {list_context: "colist", text: "Import du module `DateInterval`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39792 {list_context: "colist", text: "Création d'un _test_ destiné à vérifier la nature de la balise HTML à générer.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39802 {list_context: "colist", text: "Création du composant isolé (_shallow_){nbsp}– aucun élément DOM ne sera créé ni inséré dans le document.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39812 {list_context: "colist", text: "On écrit une _assertion_ garantissant que l'on retourne un élément `&lt;time>`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39822 {list_context: "colist", text: "Création d'un second composant isolé dont l'état est indépendant du premier.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39832 {list_context: "colist", text: "Récupération de l'état (_state_) du composant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39842 {list_context: "colist", text: "Assertion vérifiant que la date utilisée par le composant est proche de la date courante (à quelques millisecondes près).", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39852 {list_context: "colist", text: "Assertion vérifiant qu'une propriété de l'état ne peut être qu'une des deux valeurs parmi `pair` et `impair`.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>import React from 'react';<text:line-break/>import chai, { expect } from 'chai';<text:line-break/>import chaiEnzyme from 'chai-enzyme';<text:line-break/>import { shallow } from 'enzyme';<text:line-break/>import ButtonCount from '../livereload/button-count.jsx';<text:line-break/><text:line-break/>chai.use(chaiEnzyme());<text:line-break/><text:line-break/>describe('&amp;lt;ButtonCount /&amp;gt;', () =&amp;gt; {<text:line-break/>  it('should increment state on click', () =&amp;gt; {       1<text:line-break/>    const component = shallow(&amp;lt;ButtonCount /&amp;gt;);<text:line-break/>    component.simulate('click');                      2<text:line-break/><text:line-break/>    expect(component).to.have.state('clickCount', 1); 3<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@39896 {list_context: "colist", text: "Le libellé du test décrit le résultat attendu dans les assertions.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39906 {list_context: "colist", text: "Simulation du clic sur le composant.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@39916 {list_context: "colist", text: "L'état interne a bien été changé et correspond à la valeur attendue.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ npm run test:node<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* npmjs.com/jest,* facebook.github.io/jest/<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Tester code et composants dans les navigateurs web</text:h><text:p>C&amp;#8217;est bien beau de tester uniquement l&amp;#8217;interface de composants React (ou autre technologie) mais comment faire lorsqu&amp;#8217;on a besoin de tester avec un vrai DOM ou dans plusieurs navigateurs web&amp;#160;?</text:p><text:p>On a besoin de tester dans un ou plusieurs navigateurs web pour&amp;#160;:</text:p><text:p>Autrement dit, nous avons besoin d&amp;#8217;un exécuteur de tests qui les fasse fonctionner dans l&amp;#8217;environnement d&amp;#8217;un navigateur web.<text:line-break/>Idéalement, nous voulons que cet exécuteur de tests n&amp;#8217;influent pas sur l&amp;#8217;outillage employé pour écrire nos tests et donc nous permette d&amp;#8217;utiliser mocha et chai comme dans la section précédente.</text:p><text:p>karma (npmjs.com/karma) est l&amp;#8217;outil phare de l&amp;#8217;écosystème Node dédié aux tests dans les navigateurs web.<text:line-break/>Il a été créé en 2012 pour faciliter l&amp;#8217;exécution des suites de tests de la librairie Angular et s&amp;#8217;exécute en ligne de commande, assez simplement.</text:p><text:p>Les fonctionnalités de karma s&amp;#8217;étendent à l&amp;#8217;aide de modules npm&amp;#160;:</text:p><text:p>Le pilotage de karma se fait via un fichier de configuration karma.conf.js.<text:line-break/>Il est possible de surcharger ultérieurement cette configuration avec des arguments de la ligne de commande.</text:p><text:p>karma fonctionne avec des navigateurs installés sur notre machine de développement tout comme avec des services distants comme SauceLabs ou BrowserStack (voir intégration continue et compatibilité navigateurs).<text:line-break/>Les navigateurs doivent déjà être disponibles sur la machine de test (Firefox et Chrome par exemple) et nous devons en parallèle installer les lanceurs (karma-firefox-launcher et karma-chrome-launcher respectivement).</text:p><text:p>Les navigateurs lancés par défaut lors des tests sont listés dans l&amp;#8217;option browsers&amp;#160;:</text:p><text:p>karma se charge d&amp;#8217;inclure les fichiers JavaScript ou de servir des fichiers statiques en fonction de motifs de chemins.<text:line-break/>Ces fichiers peuvent être locaux (de préférence) ou distants et même être de types différents comme JSON ou HTML&amp;#160;:</text:p><text:p>Des intégrations doivent être déclarés pour augmenter les fonctionnalités de base de karma.<text:line-break/>Les fonctionnalités de base de karma se résument à charger des fichiers ECMAScript dans une balise &amp;lt;script&amp;gt;.</text:p><text:p>L&amp;#8217;extrait de configuration suivant illustre le chargement des plugins pour browserify (modules CommonJS et transpilation), mocha (suites de tests) et fixture (données représentant des cas d&amp;#8217;utilisation)&amp;#160;– respectivement les modules npm karma-browserify, karma-mocha et karma-fixture&amp;#160;:</text:p><text:p>Une fois encore des motifs de chemins sont utilisés pour indiquer aux plugins leur responsabilité de prise en charge.</text:p><text:p>Nous avons vu un exemple de code reposant sur un élément du DOM dans la section que tester&amp;#160;? de ce chapitre.<text:line-break/>Nous allons nous intéresser à une manière possible de tester la fonction exportée getLinkElementContent en se basant sur un véritable appel HTTP et un véritable élément du DOM, créé à partir du fichier de fixture suivant&amp;#160;:</text:p><text:p>Ce fichier de fixture est chargé dans le DOM par le plugin karma-fixture pour prouver que l&amp;#8217;on peut récupérer les dépendances exposées par le fichier package.json des ressources de ce chapitre&amp;#160;:</text:p><text:p>L&amp;#8217;invocation de karma se fait en invoquant ./node_modules/.bin/karma start.<text:line-break/>Par mesure de simplicité, cette commande a été abstraite en tant que script npm&amp;#160;:</text:p><text:p>Les tests peuvent être relancés en continu&amp;#160;– dès qu&amp;#8217;un fichier change&amp;#160;– en désactivant l&amp;#8217;exécution unique (single run).<text:line-break/>C&amp;#8217;est idéal lorsque les tests sont écrits en parallèle de l&amp;#8217;implémentation du code ou que des ajustements fréquents ont lieu en phase de développement&amp;#160;:</text:p><text:p>Comme tout process de longue durée, il s&amp;#8217;interrompt à l&amp;#8217;aide de la combinaison de touches .</text:p><text:p>Nous en savons désormais suffisamment pour tester dans les conditions des navigateurs web avec du code modulaire et réutilisable.</text:p><text:p>La question qui se pose désormais est la suivante&amp;#160;: comment faire pour tester plusieurs versions d&amp;#8217;un même navigateur, pour tester sur un système d&amp;#8217;exploitation que l&amp;#8217;on n&amp;#8217;a pas ou encore plusieurs terminaux mobiles de type smartphone ou tablette.</text:p><text:p><text:line-break/><text:line-break/>* s&amp;#8217;assurer de la compatibilité de notre code avec les variations d&amp;#8217;implémentation de navigateurs web&amp;#160;;,* valider notre choix de polyfills&amp;#160;;,* tester fidèlement contre des APIs de navigateurs ou du DOM (comme Web Audio, Service Workers, etc.).<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* intégrations avec des suites de tests&amp;#160;;,* lanceurs de navigateurs web&amp;#160;;,* préprocesseurs pour transformer des fichiers, les servir et/ou les inclure dans l&amp;#8217;environnement de tests.<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ ./node_modules/.bin/karma init<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>browsers: ['Chrome'],<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>files: [<text:line-break/>  //'https://cdn.polyfill.io/v2/polyfill.min.js',           1<text:line-break/>  'examples/tests-browser/**/*.js',                         2<text:line-break/>  'examples/tests/**/*.js',<text:line-break/>  'examples/tests-browser/**/*.html',                       3<text:line-break/>  { pattern: 'package.json', served: true, included: false }4<text:line-break/>],<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@40188 {list_context: "colist", text: "Il suffirait de décommenter cette ligne pour inclure les &lt;&lt;polyfills,_polyfills_ de navigateurs web>> sans toucher à notre code.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40198 {list_context: "colist", text: "Inclusion des fichiers de tests spécifiques aux navigateurs web.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40208 {list_context: "colist", text: "Inclusion de fichiers HTML, sans effet à moins.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40218 {list_context: "colist", text: "Mise à disposition du fichier `package.json`, accessible via une requête HTTP vers `/base/package.json`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>frameworks: ['browserify', 'mocha', 'fixture'],<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>preprocessors: {<text:line-break/>  'examples/tests/**/*.js': ['browserify'],                 1<text:line-break/>  'examples/tests-browser/**/*.js': ['browserify'],<text:line-break/>  'examples/tests-browser/**/*.html': ['html2js'],          2<text:line-break/>},<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@40312 {list_context: "colist", text: "Ces fichiers seront transpilés par _browserify_ avant d'être chargés dans les tests de navigateurs web.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40322 {list_context: "colist", text: "Ces fichiers seront pris en charge par le _préprocesseur_ nommé _html2js_, utilisé par `karma-fixture` pour transformer du HTML en arbre DOM.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;a href="/base/package.json"&amp;gt;Test&amp;lt;/a&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>import { expect } from 'chai';<text:line-break/>import getLinkElementContent from '../test-outside-world.js';<text:line-break/><text:line-break/>describe('getLinkElementContent', () =&amp;gt; {<text:line-break/>  before(() =&amp;gt; fixture.setBase('examples/tests-browser/fixtures')); 1<text:line-break/><text:line-break/>  it('follows an HTML link to a package.json and get its dependencies', () =&amp;gt; {<text:line-break/>    const [link] = fixture.load('link-package.html');               2<text:line-break/><text:line-break/>    return getLinkElementContent(link).then(deps =&amp;gt; {               3<text:line-break/>      expect(deps).to.contain.all.keys('babel', 'react', 'enzyme'); 4<text:line-break/>    });<text:line-break/>  });<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@40396 {list_context: "colist", text: "`before()` indique à _mocha_ d'exécuter ce bloc de code avant tout _test_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40406 {list_context: "colist", text: "Appel du _plugin_ de _fixture_ pour obtenir l'élément du DOM nécessaire à la fonction `getLinkElementContent`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40416 {list_context: "colist", text: "Appel réel de la fonction `getLinkElementContent`, résolu comme une &lt;&lt;../chapter-03/index.adoc#promise,promesse>> et dont nous testons le résultat à la ligne suivante.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40426 {list_context: "colist", text: "_Assertion_ vérifiant que le résultat contient bien des clés de dépendances _npm_ attendues{nbsp}– nous avons bien récupéré le bon fichier et le bon contenu{nbsp}!.", blocks: 0}><text:line-break/><text:line-break/>----<text:line-break/>$ npm run test:browser<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run test:browser -- --no-single-run<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">Intégration continue et compatibilité navigateurs</text:h><text:p>Plusieurs cas de figure se posent en complément de la section précédente&amp;#160;:</text:p><text:p>En étant sous Windows, il nous sera difficile de tester Safari pour macOS.<text:line-break/>Inversement, en étant sous macOS il nous sera difficile de tester Internet Explorer pour Windows XP ou Edge pour Windows 10.<text:line-break/>Que dire d&amp;#8217;anciennes versions de navigateurs Android dont la rapidité de développement et donc la compatibilité est bien en deçà des versions de Chrome pour ordinateur ou mobile.</text:p><text:p>L&amp;#8217;écosystème de modules npm liés à karma s&amp;#8217;est déjà penché sur la question.<text:line-break/>C&amp;#8217;est le cas notamment du produit BrowserStack qui offre une intégration pour déléguer l&amp;#8217;exécution des tests sur leur plate-forme commerciale.<text:line-break/>Il s&amp;#8217;agit du module karma-browserstack-launcher (npmjs.com/karma-browserstack-launcher).</text:p><text:p>La documentation de BrowserStack décrit les différents systèmes d&amp;#8217;exploitation à disposition ainsi que les navigateurs web compatibles, pour PC, Mac, iOS et Android.<text:line-break/>L&amp;#8217;intégration avec Node est également documentée au cas où vous souhaiteriez effectuer des tests sans passer par karma.</text:p><text:p>BrowserStack n&amp;#8217;est pas un navigateur en soi mais offre un accès à une multitude de navigateurs.<text:line-break/>Il faut donc créer de nouvelles configurations de navigateurs dans la propriété de configuration customLaunchers.<text:line-break/>L&amp;#8217;extrait de configuration suivant illustre la création d&amp;#8217;un navigateur Safari pour iPhone 4S sous iOS 5.1&amp;#160;:</text:p><text:p>L&amp;#8217;utilisation de BrowserStack nécessite un compte et l&amp;#8217;obtention d&amp;#8217;une clé d&amp;#8217;API afin d&amp;#8217;utiliser leur service.<text:line-break/>Notre npm d&amp;#8217;utilisateur et la clé d&amp;#8217;API doivent être renseignés en tant que variables d&amp;#8217;environnement pour établir une connexion au service et démarrer notre bon vieil iPhone 4&amp;#160;:</text:p><text:p>BrowserStack peut être configuré plus finement selon vos besoins.<text:line-break/>Le réglage suivant s&amp;#8217;assure de faire transiter les données HTTP (scripts, HTML, etc.) via la connexion sécurisée entre notre ordinateur et BrowserStack.<text:line-break/>C&amp;#8217;est un réglage utile en cas de proxy exigeant ou de réglages de connexion à Internet bien spécifiques.</text:p><text:p>Sauce Labs est un concurrent de BrowserStack et offre des fonctionnalités similaires.<text:line-break/>Il est gratuit pour les projets open source.</text:p><text:p>Indépendamment de BrowserStack, l&amp;#8217;intégration continue est un mécanisme permettant l&amp;#8217;exécution automatique des tests, de manière reproductible et dans un environnement systématiquement propre&amp;#160;– sans trace d&amp;#8217;exécution d&amp;#8217;un précédent test.</text:p><text:p>Cela a deux avantages indéniables&amp;#160;:</text:p><text:p>On évite ainsi les oublis tout en enlevant le coût de mise en place de l&amp;#8217;infrastructure de tests chez des personnes contribuant de manière occasionnelle.<text:line-break/>Cerise sur le gâteau, on prévient en partie les régressions&amp;#160;– changement qui casse le fonctionnement attendu d&amp;#8217;une fonctionnalité.</text:p><text:p>Le service Travis CI (travis-ci.org) est un service d&amp;#8217;intégration continue (Continuous Integration, CI) parmi d&amp;#8217;autres mais qui a été rendu populaire pour son intégration avec GitHub.<text:line-break/>Il est gratuit pour les projets open source.</text:p><text:p>Un service d&amp;#8217;intégration continue est configuré pour définir ce qui est exécuté avant, pendant et après les tests.<text:line-break/>Il a donc l&amp;#8217;avantage de faciliter l&amp;#8217;automatisation des tests de navigateurs web à même la machine virtuelle (Virtual Machine, VM) de test ou bien vers des plates-formes comme BrowserStack.<text:line-break/>Son mécanisme de variables d&amp;#8217;environnement cryptées nous évitera de donner accès à notre compte au premier venu.</text:p><text:p>Un fichier de configuration minimal au format YAML est nécessaire.<text:line-break/>Des services comme GitHub facilitent la connexion avec Travis CI et déclenchent automatiquement l&amp;#8217;exécution des tests à chaque commit ou pull request.</text:p><text:p>Des services comme Travis CI sont puissants et amplement configurable pour de nombreux besoins, y compris la connexion à des bases de données Postgres ou MariaDB.</text:p><text:p><text:line-break/>* la difficulté d&amp;#8217;accès à certaines combinaisons navigateur web + système d&amp;#8217;exploitation&amp;#160;;,* l&amp;#8217;envie d&amp;#8217;automatiser les tests de navigateurs web.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* www.browserstack.com/automate/node,* www.browserstack.com/list-of-browsers-and-platforms<text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>customLaunchers: {<text:line-break/>  iphone4: {<text:line-break/>    base: 'BrowserStack',<text:line-break/>    device: 'iPhone 4S',<text:line-break/>    os: 'ios',<text:line-break/>    os_version: '5.1'<text:line-break/>  },<text:line-break/>},<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ export BROWSER_STACK_USERNAME=...<text:line-break/>$ export BROWSER_STACK_ACCESS_KEY=...<text:line-break/>$ npm run test:browser -- --browsers iphone4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>browserStack: {<text:line-break/>  forcelocal: true,<text:line-break/>},<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* saucelabs.com<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* exécuter les tests pour tout changement de code, peu importe qui en est l&amp;#8217;auteur&amp;#160;;,* s&amp;#8217;assurer de l&amp;#8217;exécution systématique des tests&amp;#160;;,* mettre en commun la logique d&amp;#8217;exécution de tests.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>language: node_js             1<text:line-break/>node_js: v10                   2<text:line-break/><text:line-break/>addons:<text:line-break/>  firefox: latest             3<text:line-break/><text:line-break/>env:<text:line-break/>  - MOZ_HEADLESS=1            4<text:line-break/><text:line-break/>script: npm run test:browser -- --browsers Firefox<text:line-break/><text:line-break/>env:<text:line-break/>  BROWSER_STACK_USERNAME: "$BROWSER_STACK_USERNAME"       5<text:line-break/>  BROWSER_STACK_ACCESS_KEY: "$BROWSER_STACK_ACCESS_KEY"<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@40740 {list_context: "colist", text: "Configuration de la _VM_ pour utiliser _Node_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40750 {list_context: "colist", text: "Configuration de la _VM_ pour utiliser la version la plus récente de Node {nodeCurrentVersion}.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40760 {list_context: "colist", text: "Installation de la dernière version stable de _Firefox_.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40770 {list_context: "colist", text: "La variable d'environnement `MOZ_HEADLESS` indique à Firefox de démarrer sans afficher d'interface graphique à l'écran.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@40780 {list_context: "colist", text: "J'ai paramétré la clé d'accès à _BrowserStack_ dans les réglages de &lt;&lt;travis-ci,Travis CI>> (voir encadré ci-après).", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>* docs.travis-ci.com/user/languages/javascript-with-nodejs/,* docs.travis-ci.com/user/gui-and-headless-browsers/,* docs.travis-ci.com/user/firefox/<text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Conclusion</text:h><text:p>Nous sommes désormais en mesure d&amp;#8217;exécuter des tests unitaires impliquant des navigateurs web sur notre machine, sur des services distants mais également de manière automatique avec des services d&amp;#8217;intégration continue comme Travis CI.</text:p><text:p>Le recours aux modules npm combinés aux modules ECMAScript facilite le design et la maintenance de code testable et réutilisable.</text:p><text:p>Ces pratiques de modularisation&amp;#160;– jusqu&amp;#8217;au rendu intermédiaire de React&amp;#160;– encouragent une rigueur ayant un impact positif sur la qualité de notre code et notre confiance à le déployer en production.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* Polyfills et compatibilité ECMASCript,* Importer des modules npm pour le web,* Créer du code modulaire, avec ou sans framework,* Échanges de données en temps-réel,* Outillage utile au quotidien,* Tester son code et la compatibilité avec les navigateurs web<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="1">Sélection de modules npm</text:h><text:p>L&amp;#8217;écosystème npm regorge de modules.<text:line-break/>Comment choisir parmi les centaines de milliers de modules à disposition&amp;#160;?</text:p><text:p>Cette annexe est une sélection subjective de modules npm&amp;#160;: vous pouvez<text:line-break/>les utiliser les yeux fermés et apprendre à jouer avec Node en toute<text:line-break/>confiance.</text:p><text:p>Le contenu de ce chapitre utilise les versions Node v10 et npm v6.<text:line-break/>Ce sont les versions stables recommandées en 2018.<text:line-break/>J&amp;#8217;explique comment les installer au chapitre 2.</text:p><text:p>Les exemples titrés d&amp;#8217;un nom de fichier peuvent être installés sur votre ordinateur.<text:line-break/>Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de<text:line-break/>votre lecture pour voir ce qui change.</text:p><text:p>La commande suivante devrait afficher un résultat qui confirme que vous êtes<text:line-break/>au bon endroit&amp;#160;:</text:p><text:p>Suivez à nouveau les installations d&amp;#8217;instruction pour rétablir les exemples<text:line-break/>dans leur état initial.</text:p><text:h text:outline-level="2">Modules de sécurité applicative</text:h><text:p>retire.js est un module npm permettant de scanner soi-même des vulnérabilités connues dans le code JavaScript de son choix.<text:line-break/>Il fonctionne aussi bien pour du JavaScript interprété par un navigateur web que dans Node.</text:p><text:p><text:line-break/>* npmjs.com/retire<text:line-break/></text:p><text:h text:outline-level="2">Vérification syntaxique</text:h><text:p>La vérification syntaxique est un mécanisme s&amp;#8217;assurant que votre code respecte la grammaire du langage associé.<text:line-break/>Elle peut autant révéler des anomalies fondamentales (balise mal fermée, expression inconnue etc.) que renforcer des pratiques de programmation réduisant les erreurs potentielles lors de l&amp;#8217;exécution du-dit code.</text:p><text:p>Il s&amp;#8217;agit d&amp;#8217;une excellente première étape avant d&amp;#8217;introduire des tests unitaires ou fonctionnels.<text:line-break/>C&amp;#8217;est aussi une pratique rapide à mettre en œuvre&amp;#160;— de préférence dès le début du projet&amp;#160;— et poussant à harmoniser les pratiques de développement au sein d&amp;#8217;un group d&amp;#8217;individus.</text:p><text:p>Les modules à disposition dans npm vous permettront de couvrir vos fichiers CSS, HTML et ECMAScript bien sûr&amp;#160;!</text:p><text:p>htmlhint (npmjs.com/htmlhint) est un outil en ligne de commande vérifiant la structure de vos documents HTML.<text:line-break/>Il rapporte les doublons d&amp;#8217;attributs id, la présence de paires de balises mal formées, l&amp;#8217;absence de balise fermante ou encore l&amp;#8217;existance de chaînes de caractère non-imprimables dans des attributs critiques, entre autres.</text:p><text:p>Prenons en exemple le document suivant&amp;#160;:</text:p><text:p>Une lecture distraite pourrait nous faire passer à côté des erreurs mais également des inconsistances de programmation.<text:line-break/>Sur un document plus réaliste et donc volumineux, avec de fréquents changements, autant oublier la vérification manuelle.</text:p><text:p>L&amp;#8217;exécution de htmlhint avec ses règles par défaut remontera les alertes suivantes&amp;#160;:</text:p><text:p>Si elle peuvent paraître opiniatres, sachez qu&amp;#8217;elles n&amp;#8217;ont pour seul but que de décider une bonne fois pour toute quelle attitude adopter&amp;#160;: tout ou rien en miniscule, guillemets simples ou doubles, doctype explicite etc.</text:p><text:h text:outline-level="3">eslint</text:h><text:p>eslint (npmjs.com/eslint) est l&amp;#8217;outil de vérification syntaxique pour ECMAScript le plus complet et modulaire.<text:line-break/>Il offre un niveau de souplesse extrême au niveau de la configuration des règles à appliquer (utilisation systématique de use strict, nombre maximum de paramètres de fonctions, objets non-déclarés, variables inconnues etc.).<text:line-break/>Il expose également une API relativement simple afin de créer vos propres règles métier.<text:line-break/>Un autre mécanisme permet d&amp;#8217;inclure et d&amp;#8217;étendre un ou plusieurs  fichiers de configuration afin de les réutiliser dans différents projets.</text:p><text:p>eslint n&amp;#8217;applique aucune règle par défaut.<text:line-break/>Ses premières utilisations nécessiteront donc de prendre connaissance des<text:line-break/>règles à disposition ou d&amp;#8217;opter pour un module npm définissant une<text:line-break/>configuration à votre goût.</text:p><text:p>En effet si certaines règles nous alertent de dangers potentiels,<text:line-break/>d&amp;#8217;autres sont totalement subjectives et sujettes à des préférences<text:line-break/>purement personnelles.</text:p><text:p>eslint lit la section eslintConfig du fichier package.json pour adapter son comportement.</text:p><text:p>L&amp;#8217;exemple suivant illustre une configuration d&amp;#8217;eslint renforçant la déclaration du mode strict au niveau global, l&amp;#8217;emploi des égalités strictes, l&amp;#8217;interdiction de l&amp;#8217;utilisation de variables non déclarées, la cohérence d&amp;#8217;utilisation des accolades ainsi que l&amp;#8217;utilisation de guillemets simples uniquement&amp;#160;:</text:p><text:p>Le niveau de sévérité de chaque règle peut être configuré à l&amp;#8217;aide d&amp;#8217;un nombre entier&amp;#160;:</text:p><text:p>Certaines règles demandent ou acceptent des arguments supplémentaires.<text:line-break/>Ces arguments sont documentés dans le répertoire lib/rules de la librairie eslint ainsi que sur le site web du projet (eslint.org/docs/rules/).</text:p><text:p>Il serait fastidieux de répéter ou copier/coller la configuration de projet en projet.<text:line-break/>Ça tombe bien, eslint fournit un mécanisme d&amp;#8217;extension.<text:line-break/>Ce mécanisme accepte aussi bien des chemins relatifs vers un fichier de configuration mais aussi vers des modules npm.</text:p><text:p>L&amp;#8217;exemple suivant illustre l&amp;#8217;utilisation combinée de deux configurations eslint&amp;#160;:</text:p><text:p>Il y a deux éléments combinés dans le précédent exemple&amp;#160;:</text:p><text:p>Le détail des règles de configuration mises en application sont disponible simplement en parcourant l&amp;#8217;arborescence du dépôt de code disponible sur github.com/airbnb/javascript.</text:p><text:p>csslint (npmjs.com/csslint) est un outil de vérification syntaxique de feuilles de style CSS.<text:line-break/>Il a été créé par deux anciens ingénieurs de Yahoo!.<text:line-break/>Leurs anciens travaux dans le domaine de la performance ont influencé l&amp;#8217;architecture et le choix des règles par défaut.<text:line-break/>Celles-ci peuvent d&amp;#8217;ailleurs être étendues, moins aisément que pour eslint certes, mais suffisamment pour adapter l&amp;#8217;outil aux besoins modernes, notamment ceux du web mobile.</text:p><text:p>csslint fournit les mécanismes de vérification adéquats pour alerter de possibles effets de bord de box model, de déclaration incompatible de @font-face, de vendor prefix dépréciés (voir plus loin la section Optimisation du code) ou encore de combinaisons de propriétés connues pour casser l&amp;#8217;affichage dans certains navigateurs.</text:p><text:p>Prenons par exemple le fichier CSS suivant&amp;#160;:</text:p><text:p>csslint génèrera trois alertes en lisant le fichier sample.css et ce, même si celui-ci est syntaxiquement parfaitement valide&amp;#160;:</text:p><text:p>Si la présence d&amp;#8217;une mesure en pixels n&amp;#8217;est qu&amp;#8217;une affaire de micro-optimisation, les deux autres erreurs sont nettement plus problématiques car elles impliquent un manque de consistance d&amp;#8217;affichage, selon le navigateur effectuant le rendu.<text:line-break/>Éviter l&amp;#8217;utilisation de ces cas limites évite également d&amp;#8217;avoir à empiler des couches de CSS pouvant accentuer encore peu plus l&amp;#8217;instabilité d&amp;#8217;affichage.</text:p><text:p>doiuse (npmjs.com/doiuse) est un utilitaire qui se repose sur la base de données de caniuse.com.<text:line-break/>Il vous alerte des possibles incompatibilités de syntaxe en fonction de la compatibilité désirée avec une liste de navigateurs web définie par vos soins.<text:line-break/>Cette liste peut aussi bien concerner des versions spécifiques ou encore cibler en fonction leurs parts de marché.</text:p><text:p>L&amp;#8217;exemple suivant illustre les alertes relevées par doiuse dans le cas d&amp;#8217;une recherche de compatibilité avec Internet Explorer 6 et Internet Explorer 7&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "nodebook.chapter-04",<text:line-break/>  "private": true,<text:line-break/>  "dependencies": {<text:line-break/>    "eslint": "^1.10.3"<text:line-break/>  },<text:line-break/>  "...": "...",<text:line-break/>  "eslintConfig": {<text:line-break/>    "env": {<text:line-break/>      "node": true,<text:line-break/>      "es6": true<text:line-break/>    },<text:line-break/>    "rules": {<text:line-break/>      "strict": [2, "global"],<text:line-break/>      "quotes": [2, "single"],<text:line-break/>      "no-undef": 2,<text:line-break/>      "curly": 2,<text:line-break/>      "eqeqeq": 2<text:line-break/>    }<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* 0&amp;#160;: règle désactivée&amp;#160;;,* 1&amp;#160;: affiche un avertissement&amp;#160;;,* 2&amp;#160;: affiche une erreur (le processus se terminera avec un code d&amp;#8217;erreur).<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>{<text:line-break/>  "name": "nodebook",<text:line-break/>  "private": true,<text:line-break/>  "dependencies": {<text:line-break/>    "eslint": "^1.10.3",<text:line-break/>    "eslint-config-airbnb": "^3.1.0",<text:line-break/>    "eslint-plugin-react": "^3.15.0"<text:line-break/>  },<text:line-break/>  "...": "...",<text:line-break/>  "eslintConfig": {<text:line-break/>    "extends": [<text:line-break/>      "airbnb/base",<text:line-break/>      "airbnb/rules/react"<text:line-break/>    ]<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* l&amp;#8217;utilisation d&amp;#8217;un module npm pour obtenir de nouvelles règles&amp;#160;— spécifiques à l&amp;#8217;analyse syntaxique d&amp;#8217;applications React&amp;#160;;,* l&amp;#8217;utilisation d&amp;#8217;un module npm (eslint-config-airbnb) pour configurer eslint, à la fois pour du code à destination de Node, des navigateurs web et de React.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>.btn {<text:line-break/>  background: white;<text:line-break/>  color: black;<text:line-break/>  border: 0px solid black;<text:line-break/>  height: 20px;<text:line-break/>  padding: 10px;<text:line-break/>}<text:line-break/>.btn__primary {<text:line-break/>  background-color: blue;<text:line-break/>  color: white;<text:line-break/>  font-size: 1.3em;<text:line-break/>  transition: font-weight 0.2s ease;<text:line-break/>}<text:line-break/>.btn__primary--current {<text:line-break/>  color: gray;<text:line-break/>}<text:line-break/>.btn__primary--current.btn--active {<text:line-break/>  font-weight: 700;<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ csslint sample.css<text:line-break/><text:line-break/>csslint: There are 3 problems in sample.css.<text:line-break/><text:line-break/>sample.css<text:line-break/>1: warning at line 4, col 11<text:line-break/>Values of 0 shouldn't have units specified.<text:line-break/>  border: 0px solid black;<text:line-break/><text:line-break/>sample.css<text:line-break/>2: warning at line 4, col 3<text:line-break/>Using height with border can sometimes make elements larger than you expect.<text:line-break/>  border: 0px solid black;<text:line-break/><text:line-break/>sample.css<text:line-break/>3: warning at line 6, col 3<text:line-break/>Using height with padding can sometimes make elements larger than you expect.<text:line-break/>  padding: 10px;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ doiuse -b 'ie &amp;lt; 8' sample.css<text:line-break/>sample.css:1:1: CSS 2.1 selectors not supported by: IE (6)<text:line-break/>sample.css:8:1: CSS 2.1 selectors not supported by: IE (6)<text:line-break/>sample.css:12:1: CSS3 Transitions not supported by: IE (6,7)<text:line-break/>sample.css:14:1: CSS 2.1 selectors not supported by: IE (6)<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>&amp;lt;head&amp;gt;<text:line-break/>  &amp;lt;link rel="stylesheet" href="sample.css"&amp;gt;<text:line-break/>&amp;lt;/head&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>  &amp;lt;button id="btn" class="btn btn-primary"&amp;gt;OK&amp;lt;/button&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;button id="btn" class="btn"&amp;gt;KO&amp;lt;/button&amp;gt;<text:line-break/><text:line-break/>  &amp;lt;BUTTON class='btn__primary--curent btn--active'&amp;gt;&amp;lt;/BUTTON&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm run lint-html<text:line-break/>sample.html:<text:line-break/>line 1, col 1: Doctype must be first.<text:line-break/>line 8, col 10: Id redefinition of [ btn ].<text:line-break/>line 10, col 3: Tagname [ BUTTON ] must be lower case.<text:line-break/>line 10, col 10: The value of attribute [ class ] must closed by double quotes.<text:line-break/>line 10, col 52: Tagname [ BUTTON ] must be lower case.<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Outillage de développement</text:h><text:h text:outline-level="3">debug</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">nodemon</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/></text:p><text:h text:outline-level="2">Minification du code</text:h><text:p>Commentaires, indentations ou encore noms de variables&amp;#160;: tout ça occupe de la place, donc des caractères textuels et donc des octets de bande passante.</text:p><text:p>Sans outillage, l&amp;#8217;optimisation repose littéralement entre les mains des développeurs.<text:line-break/>Ces derniers doivent alors compromettre lisibilité et maintenabilité au profit de quelques kilo-octets.<text:line-break/>Ce que nous chercherons à tout prix à ne pas sacrifier.</text:p><text:p>Les minifieurs mettent en œuvre différentes techniques pour réduire cette occupation d&amp;#8217;espace&amp;#160;:</text:p><text:p>Ces différentes techniques de minification chercherons à préserver l&amp;#8217;intégrité du fonctionnement ou de l&amp;#8217;apparence de vos programmes.<text:line-break/>Un avertissement vous préviendra du contraire le cas échéant.</text:p><text:p>cssmin (npmjs.com/cssmin) est un portage ECMAScript du compresseur CSS YUICompressor développé par la compagnie Yahoo! à la fin des années 2000.<text:line-break/>L&amp;#8217;approche de cssmin consiste principalement à supprimer les caractères et commentaires non-significatifs.<text:line-break/>Il ne cherche pas à faire davantage que son homologue originel.</text:p><text:p>cssmin est donc un outil simple, exposant un exécutable système ainsi qu&amp;#8217;un module Node.<text:line-break/>Il ne fournit en revanche aucun support pour les Source Maps. Il vous faudra reposer sur l&amp;#8217;outillage proposé par les navigateurs web modernes pour le débogage (reformatage du code, inspection des propriétés etc.).</text:p><text:p>UglifyJS (npmjs.com/uglify-js2) est un des premiers compresseurs à utiliser une  représentation syntaxique en arbre (Abstract Syntax Tree&amp;#160;— AST) en lieu et place des classiques optimisations à coups d&amp;#8217;expressions régulières.</text:p><text:p>Cette méthode permet d&amp;#8217;élargir les perspectives de la compression via de la réécriture de code&amp;#160;:</text:p><text:p>UglifyJS s&amp;#8217;utilise de manière autonome, en ligne de commande ou via son API ECMAScript, mais aussi par le biais de plugins grunt, gulp et browserify (uglifyify et minifyify).</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* suppression des commentaires et caractères non-significatifs&amp;#160;;,* renommage de variables&amp;#160;;,* factorisation d&amp;#8217;occurrences multiples similaires&amp;#160;;,* suppression des instructions relatives au débogage/développement&amp;#160;;,* suppression de code mort.<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ cssmin sample.css &amp;gt; sample.min.css 1<text:line-break/><text:line-break/>$ cat sample.css | cssmin | wc -c | awk '{print $1}' 2<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@41480 {list_context: "colist", text: "Exporte le résultat de la minification dans le fichier `sample.min.css`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41490 {list_context: "colist", text: "Utilisation des *pipes* UNIX pour afficher le nombre de caractères d'une version minifiée de `sample.css`.", blocks: 0}><text:line-break/><text:line-break/><text:line-break/>* hoisting des variables (remontée de leur déclaration en début de scope)&amp;#160;;,* combinaison des déclarations de variables&amp;#160;;,* factorisation des valeurs de variables&amp;#160;;,* réécriture partielle d&amp;#8217;expressions&amp;#160;;,* injection en ligne du contenu de variables.<text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Optimisation du code</text:h><text:p>Parce qu&amp;#8217;optimiser le poids ne suffit pas, certains outils et compresseurs proposent de réécrire une partie de votre code.<text:line-break/>Ces optimisations seraient souvent complexes à imaginer et couteuses en temps, à répéter le geste et en maintenance.</text:p><text:p>La majorité des optimiseurs suggérés vous inciteront à suivre la voie des standards.<text:line-break/>Vous écrivez du code orienté vers le long terme et les outils se chargent du fardeau de la compatibilité avec le quotidien.<text:line-break/>De ce fait, ils ajouteront des instructions relatives à une plus grande compatibilité ou à l&amp;#8217;inverse, ils retireront des portions inutilisées.</text:p><text:p>Quoiqu&amp;#8217;il advienne, en complément des compresseurs ou non, votre code source d&amp;#8217;origine reste intact.<text:line-break/>Il est d&amp;#8217;autant plus aisé de les tester, de les activer et de les désactiver quand bon vous semble.</text:p><text:p>autoprefixer (npmjs.com/autoprefixer) est le module qui vous épargnera l&amp;#8217;écriture de centaines de lignes en ajoutant automatiquement les bons préfixes aux bons endroits.<text:line-break/>Travail d&amp;#8217;autant plus ingrat si vous n&amp;#8217;avez pas envie ni le loisir de recourir à des mixins Less ou Sass.<text:line-break/>autoprefixer expose une API ECMAScript, un exécutable système ainsi qu&amp;#8217;une API de streaming permettant une intégration sans plugin avec browserify, entre autres.</text:p><text:p>L&amp;#8217;exemple précédent illustre comment la propriété transition a été préfixée pour couvrir les navigateurs ayant plus de 1% de part de marché, puis en incluant les versions supérieures à Firefox 8&amp;#160;— assez obsolètes il faut se l&amp;#8217;avouer.<text:line-break/>L&amp;#8217;utilisation du paramètre -o - (o pour output) suivi du caractère trait d&amp;#8217;union redirige le code réécrit en sortie standard au lieu de modifier le fichier originel.</text:p><text:p>uncss (npmjs.com/uncss) est le pendant inverse d&amp;#8217;autoprefixer<text:line-break/>puisqu&amp;#8217;il se charge de supprimer le code inutilisé.<text:line-break/>Pour se faire, uncss charge une ou plusieurs pages de référence et fait la<text:line-break/>différence entre les règles CSS utilisées et celles qui ne le sont pas.<text:line-break/>Libre à vous de mentionner une liste blanche de règles à ne jamais supprimer<text:line-break/>pour éviter qu&amp;#8217;elles soient écrémées par mégarde.</text:p><text:p>Si le monde de l&amp;#8217;optimisation ECMAScript a explosé depuis l&amp;#8217;apparition d&amp;#8217;esprima,<text:line-break/>il en est de même pour CSS avec PostCSS (npmjs.com/postcss).<text:line-break/>Cet outil est construit autour du triptyque suivant&amp;#160;:</text:p><text:p>Cette combinaison rend possible la production de Source Maps mais aussi la<text:line-break/>construction d&amp;#8217;une multitude d&amp;#8217;outils destinés à faciliter la vie des développeurs.<text:line-break/>Ces outils se greffent sur le parseur, l&amp;#8217;arbre ou le compilateur pour parvenir<text:line-break/>à leurs fins.<text:line-break/>Avec une ou plusieurs extensions, vous avez ainsi accès à autoprefixer, à<text:line-break/>votre nettoyeur de code mort ou même à votre propre réimplémentation de Sass<text:line-break/>entièrement en ECMAScript&amp;#160;!</text:p><text:p>Enfin, il est bon de savoir que d&amp;#8217;autres outils existent, complètent voire remplacent les compresseurs et optimiseurs précédemment cités&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ autoprefixer -o - sample.css | grep transition<text:line-break/>  -webkit-transition: font-weight 0.2s ease;<text:line-break/>          transition: font-weight 0.2s ease;<text:line-break/><text:line-break/>$ autoprefixer -b 'firefox &amp;gt; 8' -o - sample.css | grep transition<text:line-break/>  -webkit-transition: font-weight 0.2s ease;<text:line-break/>     -moz-transition: font-weight 0.2s ease;<text:line-break/>          transition: font-weight 0.2s ease;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>* un parseur CSS&amp;#160;;,* un arbre syntaxique&amp;#160;;,* un compilateur texte.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>* Google Closure Compiler (npmjs.com/closurecompiler)<text:line-break/>Un autre compilateur ECMAScript plus poussé qu&amp;#8217;UglifyJS mais imposant un style d&amp;#8217;écriture plus strict, voire plus contraignant selon votre style d&amp;#8217;écriture.,* csswring (npmjs.com/csswring)<text:line-break/>Une alternative plus moderne que cssmin.<text:line-break/>Cet outil s&amp;#8217;interface optionnellement avec PostCSS et offre un support des Source Maps.,* csso (npmjs.com/csso)<text:line-break/>Une autre alternative à cssmin et csswring écrite par l&amp;#8217;équipe derrière la méthodologie BEM (en.bem.info), moins bien documentée mais plus efficace en terme d&amp;#8217;optimisations.<text:line-break/>csso ira jusqu&amp;#8217;à réécrire les codes couleurs, les margin et padding et factorisera les sélecteurs similaires.<text:line-break/></text:p><text:h text:outline-level="2">Manipulations diverses</text:h><text:p>Ces librairies adressent des besoins quotidiens en termes de  manipulation de chaînes ou de dates.<text:line-break/>Elles vous permettront aussi d&amp;#8217;organiser votre code en exécutant des fonctions de manière séquentielle, parallèle ou en boucles asynchrones.</text:p><text:h text:outline-level="3">lodash</text:h><text:p>lodash est une excellente librairie de manipulation de tableaux, d&amp;#8217;objets, de fonctions et de chaînes.</text:p><text:p>Vous pourrez ainsi boucler, filtrer, extraire et composer sans vous soucier de la compatibilité de l&amp;#8217;environnement d&amp;#8217;exécution.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/lodash</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const { intersection, first } = require('lodash');<text:line-break/>const DC = ['Batman', 'Brainiac', 'Thor'];<text:line-break/>const Marvel = ['Spiderman', 'Thor'];<text:line-break/><text:line-break/>const result = first(intersection(DC, Marvel));<text:line-break/>console.log(result);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@41708 {list_context: "colist", text: "Affiche `['A', 'B', 'C', 'D']`.", blocks: 0}></text:p><text:h text:outline-level="3">string</text:h><text:p>string est un utilitaire de manipulation de chaînes de caractère.<text:line-break/>Le module fournit des méthodes pour échapper, nettoyer, tronquer, remplacer,<text:line-break/>compter, entre autres.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/string</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const S = require('string');<text:line-break/>const title = S('Blog Post');<text:line-break/><text:line-break/>console.log(title.slugify().s);                   1<text:line-break/>console.log(title.wrapHTML('h1').s);              2<text:line-break/>console.log(title.wrapHTML('h1').escapeHTML().s); 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@41762 {list_context: "colist", text: "Affiche `blog-post`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41772 {list_context: "colist", text: "Affiche `&lt;h1>Blog Post&lt;/h1>`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41782 {list_context: "colist", text: "Affiche `\\&amp;lt;h1\\&amp;gt;Blog Post\\&amp;lt;/h1\\&amp;gt;`.", blocks: 0}></text:p><text:h text:outline-level="3">moment</text:h><text:p>moment est une librairie de gestion de temps.<text:line-break/>Elle simplifie énormément le parsing des chaînes, l&amp;#8217;ajout/soustraction de durées et propose des utilitaires de formatage d&amp;#8217;affichage qui vous feront gagner un temps précieux.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/moment</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const moment = require('moment');<text:line-break/>moment.locale('fr');<text:line-break/><text:line-break/>const date = moment('11 septembre 2014', 'DD MMMM YYYY');<text:line-break/><text:line-break/>console.log(date.toISOString());            1<text:line-break/><text:line-break/>date.add(2, 'days').add(5, 'hours');<text:line-break/><text:line-break/>console.log(date.format('D/MM/YY'));        2<text:line-break/>console.log(date.from('2014-09-11', true)); 3<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@41836 {list_context: "colist", text: "Affiche `2014-09-10T23:00:00.000Z`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41846 {list_context: "colist", text: "Affiche `13/09/14`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41856 {list_context: "colist", text: "Affiche `2 jours`.", blocks: 0}></text:p><text:h text:outline-level="3">eventemitter3</text:h><text:p>eventemitter3 est une librairie performante de gestion d&amp;#8217;événements.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/eventemitter3</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const EventEmitter = require('eventemitter3');<text:line-break/>const emitter = new EventEmitter();<text:line-break/><text:line-break/>emitter.on('ping', pingData =&amp;gt; console.log('on: %s', pingData));<text:line-break/>emitter.once('ping', pingData =&amp;gt; console.log('once: %s', pingData));<text:line-break/><text:line-break/>console.log(emitter.listeners('ping')); 1<text:line-break/><text:line-break/>emitter.emit('ping', ['ping', 'ping']); 2<text:line-break/>emitter.emit('ping', ['pong']);         3<text:line-break/><text:line-break/>emitter.removeListener('ping');<text:line-break/>emitter.emit('ping', ['pong']);         4<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@41912 {list_context: "colist", text: "Affiche `[ [Function], [Function] ]`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41922 {list_context: "colist", text: "Affiche `on: ping,ping\\nonce: ping,ping`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41932 {list_context: "colist", text: "Affiche `on: ping,ping`.", blocks: 0}><text:line-break/>#&lt;Asciidoctor::ListItem@41942 {list_context: "colist", text: "N'affiche rien, l'événement étant désormais déconnecté.", blocks: 0}></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Système de fichier</text:h><text:p>Ces librairies adressent des besoins quotidiens de manipulation de fichiers, que ce soit leur création, suppression mais aussi leur sélection ou l&amp;#8217;écoute d&amp;#8217;événements liés à ces activités.</text:p><text:h text:outline-level="3">mkdirp</text:h><text:p>mkdirp est identique à la commande UNIX mkdir -p.<text:line-break/>C&amp;#8217;est-à-dire que les répertoires seront créés récursivement s&amp;#8217;ils n&amp;#8217;existent pas au préalable.</text:p><text:p>npmjs.com/mkdirp</text:p><text:p>L&amp;#8217;exemple précédent illustre l&amp;#8217;écriture de la date courante dans un fichier.<text:line-break/>Ce fichier n&amp;#8217;est écrit que lorsque l&amp;#8217;arborescence est préalablement créée.</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">rimraf</text:h><text:p>rimraf se situe dans la lignée de  mkdirp&amp;#160;: il supprime une arborescence de manière récursive&amp;#160;— équivalent de la commande rm -rf.<text:line-break/>Encore une fois, sans la complexité d&amp;#8217;avoir à gérer un enchevêtrement de fonctions asynchrones.</text:p><text:p>npmjs.com/rimraf</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">glob</text:h><text:p>glob est un utilitaire très pratique pour filtrer une recherche récursive au sein du système de fichiers.</text:p><text:p>Sa syntaxe équivalente à ce qui se fait dans le monde UNIX évite une écriture de code complexe reposant sur l&amp;#8217;API fs.</text:p><text:p>npmjs.com/glob</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>const glob = require('glob');<text:line-break/><text:line-break/>glob('*.js', (err, files) =&amp;gt; {<text:line-break/>  if (err) {<text:line-break/>    return console.error(err);<text:line-break/>  }<text:line-break/><text:line-break/>   console.log(files); 1<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@42034 {list_context: "colist", text: "Affiche un tableau contenant la liste des fichiers du répertoire courant.", blocks: 0}></text:p><text:h text:outline-level="3">fs-extra</text:h><text:p>fs-extra complète rimraf et mkdirp et ajoute d&amp;#8217;autres fonctions utilitaires telles que la copie et le déplacement récursifs.</text:p><text:p>npmjs.com/fs-extra</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">graceful-fs</text:h><text:p>graceful-fs n&amp;#8217;apporte aucune API supplémentaire à l&amp;#8217;API native Node fs.<text:line-break/>Sous le capot la librairie simplifie l&amp;#8217;écriture de notre code en tentant plusieurs fois d&amp;#8217;accéder à un fichier si celui-ci n&amp;#8217;est pas disponible.<text:line-break/>Un module qui vous sera utile si l&amp;#8217;activité de lecture et d&amp;#8217;écriture sur disque dépasse les capacités du système.</text:p><text:p>npmjs.com/graceful-fs</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">chokidar</text:h><text:p>chokidar normalise l&amp;#8217;observation du système de fichiers pour une très grande majorité de systèmes d&amp;#8217;exploitation.<text:line-break/>La librairie ajoute quelques fonctionnalités de filtre, de persistance d&amp;#8217;observation et permet de dynamiquement ajouter ou retirer des fichiers de l&amp;#8217;observation.</text:p><text:p>npmjs.com/chokidar</text:p><text:p><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Base de données</text:h><text:p>Node supporte un vaste ensemble de bases de données grâce aux modules npm.<text:line-break/>Favorisez toujours les modules faisant état de driver natif/binaire&amp;#160;: la communication vers la base de données n&amp;#8217;en sera que plus rapide.</text:p><text:h text:outline-level="3">knex</text:h><text:p>knex est une librairie de manipulation de base de données SQL.<text:line-break/>Elle est notamment compatible avec PostgreSQL, MariaDB, MySQL et SQLite.<text:line-break/>Son API fluide basée sur des callbacks et des promesses vous sera précieuse pour ne pas écrire de requête à la main.</text:p><text:p>Les auteurs de knex ont également créé la surcouche bookshelf pour la partie ORM et donc gérer des modèles de données au lieu de requêtes SQL.</text:p><text:p>npmjs.com/knex et npmjs.com/bookshelf.</text:p><text:p>L&amp;#8217;exemple précédent se charge de créer une table dans une base de données SQLite, puis y insère trois nouveaux enregistrements.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const db = require('knex')({<text:line-break/>  client: 'sqlite3',<text:line-break/>  connection: {<text:line-break/>    // filename: path.join(__dirname, '..', '..', 'db.sqlite')<text:line-break/>    filename: ':memory:'<text:line-break/>  }<text:line-break/>});<text:line-break/><text:line-break/>db.schema.dropTableIfExists('books')<text:line-break/>  .then(() =&amp;gt; {<text:line-break/>    return db.schema.createTable('books', table =&amp;gt; {<text:line-break/>      table.increments('id').primary();<text:line-break/><text:line-break/>      table.string('title');<text:line-break/>      table.timestamp('created_at').defaultTo(db.raw('CURRENT_TIMESTAMP'));<text:line-break/>    });<text:line-break/>  })<text:line-break/>  .then(() =&amp;gt; {<text:line-break/>    return Promise.all([<text:line-break/>      db.insert({ title: 'Node.js '}).into('books'),<text:line-break/>      db.insert({ title: 'CSS maintenables '}).into('books'),<text:line-break/>      db.insert({ title: 'Open Sky'}).into('books')<text:line-break/>    ])<text:line-break/>  })<text:line-break/>  .then(() =&amp;gt; db('books').where('title', 'like', '%Node%'))<text:line-break/>  .then(rows =&amp;gt; console.log(rows))<text:line-break/>  .then(db.destroy.bind(db));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@42138 {list_context: "colist", text: "Affiche `[ { id: 1, title: 'Node.js ', created_at: '2015-10-09 16:06:17' } ]`.", blocks: 0}><text:line-break/></text:p><text:h text:outline-level="3">mongoose</text:h><text:p>mongoose est un ODM (Object Document Model) pour MongoDB.<text:line-break/>Il vous aidera à composer vos modèles, gérer la connexion à la base de données mais aussi à définir des comportements annexes comme des mixins ou des accesseurs dynamiques.</text:p><text:p>npmjs.com/mongoose</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>// docker run -ti --rm -p 0.0.0.0:27017:27017 mongo:3.1<text:line-break/>// MONGODB_URL=mongodb://192.168.59.103:27017/nodebook node npm-mongoose.js<text:line-break/><text:line-break/>const mongoose = require('mongoose');<text:line-break/>const Schema = mongoose.Schema;<text:line-break/><text:line-break/>const MONGODB_URL = process.env.MONGODB_URL;<text:line-break/><text:line-break/>mongoose.connect(MONGODB_URL || 'mongodb://localhost:27017/nodebook');<text:line-break/><text:line-break/>const BookSchema = new Schema({<text:line-break/>  id: Schema.ObjectId,<text:line-break/>  title: String,<text:line-break/>  created_at: { type: Date, default: Date.now }<text:line-break/>});<text:line-break/><text:line-break/>BookSchema.path('title').set(title =&amp;gt; title.trim());<text:line-break/><text:line-break/>const Book = mongoose.model('Book', BookSchema);<text:line-break/><text:line-break/>Promise.all([<text:line-break/>  new Book({ title: 'Node.js' }).save(),<text:line-break/>  new Book({ title: 'CSS maintenables' }).save(),<text:line-break/>  new Book({ title: 'Open Sky' }).save()<text:line-break/>])<text:line-break/>.then(records =&amp;gt; {<text:line-break/>  console.log('%d enregistrements créés.', records.length);   1<text:line-break/>  mongoose.disconnect();<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@42190 {list_context: "colist", text: "Affiche `3 enregistrements créés`.", blocks: 0}></text:p><text:h text:outline-level="3">levelup</text:h><text:p>LevelDB est un système de base de données clé/valeur extrêmement modulaire, avec un stockage sur disque par défaut mais qui peut évoluer vers du stockage en mémoire (module memdown).<text:line-break/>Et encore mieux, cette base de données fonctionne aussi dans un navigateur web&amp;#160;!</text:p><text:p>npmjs.com/levelup</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const levelup = require('levelup');<text:line-break/>const memdown = require('memdown');<text:line-break/>const uuid = require('uuid').v4;<text:line-break/><text:line-break/>const db = levelup(memdown());<text:line-break/><text:line-break/>db.batch()<text:line-break/>  .put(uuid(), { title: 'Node.js' }, { valueEncoding: 'json' })<text:line-break/>  .put(uuid(), { title: 'CSS maintenables' }, { valueEncoding: 'json' })<text:line-break/>  .put(uuid(), { title: 'Open Sky' }, { valueEncoding: 'json' })<text:line-break/>  .write((err) =&amp;gt; {<text:line-break/>    if (err) {<text:line-break/>      return console.error(err);<text:line-break/>    }<text:line-break/><text:line-break/>    console.log('Enregistrements créés en mémoire.');<text:line-break/>  });<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">redis</text:h><text:p>redis est une autre base de données clé/valeur focalisée sur la performance et la distribution sur de multiples serveurs.</text:p><text:p>hiredis est un driver C++ pouvant être utilisé par le module Node redis.<text:line-break/>Il permet de travailler directement avec des buffers plutôt qu&amp;#8217;avec des conversions JSON, ce qui accélère le processus de conversion/déconversion depuis la base de données.</text:p><text:p>npmjs.com/redis et<text:line-break/>npmjs.com/hiredis</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const client = require('redis').createClient();<text:line-break/>const Promise = require('bluebird');<text:line-break/>const uuid = require('uuid').v4;<text:line-break/><text:line-break/>Promise.promisifyAll(client);<text:line-break/><text:line-break/>Promise.all([<text:line-break/>  client.hset(`book:${uuid()}`, 'title', 'Node.js'),<text:line-break/>  client.hset(`book:${uuid()}`, 'title', 'CSS maintenables'),<text:line-break/>  client.hset(`book:${uuid()}`, 'title', 'Open Sky')<text:line-break/>])<text:line-break/>.then(() =&amp;gt; {<text:line-break/>  console.log('Enregistrements créés.');<text:line-break/>  client.end();<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Ligne de commande</text:h><text:p>Nous l&amp;#8217;avions déjà entraperçu dans le chapitre 2 mais Node nous révèle un outillage facilitant les interactions dans un environnement bash.</text:p><text:h text:outline-level="3">yargs</text:h><text:p>yargs est une librairie de parsing et de validation d&amp;#8217;arguments.<text:line-break/>Elle vous aidera à gérer les valeurs par défaut, à rejeter toute option inconnue ou encore à accumuler les valeurs d&amp;#8217;options identiques.</text:p><text:p>Si seul le parsing vous intéresse, optez pour minimist.</text:p><text:p>npmjs.com/yargs</text:p><text:p>Référez-vous à la section Approche modulaire de ce même chapitre pour un exemple plus détaillé de cette librairie.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">chalk</text:h><text:p>chalk est un simple outil de colorisation et de mise en forme de texte dans un terminal.<text:line-break/>Oubliez les code ANSI, chalk ne vous demandera que deux appels de fonction pour afficher un texte en bleu, italique et souligné&amp;#160;!</text:p><text:p>npmjs.com/chalk</text:p><text:p>Ce script produira l&amp;#8217;affichage suivant&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const chalk = require('chalk');<text:line-break/><text:line-break/>const Blue = chalk.blue;<text:line-break/>const White = chalk.white;<text:line-break/>const Red = chalk.red;<text:line-break/><text:line-break/>console.log(Blue('Node.js'), White('c\'est'), Red('fantastique !'));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">table</text:h><text:p>table est un utilitaire qui transforme un tableau d&amp;#8217;objets ECMAScript<text:line-break/>en un tableau visuel ASCII.<text:line-break/>dans le terminal.</text:p><text:p>Des options vous permettent de gérer la largeur des colonnes, les alignements<text:line-break/>de texte et les troncatures, entre autres.</text:p><text:p>npmjs.com/table</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const {table} = require('table');<text:line-break/>const chalk = require('chalk');<text:line-break/><text:line-break/>const data = Object.entries(process.versions);<text:line-break/>const header = [<text:line-break/>  chalk.bold.white('Software'),<text:line-break/>  chalk.bold.white('Version')<text:line-break/>];<text:line-break/><text:line-break/>console.log(table([ header, ...data ]));<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">inquirer</text:h><text:p>inquirer est le composant qu&amp;#8217;il vous faut pour gérer l&amp;#8217;interactivité avec un utilisateur dans le terminal&amp;#160;: questions à choix multiple, validation de saisie, texte libre multiple etc.</text:p><text:p>npmjs.com/inquirer</text:p><text:p>Le programme précédent tente de charger le module Node saisi par l&amp;#8217;utilisateur et rejette la réponse s&amp;#8217;il n&amp;#8217;existe pas.</text:p><text:p>La saisie est préalablement nettoyée pour éviter que le chargement d&amp;#8217;un module local puisse aboutir.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const inquirer = require('inquirer');<text:line-break/>const sanitize = require('sanitize-filename');<text:line-break/><text:line-break/>inquirer.prompt({<text:line-break/>  name: 'fav-module',<text:line-break/>  message: 'Quel module natif Node souhaitez-vous mieux maitriser ?',<text:line-break/>  filter: (input) =&amp;gt; sanitize(input),<text:line-break/>  validate: (input) =&amp;gt; {<text:line-break/>    try {<text:line-break/>      // eslint-disable-next-line global-require<text:line-break/>      require(sanitize(input));<text:line-break/>      return true;<text:line-break/>    }<text:line-break/>    catch (e){<text:line-break/>      return false;<text:line-break/>    }<text:line-break/>  }<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">HTTP et API</text:h><text:p>Une majorité d&amp;#8217;articles et de tutoriaux pour Node ont pour habitude d&amp;#8217;illustrer la création d&amp;#8217;un serveur HTTP.<text:line-break/>S&amp;#8217;il est vrai que Node rend les interactions réseaux aisées grâce à leur gestion non-bloquante, créer un serveur respectant réellement la spécification du protocole HTTP est une autre paire de manches.</text:p><text:p>La plupart des modules n&amp;#8217;imposant pas de choix d&amp;#8217;architecture, vous aurez souvent à composer vous-même votre application HTTP en fonction de vos besoins.</text:p><text:h text:outline-level="3">express</text:h><text:p>express est probablement la librairie la plus populaire.<text:line-break/>Elle gère le routage HTTP et la passation de données vers le moteur de rendu de votre choix.<text:line-break/>Son système de middlewares</text:p><text:p>Peu d&amp;#8217;aspects de sécurité sont pris en charge.<text:line-break/>Il est fortement recommandé de lui adjoindre helmet ou d&amp;#8217;opter pour kraken, une surcouche d&amp;#8217;express configurée dans cette optique.</text:p><text:p>npmjs.com/express, npmjs.com/helmet et npmjs.com/kraken-js</text:p><text:p>Référez-vous à la section Approche modulaire de ce même chapitre pour un exemple plus détaillé de cette librairie.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">passport</text:h><text:p>passport est une librairie de gestion d&amp;#8217;authentification.<text:line-break/>De nombreux modules complémentaires permettent de gérer une authentification par mot de passe, par OAuth, par compte Google Apps etc.</text:p><text:p>Elle fonctionne particulièrement bien puisqu&amp;#8217;elle n&amp;#8217;impose pas de mécanisme de persistence d&amp;#8217;utilisateurs ni de session.</text:p><text:p>npmjs.com/passport</text:p><text:p>Référez-vous à sa documentation pour des exemples détaillés d&amp;#8217;utilisation et d&amp;#8217;implémentation au sein de votre application.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">restify</text:h><text:p>restify est une alternative à express si votre application n&amp;#8217;a pour seul but que d&amp;#8217;exposer une API REST, sans rendu HTML ou nécessitant un templating particulier.</text:p><text:p>Elle rend possible le débogage complet à partir de dtrace, la gestion des versions d&amp;#8217;API et expose un client permettant de consommer des données sur d&amp;#8217;autres API REST.</text:p><text:p>npmjs.com/restify</text:p><text:p>L&amp;#8217;exemple précédent expose une même route permettant d&amp;#8217;obtenir des informations sur les déclarations de versions d&amp;#8217;un fichier package.json.</text:p><text:p>Par défaut, la version 2 de l&amp;#8217;API est utilisée&amp;#160;:</text:p><text:p>Une version obsolète de l&amp;#8217;API peut toutefois être utilisée si l&amp;#8217;on mentionne explicitement cette information&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const restify = require('restify');<text:line-break/>const {NotFoundError} = require('restify-errors');<text:line-break/>const server = restify.createServer();<text:line-break/>const countries = require('i18n-iso-countries');<text:line-break/><text:line-break/>const responseV1 = (request, response, next) =&amp;gt; {<text:line-break/>  const codes = countries.getNames('en');<text:line-break/><text:line-break/>  if (codes[request.params.code] === undefined) {<text:line-break/>    return next(new NotFoundError('Country not found'));<text:line-break/>  }<text:line-break/><text:line-break/>  response.send(200, codes[request.params.code]);<text:line-break/><text:line-break/>  next();<text:line-break/>};<text:line-break/><text:line-break/>server.get({ path: '/countries/:code', version: '1.0.0' }, responseV1);<text:line-break/><text:line-break/>server.listen(8080, () =&amp;gt; console.log('Serveur accessible sur %s', server.url));<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl http://localhost:8080/modules/express<text:line-break/>{"modules":[{"name":"express","version":"4.9.5"}]}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ curl -H 'Accept-version: ~1' http://localhost:8080/modules/express<text:line-break/>"^4.9.5"<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">faye</text:h><text:p>faye est à la fois un serveur et un client de communication en temps réel entre un client et un serveur.<text:line-break/>Il utilisera WebSocket, Ajax ou JSON-P selon les capacités technologiques du client.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/faye et npmjs.com/socket.io</text:p><text:p>Ce serveur extrêmement minimaliste expose un point d&amp;#8217;entrée qui peut être accédé via le client Faye, dans un navigateur web ou via un autre script Node.</text:p><text:p>Tout message émit par un client sera relayé auprès des autres clients connectés.<text:line-break/>Un mécanisme de canaux et d&amp;#8217;authentification vous permettra de canaliser les messages en fonction des besoins de votre application.</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const http = require('http');<text:line-break/>const faye = require('faye');<text:line-break/><text:line-break/>const ws = new faye.NodeAdapter({ mount: '/realtime', timeout: 10 });<text:line-break/><text:line-break/>const server = http.createServer((req, res) =&amp;gt; {<text:line-break/>  res.writeHead(200, { 'Content-Tyoe': 'text/plain' });<text:line-break/>  res.end('Contenu non temps réel');<text:line-break/>});<text:line-break/><text:line-break/>ws.attach(server);<text:line-break/>server.listen(3000);<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Préprocesseurs</text:h><text:p>Les préprocesseurs sont des outils de productivité transformant un langage vers un autre langage, en général compatible avec une majorité de navigateurs.</text:p><text:p>Certains vous permettront même de compiler du code Node vers du code compatible avec un navigateur Web.</text:p><text:h text:outline-level="3">less</text:h><text:p>less est un préprocesseur permettant de compiler vers du code CSS.<text:line-break/>Ses atouts résident dans la gestion des variables, de mixins et de fonctions encourageant une écriture modulaire, plus logique et plus succincte.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/less</text:p><text:p>L&amp;#8217;exécutable lessc compile le fichier LESS:</text:p><text:p>La sortie de la commande précédente génère ce résultat&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>@warning-color: red;<text:line-break/>@base-font-size: 18px;<text:line-break/><text:line-break/>.btn {<text:line-break/>  border: 1px solid black;<text:line-break/>  border-radius: @base-font-size / 6;<text:line-break/>  font-size: @base-font-size;<text:line-break/><text:line-break/>  &amp;amp;--large {<text:line-break/>    font-size: @base-font-size * 1.5;<text:line-break/>  }<text:line-break/><text:line-break/>  &amp;amp;--warning {<text:line-break/>    border-color: fadeout(@warning-color, 10%);<text:line-break/>    color: @warning-color;<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ lessc stylesheet.less<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>.btn {<text:line-break/>  border: 1px solid black;<text:line-break/>  border-radius: 3px;<text:line-break/>  font-size: 18px;<text:line-break/>}<text:line-break/>.btn--large {<text:line-break/>  font-size: 27px;<text:line-break/>}<text:line-break/>.btn--warning {<text:line-break/>  border-color: rgba(255, 0, 0, 0.9);<text:line-break/>  color: #ff0000;<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">sass</text:h><text:p>Sass est un autre préprocesseur populaire issu du monde Ruby.<text:line-break/>Un portage en C++ est disponible via le module node-sass et ne requiert pas l&amp;#8217;installation de Ruby.</text:p><text:p>Compatible Node.<text:line-break/>npmjs.com/node-sass et sass-lang.com/libsass</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">browserify</text:h><text:p>browserify transforme des modules CommonJS et des appels aux API Node en un code ECMAScript capable d&amp;#8217;être exécuté dans un navigateur Web.</text:p><text:p>Un puissant mécanisme de transforms introduit des remplacements de modules à la volée ou le mélange de modules AMD et CommonJS.</text:p><text:p>Une alternative à browserify est webpack.<text:line-break/>Aux fonctionnalités précédemment listées s&amp;#8217;ajoutent une prise en charge plus aisée de multiples modules ainsi que la compilation de fichiers CSS ou Less.</text:p><text:p>npmjs.com/browserify et npmjs.com/webpack</text:p><text:p>La commande browserify remplacera l&amp;#8217;appel au module cheerio par un appel au module jquery&amp;#160;:</text:p><text:p>Inclus dans un navigateur Web, le fichier npm/browserify.bundle.js affichera le même résultat que l&amp;#8217;interpréteur Node.</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const $ = require('cheerio');<text:line-break/><text:line-break/>const $list = $('&amp;lt;ul/&amp;gt;');<text:line-break/><text:line-break/>$list.append('&amp;lt;li&amp;gt;Node.js&amp;lt;/li&amp;gt;');<text:line-break/>$list.append('&amp;lt;li&amp;gt;CSS maintenables&amp;lt;/li&amp;gt;');<text:line-break/>$list.append('&amp;lt;li&amp;gt;Open Sky&amp;lt;/li&amp;gt;');<text:line-break/><text:line-break/>console.log($list.find('li:last-child').text()); 1<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/>#&lt;Asciidoctor::ListItem@42708 {list_context: "colist", text: "Affiche `Open Sky`.", blocks: 0}><text:line-break/>----<text:line-break/>{<text:line-break/>  "browser": {<text:line-break/>    "cheerio": "jquery"<text:line-break/>  },<text:line-break/>  "dependencies": {<text:line-break/>    "cheerio": "^0.17.0",<text:line-break/>    "jquery": "^2.1.1",<text:line-break/>  },<text:line-break/>  "devDependencies": {<text:line-break/>    "browserify": "^5.0.0"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ browserify npm/browserify.js -o npm/browserify.bundle.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">uglify-js</text:h><text:p>uglify-js compile de l&amp;#8217;ECMAScript en ECMAScript mais en plus de concaténer plusieurs fichiers en un seul, il peut également minifier voire supprimer le code inutilisé par votre application.</text:p><text:p>npmjs.com/uglify-js</text:p><text:p>ufglify-js s&amp;#8217;utilise via son exécutable, son API Node ou encore via des outils comme Grunt, Gulp ou browserify.<text:line-break/>Certaines options vous seront très utiles, comme par exemple&amp;#160;:</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* --mangle&amp;#160;: compresse le code de manière plus agressive en renommant les déclarations pour gagner de la place&amp;#160;;,* --compress&amp;#160;: définit des options de compression supplémentaires telles que la suppression des appels à console.log et la suppression du code non-utilisé&amp;#160;;,* --source-map&amp;#160;: produit un fichier Source Maps facilitant le débogage du code minifié .<text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Templating</text:h><text:p>Les librairies de templating proposent chacune à leur manière d&amp;#8217;associer une structure de données à une logique de présentation.</text:p><text:p>Node n&amp;#8217;y échappe pas bien sûr, mais a l&amp;#8217;avantage de disposer de langages de templating fonctionnant aussi bien dans un environnement Node que dans des navigateurs Web.</text:p><text:p>Tous les exemples suivant généreront cette sortie HTML&amp;#160;:</text:p><text:h text:outline-level="3">nunjucks</text:h><text:p>nunjucks est un portage de Jinja, librairie bien connue par<text:line-break/>les personnes développant en Python.<text:line-break/>Sa syntaxe inclut des fonctionnalités comme les filtres, les blocs ou l&amp;#8217;héritage de gabarit.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/nunjucks</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>&amp;lt;head&amp;gt;<text:line-break/>  &amp;lt;title&amp;gt;{{ title | default('Template demo') | capitalize }}&amp;lt;/title&amp;gt;<text:line-break/>&amp;lt;/head&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>{% set items = ['Node.js', 'CSS maintenables', 'Open Sky'] -%}<text:line-break/>&amp;lt;ul&amp;gt;<text:line-break/>{% for item in items|sort -%}<text:line-break/>  &amp;lt;li&amp;gt;{{ item }}&amp;lt;/li&amp;gt;<text:line-break/>{% endfor -%}<text:line-break/>&amp;lt;/ul&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">handlebars</text:h><text:p>handlebars et son prédécesseur mustache sont les vétérans du templating Node.<text:line-break/>Leur parti pris est de proposer le minimum de logique afin que celle-ci reste au plus près des données.</text:p><text:p>handlebars compile ou précompile les gabarits en des fonctions ECMAScript.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/handlebars</text:p><text:p>Cela présuppose que les données adéquates soient passées à la fonction de template Handlebars.template['template.hbs'].</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>&amp;lt;head&amp;gt;<text:line-break/>  &amp;lt;title&amp;gt;{{#if title}}{{title}}{{else}}Template demo{{/if}}&amp;lt;/title&amp;gt;<text:line-break/>&amp;lt;/head&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>&amp;lt;ul&amp;gt;<text:line-break/>  {{#each items}}<text:line-break/>  &amp;lt;li&amp;gt;{{.}}&amp;lt;/li&amp;gt;<text:line-break/>  {{/each}}<text:line-break/>&amp;lt;/ul&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">pug</text:h><text:p>pug s&amp;#8217;inspire de yaml en optant pour un parti pris à base d&amp;#8217;indentation et d&amp;#8217;un balisage dépourvu de chevron.<text:line-break/>Son mécanisme de blocs facilite la réutilisation de logiques d&amp;#8217;affichage au sein de votre application.</text:p><text:p>Compatible Node et navigateurs Web .<text:line-break/>npmjs.com/pug</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>doctype html<text:line-break/>html<text:line-break/>  head<text:line-break/>    title= title || 'Template demo'<text:line-break/>  body<text:line-break/>    ul<text:line-break/>      each item in ['Node.js', 'CSS maintenables', 'Open Sky']<text:line-break/>        li= item<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">ejs</text:h><text:p>ejs part du principe qu&amp;#8217;il n&amp;#8217;y a pas besoin d&amp;#8217;un langage de templating autre qu&amp;#8217;ECMAScript.<text:line-break/>Donc c&amp;#8217;est tout simplement ce qui vous sera proposé, impliquant de ce fait une faible courbe d&amp;#8217;apprentissage.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/ejs</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>&amp;lt;head&amp;gt;<text:line-break/>  &amp;lt;title&amp;gt;&amp;lt;%= typeof title === 'string' ? title : 'Template demo' %&amp;gt;&amp;lt;/title&amp;gt;<text:line-break/>&amp;lt;/head&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>&amp;lt;ul&amp;gt;<text:line-break/>  &amp;lt;% ['Node.js', 'CSS maintenables', 'Open Sky'].forEach((item) =&amp;gt; { -%&amp;gt;<text:line-break/>  &amp;lt;li&amp;gt;&amp;lt;%= item %&amp;gt;&amp;lt;/li&amp;gt;<text:line-break/>  &amp;lt;% }); -%&amp;gt;<text:line-break/>&amp;lt;/ul&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">react</text:h><text:p>react est une librairie de présentation essentiellement connue pour son approche efficace du côté des navigateurs Web.<text:line-break/>Ce qui est moins connu en revanche est sa capacité à pouvoir également générer du balisage côté Node et de servir de moteur de rendu pour des frameworks comme express.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/react</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const React, { Component } = require('react');<text:line-break/><text:line-break/>class BookList extends Component {<text:line-break/>  render() {<text:line-break/>    return (&amp;lt;ul&amp;gt;<text:line-break/>      {this.props.books.map((bookName, i) =&amp;gt; (<text:line-break/>        &amp;lt;li key={i}&amp;gt;{bookName}&amp;lt;/li&amp;gt;<text:line-break/>      ))}<text:line-break/>    &amp;lt;/ul&amp;gt;);<text:line-break/>  }<text:line-break/>}<text:line-break/><text:line-break/>BookList.defaultProps = {<text:line-break/>  books: [],<text:line-break/>};<text:line-break/><text:line-break/>BookList.propTypes = {<text:line-break/>  books: React.PropTypes.array,<text:line-break/>};<text:line-break/><text:line-break/>const App = (props) =&amp;gt; {<text:line-break/>  return (<text:line-break/>    &amp;lt;html&amp;gt;<text:line-break/>      &amp;lt;head&amp;gt;<text:line-break/>        &amp;lt;title&amp;gt;{props.title || 'Template demo'}&amp;lt;/title&amp;gt;<text:line-break/>      &amp;lt;/head&amp;gt;<text:line-break/>      &amp;lt;body&amp;gt;<text:line-break/>        &amp;lt;BookList books={props.books} /&amp;gt;<text:line-break/>      &amp;lt;/body&amp;gt;<text:line-break/>    &amp;lt;/html&amp;gt;<text:line-break/>  );<text:line-break/>};<text:line-break/><text:line-break/>module.exports = App;<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>&amp;lt;!DOCTYPE html&amp;gt;<text:line-break/>&amp;lt;html&amp;gt;<text:line-break/>&amp;lt;head&amp;gt;<text:line-break/>  &amp;lt;title&amp;gt;Template demo&amp;lt;/title&amp;gt;<text:line-break/>&amp;lt;/head&amp;gt;<text:line-break/>&amp;lt;body&amp;gt;<text:line-break/>&amp;lt;ul&amp;gt;<text:line-break/>&amp;lt;li&amp;gt;CSS maintenables&amp;lt;/li&amp;gt;<text:line-break/>&amp;lt;li&amp;gt;Node.js&amp;lt;/li&amp;gt;<text:line-break/>&amp;lt;li&amp;gt;Open Sky&amp;lt;/li&amp;gt;<text:line-break/>&amp;lt;/ul&amp;gt;<text:line-break/>&amp;lt;/body&amp;gt;<text:line-break/>&amp;lt;/html&amp;gt;<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Tests</text:h><text:p>L&amp;#8217;outillage permettant de tester vos applications est également richement fourni.<text:line-break/>Il y a bien sûr de quoi couvrir les tests unitaires, générer des couverture de code, exécuter les tests dans différents navigateurs, tester vos API HTTP ou encore créer des stubs et des mocks.</text:p><text:p>Node dispose de sa propre API d&amp;#8217;assertion&amp;#160;: vous pouvez donc vous lancer dans vos premiers tests simplement en exécutant un module Node faisant appel à ce module natif.</text:p><text:p>Une exception sera levée à chaque fois qu&amp;#8217;une assertion ne sera pas satisfaite.</text:p><text:h text:outline-level="3">tape</text:h><text:p>tape est probablement la librairie d&amp;#8217;exécution de tests et d&amp;#8217;assertion la plus simple qui soit.<text:line-break/>Extrêmement simpliste, elle se base sur la sortie de console.log pour s&amp;#8217;assurer de l&amp;#8217;état global d&amp;#8217;exécution des tests.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/tape</text:p><text:p><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const test = require('tape');<text:line-break/><text:line-break/>test('Date test', (t) =&amp;gt; {<text:line-break/>  t.plan(1);<text:line-break/><text:line-break/>  t.ok(Date.now() &amp;gt; new Date('2013-03-24').getTime());<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">sinon</text:h><text:p>sinon est votre compagnon idéal pour gérer spys, stubs et mocks.<text:line-break/>En d&amp;#8217;autres termes, vous prenez la main sur des portions de votre propre API pour vérifier que leur comportement répond comme prévu aux signaux de leur environnement.</text:p><text:p>sinon peut étendre chai via le module sinon-chai ou être utilisé directement avec le framework de tests buster.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/sinon</text:p><text:p><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>'use strict';<text:line-break/><text:line-break/>const test = require('tape');<text:line-break/>const sinon = require('sinon');<text:line-break/><text:line-break/>test('Date', (t) =&amp;gt; {<text:line-break/>  t.plan(3);<text:line-break/><text:line-break/>  const d = Date;<text:line-break/>  const stub = sinon.stub(d, 'now');<text:line-break/>  stub.returns(9999999999999);<text:line-break/><text:line-break/>  d.now();<text:line-break/>  t.equal(stub.calledOnce, true);<text:line-break/>  t.equal(stub.returnValues[0] &amp;gt; new Date('1983-03-24').getTime(), true);<text:line-break/><text:line-break/>  stub.returns(100);<text:line-break/>  d.now();<text:line-break/><text:line-break/>  t.equal(stub.returnValues[0] &amp;gt; new Date('1983-03-24').getTime(), true);<text:line-break/>});<text:line-break/>----<text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">nyc</text:h><text:p>nyc génère une couverture de code en inspectant le code exécuté par vos tests unitaires.<text:line-break/>Les portions de votre applications ignorées par vos tests sont signalées et une exception peut être lancée si un seuil de couverture n&amp;#8217;est pas atteint.</text:p><text:p>nyc se greffe sur n&amp;#8217;importe quel librairie d&amp;#8217;exécution de tests et se base sur la librairie istanbul pour calculer la couverture de code.</text:p><text:p>npmjs.com/nyc<text:line-break/>npmjs.com/istanbul</text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">karma</text:h><text:p>karma est un utilitaire d&amp;#8217;exécution de tests unitaires dans un contexte de navigateur Web.<text:line-break/>Ces navigateurs peuvent tout aussi bien être ceux présents sur votre machine, que des navigateurs résidant dans une VM ou exécutés à distance via des services comme SauceLabs ou BrowserStack.</text:p><text:p>npmjs.com/karma</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">supertest</text:h><text:p>supertest est une librairie de tests pour API HTTP.<text:line-break/>Autrement dit, au lieu de tester directement le code de votre application, vous testez le comportement de votre API au travers des codes HTTP et des structures de données exposées.</text:p><text:p>npmjs.com/supertest</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">eslint</text:h><text:p>eslint teste la qualité de votre code et signale des pratiques de programmation à risque.</text:p><text:p>Disponible via une invocation en ligne de commande, libre à vous de paramétrer le comportement du linter selon vos propres règles ou selon des règles pré-établies, partagées sur le registre npm.</text:p><text:p>C&amp;#8217;est un excellent moyen d&amp;#8217;éviter des bugs tout en uniformisant vos pratiques de codage au sein de vos applications.</text:p><text:p>npmjs.com/eslint</text:p><text:p><text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/>* nodejs.org/api/assert.html<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Automatisation</text:h><text:p>L&amp;#8217;automatisation de tâches et leur inclusion dans vos projets sont d&amp;#8217;excellents moyens pour rendre explicite votre outillage tout en le rendant reproductible et vérifiable.</text:p><text:h text:outline-level="3">npm-run-all</text:h><text:p>npm-run-all est mon outil favori pour composer avec les scripts npm.<text:line-break/>Il a l&amp;#8217;avantage d&amp;#8217;être versatile, de permettre de régler finement ce qui doit être exécuté en parallèle ou en série et transfère les options aux sous-scripts.</text:p><text:p>npmjs.com/npm-run-all</text:p><text:p><text:line-break/>----<text:line-break/>{<text:line-break/>  "scripts": {<text:line-break/>    "build": "npm-run-all --parallel 'build:*' --serial start",<text:line-break/>    "build:css": "echo 'build css' &amp;amp;&amp;amp; sleep 1",<text:line-break/>    "build:js": "echo 'build js' &amp;amp;&amp;amp; sleep 2",<text:line-break/>    "start": "echo 'start http server'"<text:line-break/>  },<text:line-break/>  "dependencies": {<text:line-break/>    "npm-run-all": "^4.0.1"<text:line-break/>  }<text:line-break/>}<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/></text:p><text:p><text:line-break/></text:p><text:h text:outline-level="2">Internet of Things</text:h><text:h text:outline-level="3">nitrogen</text:h><text:p>nitrogen est une plateforme permettant de gérer les interactions entre différents périphériques, sur un même réseau local et à travers Internet.</text:p><text:p>La librairie se base sur un mécanisme déclaratif de fonctionnalités et de terminaux ainsi que la publication de messages.</text:p><text:p>npmjs.com/nitrogen</text:p><text:p><text:line-break/><text:line-break/></text:p><text:h text:outline-level="3">serialport</text:h><text:p>serialport est une librairie pour communiquer avec tout appareil bénéficiant d&amp;#8217;un port série et relié à un périphérique via un port USB.</text:p><text:p>npmjs.com/serialport</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">firmata</text:h><text:p>firmata est un firmware, un protocole de communication ainsi qu&amp;#8217;une librairie de communication pour microcontrôleur Arduino.<text:line-break/>Le module Node permet de communiquer via ce protocole avec un Arduino préalablement flashé avec Firmata.</text:p><text:p>npmjs.com/firmata</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">johnny-five</text:h><text:p>johnny-five est une librairie haut niveau pour Arduino, Raspberry Pi et autres microcontrôleurs.<text:line-break/>Son API expose des fonctionnalités de manipulations avancées pour simplifier les interactions avec des moteurs, des servo-contrôleurs, des capteurs etc.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/johnny-five</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">cylon</text:h><text:p>cylon est une autre librairie haut niveau orientée vers la programmation d&amp;#8217;interactions pour robots.<text:line-break/>Son interface est particulièrement adaptée pour manipuler et réagir plusieurs robots entre eux.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/cylon</text:p><text:p><text:line-break/></text:p><text:h text:outline-level="3">node-red</text:h><text:p>node-red est une interface visuelle de programmation d&amp;#8217;objets connectés.<text:line-break/>Le module Node démarre un serveur web dont l&amp;#8217;interface a pour but de relier des sources de données, des interactions possibles ainsi que les objets devant recevoir les instructions.</text:p><text:p>Compatible Node et navigateurs Web.<text:line-break/>npmjs.com/node-red</text:p><text:p><text:line-break/></text:p><text:p><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p><text:h text:outline-level="2">Optimisation des images</text:h><text:p>* génération de sprites,* réduction du poid des fichiers,* génération de vignettes,* SVG www.npmjs.com/svgo<text:line-break/></text:p><text:h text:outline-level="2">Optimisation des fontes</text:h><text:p>* optimisation des chemins,* iconfontes,* npmjs.com/connect-fonts<text:line-break/></text:p><text:h text:outline-level="2">Accessibilité</text:h><text:p>* a11y,* chai-a11y<text:line-break/></text:p><text:h text:outline-level="2">Livereload</text:h><text:p>* watcher,* livereload,* HMR (Hot Module Replacement)<text:line-break/></text:p><text:h text:outline-level="2">Rendu graphique</text:h><text:h text:outline-level="3">Rendu 2D</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Rendu 3D</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/></text:p><text:h text:outline-level="2">Rendu sonore</text:h><text:h text:outline-level="3">Codecs</text:h><text:p>TBD.</text:p><text:p></text:p><text:h text:outline-level="3">Web Audio</text:h><text:p>TBD.</text:p><text:p></text:p><text:p><text:line-break/></text:p><text:p><text:line-break/><text:line-break/>* TBD.<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ npm install --global nodebook<text:line-break/>$ nodebook install appendix-a<text:line-break/>$ cd $(nodebook dir appendix-a)<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/>----<text:line-break/>$ node hello.js<text:line-break/>----<text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/><text:line-break/></text:p></office:text></office:body></office:document>