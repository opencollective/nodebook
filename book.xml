<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="fr">
<info>
<title>Node.js</title>
<date>2018-06-13</date>
<author>
<personname>
<firstname>Thomas</firstname>
<surname>Parisot</surname>
</personname>
<email>nodebook@thomas.parisot.me</email>
</author>
<authorinitials>TP</authorinitials>



</info>
<preface xml:id="préface_de_david_bruant">
<title>Préface de David Bruant</title>
<caution>
<simpara>Cette section est en cours de rédaction.</simpara>
</caution>
</preface>
<dedication xml:id="avant_propos">
<title>Avant-propos</title>
<simpara><emphasis role="strong">Node.js</emphasis>&#160;– appelons-le <emphasis role="strong">Node</emphasis> dès à présent&#160;– est né dans le cerveau de Ryan Dahl, ancien étudiant sans le sou et au parcours informatique atypique.
Son talent a été de s&#8217;obstiner à <emphasis role="strong">résoudre un problème d&#8217;expérience utilisateur</emphasis> fréquent sur le web&#160;: <emphasis role="strong">l&#8217;attente devant un navigateur web figé</emphasis>.
Son but&#160;? Rendre possible et facile la création de <emphasis role="strong">barres de progression</emphasis> dans les navigateurs Web.</simpara>
<simpara>J&#8217;ai utilisé Node pour la première fois en 2010, par curiosité.
On en était alors qu&#8217;à la version <literal>0.4</literal>.
Pouvoir créer mon propre serveur HTTP me semblait étrange, moi qui étais un habitué du duo PHP et Apache.
<emphasis role="strong">L&#8217;effet <emphasis>wahou</emphasis> était pourtant là</emphasis>&#160;: une installation en quelques secondes, quelques lignes de JavaScript et j&#8217;avais une API REST câblée avec une base de données <emphasis>CouchDB</emphasis> pour impressionner mes collègues de l&#8217;agence <emphasis>Clever Age</emphasis>.</simpara>
<simpara>Je bascule dans un <emphasis role="strong">contexte startup</emphasis> fin 2011&#160;: nous sommes quatre développeurs avec des bagages différents.
Nous partons sur Node que notre hébergeur <emphasis>Alwaysdata</emphasis> installe sans encombre.
Nous avions la <emphasis role="strong">sensation de progresser rapidement</emphasis>.
Nous allions <emphasis>réellement</emphasis> vite.<?asciidoc-br?>
<emphasis role="strong">JavaScript était devenu notre langue commune grâce à Node</emphasis>.</simpara>
<simpara>Depuis, de nombreuses entreprises ont communiqué sur leur adoption de Node&#160;:  Paypal, LinkedIn, eBay, Airbnb, British Gaz, Allociné, The New York Times, Yahoo!, Microsoft, Mozilla, Flickr ou encore Twitter.
Leur utilisation couvre aussi bien l&#8217;outillage métier que les transactions bancaires, des serveurs LDAP, des web services ou des sites web.</simpara>
<simpara>Pourtant, nombre d&#8217;ouvrages et de ressources se focalisent uniquement sur le dernier <emphasis>framework</emphasis> ou librairie à la mode en passant à côté de l&#8217;essentiel.</simpara>
<section xml:id="pourquoi_ce_livre">
<title>Pourquoi ce livre ?</title>
<simpara><emphasis role="strong">Node est un environnement plaisant et agréable à utiliser</emphasis>, c&#8217;est ce que j&#8217;aime et aspire à partager avec vous au cours des prochaines pages de cet ouvrage.</simpara>
<simpara>Node est <emphasis role="strong">mon outil de travail principal</emphasis> depuis 2011.
Outillage, tests, API, applications, prototypes et automatisation.
Sa simplicité, son architecture et l&#8217;emphase sur la modularité m&#8217;ont fait <emphasis role="strong">progresser dans l&#8217;usage de JavaScript</emphasis> ainsi que sur la compréhension bas-niveau des systèmes d&#8217;exploitation.</simpara>
<simpara>Je souhaite offrir un <emphasis role="strong">contenu moins technique que d&#8217;ordinaire</emphasis>, plus pratique et encourageant la bidouille&#160;: le livre lui-même peut être installé avec Node, lu et pratiqué dans un <emphasis>shell</emphasis>.</simpara>
<simpara>Je souhaite aussi <emphasis role="strong">partager les principes clés de Node</emphasis> et de la programmation JavaScript.
Ces principes traversent le temps et vous donneront, je l&#8217;espère, un appétit et des bases plus solides pour créer de petits programmes, faire un prototype rapide ou déployer une application complète.</simpara>
<simpara>Enfin, l&#8217;écriture de ce livre est également pour moi l&#8217;occasion d'<emphasis role="strong">apprendre de mes pairs</emphasis>, de leurs heures d&#8217;expérience en tant que formateurs, d&#8217;explorer des sujets qui me font peur et sur lesquels je ne me sens pas à l&#8217;aise.</simpara>
<simpara>Indirectement, je veux <emphasis role="strong">déconstruire la posture de l&#8217;expert et du lecteur</emphasis> en ouvrant le contenu pendant le processus d&#8217;écriture, dans un endroit où éditeur, lecteurs et auteurs apprennent les uns des autres.</simpara>
</section>
<section xml:id="à_qui_s_adresse_cet_ouvrage">
<title>À qui s&#8217;adresse cet ouvrage ?</title>
<simpara>Réponse <emphasis>courte</emphasis>&#160;: <emphasis role="strong">à tout le monde</emphasis>. Vraiment.</simpara>
<simpara>Réponse <emphasis>informelle</emphasis>&#160;: à toute <emphasis role="strong">personne curieuse</emphasis> ou <emphasis role="strong">souhaitant apprendre</emphasis> ou <emphasis role="strong">s&#8217;améliorer en programmation</emphasis>, sans forcément trop savoir par où commencer.
Je crois fermement qu&#8217;apprendre à programmer n&#8217;implique pas de faire de la programmation son métier ni de pratiquer sans erreur&#160;– on peut avoir envie de <emphasis role="strong">découvrir par plaisir</emphasis>, par <emphasis role="strong">envie de comprendre</emphasis> ses pairs ou pour <emphasis role="strong">engager une conversation</emphasis> avec ses collègues.</simpara>
<simpara>Réponse <emphasis>formelle</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>à des personnes dont la <emphasis role="strong">programmation est le métier</emphasis> mais pratiquant peu ou pas assez JavaScript&#160;;</simpara>
</listitem>
<listitem>
<simpara>à des personnes adeptes du <emphasis role="strong">développement <emphasis>front-end</emphasis></emphasis> et cherchant à mieux s&#8217;outiller&#160;;</simpara>
</listitem>
<listitem>
<simpara>à des <emphasis role="strong">personnes non-techniques</emphasis> qui chercheraient à prototyper une idée d&#8217;application dans le cadre d&#8217;un projet perso ou d&#8217;une startup&#160;;</simpara>
</listitem>
<listitem>
<simpara>à des personnes souhaitant <emphasis role="strong">introduire de nouvelles pratiques</emphasis> dans leur équipe&#160;;</simpara>
</listitem>
<listitem>
<simpara>à des personnes cherchant à faire de JavaScript une
<emphasis role="strong">langue commune entre le <emphasis>back-end</emphasis> et le <emphasis>front-end</emphasis></emphasis> de leurs applications.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="structure_de_l_ouvrage">
<title>Structure de l&#8217;ouvrage</title>
<simpara>Cet ouvrage a été conçu pour être lu dans <emphasis>deux ordres</emphasis>&#160;:
<emphasis role="strong">séquentiel</emphasis>, comme une histoire et <emphasis role="strong">transversal</emphasis>, en fonction de vos envies.</simpara>
<simpara>Cette édition se compose de <emphasis>neuf chapitres</emphasis>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Histoire, écosystème et gouvernance</emphasis><?asciidoc-br?>
Nous apprendrons d&#8217;où vient Node et qui sont les acteurs participant à son histoire.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Installer, mettre à jour et développer</emphasis><?asciidoc-br?>
Nous apprendrons à être autonome pour installer Node.js
sur notre ordinateur ou un serveur, se tenir au courant
des mises à jour et jongler entre différentes versions.
Ce sera aussi l&#8217;occasion de découvrir des outils confortables
pour écrire du code.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec JavaScript</emphasis><?asciidoc-br?>
Nous apprendrons à comprendre les différences entre
JavaScript, ECMAScript, le DOM et Node.js.
Ce sera aussi l&#8217;occasion de revoir les bases du langage
pour se sentir plus à l&#8217;aise.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec Node.js</emphasis><?asciidoc-br?>
Nous apprendrons à manipuler des scripts et des modules Node.js&#160;:
les notres, ceux fournis par Node et ceux de la communauté.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Jouer avec npm</emphasis><?asciidoc-br?>
Nous apprendrons à tirer parti de l&#8217;outil livré par défaut avec Node.js.
Ce sera l&#8217;occasion de s&#8217;amuser à créer nos propres
outils dignes d&#8217;artisans du logiciel.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Déployer notre code</emphasis><?asciidoc-br?>
Nous apprendrons à déployer notre code le plus tôt possible pour célébrer notre premier programme&#160;!</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer une application web</emphasis><?asciidoc-br?>
Nous apprendrons à créer une application web en partant de zéro,
en utilisant un <emphasis>framework</emphasis> puis en parlant à une base de données.
Bienvenue dans l&#8217;odyssée d&#8217;une requête HTTP&#160;!</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer un outil en ligne de commande</emphasis><?asciidoc-br?>
Nous apprendrons à rendre du code métier fonctionnel dans un terminal.
La ligne de commande ne paraîtra plus aussi austère après ça.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Créer une application front-end</emphasis><?asciidoc-br?>
Nous apprendrons à utiliser la richesse de l&#8217;écosystème npm
et à profiter des modules pour écrire des
applications front-end de qualité.</simpara>
</listitem>
</orderedlist>
<simpara>Des <emphasis role="strong">annexes</emphasis> complètent l&#8217;ouvrage avec une <emphasis role="strong">sélection de modules <emphasis>npm</emphasis></emphasis>
et des exemples de <emphasis role="strong">design patterns</emphasis>.
De quoi élargir notre perception et écrire du code plus robuste.</simpara>
<simpara>Cet ouvrage est également consultable sur <emphasis>cinq supports</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">livre</emphasis>, le format par excellence&#160;— vendu en librairie et sur Internet&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">e-book</emphasis>, idéal si vous disposez d&#8217;une liseuse numérique&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">web</emphasis>, idéal pour bénéficier d&#8217;exemples interactifs, des exemples vidéo et d&#8217;un contenu à jour&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">npm</emphasis>, idéal pour apprendre Node.js par la pratique&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">source</emphasis>, idéal pour proposer ou corriger le contenu et apprendre comment l&#8217;ouvrage est constitué.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Ressources</phrase> Contenu en <phrase role="line-through">livre</phrase> libre accès</title>
<simpara>Le contenu de cet ouvrage est géré grâce à la plate-forme collaborative <emphasis>GitHub</emphasis>.
Cette plate-forme me permet d&#8217;obtenir des retours, idées et suggestions.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/oncletom/nodebook">github.com/oncletom/nodebook</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="remerciements">
<title>Remerciements</title>
<simpara>Cet ouvrage a été rédigé sur près de <emphasis>quatre années</emphasis>&#160;– longue est la liste
exhaustive des personnes à remercier.
Longue aussi est la liste de celles et ceux à qui je dois m&#8217;excuser pour mes
sautes d&#8217;humeur, mes absences ou mes passages à vide.
Écrire est une activité que je trouve éprouvante et nécessite une attention
particulière vis à vis de moi-même pour ne pas (trop) en souffrir.</simpara>
<simpara>Mes premiers remerciements vont à Noémie.
Ta joie, tes encouragements et ta présence sont essentiels à mon équilibre.
Ils me donnent confiance, m&#8217;inspirent et atténuent les peurs qui me paralysent.</simpara>
<simpara>Je remercie Karine, Laurène, Elsa et Alexandre d'<emphasis>Eyrolles</emphasis> pour cette opportunité.
Je trouve que vous avez fait preuve d&#8217;une patience et d&#8217;une confiance
infinies malgré tous ces rebondissements.</simpara>
<simpara>Je tiens à remercier mes anciens collègues de BBC R&amp;D pour leur soutien,
leur confiance et leur tolérance aux jeux de mots.
Olivier, Sean, Katie, Chris N et Chris L&#160;: c&#8217;était un plaisir et un honneur
d&#8217;être à vos côtés.</simpara>
<simpara>Certain·e·s d&#8217;entre vous m&#8217;ont beaucoup aidé de par leurs conseils, leurs relectures et leurs encouragements.
Alors un grand merci Stéphane, Frank, Thierry, Boris, Béa, Efi, Alexandra, Thomas, Xavier, Bastien, Nicolas C, n1k0 et Loic.</simpara>
<simpara>J&#8217;ai organisé une résidence d&#8217;écriture itinérante de janvier à mars 2017.
On m&#8217;a hébergé, nourri et parfois blanchi.
Merci beaucoup beaucoup Maxime W, Brice F, Nicolas F, les gens du Yelloworking à Aix, Antoine F, les gens de la Coop à Grenoble, Cédric et Hélyette, Agnès, les gens de Mix-IT, les gens de la Cordée à Lyon, Maxime L, les gens de la Myne à Villeurbane, Clément D et Quentin A, les gens de Clever Cloud, Thomas M et Lilian M, les gens du ByteClub, Alexis J, les gens de Matlo, les gens du Fab Lab 127°, Arnaud R, Ismaël H et les gens de BetaGouv.</simpara>
<simpara>Bonne lecture,</simpara>
<simpara>—&#160;Thomas Parisot • <phrase role="URL"><link xl:href="https://oncletom.io">oncletom.io</link></phrase></simpara>
</section>
</dedication>
<chapter xml:id="histoire_écosystème_et_gouvernance">
<title>Histoire, écosystème et gouvernance</title>
<simpara>Node.js génère beaucoup de discussions, d&#8217;intérêts et d&#8217;envies.</simpara>
<simpara>Dans ce chapitre, nous allons faire le point sur ce qu&#8217;est Node.js pour mieux comprendre dans quel cambouis nous allons plonger les mains.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Comprendre ce qu&#8217;est Node.js</simpara>
</listitem>
<listitem>
<simpara>Savoir qui assure la gouvernance de Node.js</simpara>
</listitem>
<listitem>
<simpara>Décider si Node.js et JavaScript peuvent compléter ou remplacer le langage de programmation de votre entreprise/organisation</simpara>
</listitem>
<listitem>
<simpara>Pourquoi autant de <emphasis>hype</emphasis>&#160;?</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Node.js est-il un langage de programmation&#160;?
Node.js est-il un <emphasis>framework</emphasis> JavaScript&#160;?
Qu&#8217;en restera-t-il une fois la frénésie retombée&#160;?</simpara>
<simpara>Ce chapitre permet de <emphasis role="strong">comprendre pourquoi Node a émergé</emphasis> et comment.
Surtout, il vous permettra de comprendre les choix techniques
à l&#8217;origine des fondations de Node et ce que l&#8217;utiliser
peut vous apporter, que ce soit dans un contexte personnel ou professionnel.</simpara>
</abstract>
<section xml:id="node_js_un_environnement_d_exécution_javascript">
<title>Node.js : un environnement d&#8217;exécution JavaScript</title>
<simpara>Node.js n&#8217;est pas un langage de programmation. Node.js n&#8217;est pas non plus un <emphasis>framework</emphasis> JavaScript. <emphasis role="strong">Node.js est un environnement d&#8217;exécution JavaScript</emphasis>.<?asciidoc-br?>
La différence entre ces trois désignations peut sembler subtile, futile voire inutile mais le terme <emphasis role="strong">environnement</emphasis> est la véritable nature de Node.</simpara>
<simpara><emphasis role="strong">Exécuter du JavaScript côté serveur n&#8217;est pas une révolution</emphasis>.<?asciidoc-br?>
L&#8217;entreprise <emphasis>Netscape</emphasis> s&#8217;y est déjà essayée au début des années 1990 avec <emphasis>Netscape Enterprise Server</emphasis>, juste après l&#8217;avoir introduit dans son navigateur web <emphasis>Netscape Navigator</emphasis>.</simpara>
<simpara>En 1997, <emphasis>Netscape</emphasis> s&#8217;est attelée à créer <emphasis>Rhino</emphasis> (<phrase role="URL"><link xl:href="https://www.mozilla.org/rhino/">www.mozilla.org/rhino/</link></phrase>), un environnement d&#8217;exécution JavaScript tournant sous Java disponible sous licence libre.
<emphasis>Rhino</emphasis> était un des projets liés à la réécriture de <emphasis>Netscape Navigator</emphasis> en Java.
Si <emphasis>Netscape</emphasis> a depuis fermé ses portes, <emphasis>Rhino</emphasis> a permis l&#8217;émergence de projets utiles aux développeurs web.</simpara>
<simpara>Entre temps le langage JavaScript évolue, le <emphasis>Web 2.0</emphasis> émerge des cendres de la première bulle Internet et d&#8217;autres initiatives émergent dans les années 2000 comme <emphasis>APE</emphasis> (<emphasis>Ajax Push Engine</emphasis>, <phrase role="URL"><link xl:href="http://ape-project.org/">ape-project.org/</link></phrase>).
Elles mettent également en œuvre JavaScript côté serveur.
JavaScript était surtout un choix logique de partage de code entre client et serveur pour Comet, le précurseur des <link xl:href="../chapter-09/index.xml#websockets">WebSockets</link>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> Comet</title>
<simpara><emphasis>Comet</emphasis> est un terme regroupant les différentes tentatives techniques permettant à un serveur web d&#8217;envoyer des données à un client sans que celui-ci ne les ait demandées initialement.</simpara>
<simpara>Parmi ces techniques, on retrouve le <emphasis>long polling</emphasis>, consistant à conserver une connexion Ajax ouverte pendant la durée de vie d&#8217;une page web.</simpara>
</tip>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> WebSockets</title>
<simpara><emphasis>WebSockets</emphasis> est un protocole basé sur TCP.</simpara>
<simpara>Il permet de maintenir une connexion HTTP active entre un client et un serveur et d&#8217;y faire transiter les données de manière bidirectionnelle.</simpara>
<simpara>Ce protocole sera probablement rendu obsolète par <emphasis>HTTP/2</emphasis>&#160;— le successeur d'<emphasis>HTTP/1.1</emphasis>.
<emphasis>HTTP/2</emphasis> a été initié par Google sous le nom de protocole
<emphasis>SPDY</emphasis> (prononcer <emphasis>speedy</emphasis>).</simpara>
</tip>
<tip>
<title>Cas d&#8217;utilisation modernes de <emphasis>Rhino</emphasis>.</title>
<simpara>Rhino est toujours utile dès qu&#8217;un projet Java implique du JavaScript.</simpara>
<simpara>Google l&#8217;utilise comme environnement d&#8217;exécution de ses <link xl:href="https://gsuite-developers.googleblog.com/2012/11/using-open-source-libraries-in-apps.html">Apps Scripts</link>.
Ces scripts permettent à tout un chacun de développer des extensions et des interactions supplémentaires pour les documents Google Drive.</simpara>
<simpara>Rhino est également employé dans <emphasis>yuicompressor</emphasis> (<phrase role="URL"><link xl:href="https://yui.github.io/yuicompressor/">yui.github.io/yuicompressor/</link></phrase>), un optimiseur CSS et JavaScript créé par Yahoo.
<emphasis>yuicompressor</emphasis> a été surpassé par <emphasis>Closure Compiler</emphasis> (<phrase role="URL"><link xl:href="https://developers.google.com/closure/compiler/">developers.google.com/closure/compiler/</link></phrase>) et <emphasis>UglifyJS</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/uglify-js">npmjs.com/uglify-js</link></phrase>).
Ce dernier est écrit en JavaScript et repose sur Node.<?asciidoc-br?>
La boucle est bouclée.</simpara>
</tip>
<simpara>Node représente un <emphasis role="strong">environnement d&#8217;exécution</emphasis> (<emphasis>runtime</emphasis>), un <emphasis role="strong">ensemble d&#8217;API JavaScript</emphasis> ainsi qu&#8217;une <emphasis role="strong">machine virtuelle (VM) JavaScript</emphasis> performante (parseur, interpréteur et compilateur) pouvant accéder à des ressources système telles que des fichiers (<emphasis>filesystem</emphasis>) ou des connexions réseau (<emphasis>sockets</emphasis>).</simpara>
<simpara>Typiquement, une personne développant en Node écrit du code se basant sur les API à disposition.
Ce code est lu par le <emphasis>runtime</emphasis> Node qui le transmet à la VM JavaScript. Enfin, la VM traduit le programme en langage machine (<emphasis>bytecode</emphasis>) avant que le programme soit effectivement exécuté par le processeur.</simpara>
<simpara>Pour comprendre comment Node a opté pour cette approche, retournons en 2009, lorsque son créateur <emphasis role="strong">Ryan Dahl</emphasis> cherchait à résoudre élégamment un problème de performance de programmation.</simpara>
</section>
<section xml:id="bref_historique">
<title>Bref historique</title>
<simpara>En 2006, <emphasis>Ryan Dahl</emphasis> est un étudiant américain en troisième année de doctorat de mathématiques.
Si son but initial était de devenir professeur de mathématiques, il prend la décision de ne pas terminer sa thèse et d&#8217;entreprendre un voyage au Chili.</simpara>
<simpara>Alors qu&#8217;il cherche à effectuer des petits boulots, il y rencontre une autre personne développant des sites web.
Ruby on Rails connaît un succès grandissant et attire son attention.
Alors que Ryan envisageait d&#8217;utiliser Rails, il découvre avec horreur la lenteur du <emphasis>framework</emphasis> et cherche à en découvrir les causes.</simpara>
<simpara>Ryan débute alors sa <emphasis role="strong">quête des applications web performantes</emphasis> et découvre <emphasis>Mongrel</emphasis>, un serveur HTTP écrit en Ruby.
Il est séduit par deux choses&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la possibilité d'<emphasis role="strong">inclure</emphasis> un serveur HTTP comme librairie applicative&#160;;</simpara>
</listitem>
<listitem>
<simpara>la simplicité de fonctionnement&#160;: recevoir une requête HTTP et décider soi-même de la réponse à apporter.</simpara>
</listitem>
</itemizedlist>
<simpara>La quête initiale se dirige alors sur la possibilité de créer <emphasis role="strong">un serveur web non bloquant</emphasis>.
En d&#8217;autres termes, un serveur capable dans un même processus de traiter d&#8217;autres requêtes en attendant de renvoyer la réponse initiale.</simpara>
<simpara>Nous sommes alors en 2008 et le site de partage de photos Flickr innove avec un nouveau système de téléversement d&#8217;images&#160;: une <emphasis role="strong">barre de progression</emphasis> représentant le statut du téléversement remplace alors la page figée&#160;– effet  inhérent à l&#8217;envoi de fichiers depuis un formulaire HTML.</simpara>
<figure>
<title>Interface du service Flickr après et avant l&#8217;introduction du téléversement progressif.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/7112862941_3b8c8e9916_o_d.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>7112862941 3b8c8e9916 o d</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce du nouveau Flickr Uploadr</title>
<simpara>L&#8217;équipe d&#8217;ingénierie de Flickr explique comment elle a contourné le problème de l&#8217;upload via un formulaire classique&#160;; problème qui gelait la fenêtre du navigateur pendant la durée du téléversement.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://wp.me/p2DMyG-ok">wp.me/p2DMyG-ok</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>C&#8217;est le <emphasis role="strong">déclic</emphasis> pour Ryan&#160;: <emphasis>Mongrel</emphasis> avait déjà un plug-in pour cette fonctionnalité mais il souhaitait simplifier davantage le travail pour les développeurs.
Il reproduit le mécanisme avec succès en C.
Les développeurs web jugeant la solution trop complexe, Ryan tente la même approche avec d&#8217;autres langages, comme Python, Lua ou même Haskell.
Il se heurte au sempiternel problème des ressources bloquantes des différents interpréteurs.</simpara>
<simpara>Le deuxième <emphasis role="strong">déclic</emphasis> se produit en janvier 2009 lorsque <emphasis>JavaScript</emphasis> émerge dans une discussion entre développeurs.
<emphasis>Eurêka</emphasis>&#160;!
La machine virtuelle JavaScript V8 de Google a été libérée en <emphasis>open source</emphasis> depuis quelques mois et Apple, Microsoft, Mozilla et Google se livrent à une course à la performance de leur machine virtuelle respective.
En ligne de mire, rendre la navigation sur <emphasis>mobile</emphasis> et sur <emphasis>ordinateur</emphasis> plus rapide et moins gourmande en ressources.</simpara>
<simpara>Ryan admet que JavaScript dispose des caractéristiques idéales même s&#8217;il n&#8217;est pas un adepte du langage&#160;: fonctions anonymes, <emphasis>closures</emphasis> et l'<emphasis>event loop</emphasis> (dans le DOM en tous cas).
Il manque juste aux machines virtuelles JavaScript la capacité d&#8217;accéder à des <emphasis>sockets</emphasis>, au système de fichiers et à d&#8217;autres fonctions système.</simpara>
<simpara>Ryan quitte alors son travail, s&#8217;inspire de ses travaux de modules non bloquants pour Nginx et s&#8217;affaire pendant six mois à marier JavaScript, V8 et l&#8217;environnement du système d&#8217;exploitation.
De ces efforts naît Node.js.<?asciidoc-br?>
Il effectue une démonstration de <link xl:href="https://gist.github.com/ry/a3d0bbbff196af633995">serveur IRC écrit en 400 lignes de JavaScript</link> lors de la <link xl:href="https://www.youtube.com/watch?v=ztspvPYybIY">conférence JSConf.eu 2009</link> qui suscite l&#8217;enthousiasme et attire l&#8217;attention.</simpara>
<simpara>L&#8217;entreprise américaine <emphasis>Joyent</emphasis> l&#8217;embauche à plein temps pour continuer le développement de Node.
Ils pressentent que Node répondra à leurs projets de <emphasis>datacenter</emphasis> et d&#8217;hébergement.</simpara>
<simpara><emphasis role="strong">Node et sa communauté sont nés</emphasis> et ont continué à prospérer depuis lors.
Pour une simple affaire de <emphasis>barre de progression</emphasis> et une obsession de <emphasis>perception de rapidité</emphasis>.</simpara>
<simpara>En 2018, l&#8217;avenir de Node est au beau fixe avec plus de 2&#160;000 contributeurs
et plus de 712&#160;000 modules publics hébergés sur le registre <emphasis>npm</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Vidéo</phrase> <emphasis>History of Node.js</emphasis></title>
<simpara>La vidéo suivante est une vidéoconférence donnée par Ryan Dahl, le créateur de Node, au cours de l&#8217;année 2011.
C&#8217;est la première fois qu&#8217;il intervient pour expliquer son parcours et la genèse du projet.</simpara>
<simpara>Peut-être un élément qui figurera dans les livres d&#8217;histoire&#160;!</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.youtube.com/watch?v=SAc0vQCC6UQ">www.youtube.com/watch?v=SAc0vQCC6UQ</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="les_raisons_du_succès">
<title>Les raisons du succès</title>
<simpara>La tension et l&#8217;attention autour de JavaScript sont énormes en 2009.
La mode du tout <emphasis>Ajax</emphasis> et des <emphasis>mashups</emphasis> s&#8217;est estompée mais une chose en est ressortie&#160;: JavaScript n&#8217;a plus à rougir ni à être relégué au rang de sous-langage.
Les initiatives JSLint, CommonJS et les <emphasis>good parts</emphasis> de Douglas Crockford sont pour beaucoup dans la création de code élégant.</simpara>
<simpara>D&#8217;un autre côté, les entreprises développant des navigateurs web se livrent à une féroce compétition d&#8217;optimisation.
Google, Mozilla et Apple ont besoin de navigateurs rapides pour améliorer leurs parts de marché sur les ordinateurs mais aussi les téléphones et tablettes.
On peut considérer que JavaScript est à cette époque le langage de programmation bénéficiant du plus grand investissement financier et humain en R&amp;D.</simpara>
<simpara>La communauté JavaScript accueille avec ferveur Node lors
de la conférence JSConf Europe en 2009.
Elle contribue à son amélioration et à la création d&#8217;un écosystème
de modules réutilisables.</simpara>
<simpara>Il faudra attendre la création de <emphasis>npm</emphasis> au tout début 2010.
<emphasis>npm</emphasis> a pour but d&#8217;héberger des modules Node et de faciliter
leur installation.
Dès lors, une simple commande suffit pour inclure du code écrit par
d&#8217;autres personnes dans nos projets.</simpara>
<simpara><emphasis>npm</emphasis> devient une pierre angulaire.
À tel point qu&#8217;il est inclus dans l&#8217;installation de Node
à partir de la version 0.6.3 en novembre 2011.
La communauté Node fait le reste du travail
en constituant un <emphasis role="strong">écosystème de modules riche et varié</emphasis>&#160;:
frameworks web, drivers de bases de données,
serveurs HTTP, serveurs WebSockets, préprocesseurs CSS,
CoffeeScript, parseurs, proxy, serveurs de log, modules de tests,
langages de <emphasis>templating</emphasis>, etc.</simpara>
<simpara>Malgré ses défauts de jeunesse, Node réussit le tour
de force de la performance&#160;: la recette de l&#8217;accès non-bloquant
a-t-elle fonctionné&#160;?
À en croire les personnes ayant migré vers Node pour ces raisons,
la réponse est <emphasis role="strong">oui</emphasis>.</simpara>
</section>
<section xml:id="avoiding-node">
<title>Pourquoi éviter Node.js ?</title>
<simpara>Il est tentant de vouloir suivre un chemin populaire,
d&#8217;adopter le dernier outil ou <emphasis>framework</emphasis> à la mode.</simpara>
<simpara>J&#8217;ai pourtant envie d&#8217;écrire qu&#8217;il n&#8217;est pas forcément nécessaire
de passer à Node.</simpara>
<simpara>Si votre équipe dispose déjà de fortes compétences,
d&#8217;aisance et de productivité dans un autre langage,
il n&#8217;y a pas de raison de passer à Node.
Cette équipe a tout intérêt à capitaliser sur ses
connaissances pour être efficace et minimiser la dette technique
de ses applications.</simpara>
<simpara>L'<emphasis role="strong">offre logicielle est également à prendre en compte</emphasis>&#160;: CMS,
systèmes e-commerce ou autre application prête à l&#8217;emploi
que la communauté Node n&#8217;offrirait pas à ce jour.</simpara>
<simpara>Un facteur important et souvent oublié est <emphasis role="strong">l&#8217;acceptation et la compréhension de l&#8217;utilisation de Node</emphasis> par une ou plusieurs équipes.
Il est alors plus intéressant de comprendre les raisons
d&#8217;un blocage que de forcer ou d&#8217;imposer Node.<?asciidoc-br?>
Cela peut être simple&#160;: balayer des idées reçues,
animer un atelier technique ou inviter un·e expert·e
pour répondre aux questions, interrogations et utilité d&#8217;un tel changement.</simpara>
<simpara>Node ne vous aidera probablement pas si vous cherchez
à <emphasis role="strong">réaliser des choses contre-productives pour JavaScript</emphasis>.
Je pense à des opérations mathématiques de très haute précision,
du <emphasis>machine learning</emphasis> avancé ou du calcul scientifique poussé par exemple.
Difficile d&#8217;égaler la richesse fonctionnelle de Python
et de ses librairies SciPy, NumPy ou scikit-learn.
Difficile aussi d&#8217;égaler la finesse de gestion de mémoire de <emphasis>C++</emphasis> ou de <emphasis>Rust</emphasis>.</simpara>
<simpara>Node ne va <emphasis role="strong">pas résoudre les problèmes par magie</emphasis>.
Cela reste avant tout une affaire de compétences et d&#8217;expérience.</simpara>
</section>
<section xml:id="pourquoi_choisir_node_js">
<title>Pourquoi choisir Node.js ?</title>
<simpara>Node est un choix de langage principal tout à fait viable.</simpara>
<simpara>Il est préférable que ce choix soit une <emphasis role="strong">volonté partagée</emphasis> entre membres d&#8217;une équipe.
Que ce choix soit motivé par ce que Node apporte et simplifie pour vous.</simpara>
<simpara>Node est tout désigné pour créer des <emphasis role="strong">applications à nombreuses actions concurrentes</emphasis>.
Autrement dit, dès qu&#8217;une application ou programme fait appel à des accès réseau, aux fichiers ou au système.</simpara>
<simpara>Node est également adapté pour <emphasis role="strong">transformer des flux importants de données</emphasis>
en utilisant peu de mémoire.
Cela concerne aussi bien la lecture de fichiers CSV, JSON ou XML de plusieurs gigaoctets.</simpara>
<simpara>Le mécanisme de module de Node encourage à respecter le <emphasis>principe de responsabilité unique</emphasis>.
Nos applications peuvent être <emphasis role="strong">modulaires et autonomes</emphasis> au lieu d&#8217;être lourdes et monolithiques.</simpara>
<simpara>Les développeurs et développeuses verront dans Node leur <emphasis role="strong">compagnon idéal pour compiler, générer, assembler et minifier</emphasis> leurs applications front-end.
Le bénéfice évident est le partage d&#8217;un outillage CSS, JavaScript et HTML
entre équipes, par projet.</simpara>
<simpara>Conséquence directe, Node offre l&#8217;opportunité d'<emphasis role="strong">unifier vos équipes de développement <emphasis>front-end</emphasis> et <emphasis>back-end</emphasis></emphasis>.
Node devient un environnement commun, un langage partagé entre les individus.
Ils peuvent se focaliser sur des fonctionnalités indistinctement de la cible, que ce soit pour le web, un serveur ou une API.</simpara>
<simpara>Node est un environnement adapté à <emphasis role="strong">l&#8217;apprentissage et l&#8217;amélioration de nos connaissances en JavaScript</emphasis>.
On peut désormais penser sur du long terme, en se souciant moins de devoir supporter de vieilles versions de Node ou de navigateurs web tant il est facile de passer d&#8217;une version du langage à une autre.</simpara>
</section>
<section xml:id="l_écosystème_des_acteurs">
<title>L&#8217;écosystème des acteurs</title>
<simpara>La majorité des développements initiaux de Node est financée par <emphasis>Joyent</emphasis>,
à commencer par l&#8217;embauche de Ryan Dahl.</simpara>
<simpara>L&#8217;écosystème des acteurs se diversifie avec le temps.
Avec de nouveaux employés chez <emphasis>Joyent</emphasis>.
Puis avec des contributeurs externes qui voyaient un avenir prometteur dans le projet.
S&#8217;ensuivent des entreprises privées comme IBM ou PayPal qui sponsorisent le projet ou le salaire de contributeurs.</simpara>
<section xml:id="joyent">
<title>Joyent</title>
<simpara>Joyent est une entreprise américaine fondée en 2004.
Elle proposait à l&#8217;origine des services de collaborations
en ligne&#160;: documents, calendriers, e-mails, etc.</simpara>
<simpara>Elle se lance sur le marché de l&#8217;hébergement fin 2005
par le biais d&#8217;une acquisition-fusion.
Parmi ses clients, on peut dénombrer le site de Ruby on Rails
(société Basecamp), WordPress.com (société Automattic) ou
encore le site historique <emphasis>A List Apart</emphasis>.</simpara>
<simpara>En 2009, Joyent se spécialise dans les infrastructures et
plate-formes à la demande et à haute performance.
L&#8217;entreprise se concentre sur des solutions dites temps réel
pour les réseaux sociaux, applications mobiles et compagnies
de jeux vidéo en ligne.</simpara>
<simpara>En avril 2011, Joyent dépose la marque <emphasis>Node.js</emphasis> ainsi que son logo.</simpara>
<figure>
<title>Logo officiel de Node.js.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nodejs-new-pantone-black.png" contentwidth="40%"/>
</imageobject>
<textobject><phrase>nodejs new pantone black</phrase></textobject>
</mediaobject>
</figure>
<simpara>En février 2015, Joyent transfère la gestion de Node à la <link linkend="node-foundation">Node.js Foundation</link>.
La société <emphasis>Joyent</emphasis> reste propriétaire de la marque <emphasis>Node.js</emphasis>
et de son logo.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce du dépôt de marque</title>
<simpara>Ryan Dahl, alors développeur actif de Node, annonce le dépôt de marque par l&#8217;entreprise Joyent sur le blog officiel du projet Node.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/blog/uncategorized/trademark/">nodejs.org/en/blog/uncategorized/trademark/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="npm">
<title>npm</title>
<simpara><emphasis>npm</emphasis> est une dénomination qui abrite plusieurs concepts&#160;: un <emphasis role="strong">outil en ligne de commande</emphasis>, un <emphasis role="strong">registre de modules</emphasis> ainsi qu&#8217;une <emphasis role="strong">entreprise privée</emphasis> à but lucratif (<link linkend="npm-inc">npm, Inc</link>).</simpara>
<simpara><emphasis>npm</emphasis> est originellement un module Node créé par Isaacs Schlueter.
Ce module permet d&#8217;installer des modules tiers et de les lier sous forme d&#8217;un arbre de dépendances.
Il est l’équivalent de <emphasis>Rubygems</emphasis> (<phrase role="URL"><link xl:href="https://rubygems.org/">rubygems.org/</link></phrase>) pour Ruby, de <emphasis>CPAN</emphasis> (<phrase role="URL"><link xl:href="http://www.cpan.org/">www.cpan.org/</link></phrase>) pour Perl ou encore de <emphasis>pypi</emphasis> (<phrase role="URL"><link xl:href="https://pypi.python.org/pypi">pypi.python.org/pypi</link></phrase>) pour Python.</simpara>
<simpara>Nous reviendrons plus en détail sur son utilisation dans le <link xl:href="../chapter-05/index.xml">chapitre 5 <emphasis>Utiliser des modules tiers</emphasis></link>.</simpara>
<simpara><emphasis>npm</emphasis> désigne également le <emphasis>registre</emphasis> principal qui héberge les modules des communautés Node&#160;: <phrase role="URL"><link xl:href="https://www.npmjs.com/">www.npmjs.com/</link></phrase>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce de l’inclusion de <emphasis>npm</emphasis> dans Node</title>
<simpara><emphasis>npm</emphasis> est installé par défaut avec Node depuis la version 0.6.3, sortie en novembre 2011.
Auparavant, il fallait installer le module <emphasis>npm</emphasis> séparément.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/blog/release/v0.6.3/">nodejs.org/en/blog/release/v0.6.3/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="npm-inc">
<title>npm, Inc.</title>
<simpara>Isaacs Schlueter a été embauché par Joyent en septembre 2010.
Il a succédé à Ryan Dahl dans la gestion du projet Node de
janvier 2012 jusqu’à janvier 2014.</simpara>
<simpara><emphasis>npm, Inc</emphasis> est une entreprise privée américaine fondée en janvier 2014 par Isaacs Schlueter, directement après son départ de Joyent.
Le but de <emphasis>npm, Inc</emphasis> est de fournir des solutions professionnelles basées sur <emphasis>npm</emphasis>.
L&#8217;entreprise souhaite en parallèle soutenir l’effort open source
et les coûts d’infrastructure du registre <emphasis>npm</emphasis>.</simpara>
<simpara>Elle lève 2,6 millions de dollars en février 2014 pour élaborer une nouvelle architecture du registre <emphasis>npm</emphasis>.
Ce financement a également pour vocation la mise en place d&#8217;une stratégie commerciale basée sur les modules privés et les solutions professionnelles.</simpara>
<simpara>La société <emphasis>npm, Inc</emphasis> détient la marque <emphasis>npm</emphasis>, <emphasis>npm, Inc</emphasis> et le <emphasis>logo npm</emphasis>.</simpara>
<figure>
<title>Logo officiel de npm, Inc.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/logo-npm.png" contentwidth="40%"/>
</imageobject>
<textobject><phrase>logo npm</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="iojs">
<title>io.js</title>
<simpara><emphasis>io.js</emphasis> est un <emphasis>fork</emphasis> de Node initié par la communauté Node en décembre 2014.
La raison&#160;? La main-mise de Joyent sur les développements et la communication erratique du projet.</simpara>
<simpara>Les objectifs initiaux du projet <emphasis>io.js</emphasis> sont doubles&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>offrir à la communauté Node une gestion transparente, inclusive et ouverte&#160;;</simpara>
</listitem>
<listitem>
<simpara>fournir un environnement technique plus moderne, une version de v8 plus récente ainsi qu&#8217;une intégration rapide des nouvelles fonctionnalités ECMAScript.</simpara>
</listitem>
</itemizedlist>
<simpara>Le projet <emphasis>io.js</emphasis> connait une fin heureuse en 2015&#160;:
les efforts du projet et de sa communauté auront abouti à
la création de la <link linkend="node-foundation">Node.js Foundation</link> et
du <emphasis>Node.js Advisory Board</emphasis>, respectivement l&#8217;organe
de gestion du projet et le groupe d&#8217;individus en charge
de la gestion du projet Node.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Clap de fin</title>
<simpara>L&#8217;annonce de la sortie de Node v4 et de la création de la <emphasis>Node.js Foundation</emphasis>
est consultable à cette adresse&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/blog/announcements/foundation-v4-announce/">nodejs.org/en/blog/announcements/foundation-v4-announce/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="node-foundation">
<title>Node.js Foundation</title>
<simpara>La <emphasis>Node.js Foundation</emphasis> est l&#8217;un des organes officiels de gouvernance du projet Node depuis juin 2015.
Cette fondation est une organisation à but non lucratif.
Elle fait elle-même partie de la <link xl:href="http://collabprojects.linuxfoundation.org/">Linux Foundation</link>, au même titre que des projets comme <emphasis>Open Container</emphasis>, <emphasis>Let&#8217;s Encrypt</emphasis> ou <emphasis>Xen</emphasis>.</simpara>
<simpara>La tâche première de la fondation a été d&#8217;opérer la fusion entre la base de code de <emphasis>Node</emphasis> et d'<link linkend="iojs">io.js</link> en septembre 2015.
Cela donne lieu à la sortie de Node v4.0.0.</simpara>
<simpara>La fondation fait partie intégrante de la <link linkend="governance">gouvernance du projet Node</link>.</simpara>
<simpara><phrase role="URL"><link xl:href="https://foundation.nodejs.org">foundation.nodejs.org</link></phrase></simpara>
</section>
<section xml:id="nodejitsu">
<title>Nodejitsu</title>
<simpara><emphasis>Nodejitsu</emphasis> est une entreprise privée américaine fondée en 2010.
Elle vise à fournir des solutions professionnelles autour de Node en tant que <emphasis>Platform as a Service</emphasis> (<emphasis>PaaS</emphasis>) ainsi qu&#8217;avec des dépôts <emphasis>npm</emphasis> privés.<?asciidoc-br?>
Son activité en fait un concurrent direct de <link linkend="joyent">Joyent</link> et de <link linkend="npm-inc">npm, Inc.</link>.</simpara>
<simpara><emphasis>Nodejitsu</emphasis> démontre un investissement fort dans la communauté Node en contribuant à plusieurs centaines de modules.
La société prend en charge l&#8217;hébergement du registre <emphasis>npm</emphasis> de 2010 jusqu&#8217;en décembre 2013.</simpara>
<simpara>En 2013, <emphasis>Nodejitsu</emphasis> lance l&#8217;initiative controversée <link linkend="scalenpm">scalenpm</link> (voir l&#8217;encadré ci-après).
Elle vise à collecter des fonds pour améliorer la performance
et la stabilité du <emphasis>registre npm</emphasis> (<phrase role="URL"><link xl:href="https://www.npmjs.com/">www.npmjs.com/</link></phrase>).<?asciidoc-br?>
<emphasis>Nodejitsu</emphasis> attise les tensions avec la compagnie <emphasis>npm, Inc.</emphasis>
en tentant de lui couper l&#8217;herbe sous le pied.
Ce ne sera pas un succès.</simpara>
<simpara>En février 2015, la société américaine <emphasis>GoDaddy</emphasis> rachète <emphasis>Nodejitsu</emphasis>,
absorbe son équipe et met fin à ses activités commerciales.</simpara>
<tip xml:id="scalenpm">
<title><phrase role="RemarquePreTitre">Lien</phrase> La controverse <emphasis>#scalenpm</emphasis></title>
<simpara>L&#8217;initiative <emphasis>#scalenpm</emphasis> a réuni quelque 326 000 $ auprès
d&#8217;entreprises privées et de la communauté Node.</simpara>
<simpara>Son effort se poursuit dans le but de fournir une meilleure instrumentation et
une architecture résistant à la montée en puissance de l&#8217;utilisation des modules <emphasis>npm</emphasis>.</simpara>
<simpara>Cette initiative a suscité une controverse dans la mesure où l’opération s’est
déroulée lors de la naissance de <emphasis>npm, Inc</emphasis> et du dépôt de marque associé mais
sans entente apparente entre les deux parties.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/">web.archive.org/web/20160506191542/https://scalenpm.nodejitsu.com/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://twitter.com/hashtag/scalenpm">twitter.com/hashtag/scalenpm</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="node_security_platform">
<title>Node Security Platform</title>
<simpara>Le <emphasis>Node Security Platform</emphasis> (<phrase role="URL"><link xl:href="https://nodesecurity.io/">nodesecurity.io/</link></phrase>&#160;— anciennement <emphasis>Node Security Project</emphasis>) est un projet à but lucratif soutenu par la société américaine <emphasis>&amp;yet</emphasis> (<phrase role="URL"><link xl:href="https://andyet.com/">andyet.com/</link></phrase>).
Il a été initié au début de l&#8217;année 2013.</simpara>
<simpara>Son but est triple&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>auditer la sécurité de tous les modules npm&#160;;</simpara>
</listitem>
<listitem>
<simpara>communiquer les failles auprès des auteurs de modules&#160;;</simpara>
</listitem>
<listitem>
<simpara>permettre à quiconque de savoir si un module donné dépend de modules vulnérables.</simpara>
</listitem>
</orderedlist>
<simpara>Le projet met à disposition des <emphasis>services</emphasis> et des <emphasis>modules</emphasis>
tout en cherchant à impliquer la communauté Node dans le processus.
Cela concerne aussi bien la déclaration des vulnérabilités
que leur résolution ou l&#8217;éducation des développeurs à la sécurité.</simpara>
<simpara>Nous aborderons le sujet de la sécurité tout au long de cet ouvrage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>au <link xl:href="../chapter-04/index.xml#security">Chapitre 4</link>&#160;: mettre à jour Node en cas de failles de sécurité&#160;;</simpara>
</listitem>
<listitem>
<simpara>au <link xl:href="../chapter-06/index.xml#security">Chapitre 6</link>&#160;: surveiller la santé d&#8217;une application en production&#160;;</simpara>
</listitem>
<listitem>
<simpara>au <link xl:href="../chapter-07/index.xml#security">Chapitre 7</link>&#160;: identifier les opérations à risques dans une application web.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="governance">
<title>Gouvernance du projet</title>
<simpara>Node a connu une <emphasis role="strong">forte croissance depuis 2012</emphasis>.
La gouvernance du projet open source a été effectuée
par la <link linkend="joyent">société Joyent</link>.
Ses agissements et la direction donnée au projet ont régulièrement
fait grincer des dents.
Notamment en entretenant un climat d&#8217;incertitude sur
la pérennité à long terme, si Node venait à ne plus
répondre aux intérêts commerciaux de <emphasis>Joyent</emphasis>.</simpara>
<simpara>Des voix se sont élevées pour critiquer l&#8217;absence d&#8217;une
organisation ouverte, commercialement neutre et
ouverte aux contributeurs externes.
Cela a mené à la création d&#8217;un <emphasis>fork</emphasis> de Node&#160;: <link linkend="iojs">io.js</link>.</simpara>
<simpara>La réconciliation entre le projet Node et <emphasis>io.js</emphasis> a sérieusement assaini
les rapports de gouvernance.
Cela a également apporté une direction et des opportunités plus claires
de contribuer à la direction du projet.</simpara>
<simpara>Depuis juin 2015, la gérance du projet est garantie par plusieurs entités&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le <emphasis>Technical Steering Committee</emphasis> (TSC)&#160;: planning, décisions techniques, direction du projet, documentation et qualité du projet&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis><link linkend="node-foundation">Node.js Foundation</link> Board</emphasis>&#160;: évangélisation, relations commerciales&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis><link linkend="node-foundation">Node.js Foundation</link> Community Committee</emphasis> (CommComm)&#160;: relation avec la communauté, <emphasis>onboarding</emphasis>.</simpara>
</listitem>
</itemizedlist>
<simpara>Le <emphasis>Technical Steering Committee</emphasis> réfère ses intentions d&#8217;actions
au <emphasis>Board</emphasis>.
Son fonctionnement est régi par une charte co-signée avec le <emphasis>Board</emphasis>.
Ce comité est composé de contributeurs et de collaborateurs individuels.</simpara>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/TSC">github.com/nodejs/TSC</link></phrase></simpara>
<tip>
<title><phrase role="RemarquePreTitre">Anecdote</phrase> Une fois n&#8217;est pas coutume</title>
<simpara>Le <emphasis>Technical Steering Committee</emphasis> était autrefois dissocié d&#8217;une autre entité, le <emphasis>Core Technical Committee</emphasis>.
Les conflits de gouvernance ayant résulté dans la création du <link linkend="ayojs">fork ayo.js</link> ont mené à la fusion des deux comités.</simpara>
<simpara>L&#8217;objectif recherché était de rapprocher gouvernance et décisions techniques
tout en réduisant les opportunités d&#8217;abus de pouvoir par les membres
techniques éminents.</simpara>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/CTC">github.com/nodejs/CTC</link></phrase></simpara>
</tip>
<simpara>À l&#8217;inverse, le <emphasis>Board</emphasis> géré par la <link linkend="node-foundation">Node.js Foundation</link> est composé essentiellement d&#8217;acteurs de l&#8217;industrie&#160;— dont Google,
IBM, Joyent et PayPal.
Certains membres émérites ou choisis par le <emphasis>Board</emphasis> sont des individus
agissant en leur nom propre.</simpara>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/board">github.com/nodejs/board</link></phrase></simpara>
<simpara>Les participant·e·s du <emphasis>Technical Steering Committee</emphasis> ont une obligation
de régularité, de présence et de vote aux différents rendez-vous
organisés par le comité.<?asciidoc-br?>
Ce mécanisme a été choisi afin de préserver la vitalité du projet.</simpara>
<simpara>Un quota d&#8217;appartenance à une même entreprise a été mis en place
pour maintenir une diversité de représentation.
Dans une moindre mesure, ce mécanisme vise à réduire les possibles conflits
d&#8217;intérêt ou une prise en otage du projet Node comme a pu le faire
<link linkend="joyent">Joyent</link> avant l&#8217;apparition de ce modèle de gouvernance.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Liens</phrase> Documentation</title>
<simpara>Les documents clés régissant le fonctionnement du projet Node
sont répartis dans les dépôts GitHub des différents acteurs&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/GOVERNANCE.md">github.com/nodejs/node/blob/master/GOVERNANCE.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/TSC/blob/master/TSC-Charter.md">github.com/nodejs/TSC/blob/master/TSC-Charter.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md">github.com/nodejs/admin/blob/master/CODE_OF_CONDUCT.md</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md">github.com/nodejs/node/blob/master/COLLABORATOR_GUIDE.md</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="conclusion">
<title>Conclusion</title>
<simpara>Nous venons d&#8217;en apprendre davantage sur les <emphasis role="strong">origines de Node</emphasis>, les différentes parties prenantes dans son développement mais aussi sa <emphasis role="strong">philosophie</emphasis>&#160;— de <emphasis>conception</emphasis>, de <emphasis>distribution</emphasis> et d'<emphasis>évolution</emphasis>.</simpara>
<simpara>Nous allons voir dans le prochain chapitre comment installer un environnement fonctionnel pour développer et exécuter des programmes Node.</simpara>
</section>
</chapter>
<chapter xml:id="installer_mettre_à_jour_et_développer">
<title>Installer, mettre à jour et développer</title>
<simpara>Selon que tu sois débutant·e ou confirmé·e, il y aura une manière
d&#8217;installer Node qui te correspond.</simpara>
<simpara>Ce chapitre contient tout ce qu&#8217;il faut savoir pour utiliser Node sur notre ordinateur et se préparer à développer notre premier programme.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Installer Node.js sur son ordinateur</simpara>
</listitem>
<listitem>
<simpara>Choisir un éditeur de code pour écrire nos programmes</simpara>
</listitem>
<listitem>
<simpara>Déterminer quand migrer vers une nouvelle version de Node.js</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Nous avons vu dans le <link xl:href="../chapter-01/index.xml">premier chapitre</link>
que Node est un <emphasis>environnement d&#8217;exécution JavaScript</emphasis>.</simpara>
<simpara>Certains systèmes d&#8217;exploitation embarquent l&#8217;environnement d&#8217;exécution Node.
D&#8217;autres ne le font pas.
Et d&#8217;autres embarquent Node mais dans une version trop ancienne.
Voire avec une configuration exotique dont il est difficile de connaître les tenants et aboutissants.
Idéalement, on voudrait pouvoir <emphasis role="strong">installer la version de Node de notre choix</emphasis> sur notre ordinateur.</simpara>
<simpara>Les <emphasis role="strong">éditeurs de code</emphasis> nous facilitent la vie en rendant le code lisible
en ajoutant de la couleur et des repères visuels.
Ces logiciels nous invitent à piocher dans leur bibliothèque d&#8217;extensions
pour en faire un outil qui nous ressemble.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<simpara>Il n&#8217;est pas nécessaire d&#8217;avoir suivi des études d&#8217;informatique
pour vouloir s&#8217;essayer à la programmation.
Cela n&#8217;implique pas non plus d&#8217;en faire son métier.</simpara>
<simpara>Que l&#8217;on se qualifie de débutant·e, confirmé·e ou expert·e,
il y a un petit rituel auquel on coupera difficilement&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>installer Node.js pour <emphasis role="strong">voir le résultat de nos programmes</emphasis> écrits en JavaScript&#160;;</simpara>
</listitem>
<listitem>
<simpara>installer un éditeur de code pour <emphasis role="strong">écrire nos programmes JavaScript plus confortablement</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>Si l&#8217;idée est de jouer avec du code rapidement,
sans rien installer et avec le premier ordinateur qui vous passe sous la main,
je vous invite à aller directement à la section <link linkend="online">Sans installation, dans un navigateur web</link> ci-après.</simpara>
<simpara>Les sections qui suivent ont pour intention de vous aider à créer
un environnement Node à jour sur votre ordinateur.
Ce contenu s&#8217;applique également à un serveur destiné à héberger vos applications Node.</simpara>
<section xml:id="install">
<title>Installer Node.js</title>
<simpara>Il y a plusieurs manières d&#8217;installer Node sur une machine.
Elles sont <emphasis>toutes</emphasis> correctes.
Certaines manières sont plus adaptées que d&#8217;autres,
selon votre aisance avec un <link linkend="shell">terminal</link>
et selon le besoin de jongler rapidement entre différentes versions de Node.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">si vous vous êtes déjà servi·e d&#8217;un terminal</emphasis>&#160;: je recommande d&#8217;utiliser <link linkend="nvm">nvm</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">si vous ne vous êtes jamais servi·e d&#8217;un terminal</emphasis>&#160;: il est plus simple d&#8217;utiliser un <emphasis>installeur</emphasis> depuis le site officiel de Node&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">si vous souhaitez maitriser les options d&#8217;installation</emphasis>&#160;: il serait logique de <link linkend="build">compiler depuis les <emphasis>sources</emphasis></link> et/ou <link linkend="docker">d&#8217;utiliser Docker</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">si rien de tout ça ne vous parle</emphasis>&#160;: des services en ligne rendent <link linkend="online">Node accessible depuis un simple navigateur web</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Pourquoi utiliser un installeur ?</title>
<simpara>Les installeurs permettent d&#8217;installer Node facilement, en quelques clics et sans toucher à un terminal.</simpara>
<simpara>Si vous utilisez un installeur correspondant à une version plus récente de Node,
cette nouvelle version sera utilisée dans <emphasis>tous</emphasis> vos projets Node.</simpara>
<simpara>C&#8217;est la <emphasis role="strong">solution la plus simple pour installer Node</emphasis>.</simpara>
</note>
<section xml:id="online">
<title>Sans installation, dans un navigateur web</title>
<simpara>Il est facile de s&#8217;essayer à Node juste avec un navigateur web moderne comme Firefox, Microsoft Edge ou Chrome.
Des services en ligne combinent un <link linkend="ide">éditeur de texte</link>
ainsi qu&#8217;un environnement d&#8217;exécution Node à distance.</simpara>
<simpara>Nous brosserons le portrait de 3 services différents
de part leurs fonctionnalités et leur rapidité de prise en main&#160;:
<emphasis>RunKit</emphasis>, <emphasis>Codenvy</emphasis> et <emphasis>Cloud9</emphasis>.</simpara>
<simpara><emphasis>RunKit</emphasis> (<phrase role="URL"><link xl:href="https://runkit.com">runkit.com</link></phrase>) est de loin le service le plus simple.
Il s&#8217;articule autour d&#8217;un concept de <emphasis>bac à sable</emphasis>,
notre code ne sera pas plus long qu&#8217;un fichier.
Pour créer un nouveau bac à sable,
il suffit de se rendre sur <phrase role="URL"><link xl:href="https://runkit.com/new">runkit.com/new</link></phrase>.</simpara>
<figure>
<title>Bac à sable sur <emphasis>RunKit</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/runkit-playground.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>runkit playground</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>Codenvy</emphasis> (<phrase role="URL"><link xl:href="https://codenvy.io">codenvy.io</link></phrase>) est un service basé sur le
logiciel open source <emphasis>Eclipse</emphasis> et édité par la compagnie <emphasis>Red Hat</emphasis>.<?asciidoc-br?>
L&#8217;interface est organisée exactement comme un des <link linkend="ide">éditeurs de texte</link> abordé plus loin dans ce chapitre.</simpara>
<figure>
<title>Espace de travail sur <emphasis>Codenvy</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/codenvy-workspace.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>codenvy workspace</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le processus de création de projet est relativement intuitif
et il est très facile d&#8217;importer du code hébergé en ligne, sur <emphasis>GitHub</emphasis>
notamment.
La configuration minimale d&#8217;un projet est gratuite tandis que
les fonctionnalités avancées et le travail en équipe sont payantes.</simpara>
<figure>
<title>Processus de création d&#8217;un espace de travail sur <emphasis>Codenvy</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/codenvy-dashboard.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>codenvy dashboard</phrase></textobject>
</mediaobject>
</figure>
<simpara>Enfin, <emphasis>Cloud9</emphasis> (<phrase role="URL"><link xl:href="https://c9.io">c9.io</link></phrase>) est un service propriétaire
édité par la compagnie <emphasis>Amazon Web Services</emphasis> (<emphasis>AWS</emphasis>, <phrase role="URL"><link xl:href="https://aws.amazon.com">aws.amazon.com</link></phrase>).
Ce service intègre des fonctionnalités similaires à celles de <emphasis>Codenvy</emphasis>
(éditeur en ligne, configuration de machine)
et s&#8217;intègre de manière poussée avec les autres services d'<emphasis>AWS</emphasis>,
dont <emphasis>EC2</emphasis> et <link xl:href="../chapter-06/index.xml#hosting.lambda">Lambda</link> (voir le <link xl:href="../chapter-06/index.xml">chapitre 6</link>).<?asciidoc-br?>
Le service est entièrement gratuit.
C&#8217;est la consommation de ressources qui est payante, à l&#8217;heure,
en fonction du dimensionnement des ressources demandées.</simpara>
<figure>
<title>Configuration d&#8217;un espace de travail <emphasis>Cloud9</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cloud9-configuration.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>cloud9 configuration</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>Cloud9</emphasis> a peu d&#8217;opinions sur la manière dont votre environnement
doit être configuré.
Tout devra être configuré, des accès à votre compte <emphasis>GitHub</emphasis>
y compris la version de Node à installer.</simpara>
<figure>
<title>Espace de travail sur <emphasis>Cloud9</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cloud9-workspace.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>cloud9 workspace</phrase></textobject>
</mediaobject>
</figure>
<simpara>Ça tombe bien, <link linkend="nvm">nvm</link> est préinstallé sur chaque espace de travail.</simpara>
</section>
<section xml:id="nvm">
<title>Plusieurs versions sur la même machine (<emphasis>nvm</emphasis>)</title>
<simpara><emphasis>nvm</emphasis> est l&#8217;acronyme de <emphasis>Node Version Manager</emphasis>.
Ce logiciel permet d'<emphasis role="strong">installer plusieurs versions de Node sur un même ordinateur</emphasis>.<?asciidoc-br?>
Si vous êtes sous Windows, <link linkend="nvm-windows"><emphasis>nvm-windows</emphasis></link> offre exactement
les mêmes fonctionnalités (voir encadré ci-après).</simpara>
<simpara>Si vous venez d&#8217;un autre univers de programmation,
<emphasis>nvm</emphasis> est l&#8217;équivalent de <emphasis>rvm</emphasis> ou <emphasis>rbenv</emphasis> dans le monde Ruby, de <emphasis>phpenv</emphasis> dans
le monde PHP ou encore de <emphasis>virtualenv</emphasis> pour Python.</simpara>
<simpara>Le programme s&#8217;obtient à cette adresse&#160;: <phrase role="URL"><link xl:href="https://github.com/creationix/nvm">github.com/creationix/nvm</link></phrase>.</simpara>
<tip xml:id="nvm-windows">
<title><phrase role="RemarquePreTitre">Alternatives</phrase> <emphasis>nvm</emphasis> pour Windows</title>
<simpara><emphasis>nvm</emphasis> ne fonctionne pas sur les ordinateurs équipés de Windows.
Il existe trois autres alternatives&#160;: <emphasis>nvm-windows</emphasis>, <emphasis>_nvmw</emphasis> et <emphasis>nodist</emphasis>.</simpara>
<simpara><emphasis>nvm-windows</emphasis> offre les mêmes fonctionnalités que son équivalent pour Linux et macOS <emphasis>nvm</emphasis>.
Il est facile à installer et ne demande pas de privilège système particulier pour fonctionner.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/coreybutler/nvm-windows">github.com/coreybutler/nvm-windows</link></phrase></simpara>
</listitem>
</itemizedlist>
<simpara>Deux autres alternatives sont à essayer si <emphasis>nvm-windows</emphasis> pose problème&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/hakobera/nvmw">github.com/hakobera/nvmw</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/marcelklehr/nodist">github.com/marcelklehr/nodist</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<formalpara>
<title>Commande d&#8217;installation du logiciel nvm v0.33.11</title>
<para>
<screen>$ curl -L https://github.com/creationix/nvm/raw/v0.33.11/install.sh | bash</screen>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> nvm sous macOS</title>
<simpara><emphasis>nvm</emphasis> et Node peuvent s&#8217;installer encore plus facilement sous macOS si vous utilisez le logiciel <emphasis>Homebrew</emphasis>.</simpara>
<simpara>Rendez-vous dans la section <link linkend="install-macos">macOS</link> pour en savoir plus.</simpara>
</tip>
<simpara>Une fois installé, vous serez libre d&#8217;installer les versions exactes de Node qui vous intéressent en appelant la commande <literal>nvm</literal> dans un <link linkend="shell">terminal</link>.</simpara>
<formalpara>
<title>Installation de Node v10 avec la commande <literal>nvm install</literal></title>
<para>
<screen>$ nvm install v10
$ nvm alias default v10</screen>
</para>
</formalpara>
<simpara>Dans l&#8217;exemple précédent,
la première ligne est responsable de l'<emphasis role="strong">installation de la version de Node la plus récente</emphasis> dans la branche 10.x.
La deuxième ligne est quant à elle responsable de signaler que l&#8217;on veut <emphasis role="strong">en faire <emphasis>notre</emphasis> version par défaut</emphasis> sur cet ordinateur.</simpara>
<simpara>On pourra retrouver à tout moment les versions installées en utilisant la commande <literal>nvm ls</literal>.</simpara>
<formalpara>
<title>Liste des versions installées de Node avec la commande <literal>nvm ls</literal></title>
<para>
<screen>$ nvm ls
-&gt;       v10.3.0
         v9.3.0
         system
default -&gt; v10 (-&gt; v10.3.0)
node -&gt; stable (-&gt; v9.3.0)
stable -&gt; 9.3 (-&gt; v9.3.0) (default)</screen>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent détaille 2 choses&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la liste des versions de Node installées sur le système&#160;;</simpara>
</listitem>
<listitem>
<simpara>la liste des <emphasis>alias</emphasis>, et à quelle version de Node ils correspondent.</simpara>
</listitem>
</orderedlist>
<simpara>Taper <literal>nvm use stable</literal> nous fera basculer vers la branche <literal>9.3</literal>.
C&#8217;est l&#8217;équivalent de saisir <literal>nvm use v9.3.0</literal> ou <literal>nvm use v9</literal> si on a la flemme de tout écrire.
De même, taper <literal>nvm use default</literal> ou <literal>nvm use v10</literal> nous fera basculer vers la branche la version v10.3.0.</simpara>
<simpara>Vous pouvez saisir la commande <literal>nvm --help</literal> à tout moment pour obtenir de l&#8217;aide sur la syntaxe des commandes.
J&#8217;utilise principalement ces commandes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>nvm install</literal>&#160;: installe ou met à jour une version de Node&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>nvm ls</literal>&#160;: liste les versions installées de Node&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>nvm use</literal>&#160;: bascule vers une version donnée de Node&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>nvm alias &lt;nom&gt; &lt;version&gt;</literal>&#160;: crée un alias nommé vers une version de Node&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>nvm run &lt;version&gt; &lt;script&gt;</literal>&#160;: exécute un script Node dans une version donnée de Node.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="install-ubuntu">
<title>Distributions Linux : Debian/Ubuntu et RedHat/CentOS</title>
<simpara>Les distributions Linux et Debian listent Node dans leurs paquets officiels.
Un simple <literal>apt-get install nodejs</literal> et ça fonctionne&#160;!
Ou presque car bien souvent on écopera d&#8217;une vieille version de Node.</simpara>
<simpara>Des paquets officiels pour Debian, Ubuntu, Mint, RedHat Enterprise Linux (RHEL)
et CentOS sont maintenus sur <phrase role="URL"><link xl:href="https://github.com/nodesource/distributions">github.com/nodesource/distributions</link></phrase>.</simpara>
<simpara>L&#8217;installation de node 10.x sous Ubuntu et Mint devient aussi simple que les
deux commandes suivantes&#160;:</simpara>
<screen>$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
$ sudo apt-get install -y nodejs</screen>
<simpara>Pour Debian, il faudra se mettre en <literal>root</literal> et ensuite saisir ces commandes&#160;:</simpara>
<screen>$ curl -sL https://deb.nodesource.com/setup_10.x | bash -
$ apt-get install -y nodejs</screen>
<simpara>Pour RHEL et CentOS, il faudra se mettre en <literal>root</literal> et saisir cette commande&#160;:</simpara>
<screen>$ curl -sL https://rpm.nodesource.com/setup_8.x | bash -</screen>
</section>
<section xml:id="distributions_linux_les_autres">
<title>Distributions Linux : les autres</title>
<simpara>Des paquets officiels pour d&#8217;autres distributions que Debian, Ubuntu et Mint sont maintenus et accessibles par le biais des gestionnaires de paquets habituels&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Gentoo</emphasis>&#160;: <literal>emerge nodejs</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Ubuntu &gt;= 12.04</emphasis>, <emphasis role="strong">Debian &gt;= jessie</emphasis>, <emphasis role="strong">Mint</emphasis>&#160;: <link linkend="install-ubuntu">voir ci-après</link></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Fedora &gt;= 18</emphasis>&#160;: <literal>sudo yum install nodejs npm</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Red Hat Enterprise</emphasis> et <emphasis role="strong">CentOS</emphasis>&#160;: <literal>sudo yum install nodejs npm --enablerepo=epel</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Arch Linux</emphasis>&#160;: <literal>pacman -S nodejs</literal></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">FreeBSD</emphasis>, <emphasis role="strong">OpenBSD</emphasis>&#160;: <literal>pkg install node</literal></simpara>
</listitem>
</itemizedlist>
<simpara>La liste à jour est maintenue sur cette page du site officiel de Node <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/package-manager">nodejs.org/fr/download/package-manager</link></phrase>.</simpara>
<simpara>À noter que vous pouvez aussi utiliser <link linkend="nvm">nvm</link> pour gérer vos versions de Node indépendamment du cycle de vie de votre système d&#8217;exploitation Linux.</simpara>
</section>
<section xml:id="install-macos">
<title>macOS</title>
<simpara>Un installeur officiel pour macOS est fourni sur le site de Node à l&#8217;adresse <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
<simpara><link linkend="nvm">nvm</link> est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</simpara>
<simpara>Il est toutefois possible d&#8217;installer Node et <emphasis>nvm</emphasis> via le gestionnaire de paquets <emphasis>Homebrew</emphasis>.
<emphasis>Homebrew</emphasis> (<phrase role="URL"><link xl:href="https://brew.sh/">brew.sh/</link></phrase>) est un logiciel open source populaire.
Il aide à installer des logiciels qui ne sont pas distribués via le <emphasis>Mac App Store</emphasis>.</simpara>
<simpara>L&#8217;installation de <emphasis>Homebrew</emphasis> se fait en deux étapes&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>l&#8217;installation des <emphasis>Command Line Tools</emphasis> pour compiler des logiciels depuis leur code source&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;installation de <emphasis>Homebrew</emphasis> en elle-même.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Installation des <emphasis>Command Line Tools</emphasis> et de <emphasis>Homebrew</emphasis> sous macOS</title>
<para>
<screen>$ xcode-select --install
$ BREWRL=https://raw.githubusercontent.com/Homebrew/install/master/install \
   /usr/bin/ruby -e "$(curl -fsSL $BREWRL)"</screen>
</para>
</formalpara>
<simpara>Pour installer <emphasis>nvm</emphasis>, il suffira alors de faire&#160;:</simpara>
<screen>$ brew install nvm</screen>
<simpara>Ou pour installer une seule version de Node, la plus récente&#160;:</simpara>
<screen>$ brew install node</screen>
<simpara>Vous pouvez obtenir des options d&#8217;installations et de configuration en tapant <literal>brew info nvm</literal> et/ou <literal>brew info node</literal>.</simpara>
</section>
<section xml:id="windows">
<title>Windows</title>
<simpara>Un installeur officiel pour Windows est fourni sur le site de Node à l&#8217;adresse <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
<simpara><link linkend="nvm">nvm-windows</link> est la voie alternative recommandée pour gérer plusieurs versions de Node en parallèle.</simpara>
<figure>
<title>Un des écrans d&#8217;installation de Node sous Windows 10</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-node-installer.png" contentwidth="50%"/>
</imageobject>
<textobject><phrase>windows node installer</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;installeur officiel créera plusieurs raccourcis dans le dossier <emphasis>Node.js</emphasis> du menu Démarrer&#160;:</simpara>
<figure>
<title>Node.js dans le menu Démarrer sous Windows 10</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-node-menu.png" contentwidth="50%"/>
</imageobject>
<textobject><phrase>windows node menu</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le menu créé par l&#8217;installeur contient deux icônes que nous utiliserons tout au long de la lecture de cet ouvrage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Node.js</emphasis>&#160;: un terminal pour jouer avec JavaScript et voir les résultats que Node va interpréter&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis>Node.js command prompt</emphasis>&#160;: un terminal pour exécuter nos programmes écrits en JavaScript.</simpara>
</listitem>
</itemizedlist>
<simpara><?asciidoc-hr?></simpara>
<simpara>Si vous utilisez déjà un gestionnaire de paquet comme <emphasis>Scoop</emphasis> (<phrase role="URL"><link xl:href="http://scoop.sh/">scoop.sh/</link></phrase>) ou <emphasis>Chocolatey</emphasis> (<phrase role="URL"><link xl:href="https://chocolatey.org/">chocolatey.org/</link></phrase>),
le chemin d&#8217;installation vers Node s&#8217;en trouvera réduit à une simple commande&#160;:</simpara>
<screen># Avec Scoop
$ scoop install nodejs

# Avec Chocolatey
$ choco install nodejs</screen>
<warning>
<title><phrase role="RemarquePreTitre">Attention</phrase> Versions supportées de Windows</title>
<simpara>Node n&#8217;est pas compatible avec les versions antérieures à Windows Vista.
Cela inclut Windows XP.</simpara>
<simpara>Mieux vaudra utiliser un <link linkend="online">service en ligne</link> pour essayer Node en toute
sécurité sur votre ordinateur ou passer à Linux pour lui redonner une seconde
vie en toute sécurité&#160;!</simpara>
</warning>
</section>
<section xml:id="install-rpi">
<title>Raspberry Pi</title>
<simpara>Des binaires sont disponibles pour les microcontrôleurs fonctionnant avec des processeurs ARMv6, ARMv7 et ARMv8.
Ces microcontrôleurs sont au cœur de ce que l&#8217;on appelle <emphasis>Internet des Objets</emphasis> (<emphasis>Internet of Things</emphasis>, <emphasis>IoT</emphasis>).
Ces petits ordinateurs consomment peu d&#8217;énergie,
disposent d&#8217;une connectique pour se relier à Internet
et s&#8217;interfacent avec toutes sortes de capteurs.</simpara>
<simpara>Un paquet <literal>deb</literal> est également proposé pour les utilisateurs du système d&#8217;exploitation <emphasis>Raspbian</emphasis> (<phrase role="URL"><link xl:href="https://www.raspbian.org/">www.raspbian.org/</link></phrase>).
Les instructions d&#8217;installation sont identiques à celles décrites
dans la section précédente relative aux <link linkend="install-ubuntu">distributions Linux&#160;: Debian et Ubuntu</link>.</simpara>
<formalpara>
<title>Installation de Node v10 sur Raspberry Pi Model 3 (CPU ARMv8)</title>
<para>
<screen>$ curl -SLO https://nodejs.org/dist/v10.3.0/node-v10.3.0-linux-arm64.tar.xz
$ tar -xJf "node-v10.3.0-linux-arm64.tar.xz" -C /usr/local --strip-components=1
$ ln -s /usr/local/bin/node /usr/local/bin/nodejs</screen>
</para>
</formalpara>
<simpara>Tous les binaires et les instructions d&#8217;installation sont disponibles sur <phrase role="URL"><link xl:href="https://nodejs.org/fr/download/">nodejs.org/fr/download/</link></phrase>.</simpara>
</section>
<section xml:id="build">
<title>Compiler depuis les sources</title>
<simpara>Certaines situations exigeront que vous compiliez Node.
C&#8217;est le cas si vous cherchez à travailler au plus près du système sur lequel vous comptez déployer vos applications Node.
Je pense par exemple à des architectures processeur <emphasis>ARM</emphasis>, <emphasis>PowerPC</emphasis>, <emphasis>IBM System/390</emphasis> ou bien à des systèmes <emphasis>Android</emphasis>, <emphasis>OpenBSD</emphasis> ou <emphasis>AIX</emphasis>.</simpara>
<simpara>La compilation manuelle est également intéressante pour régler plus finement certains aspects grand public de Node&#160;:
rendre le binaire indépendant des librairies système (<emphasis>statique</emphasis>),
le module <emphasis>http/2</emphasis>,
les langues et fuseaux horaires fonctionnelles avec l&#8217;API <emphasis>ECMA 402 Intl</emphasis>,
les options de sécurité liées à <emphasis>OpenSSL</emphasis>,
mais aussi l&#8217;intégration avec des profileurs et débogueurs externes
(type <emphasis>XCode</emphasis>, <emphasis>GNU Debugger</emphasis>, <emphasis>Intel VTune</emphasis>).</simpara>
<formalpara>
<title>Étapes de compilation de Node v10.3.0</title>
<para>
<screen>$ curl -sS https://nodejs.org/dist/v10.3.0/node-v10.3.0.tar.gz \
  | tar -zxf -
$ cd node-v10.3.0
$ ./configure &amp;&amp; make &amp;&amp; make install</screen>
</para>
</formalpara>
<simpara>La compilation manuelle requiert la présence de <emphasis>GCC</emphasis> 4.9+, de <emphasis>Python</emphasis> 2.6+ et de <emphasis>GNU Make</emphasis> 3.81+.<?asciidoc-br?>
Les instructions de compilation varient d&#8217;un système d&#8217;exploitation à l&#8217;autre.
Consultez les dépendances et instructions complètes à
cette adresse <phrase role="URL"><link xl:href="https://github.com/nodejs/node/blob/master/BUILDING.md">github.com/nodejs/node/blob/master/BUILDING.md</link></phrase>.</simpara>
</section>
<section xml:id="install-docker">
<title>Images Docker</title>
<simpara><emphasis>Docker</emphasis> (<phrase role="URL"><link xl:href="https://docker.com">docker.com</link></phrase>) est un outil open source dit d'<emphasis>applications en conteneur</emphasis>.
Une de ses qualités principales est d'<emphasis role="strong">isoler l&#8217;exécution d&#8217;applications de leur environnement d&#8217;exécution</emphasis>.
Une image Docker décrit la recette d&#8217;installation d&#8217;une application.
L&#8217;environnement d&#8217;exécution Docker fait office de passe-plat avec le système d&#8217;exploitation.
Une image Docker fonctionne ainsi de la même manière qu&#8217;elle soit exécutée sous Linux, macOS ou encore Windows.</simpara>
<simpara>Les installeurs et instructions d&#8217;installation de Docker se trouvent à l&#8217;adresse <phrase role="URL"><link xl:href="https://docker.com/community-edition">docker.com/community-edition</link></phrase>.</simpara>
<simpara>Une fois Docker installé, on peut exécuter une image officielle pour Node v10&#160;:</simpara>
<formalpara>
<title>Affiche la version de Node</title>
<para>
<screen>$ docker run -ti --rm node:10 node --version
v10.3.0</screen>
</para>
</formalpara>
<simpara>Docker télécharge l&#8217;image <literal>node:10</literal> et exécute la commande <literal>node --version</literal> dans un contexte isolé du système d&#8217;exploitation.</simpara>
<simpara>Pour lancer un terminal Node dans Docker, il faudrait saisir cette commande&#160;:</simpara>
<screen>$ docker run -ti --rm node:10 node
&gt; 2+2
4</screen>
<simpara>Plusieurs variantes d&#8217;images Node se trouvent à notre disposition&#160;:</simpara>
<variablelist>
<varlistentry>
<term><emphasis>standard</emphasis> (<literal>node:10</literal>)</term>
<listitem>
<simpara>base Linux Debian pour tout type d&#8217;applications Node&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>Debian</emphasis> (<literal>node:10-wheezy</literal>)</term>
<listitem>
<simpara>idem que <emphasis>standard</emphasis> mais sur des bases Debian différentes, comme <emphasis>Wheezy</emphasis>, <emphasis>Stretch</emphasis>, etc.&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>Alpine</emphasis> (<literal>node:10-alpine</literal>)</term>
<listitem>
<simpara>distribution spécialement créée pour Docker (<phrase role="URL"><link xl:href="http://alpinelinux.org">alpinelinux.org</link></phrase>)&#160;— elle pèse quelques Mo à peine&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis>allégée</emphasis> (<literal>node:10-slim</literal>)</term>
<listitem>
<simpara>base Linux Debian sans outillage parfois nécessaires à des modules Node&#160;— utile si vous souhaitez économiser de l&#8217;espace disque.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>L&#8217;intégralité des versions et architectures supportées est disponible sur
le catalogue <emphasis>Docker Hub</emphasis>&#160;: <phrase role="URL"><link xl:href="https://hub.docker.com/_/node/">hub.docker.com/_/node/</link></phrase>.<?asciidoc-br?>
Nous nous repencherons dessus dans la section
<link xl:href="../chapter-06/index.xml#deploy.docker">déploiement d&#8217;une image Docker</link> du
<link xl:href="../chapter-06/index.xml">chapitre 6</link>.</simpara>
</section>
</section>
<section xml:id="shell">
<title>Utiliser Node.js avec un terminal (<emphasis>shell</emphasis>)</title>
<simpara>La section précédente nous a permis d&#8217;installer l&#8217;environnement d&#8217;exécution Node sur notre machine.
Il se peut aussi que vous ayez privilégié l&#8217;utilisation d&#8217;un <link linkend="online">service en ligne</link>.</simpara>
<simpara>Nous allons nous assurer dans cette section que nous pouvons
<emphasis role="strong">voir nos premiers résultats</emphasis> d&#8217;une interaction avec Node.</simpara>
<simpara>Le <link linkend="shell">terminal</link> est notre compagnon pour dialoguer avec le système d&#8217;exploitation.
L'<emphasis>invite de commande</emphasis> est son nom véritable.
Ce nom nous donne un indice sur la fonction de ce type de logiciel&#160;:
inviter l&#8217;utilisateur à saisir des commandes pour obtenir des résultats calculés par un ordinateur.</simpara>
<figure>
<title>Terminal iTerm2 sous macOS.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/macos-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>macos terminal</phrase></textobject>
</mediaobject>
</figure>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Terminal physique</title>
<simpara>L&#8217;histoire des invites de commande remonte au temps où les ordinateurs
étaient plus volumineux que nos logements.
Une époque lointaine où les ordinateurs étaient véritablement et physiquement distants des claviers qui les interrogeaient.</simpara>
<simpara><phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Terminal_informatique">fr.wikipedia.org/wiki/Terminal_informatique</link></phrase></simpara>
</note>
<simpara>Une application de type <emphasis>terminal</emphasis> sert également à communiquer avec
Node quand celui-ci est installé sur un ordinateur.</simpara>
<simpara>La majorité des systèmes d&#8217;exploitation embarquent un logiciel utilitaire permettant d&#8217;ouvrir un <emphasis>terminal</emphasis>.
Cela vaut également pour les <link linkend="online">services en ligne</link> offrant la fonctionnalité d'<link linkend="ide">éditeur de code</link>.</simpara>
<figure>
<title>Terminal du <link linkend="online">service en ligne</link> <emphasis>Cloud9</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/cloud9-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>cloud9 terminal</phrase></textobject>
</mediaobject>
</figure>
<simpara>Voici une liste non exhaustive d&#8217;applications de type <emphasis>terminal</emphasis>&#160;:</simpara>
<variablelist>
<varlistentry>
<term>macOS</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Terminal.app</emphasis>&#160;: fourni par défaut (dans <literal>Applications / Utilitaires</literal>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">iTerm2</emphasis>&#160;: une version améliorée disponible sur <phrase role="URL"><link xl:href="https://iterm2.com">iterm2.com</link></phrase> (ou <literal>brew cask install iterm2</literal>)&#160;;</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Linux</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">GNOME Terminal</emphasis>&#160;: fourni par défaut sous Debian, Ubuntu et les distributions utilisant le bureau <emphasis>GNOME</emphasis> (<phrase role="URL"><link xl:href="https://wiki.gnome.org/Apps/Terminal">wiki.gnome.org/Apps/Terminal</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Terminator</emphasis>&#160;: un autre terminal populaire (<phrase role="URL"><link xl:href="https://gnometerminator.blogspot.com">gnometerminator.blogspot.com</link></phrase>)&#160;;</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Windows</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Node.js Command Prompt</emphasis>&#160;: fourni avec l'<link linkend="windows">installeur Windows</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">PowerShell</emphasis>&#160;: fourni par défaut depuis Windows 7, sinon disponible sur <phrase role="URL"><link xl:href="https://github.com/PowerShell/PowerShell">github.com/PowerShell/PowerShell</link></phrase>&#160;— également disponible pour macOS et Linux.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<figure>
<title>Node.js Command Prompt sous Windows 10.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/windows-terminal.png" contentwidth="70%"/>
</imageobject>
<textobject><phrase>windows terminal</phrase></textobject>
</mediaobject>
</figure>
<simpara>Maintenant que nous avons installé Node et compris comment
y accéder depuis notre système d&#8217;exploitation ou navigateur web,
attaquons-nous au dernier morceau du puzzle&#160;:
<emphasis role="strong">avec quel logiciel écrire du code JavaScript pour nos applications Node</emphasis>&#160;?</simpara>
</section>
<section xml:id="ide">
<title>Choisir un éditeur de texte</title>
<simpara>Programmer pour Node revient dans la majorité des cas à écrire du JavaScript.
À cela s&#8217;ajoutent le HTML et le CSS dans le cas d&#8217;applications ou de sites web.</simpara>
<simpara>À la base, si un éditeur de texte suffit pour écrire du code,
prenons le temps de regarder ce qui pourrait nous apporter un peu de confort
dans le processus d&#8217;écriture.</simpara>
<simpara>Les logiciels présentés ci-après couvrent bon nombre de fonctionnalités
qui améliorent de près ou de loin notre capacité à écrire du code de qualité.
Parmi ces fonctionnalités, on peut retrouver la coloration syntaxique,
l&#8217;inspection dynamique, le débogage, des astuces de productivité et
d&#8217;intégration à l&#8217;écosystème Node.</simpara>
<simpara>Cette sélection a pour intention de vous aider à piocher au plus près
de vos goûts.
Le meilleur logiciel sera celui qui vous plaira.
Rien n&#8217;empêche d&#8217;en changer par la suite.</simpara>
<section xml:id="atom">
<title>Atom</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/atom.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>atom</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>Atom</emphasis> (<phrase role="URL"><link xl:href="https://atom.io">atom.io</link></phrase>) est un éditeur de code open-source,
multilingue et multi plate-forme dont le développement a été initié
par la société commerciale <emphasis>GitHub</emphasis> (<phrase role="URL"><link xl:href="http://github.com">github.com</link></phrase>).
Le logiciel est basé sur <emphasis>Electron</emphasis>, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur Node&#160;!</simpara>
<simpara><emphasis>Atom</emphasis> offre un écosystème d&#8217;extensions pour étendre les fonctionnalités de l&#8217;éditeur.
On retrouvera des extensions dédiées à l&#8217;auto-complétion,
un débogueur Node intégré (pour exécuter nos programmes sans changer de fenêtre)
mais aussi une vérification syntaxique sur mesure.</simpara>
<simpara>L&#8217;ensemble des extensions d'<emphasis>Atom</emphasis> sont disponibles sur <phrase role="URL"><link xl:href="https://atom.io/packages">atom.io/packages</link></phrase>&#160;;
voici cependant une liste d&#8217;extensions que j&#8217;utilise au quotidien&#160;:</simpara>
<variablelist>
<varlistentry>
<term>minimap (<phrase role="URL"><link xl:href="https://atom.io/packages/minimap">atom.io/packages/minimap</link></phrase>)</term>
<listitem>
<simpara>Une prévisualisation de l&#8217;intégralité du code source d&#8217;un fichier.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>file-icons (<phrase role="URL"><link xl:href="https://atom.io/packages/file-icons">atom.io/packages/file-icons</link></phrase>)</term>
<listitem>
<simpara>Une manière plus agréable de visualiser les différents types de fichiers
en fonction de leur icône.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>pigments (<phrase role="URL"><link xl:href="https://atom.io/packages/pigments">atom.io/packages/pigments</link></phrase>)</term>
<listitem>
<simpara>Affiche les couleurs en marge et dans le code source.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>language-babel (<phrase role="URL"><link xl:href="https://atom.io/packages/language-babel">atom.io/packages/language-babel</link></phrase>)</term>
<listitem>
<simpara>Coloration syntaxique de tous les langages compris par l&#8217;outil
Babel (<phrase role="URL"><link xl:href="https://babeljs.io">babeljs.io</link></phrase>)&#160;; dont les versions modernes
de JavaScript, JSX, GraphQL, etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>emmet (<phrase role="URL"><link xl:href="https://atom.io/packages/emmet">atom.io/packages/emmet</link></phrase>)</term>
<listitem>
<simpara>Génère du HTML à partir d&#8217;une écriture sous forme de sélecteur CSS.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-eslint (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-eslint">atom.io/packages/linter-eslint</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique basée sur les règles projet du module
ESLint (<phrase role="URL"><link xl:href="https://eslint.org">eslint.org</link></phrase>, voir
l'<link xl:href="../appendix-a/index.xml#eslint">annexe A, eslint</link>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>atom-ternjs (<phrase role="URL"><link xl:href="https://atom.io/packages/atom-ternjs">atom.io/packages/atom-ternjs</link></phrase>)</term>
<listitem>
<simpara>Autocomplétion pour JavaScript, Node et d&#8217;autres librairies
populaires comme jQuery, chai et underscore.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>editorconfig (<phrase role="URL"><link xl:href="https://atom.io/packages/editorconfig">atom.io/packages/editorconfig</link></phrase>)</term>
<listitem>
<simpara>Adapte les réglages d&#8217;indentation et autres styles d&#8217;écriture de code
documentés dans chaque projet.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>language-sass (<phrase role="URL"><link xl:href="https://atom.io/packages/language-sass">atom.io/packages/language-sass</link></phrase>)</term>
<listitem>
<simpara>Support du langage Sass.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>markdown-writer (<phrase role="URL"><link xl:href="https://atom.io/packages/markdown-writer">atom.io/packages/markdown-writer</link></phrase>)</term>
<listitem>
<simpara>Raccourcis et aides pour formatter du texte au format Markdown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autocomplete-modules (<phrase role="URL"><link xl:href="https://atom.io/packages/autocomplete-modules">atom.io/packages/autocomplete-modules</link></phrase>)</term>
<listitem>
<simpara>Étend l&#8217;autocomplétion lors des appels aux
<link xl:href="../chapter-05/index.xml">modules npm</link> (voir Chapitre 5).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-sass-lint (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-sass-lint">atom.io/packages/linter-sass-lint</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique des fichiers Sass.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>node-debugger (<phrase role="URL"><link xl:href="https://atom.io/packages/node-debugger">atom.io/packages/node-debugger</link></phrase>)</term>
<listitem>
<simpara>Intégration du débogueur Node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>tablr (<phrase role="URL"><link xl:href="https://atom.io/packages/tablr">atom.io/packages/tablr</link></phrase>)</term>
<listitem>
<simpara>Éditeur de fichiers CSV.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>linter-markdown (<phrase role="URL"><link xl:href="https://atom.io/packages/linter-markdown">atom.io/packages/linter-markdown</link></phrase>)</term>
<listitem>
<simpara>Vérification syntaxique des fichiers Markdown.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>node-resolver (<phrase role="URL"><link xl:href="https://atom.io/packages/node-resolver">atom.io/packages/node-resolver</link></phrase>)</term>
<listitem>
<simpara>Navigation au sein des <link xl:href="../chapter-05/index.xml">modules npm</link>
en cliquant sur leurs méthodes ou propriétés.</simpara>
</listitem>
</varlistentry>
</variablelist>
<tip>
<title><phrase role="RemarquePreTitre">Productivité</phrase> Installer vos extensions favorites</title>
<simpara>Chaque extension peut être ajoutée à nos favoris sur le site <phrase role="URL">atom.io</phrase>.
L&#8217;intention peut être de signaler notre appréciation d&#8217;une extension
mais aussi de retrouver plus tard celles qui nous plaisent.</simpara>
<figure>
<title>Une extension <emphasis>Atom</emphasis> ajoutée aux favoris.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/atom-favourite.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>atom favourite</phrase></textobject>
</mediaobject>
</figure>
<simpara>Et ça tombe bien, le logiciel nous offre une commande à saisir
dans un terminal pour installer toutes les extensions
ajoutées à nos favoris&#160;!</simpara>
<screen>$ apm stars --install</screen>
</tip>
</section>
<section xml:id="vs-code">
<title>Visual Studio Code</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/visual-studio-code.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>visual studio code</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>Visual Studio Code</emphasis> (<phrase role="URL"><link xl:href="https://code.visualstudio.com">code.visualstudio.com</link></phrase>)
est un éditeur de code open-source, multilingue et multi plate-forme
dont le développement a été initié par la société <emphasis>Microsoft</emphasis>.
Le logiciel est basé sur <emphasis>Electron</emphasis>, un environnement d&#8217;exécution
d&#8217;applications de bureau reposant sur les technologies web et sur Node&#160;!</simpara>
<simpara>Le système <emphasis>IntelliSense</emphasis> est un de ses atouts principaux.
Il se sert du contexte disponible pour offrir une auto-complétion
et des bulles d&#8217;aide pertinentes.
C&#8217;est un éditeur parfaitement adapté au développement d&#8217;applications Node
grâce à des fonctionnalités natives comme l&#8217;exécution, le débogage,
la gestion de tâches et le versionnement&#160;– du code et des modules <emphasis>npm</emphasis>.</simpara>
<simpara><emphasis>Visual Studio Code</emphasis> offre également un écosystème d&#8217;extensions pour
étendre les fonctionnalités de l&#8217;éditeur.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://marketplace.visualstudio.com/VSCode">marketplace.visualstudio.com/VSCode</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://code.visualstudio.com/Docs/runtimes/nodejs">code.visualstudio.com/Docs/runtimes/nodejs</link></phrase></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="webstorm">
<title>WebStorm</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/webstorm.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>webstorm</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>WebStorm</emphasis> (<phrase role="URL"><link xl:href="https://www.jetbrains.com/webstorm/">www.jetbrains.com/webstorm/</link></phrase>) est un environnement de développement (<emphasis>IDE</emphasis>) payant dédié au développement Web
HTML5, JavaScript et Node.<?asciidoc-br?>
Le logiciel est commercialisé par la société <emphasis>JetBrains</emphasis>.
Cette société est renommée pour ses <emphasis>IDE</emphasis> <emphasis>Pycharm</emphasis> (pour Python),
<emphasis>PhpStorm</emphasis> (pour PHP) et <emphasis>IntelliJ IDEA</emphasis> (pour Java).</simpara>
<simpara><emphasis>WebStorm</emphasis> est compatible Windows, Linux et macOS.
Ses forces résident dans sa relative légèreté,
une auto-complétion intelligente prenant en compte la résolution
des modules CommonJS et AMD, une intégration des outils populaires
dans l&#8217;écosystème Node (npm, eslint, Mocha, Karma, Bower, etc.)
ainsi qu&#8217;un débogage avancé.</simpara>
<simpara>Le téléchargement de <emphasis>WebStorm</emphasis> inclut une période d&#8217;essai de 30 jours.
La tarification du produit varie selon que vous soyez un individu ou
une entreprise et que le paiement se fasse mensuellement ou annuellement.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Astuce</phrase> Licence open source.</title>
<simpara>Vous pouvez demander à bénéficier d&#8217;une licence gratuite sous réserve
d&#8217;une preuve de contribution à un ou plusieurs projets open source.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.jetbrains.com/buy/opensource/">www.jetbrains.com/buy/opensource/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="vs-ide">
<title>Visual Studio IDE</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/visual-studio.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>visual studio</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>Visual Studio</emphasis> (<phrase role="URL"><link xl:href="https://www.visualstudio.com/vs/">www.visualstudio.com/vs/</link></phrase>)
est un environnement de développement <emphasis>(IDE)</emphasis> édité par <emphasis>Microsoft</emphasis>.
<emphasis>Visual Studio</emphasis> était historiquement dédié au développement applicatif
Windows (Visual Basic, Visual C++).
Ce logiciel gère aujourd&#8217;hui bien plus de langages,
dont C#, HTML, CSS, JavaScript, ASP.Net.
Il est surtout extensible, ce qui permet de lui ajouter le
support de <emphasis>Python</emphasis> ou encore Node, entre autres.</simpara>
<simpara><emphasis>Visual Studio</emphasis> est compatible Windows uniquement.
Il existe en plusieurs éditions dont la <emphasis>Community Edition</emphasis>.
Cette édition est gratuite, elle.</simpara>
<simpara>Afin de bénéficier de l&#8217;intégration complète de l&#8217;écosystème Node,
il est nécessaire d&#8217;installer l&#8217;extension <emphasis>Node.js Tools for Visual Studio</emphasis>
(aussi nommée <emphasis>NTVS</emphasis>).
Elle est gratuite, open source et disponible à cette adresse
<phrase role="URL"><link xl:href="https://www.visualstudio.com/vs/node-js/">www.visualstudio.com/vs/node-js/</link></phrase>.</simpara>
</section>
</section>
<section xml:id="quand_mettre_à_jour_node_js">
<title>Quand mettre à jour Node.js ?</title>
<simpara>Le développement de Node continue pendant que vous lisez ces lignes.
Les sections suivantes présentent les différentes raisons
pour lesquelles de nouvelles versions de Node sont distribuées.</simpara>
<simpara>Quelle que soit la raison, le processus de mise à jour est identique
que pour l'<link linkend="install">installation de Node</link>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>si vous aviez utilisé un <emphasis role="strong">installeur</emphasis>&#160;: téléchargez et installez-en
la nouvelle version&#160;;</simpara>
</listitem>
<listitem>
<simpara>si vous aviez utilisé un <emphasis role="strong">gestionnaire de version</emphasis>&#160;: téléchargez la
nouvelle version et faites-en la nouvelle version par défaut&#160;;</simpara>
</listitem>
<listitem>
<simpara>si vous aviez <emphasis role="strong">compilé depuis les sources</emphasis>&#160;: téléchargez les sources
de la nouvelle version et compilez à nouveau&#160;;</simpara>
</listitem>
<listitem>
<simpara>si vous aviez utilisé une <emphasis role="strong">image Docker</emphasis>&#160;: téléchargez la nouvelle
version en ayant recourt à la commande <literal>docker pull node:&lt;version&gt;</literal>.</simpara>
</listitem>
</itemizedlist>
<section xml:id="mises_à_jour_de_sécurité">
<title>Mises à jour de sécurité</title>
<simpara>Node n&#8217;est pas exempt de bugs.
Il y a une catégorie de bugs qui nécessite d&#8217;être réactif&#160;:
les failles de sécurité.
Ces failles offrent une surface d&#8217;attaque à des personnes
mal intentionnées.
Elles seraient tentées d&#8217;accéder sans permission à des serveurs,
et donc aux données qu&#8217;ils contiennent.</simpara>
<simpara>L&#8217;impact peut être faible pour un site perso à condition de ne pas laisser
trainer de mots de passe ici et là.
Cela peut se révéler beaucoup plus fâcheux pour un site e-commerce
ou une entreprise dont la santé serait mise en jeu.</simpara>
<simpara>L&#8217;équipe de Node livre des <emphasis role="strong">versions corrigeant les failles de sécurité
<emphasis>aussitôt</emphasis> qu&#8217;elle le peut</emphasis>.
La faille n&#8217;est d&#8217;ailleurs pas révélée avant que le correctif
soit disponible, par mesure de précaution.</simpara>
<simpara>Que faire si la faille de sécurité affecte la version de Node installée sur&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>notre <emphasis role="strong">ordinateur de développement</emphasis>&#160;: c&#8217;est peu risqué - sauf à ce qu&#8217;un module tiers exploite cette faille&#160;;</simpara>
</listitem>
<listitem>
<simpara>notre <emphasis role="strong">site web</emphasis>&#160;: redéployer aussitôt le site en question avec une version corrigeant la faille.</simpara>
</listitem>
</itemizedlist>
<simpara>Les versions de Node qui corrigent des failles de sécurité ou des bugs connus
n&#8217;ont quasiment aucune chance de casser une application existante.
On les appelle les versions <emphasis>patch</emphasis>.
Une version <emphasis>patch</emphasis> est, par exemple, lorsque la version actuelle
de Node est la <literal>v10.0.0</literal> et que la nouvelle version est la <literal>v10.0.1</literal>.</simpara>
<simpara>Plusieurs ressources sont à notre disposition pour se tenir informé·e&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Liste de diffusion (<phrase role="URL"><link xl:href="https://groups.google.com/group/nodejs-sec">groups.google.com/group/nodejs-sec</link></phrase>)</term>
<listitem>
<simpara>Pour recevoir l&#8217;alerte par email (moins d&#8217;un email par mois).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Blog Node.js (<phrase role="URL"><link xl:href="https://nodejs.org/en/blog/vulnerability/">nodejs.org/en/blog/vulnerability/</link></phrase>)</term>
<listitem>
<simpara>Une page web à consulter avec un navigateur web.
Les mêmes messages sont relayés sur la <emphasis>liste de diffusion</emphasis>
mentionnée précédemment.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fil RSS du blog Node.js (<phrase role="URL"><link xl:href="https://nodejs.org/en/feed/vulnerability.xml">nodejs.org/en/feed/vulnerability.xml</link></phrase>)</term>
<listitem>
<simpara>La même chose que le point précédent mais auquel on peut souscrire
avec un lecteur RSS comme <emphasis>Feedly</emphasis> ou <emphasis>Mozilla Thunderbird</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Compte Twitter @nodesecurity (<phrase role="URL"><link xl:href="https://twitter.com/nodesecurity">twitter.com/nodesecurity</link></phrase>)</term>
<listitem>
<simpara>Annonce des informations liées à la sécurité générale de Node
et de son écosystème.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<title><phrase role="RemarquePreTitre">Lien</phrase> Groupe de travail Node.js Security</title>
<simpara>Un groupe de travail veille à maintenir et améliorer la sécurité de Node.
Ces personnes se chargent d&#8217;être proactives dans la détection
de failles dans l&#8217;architecture de Node mais aussi dans
l&#8217;intégration de code tiers, comme la brique <emphasis>OpenSSL</emphasis>
ou le module <emphasis>npm</emphasis>.</simpara>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/security-wg">github.com/nodejs/security-wg</link></phrase></simpara>
</note>
<simpara>Le <link xl:href="../chapter-06/index.xml">chapitre 6</link> décrit
comment se maintenir à jour sur les
<link xl:href="../chapter-06/index.xml#security">alertes de sécurité</link> de nos
applications Node.
Celles-ci peuvent être vulnérables du fait des modules npm dont elles
sont dépendantes&#160;— en plus des vulnérabilités de Node.</simpara>
</section>
<section xml:id="versions_mineures">
<title>Versions mineures</title>
<simpara>Les versions mineures de Node sont des versions qui ajoutent de
nouvelles fonctionnalités à Node.
Ces nouvelles fonctionnalités n&#8217;ont quasiment aucune chance de
casser une application existante.</simpara>
<simpara>Une version mineure est, par exemple, lorsque la version actuelle
de Node est la <literal>v10.0.3</literal> et que la nouvelle version est la <literal>v10.1.0</literal>.<?asciidoc-br?>
Les versions mineures sortent une petite dizaine de fois par an.
Une migration ne demande pas nécessairement d&#8217;investir beaucoup de temps pour adapter et tester nos applications Node.</simpara>
<simpara>Que faire en cas de sortie d&#8217;une version mineure sur&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>notre <emphasis role="strong">ordinateur de développement</emphasis>&#160;: on peut migrer si l&#8217;on veut tester
ou bénéficier des nouvelles fonctionnalités de cette version&#160;;</simpara>
</listitem>
<listitem>
<simpara>notre <emphasis role="strong">site web</emphasis>&#160;: pas d&#8217;action immédiate requise&#160;;
on peut migrer si l&#8217;on veut bénéficier des nouvelles fonctionnalités
de cette version.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="versions_majeures">
<title>Versions majeures</title>
<simpara>Les versions majeures de Node sont des versions qui ajoutent de
nouvelles fonctionnalités à Node.
En revanche, ces versions peuvent être amenées à changer des comportements
qui casseraient une application existante.</simpara>
<simpara>Une version majeure est, par exemple, lorsque la version actuelle
de Node est la <literal>v10.3.0</literal> et que la nouvelle version est la <literal>v11.0.0</literal>.<?asciidoc-br?>
Les versions majeures sortent 2 fois par an.
Une migration peut demander d&#8217;investir un certain temps pour adapter
et tester nos applications Node.</simpara>
<simpara>Que faire en cas de sortie d&#8217;une version majeure sur&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>notre <emphasis role="strong">ordinateur de développement</emphasis>&#160;: on cherchera à prendre du temps
pour tester nos applications sur cette version
et s&#8217;assurer de leur bon fonctionnement&#160;;</simpara>
</listitem>
<listitem>
<simpara>notre <emphasis role="strong">site web</emphasis>&#160;: pas d&#8217;action immédiate requise.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="lifecycle">
<title>Comprendre le cycle de vie produit</title>
<simpara>Le développement de la plate-forme Node prend soin de ne pas
aller trop vite ni d&#8217;altérer la stabilité des applications et des
outils en fonctionnement.
Il sort au maximum <emphasis role="strong">deux versions majeures par an</emphasis>.
Parmi ces deux versions, <emphasis role="strong">une version majeure est supportée à long terme</emphasis> (<emphasis>Long Term Support</emphasis>, <emphasis>LTS</emphasis>).</simpara>
<simpara>La notion de version supportée à long terme (<emphasis>LTS</emphasis>)
a été introduit pour donner un repère de stabilité.
On sait qu&#8217;on peut compter dessus sans se poser de question.
Les versions qui ne sont pas supportées à long terme sont à voir
comme un coup d&#8217;essai, dans l&#8217;anticipation d&#8217;une migration
vers une version suivante, supportée à long terme, elle.</simpara>
<figure>
<title>Calendrier de publication des versions de Node.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/schedule.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>schedule</phrase></textobject>
</mediaobject>
</figure>
<note>
<title><phrase role="RemarquePreTitre">Lien</phrase> Calendrier de sorties</title>
<simpara>Le calendrier des sorties de Node est tenu à jour à l&#8217;adresse ci-après.
Référez-vous à ce calendrier pour des informations à jour sur
les prochaines versions et l&#8217;arrêt de maintenance d&#8217;anciennes versions.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/nodejs/Release">github.com/nodejs/Release</link></phrase></simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Si on récapitule&#160;:</simpara>
<variablelist>
<varlistentry>
<term>Les versions <emphasis role="strong">impaires</emphasis> (v5, v7, etc.)</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>sont développées pendant <emphasis>neuf mois</emphasis></simpara>
</listitem>
<listitem>
<simpara>ne sont pas maintenues au-delà</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Les versions <emphasis role="strong">paires</emphasis> (<emphasis>LTS</emphasis>, v10, etc.)</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>sont basées sur la version <emphasis>impaire</emphasis> précédente</simpara>
</listitem>
<listitem>
<simpara>sont développées pendant <emphasis>six mois</emphasis></simpara>
</listitem>
<listitem>
<simpara>sont supportées <emphasis>LTS</emphasis> pendant <emphasis>dix-huit mois</emphasis></simpara>
</listitem>
<listitem>
<simpara>basculent en maintenance pendant <emphasis>douze mois</emphasis> supplémentaires</simpara>
</listitem>
<listitem>
<simpara>ne sont pas maintenues au-delà</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>Les patchs de sécurité ne concernent que les versions en <emphasis>développement</emphasis>, <emphasis>supportées</emphasis> ou en <emphasis>maintenance</emphasis>.</simpara>
<simpara>Cette planification garantit une plate-forme et un ensemble de
fonctionnalités stables de manière prédictible,
à la fois pour les projets reposant sur Node mais aussi
pour l&#8217;écosystème de contributeurs de modules <emphasis>npm</emphasis>.</simpara>
</section>
</section>
<section xml:id="conclusion_2">
<title>Conclusion</title>
<simpara>Nous sommes désormais en mesure d&#8217;installer et mettre à jour Node
sur notre ordinateur.
Nous savons aussi avec quel(s) logiciel(s) développer nos applications.
Nous savons aussi où nous informer pour savoir quand faire nos mises à jour,
pour corriger des problèmes de sécurité et bénéficier des nouvelles
fonctionnalités du langage.</simpara>
<simpara>Le prochain chapitre nous amènera à reprendre les bases du
langage JavaScript en jouant avec le <link linkend="shell">terminal Node</link>.
On découvrira également les différences entre JavaScript, ECMAScript et Node.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avec_javascript">
<title>Jouer avec JavaScript</title>
<simpara>Programmer une application Node c&#8217;est aussi
l&#8217;occasion d&#8217;apprendre JavaScript.
Ou de se mettre à jour ou de redécouvrir le langage.</simpara>
<simpara>Ce chapitre explique ce qu&#8217;il faut pour
comprendre comment fonctionne JavaScript.
Nous utiliserons une approche par l&#8217;exemple.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Qu&#8217;est-ce que JavaScript, pour de vrai&#160;?</simpara>
</listitem>
<listitem>
<simpara>Comprendre l&#8217;évolution de la spécification ECMAScript</simpara>
</listitem>
<listitem>
<simpara>Manipuler les différentes structures du langage</simpara>
</listitem>
<listitem>
<simpara>En savoir plus sur des éléments avancés du langage</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>JavaScript est souvent raillé.
Parce que ce n&#8217;est pas un vrai langage.
Parce qu&#8217;il a été créé en 6 jours.
Parce qu&#8217;il n&#8217;est pas orienté objet.</simpara>
<simpara>JavaScript est un langage expressif qui a énormément gagné en maturité
depuis les années 2010.
Il se révèle parfaitement opérationnel dès lors que l&#8217;on s&#8217;intéresse
à ses fonctionnalités, sans faire de hors-piste.</simpara>
<simpara>Les types de données et les méthodes de manipulations qu&#8217;elles nous offrent
permettent d&#8217;écrire un code plus simple, à lire et à produire.
Certaines structures de données nous aident à mieux organiser nos données
ainsi qu&#8217;à mieux les traiter.</simpara>
</abstract>
<section xml:id="definition">
<title>Qu&#8217;est-ce que JavaScript ?</title>
<simpara>Au lieu d&#8217;écrire plusieurs paragraphes expliquant ce qu&#8217;est et
ce que n&#8217;est <emphasis>pas</emphasis> JavaScript, regardons ensemble
un bloc de code contenant plusieurs <emphasis>expressions</emphasis> écrites
en JavaScript&#160;:</simpara>
<formalpara>
<title>definition.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

// On concatène 2 chaînes de caractères <co xml:id="CO1-1"/>
const baseUrl = 'https://oncletom.io/node.js';
const filePath = `${baseUrl}/package.json`;

// On affiche un message au clic sur la page <co xml:id="CO1-2"/>
const docBody = document.querySelector('body');
docBody.addEventListener('click', () =&gt; alert('Hello World!'));

// On affiche des informations contenues dans un fichier distant <co xml:id="CO1-3"/>
fetch(filePath)
  .then(response =&gt; response.json())
  .then(pkg =&gt; console.log(`${pkg.name}@${pkg.version}`));

// On liste le contenu du répertoire utilisateur <co xml:id="CO1-4"/>
const {homedir} = require('os');
const fs = require('fs');
fs.readdir(homedir(), (err, files) =&gt; {
  err ? console.error(err) : console.log(files);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO1-1">
<para>Code JavaScript standard.</para>
</callout>
<callout arearefs="CO1-2">
<para>Code JavaScript pour manipuler la DOM API (documents web).</para>
</callout>
<callout arearefs="CO1-3">
<para>Code JavaScript pour manipuler des Web API (fonctionnalités des navigateurs web).</para>
</callout>
<callout arearefs="CO1-4">
<para>Code JavaScript pour manipuler Node.js.</para>
</callout>
</calloutlist>
<simpara>Ce que l&#8217;on peut comprendre de l&#8217;exemple de code ci-dessus,
c&#8217;est que JavaScript permet de s&#8217;interfacer avec plusieurs choses&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>des documents web représentés par le Document Object Model (DOM)&#160;;</simpara>
</listitem>
<listitem>
<simpara>des navigateurs web au travers des Web API&#160;;</simpara>
</listitem>
<listitem>
<simpara>des systèmes informatiques avec Node.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis>ECMAScript</emphasis> correspond à l&#8217;ensemble des expressions du langage.
Ces expressions sont étendues par des interfaces de programmation (<emphasis>API</emphasis>).
Ces interfaces nous permettent de communiquer avec les documents web, les navigateurs web ou les systèmes informatiques.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> À propos de JavaScript</title>
<simpara>JavaScript a été inventé en 1995 par Brendan Eich alors qu&#8217;il était employé de la société <emphasis>Netscape Communications</emphasis>.
Microsoft lui emboîte le pas en incluant JavaScript dans son logiciel Internet Explorer, alors en version 3.
Pour des raisons de droits de marque, il y est dénommé <emphasis>JScript</emphasis>.</simpara>
<simpara>La spécification est ensuite validée par l&#8217;organisme <emphasis>Ecma International</emphasis> en juin 1997 sous le nom d'<emphasis>ECMAScript</emphasis>, standard ECMA-262.</simpara>
<simpara>L&#8217;utilisation du terme <emphasis>JavaScript</emphasis> est resté dans le vocabulaire courant. Mais c&#8217;est bien d'<emphasis>ECMAScript</emphasis> dont on parle, vraiment.</simpara>
<simpara>Adobe Flash utilise un dérivé d&#8217;ECMAScript&#160;: ActionScript.
Bien des machines virtuelles sont capables d&#8217;interpréter partiellement ou
intégralement ECMAScript&#160;: Rhino, Konq, BESEN en Object Pascal ou encore
Esprima qui est elle-même écrite en ECMAScript.</simpara>
</note>
<simpara>Si d&#8217;autres langages de programmation se cantonnent
soit au <emphasis>côté client</emphasis> (VBScript, ActionScript, Elm)
soit au <emphasis>côté serveur</emphasis> (Ruby, Python, Haskell),
JavaScript a débuté <emphasis>côté client</emphasis> pour s&#8217;étendre au <emphasis>côté serveur</emphasis>.
Ce à quoi se réfère l&#8217;expression anglophone <emphasis>full stack</emphasis>.</simpara>
<figure>
<title>Écosystème des technologies JavaScript.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/javascript.svg"/>
</imageobject>
<textobject><phrase>javascript</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le langage <emphasis>ECMAScript</emphasis>&#160;— appelons-le ainsi à partir de maintenant&#160;—
a évolué au fil du temps.
Il s&#8217;est enrichi au fur et à mesure de nouvelles fonctionnalités,
de sucres syntaxiques (raccourcis d&#8217;écriture)
et de rigueur aussi, pour corriger des défauts de <emphasis>design</emphasis>.</simpara>
<simpara>Le comité de travail <emphasis>TC39</emphasis> (<emphasis>Technical Committee</emphasis>,
<phrase role="URL"><link xl:href="https://github.com/tc39">github.com/tc39</link></phrase>) est en charge de l&#8217;évolution
du langage, standardisé sous le doux sobriquet de <emphasis>standard ECMA-262</emphasis>.
À charge ensuite aux différents implémenteurs de suivre les changements
et de les incorporer dans leurs machines virtuelles.</simpara>
<simpara>Node se base sur la machine virtuelle <link xl:href="../chapter-01/index.xml#v8">V8 de Google</link> pour interpréter les expressions ECMAScript.
De fait, Node comprend les mêmes expressions ECMAScript que <emphasis>V8</emphasis>.</simpara>
<simpara>Nous verrons un peu plus tard dans ce chapitre comment suivre la
compatibilité de Node avec ECMAScript.
Intéressons-nous à l&#8217;évolution du langage, et ce que ça nous apporte.</simpara>
<section xml:id="ecmascript_5_aka_emphasis_es5_emphasis">
<title>ECMAScript 5 (aka <emphasis>ES5</emphasis>)</title>
<simpara>ECMAScript a été standardisé dans sa version 5 en décembre 2009.
La révision 5.1 de juin 2011 est une correction mineure de la spécification.</simpara>
<simpara>Il s&#8217;agit d&#8217;une évolution majeure dans l&#8217;histoire du langage.
La précédente version&#160;— ECMAScript 3&#160;— était âgée de <emphasis role="strong">dix ans</emphasis>.</simpara>
<simpara>ECMAScript 5 limite drastiquement certains effets indésirables du langage
grâce au <emphasis>mode strict</emphasis>.
De nouvelles méthodes de manipulation de tableaux et d&#8217;objets voient le jour
ainsi qu&#8217;un support natif du format de données <link linkend="json">JSON</link>.</simpara>
<simpara>La standardisation de cette version d&#8217;ECMAScript a contribué à redorer
l&#8217;image du langage mais aussi à faire émerger de nouvelles pratiques
de programmation.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Table de compatibilité</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://kangax.github.io/compat-table/es5/">kangax.github.io/compat-table/es5/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Spécification</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://www.ecma-international.org/ecma-262/5.1/">www.ecma-international.org/ecma-262/5.1/</link></phrase></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/compat-table.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>compat table</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="ecmascript_2015_aka_emphasis_es6_emphasis_puis_emphasis_es2015_emphasis">
<title>ECMAScript 2015 (aka <emphasis>ES6</emphasis> puis <emphasis>ES2015</emphasis>)</title>
<simpara>La spécification <emphasis role="strong">ECMAScript 2015</emphasis> (<emphasis>ES2015</emphasis>) a été publiée en juin 2015.
Elle succède à <emphasis role="strong">ECMAScript 5</emphasis> après 6 années de gestation.<?asciidoc-br?>
Cette version a successivement été appelée <emphasis>ECMAScript Harmony</emphasis>, <emphasis>ECMAScript 6</emphasis>, puis <emphasis>ECMAScript 2015</emphasis>.</simpara>
<simpara>Le processus de standardisation a mis 6 années pour aboutir,
mais cette fois-ci, les choses se sont déroulées différemment.<?asciidoc-br?>
De nombreuses idées ont été piochées dans le langage
<emphasis>CoffeeScript</emphasis> (<phrase role="URL"><link xl:href="http://coffeescript.org">coffeescript.org</link></phrase>).
Et surtout, un nouveau type d&#8217;outillage s&#8217;est formé pour commencer
à utiliser ce JavaScript du futur avec les compilateurs
<emphasis>traceur</emphasis> de Google dès 2011 (<phrase role="URL"><link xl:href="https://github.com/google/traceur-compiler">github.com/google/traceur-compiler</link></phrase>)
puis le projet indépendant <emphasis>6to5</emphasis> dès 2014.
<emphasis>6to5</emphasis> a été renommé en <emphasis>babel</emphasis> (<phrase role="URL"><link xl:href="https://babeljs.io">babeljs.io</link></phrase>)
et son instigateur a par la suite été embauché par Facebook.</simpara>
<simpara>La pratique de compiler du JavaScript en JavaScript était en rupture
avec ce qui se faisait précédemment&#160;:
attendre qu&#8217;une fonctionnalité soit adoptée par un dénominateur commun
de navigateurs web pour s&#8217;en servir.
Cette fois-ci, on pouvait se servir du futur, dès aujourd&#8217;hui.</simpara>
<simpara>De fait, il n&#8217;y a pas eu à attendre 6 ans et l&#8217;implémentation
par les différents implémenteurs pour profiter de ce
qu&#8217;il y avait de meilleur.</simpara>
<simpara>Le prix à payer&#160;? Un ticket d&#8217;entrée plus élevé lié à la maitrise
de l&#8217;outillage associé.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Table de compatibilité (navigateurs web)</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://kangax.github.io/compat-table/es6/">kangax.github.io/compat-table/es6/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Table de compatibilité (Node.js)</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://node.green/">node.green/</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Spécification</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://www.ecma-international.org/ecma-262/6.0/">www.ecma-international.org/ecma-262/6.0/</link></phrase></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<figure>
<title>Illustration de l&#8217;évolution de la compatibilité ECMAScript au fil des versions de Node.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/node-green.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>node green</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="ecmascript_2016_etc_aka_emphasis_es2016_emphasis">
<title>ECMAScript 2016, etc. (aka <emphasis>ES2016</emphasis>)</title>
<simpara>Depuis la sortie d'<emphasis>ECMAScript 2015</emphasis>, l&#8217;intention est de publier une
nouvelle spécification par an.
L&#8217;envie était de travailler fonctionnalité par fonctionnalité
et de ne pas attendre trop longtemps avant de les ratifier.
En conséquent, les nouvelles versions annuelles sont beaucoup plus
incrémentales.
Elles se font moins attendre et contiennent moins de grands bouleversements.</simpara>
<simpara>Les fonctionnalités en cours de préparation sont listées
dans ce dépôt GitHub&#160;: <phrase role="URL"><link xl:href="https://github.com/tc39/proposals">github.com/tc39/proposals</link></phrase>.
Le dernier stade avant la validation d&#8217;une fonctionnalité est le <emphasis>stage 3</emphasis>.
Dès qu&#8217;une fonctionnalité passe en <emphasis>stage 4</emphasis>, elle est incluse
dans la prochaine version d&#8217;ECMAScript
—&#160;_ECMAScript 2018_ une fois l&#8217;année 2018 terminée.</simpara>
<simpara>Les fonctionnalités approuvées sont consignées dans ce document&#160;:
<phrase role="URL"><link xl:href="https://github.com/tc39/proposals/blob/master/finished-proposals.md">github.com/tc39/proposals/blob/master/finished-proposals.md</link></phrase>.</simpara>
</section>
</section>
<section xml:id="primitives">
<title>Les éléments de base du langage</title>
<simpara>ECMAScript permet de manipuler différents <emphasis>types</emphasis> de données.
Cette section s&#8217;intéresse à décrire les notions nécessaires
pour s&#8217;approprier le reste des exemples de l&#8217;ouvrage.
On apprendra notamment à manipuler des variables, à faire
des boucles sur des collections et à faire la différence
entre un objet et une fonction.</simpara>
<simpara>Mais qu&#8217;entend-t-on par <emphasis>type de données</emphasis>&#160;?
Faisons-nous notre propre idée avec une suite d&#8217;exemples.
Ces notions seront développées dans le reste du chapitre,
pour mieux comprendre ce que l&#8217;on peut en faire.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/string.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'Node.js'</programlisting>
</para>
</formalpara>
<simpara>Une valeur entourée de guillemets est considérée
par l&#8217;interpréteur ECMAScript comme une <emphasis role="strong">chaîne de caractères</emphasis>, du texte.</simpara>
<simpara>Ces guillemets peuvent être des guillemets simples (<literal>'</literal>),
des guillemets doubles (<literal>"</literal>) ou des guillemets obliques (<literal>`</literal>).</simpara>
<simpara>On peut effectuer des opérations d&#8217;identification ou d&#8217;assemblage avec une
valeur de <emphasis>type chaîne de caractères</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/number.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">3

12.3</programlisting>
</para>
</formalpara>
<simpara>ECMAScript considère les entiers (<literal>3</literal> dans cet exemple)
et les nombres flottants (<literal>12.3</literal> dans cet exemple) comme des nombres.
Il ne fait <emphasis>pas</emphasis> de distinction entre les deux.</simpara>
<simpara>On peut effectuer des <emphasis role="strong">opérations mathématiques</emphasis> entre plusieurs
valeurs de <emphasis>type nombre</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/boolean.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">true

false</programlisting>
</para>
</formalpara>
<simpara>ECMAScript considère deux valeurs pour signifier <emphasis>vrai</emphasis> ou <emphasis>faux</emphasis>,
respectivement <literal>true</literal> et <literal>false</literal>.</simpara>
<simpara>On peut effectuer des <emphasis role="strong">opérations logiques</emphasis> avec une
valeur de <emphasis>type booléen</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/null.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">null</programlisting>
</para>
</formalpara>
<simpara>On utilise <literal>null</literal> pour signifier l'<emphasis role="strong">absence de valeur</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/undefined.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">undefined</programlisting>
</para>
</formalpara>
<simpara>La valeur <literal>undefined</literal> est utilisée pour signifier
qu&#8217;une <emphasis role="strong">valeur est inconnue</emphasis>.
Rares sont les cas où on choisira ce type de données par nous-même.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> primitives</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur primitives.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures">developer.mozilla.org/docs/fr/Web/JavaScript/Data_structures</link>
</simpara>
</note>
<simpara>Il existe trois autres types de données qui se basent sur ces types
dits <emphasis>primitifs</emphasis>.
Ces autres types sont destinés à ranger, classer et
à exprimer de nouvelles valeurs en fonction d&#8217;autres.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/array.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">[2, 'C', 2, 'G']</programlisting>
</para>
</formalpara>
<simpara>Un tableau se déclare en encadrant une suite de valeurs entre crochets
(<literal>[</literal> et <literal>]</literal>).
Un tableau peut contenir n&#8217;importe quel type de valeurs,
et autant que nécessaire.
L&#8217;ordre des valeurs a généralement une importance.</simpara>
<simpara>On peut effectuer des <emphasis role="strong">opérations de tri et de sélection</emphasis> avec un
<emphasis>tableau de valeurs</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/object.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  title: 'Node.js',
  isbn: '978-2212139938',
  published: true
}</programlisting>
</para>
</formalpara>
<simpara>Un objet se déclare en encadrant une suite de <emphasis>paires de valeurs</emphasis>
entre accolade (<literal>{</literal> et <literal>}</literal>).
Une <emphasis>clé</emphasis> désigne une <emphasis>valeur</emphasis>, qui peut être de n&#8217;importe quel type.
Un objet fonctionne comme un <emphasis>dictionnaire</emphasis>&#160;: on associe une valeur
à un intitulé, un label.
L&#8217;ordre des valeurs n&#8217;a généralement pas d&#8217;importance.</simpara>
<simpara>On peut effectuer des <emphasis role="strong">opérations de sélection</emphasis> avec un
<emphasis>objet de valeurs</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function double(value) {
  return value * 2;
}

double(3);</programlisting>
</para>
</formalpara>
<simpara>Une fonction accepte des <emphasis>arguments</emphasis>, de n&#8217;importe quel type et
autant que nécessaire.
Une fonction peut être <emphasis>déclarée</emphasis> et être <emphasis>exécutée</emphasis> (dernière ligne de l&#8217;exemple précédent).</simpara>
<simpara>Une fonction <emphasis>retourne</emphasis> un résultat explicite avec le
mot-clé <literal>return</literal>.
Dans le cas contraire, ECMAScript considère
que la valeur retournée équivaut implicitement à <literal>undefined</literal>.</simpara>
<simpara>On peut effectuer des <emphasis role="strong">opérations de transformation</emphasis> avec une fonction.</simpara>
<simpara>Les fonctions sont destinées à être <emphasis>appelées</emphasis>, pour effectuer
des traitements répétitifs.
Dès que l&#8217;on sent que l&#8217;on doit écrire deux fois la même chose,
on l&#8217;écrit dans une fonction et on l&#8217;appelle deux fois.</simpara>
<section xml:id="les_variables">
<title>Les variables</title>
<simpara>Les <emphasis role="strong">variables</emphasis> servent à ranger des valeurs.
On peut ainsi les réutiliser plus tard, les transmettre et prendre
des décisions en fonction de ce qu&#8217;elles contiennent.</simpara>
<simpara>Les variables nous aident à <emphasis>donner du sens</emphasis> à notre code,
à le rendre intelligible par d&#8217;autres personnes
ainsi qu&#8217;à nommer des choses comme on le ferait dans notre quotidien.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>base/variables.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  isbn: '978-2212139938',
  published: true
};

const base_price = 13;

function double(value) {
  return value * 2;
}

book.price = double(base_price);</programlisting>
</para>
</formalpara>
<simpara>À votre avis, combien vaut le prix du livre calculé dans
l&#8217;exemple précédent&#160;?
Il suffirait de suivre le chemin que prend la nouvelle valeur
rangée dans la clé <literal>price</literal> de l&#8217;objet <literal>book</literal>, calculée par la fonction
<literal>double</literal> à qui on passe la valeur contenue dans la variable <literal>base_price</literal>.</simpara>
<simpara>Le mot-clé <literal>const</literal> nous a servi à <emphasis>déclarer</emphasis> des variables.
On ne peut étiqueter une variable avec le même nom qu&#8217;une seule fois.
L&#8217;exemple suivant générera une erreur si on déclare deux fois la même variable avec <literal>const</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>variables/const.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const base_price = 13;
const base_price = 14;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="instructions">
<title>Instructions</title>
<simpara>Des <emphasis>instructions</emphasis> nous servent à suivre, éviter ou répéter
des chemins dans notre code.</simpara>
<simpara>L&#8217;instruction <literal>if</literal> nous aide à exécuter du code qui remplit une condition.
Cette condition peut être une <emphasis>valeur</emphasis> ou une <emphasis>expression</emphasis>.
Cette expression est interprétée pour savoir à quel <emphasis>booléen</emphasis>
elle correspond.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>instructions/if.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published &amp;&amp; book.title) {
  console.log('Le livre est publié (et a un titre)');
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent vérifie que les deux conditions sont remplies
(opérateur <literal>&amp;&amp;</literal>) pour afficher un message en conséquent.</simpara>
<simpara>On notera au passage que <literal>book.title</literal> n&#8217;est pas un booléen.
ECMAScript regarde dans ce cas que la chaîne de caractères
contient <emphasis>au moins 1 caractère</emphasis>.
On expliquera ce comportement plus en détail dans la section <link linkend="boolean">manipuler des booléens</link>.</simpara>
<simpara>L&#8217;instruction <literal>if</literal> peut être complétée avec l&#8217;instruction <literal>else</literal>
pour exécuter du code qui répondrait au cas contraire.
On peut imbriquer plusieurs <literal>else if</literal> à la suite.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>instructions/else-if.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published &amp;&amp; book.title) {
  console.log('Le livre est publié avec un titre.');
}
else if (book.published) {
  console.log('Le livre est publié (sans titre).');
}
else {
  console.log('Le livre n\'est pas publié.');
}</programlisting>
</para>
</formalpara>
<simpara>Notre exemple n&#8217;empruntera qu&#8217;un seul des chemins, mais on peut
constater qu&#8217;on pourrait en emprunter un autre
en modifiant la valeur des clés <literal>title</literal> et <literal>published</literal>.</simpara>
</section>
<section xml:id="scope">
<title>Portée (<emphasis>scope</emphasis>)</title>
<simpara>La <emphasis>portée</emphasis> est un concept très présent dans ECMAScript.
On y fait souvent référence en parlant de <emphasis>variable globale</emphasis> et
de <emphasis>variable locale</emphasis>.
On peut y sentir une notion de frontière d&#8217;accès à la valeur
d&#8217;une variable.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/local.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function secret(){
  const mot = 'devinette';

  return 'None shall pass';
}

console.log(secret());
console.log(mot);</programlisting>
</para>
</formalpara>
<simpara>Ce que nous dit l&#8217;exemple précédent,
c&#8217;est que la variable <literal>secret</literal> de type fonction a une portée globale
au script en question.
Qu&#8217;en-est-il de la variable <literal>mot</literal> encapsulée dans cette fonction&#160;?</simpara>
<simpara>On pourrait le résumer ainsi&#160;:
la variable <literal>mot</literal> est définie dans la fonction <literal>secret</literal>
et n&#8217;est donc pas accessible en dehors de la portée de la fonction.
À l&#8217;inverse, ce qui est défini <emphasis>en dehors</emphasis> d&#8217;une fonction
est accessible <emphasis>à l&#8217;intérieur</emphasis> d&#8217;une fonction.</simpara>
<simpara>La portée de la variable <literal>mot</literal> est locale à la fonction <literal>secret</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/global.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const year = 2018;

function next(value) {
  return value + 1;
}

function nextYear() {
  return next(year);
}

console.log(year);
console.log(nextYear());
console.log(value);</programlisting>
</para>
</formalpara>
<simpara>Dans le précédent exemple, nous illustrons la portée globale de la variable
<literal>year</literal>.
Elle est définie un cran au-dessus des fonctions <literal>next</literal> et <literal>nextYear</literal>.
On peut y accéder, comme en atteste le code de la fonction <literal>nextYear</literal>.</simpara>
<simpara>À l&#8217;inverse, la variable <literal>value</literal> a une portée locale
—&#160;elle est passée en paramètre de la fonction <literal>next</literal>.
ECMAScript génèrera une erreur si on tente
d&#8217;y accéder en dehors de sa portée.</simpara>
<simpara><emphasis role="strong">La portée est délimitée par les fonctions</emphasis>.
En l&#8217;absence de fonction, la portée maximale est celle du module (script) dans lequel la variable est déclarée.</simpara>
<simpara>Il existe un deuxième type de portée&#160;: la <emphasis>portée lexicale</emphasis>.
L&#8217;exemple suivant servira à illustrer la nature de sa délimitation.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>scopes/lexical.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const book = {
  title: 'Node.js',
  published: true
};

if (book.published) {
  const price = 32;

  console.log(`Le livre ${book.title} coûte ${price}€.`);
}

console.log(`Le livre ${book.title} coûte ${price}€.`);</programlisting>
</para>
</formalpara>
<simpara>Le mot-clé <literal>const</literal> crée une variable certes,
mais une variable dont la portée est <emphasis>lexicale</emphasis>.
<emphasis role="strong">La portée lexicale est délimitée par le bloc d&#8217;instructions</emphasis>
dans lequel la variable est déclarée.</simpara>
<simpara>Ainsi la variable <literal>price</literal> n&#8217;existe que dans le cadre du bloc <literal>if</literal>.</simpara>
<simpara>L&#8217;utilisation de la portée lexicale sert déclarer
des variables sans <emphasis>polluer</emphasis> le reste du script,
pour que son existence soit oubliée aussitôt le bloc exécuté.</simpara>
</section>
</section>
<section xml:id="string">
<title>Manipuler du texte</title>
<simpara>Il est commun d&#8217;avoir à manipuler des chaînes de caractères.
Pour stocker des URL, des titres, des identifiants,
des tweets voire des textes longs.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// Utilisation de guillemets simples
console.log('L\'après-midi\nLe soir');  <co xml:id="CO2-1"/>

// Utilisation de guillemets doubles
console.log("L'après-midi\nLe soir");   <co xml:id="CO2-2"/>

// Utilisation de guillemets obliques
console.log(`L'après-midi
Le soir`);                              <co xml:id="CO2-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>Utilisation de guillemets simples (<literal>\n</literal> permet de revenir à la ligne).</para>
</callout>
<callout arearefs="CO2-2">
<para>Utilisation de guillemets doubles&#160;— évite d&#8217;échapper le guillemet simple.</para>
</callout>
<callout arearefs="CO2-3">
<para>Utilisation de guillemets obliques&#160;— autorise le multi-ligne.</para>
</callout>
</calloutlist>
<simpara>On peut utiliser n&#8217;importe quel caractère&#160;: lettres, chiffres,
caractères accentués, émojis et même des sinogrammes ou des kanjis.
Autrement dit, il n&#8217;y a pas de limite.
Les environnements d&#8217;exécution se représentent les caractères au format
UTF-16 (tables de stockage Unicode sur 16 bits de données).</simpara>
<simpara>Il est fréquent d&#8217;avoir à <emphasis>concaténer</emphasis> des chaînes de caractères,
ou à les composer à partir d&#8217;une autre variable.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/concat.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'pot';

console.log(`${mot} de colle`);
console.log(`${mot} de fleur`);</programlisting>
</para>
</formalpara>
<simpara>Toute chaîne de caractères offre un ensemble
d'<emphasis>attributs</emphasis> (<literal>.quelque-chose</literal>)
et de <emphasis>méthodes</emphasis> (<literal>.autre-chose()</literal>) pour en savoir plus
sur la chaine mais aussi pour la manipuler.</simpara>
<simpara>Par exemple, on peut connaître la longueur d&#8217;une chaîne via son attribut <literal>length</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/length.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('I ♥ JavaScript'.length); <co xml:id="CO3-1"/>
console.log(''.length);               <co xml:id="CO3-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO3-1">
<para>Affiche <literal>14</literal>.</para>
</callout>
<callout arearefs="CO3-2">
<para>Affiche <literal>0</literal>.</para>
</callout>
</calloutlist>
<simpara>On peut aussi accéder à un caractère spécifique en utilisant
la chaîne comme un tableau, ou en utilisant une méthode dédiée&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/char-at.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'Node.js';

console.log(mot[0]);        <co xml:id="CO4-1"/>
console.log(mot.charAt(1)); <co xml:id="CO4-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO4-1">
<para>Affiche <literal>N</literal>.</para>
</callout>
<callout arearefs="CO4-2">
<para>Affiche <literal>o</literal>.</para>
</callout>
</calloutlist>
<simpara>Deux autres fonctions transforment
un texte en lettres minuscules et majuscules&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/lower-upper-case.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = 'Node.js';

console.log(mot.toLocaleLowerCase()); <co xml:id="CO5-1"/>
console.log(mot.toLocaleUpperCase()); <co xml:id="CO5-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO5-1">
<para>Affiche <literal>node.js</literal>.</para>
</callout>
<callout arearefs="CO5-2">
<para>Affiche <literal>NODE.JS</literal>.</para>
</callout>
</calloutlist>
<simpara>D&#8217;autres fonctions nettoient ou complètent les espaces autour,
au début ou à la fin d&#8217;une chaîne de caractères&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/trim-pad.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mot = '  Node.js  ';

console.log(mot.trim());      <co xml:id="CO6-1"/>
console.log(mot.trimLeft());  <co xml:id="CO6-2"/>
console.log(mot.trimRight()); <co xml:id="CO6-3"/>

const swiftCode = 'BARCGB22';

console.log(swiftCode.padEnd(11, 'X')); <co xml:id="CO6-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO6-1">
<para>Affiche <literal>Node.js</literal>.</para>
</callout>
<callout arearefs="CO6-2">
<para>Affiche <literal>Node.js&#160;&#160;</literal>.</para>
</callout>
<callout arearefs="CO6-3">
<para>Affiche <literal>&#160;&#160;Node.js</literal>.</para>
</callout>
<callout arearefs="CO6-4">
<para>Affiche <literal>BARCGB22XXX</literal>.</para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, la méthode <literal>padEnd</literal> complète jusqu&#8217;à <literal>11</literal> caractères,
avec le caractère <literal>X</literal>.
La méthode <literal>padStart</literal> fait la même chose mais avec le début de la chaîne.</simpara>
<simpara><literal>indexOf</literal> retourne la position de la <emphasis>première occurrence</emphasis>
dans une chaîne.
Si la valeur n&#8217;est pas trouvée, elle renvoie la valeur <literal>-1</literal>.
À l&#8217;inverse, <literal>lastIndexOf</literal> retournera la dernière occurrence trouvée&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>string/index-of.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('I ♥ JavaScript'.indexOf('JavaScript')); <co xml:id="CO7-1"/>
console.log('I ♥ JavaScript'.indexOf('?'));          <co xml:id="CO7-2"/>
console.log('I ♥ JavaScript'.indexOf('a'));          <co xml:id="CO7-3"/>
console.log('I ♥ JavaScript'.lastIndexOf('a'));      <co xml:id="CO7-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO7-1">
<para>Retourne <literal>4</literal>.</para>
</callout>
<callout arearefs="CO7-2">
<para>Retourne <literal>-1</literal>&#160;— aucune occurrence n&#8217;a été trouvée.</para>
</callout>
<callout arearefs="CO7-3">
<para>Retourne <literal>5</literal>&#160;— première occurrence de la lettre <literal>a</literal>.</para>
</callout>
<callout arearefs="CO7-4">
<para>Retourne <literal>7</literal>&#160;— dernière occurrence de la lettre <literal>a</literal>.</para>
</callout>
</calloutlist>
<section xml:id="regexp">
<title>Expressions régulières (<emphasis>RegExp</emphasis>)</title>
<simpara>Si <literal>indexOf</literal> et <literal>lastIndexOf</literal> identifient des caractères exacts,
comment faire lorsque l&#8217;on souhaite chercher de manière approximative,
plusieurs fois et selon certaines conditions&#160;?</simpara>
<simpara>Les <emphasis>expressions régulières</emphasis> (<emphasis>RegExp</emphasis>, pour <emphasis>Regular Expressions</emphasis>)
entrent en jeu dans ces cas plus avancés.
Leur mécanisme décrit des <emphasis>motifs</emphasis> à identifier.
Plusieurs <emphasis>méthodes</emphasis> servent ensuite à tester, identifier et remplacer
ces motifs au sein d&#8217;une chaîne de caractères.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Anecdote</phrase> RegExp et Perl</title>
<simpara>La syntaxe d&#8217;expressions régulières est inspirée de celle du langage
de programmation <emphasis>Perl</emphasis> (<phrase role="URL"><link xl:href="https://www.perl.org">www.perl.org</link></phrase>) dans sa version 5.</simpara>
</tip>
<simpara>Une expression régulière est décrite le plus souvent en tant que motif
encadré par les caractères <literal>/</literal> (<emphasis>slash</emphasis>), suffixé d'<emphasis>options</emphasis> exprimées sous forme de lettres&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/[a-z]+.js/i</programlisting>
</para>
</formalpara>
<simpara>Cet exemple utilise l&#8217;option <literal>i</literal> mais il en existe plusieurs&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>insensible à la casse (<literal>i</literal>)</simpara>
</entry>
<entry>
<simpara>On souhaite identifier du contenu, peu importe s&#8217;il est en majuscules ou non&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara>multi-ligne (<literal>m</literal>)</simpara>
</entry>
<entry>
<simpara>La recherche s&#8217;effectue sur <emphasis>toutes</emphasis> les lignes&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara>global (<literal>g</literal>)</simpara>
</entry>
<entry>
<simpara>La recherche identifie <emphasis>tous</emphasis> les résultats&#160;— au lieu d&#8217;un seul et le premier&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara>unicode (<literal>u</literal>)</simpara>
</entry>
<entry>
<simpara>À utiliser si le motif de recherche exprime des séquences de caractères
Unicode sous la forme <literal>\u{&#8230;&#8203;.}</literal> (voir les <emphasis>classes de caractères</emphasis> ci-après).</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Illustrons leur utilisation en <emphasis>identifiant du texte</emphasis> répondant (<literal>match</literal>)
à une <emphasis>expression régulière</emphasis> (<literal>/&#8230;&#8203;/</literal>)&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/flags.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ Node.js &amp; Anode';

console.log(text.match(/node/i));   <co xml:id="CO8-1"/>
console.log(text.match(/ode/g));    <co xml:id="CO8-2"/>
console.log(text.match(/node/ig));  <co xml:id="CO8-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO8-1">
<para>identifie et affiche <literal>Node</literal>, l&#8217;occurrence contenue dans le mot <literal>Node.js</literal>.</para>
</callout>
<callout arearefs="CO8-2">
<para>affiche 2 fois <literal>ode</literal>&#160;— les occurrences contenues dans le mot <literal>Node.js</literal> et <literal>Anode</literal>.</para>
</callout>
<callout arearefs="CO8-3">
<para>affiche <literal>Node</literal> et <literal>node</literal> en combinant les deux options <literal>i</literal> et <literal>g</literal>&#160;— les occurrences contenues dans le mot <literal>Node.js</literal> et <literal>Anode</literal>.</para>
</callout>
</calloutlist>
<simpara>Des éléments de syntaxe complètent les options pour
<emphasis role="strong">identifier des motifs</emphasis> au sein de chaînes de caractères&#160;:</simpara>
<variablelist>
<varlistentry>
<term>ensemble de caractères (entre <literal>[</literal> et <literal>]</literal>)</term>
<listitem>
<simpara>Liste l&#8217;ensemble des caractères recherchés.
Le caractère <literal>-</literal> correspond à une plage de caractère.<?asciidoc-br?>
Exemple <literal>[a-d]</literal> correspond à <literal>[abcd]</literal>, donc <emphasis>a</emphasis> ou <emphasis>b</emphasis> ou <emphasis>c</emphasis> ou <emphasis>d</emphasis>)&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>nombre de caractères (entre <literal>{</literal> et <literal>}</literal>)</term>
<listitem>
<simpara>Répète un caractère ou ensemble de caractères,
<emphasis>exactement</emphasis> (<literal>{2}</literal>&#160;— exactement 2)
<emphasis>au moins</emphasis> (<literal>{2,}</literal>&#160;— au moins 2)
ou <emphasis>entre</emphasis> (<literal>{1,2}</literal>&#160;— entre 1 et 2 fois)&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>nombre de caractères (<literal>?</literal>, <literal>+</literal> et <literal>*</literal>)</term>
<listitem>
<simpara>Version raccourcie du nombre de caractères pour des besoins usuels&#160;:
<emphasis>0 ou 1 caractère</emphasis> avec <literal>?</literal>,
<emphasis>1 caractère et plus</emphasis> avec <literal>+</literal> et
<emphasis>0 caractère et plus</emphasis> avec <literal>*</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/syntax.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const paris15 = '75015 Paris';
const avray = '92410 Ville-d\'Avray';

// test du code postal uniquement
console.log(paris15.match(/[0-9]{2}/));          <co xml:id="CO9-1"/>
console.log(paris15.match(/[0-9]{2,5}/));        <co xml:id="CO9-2"/>

// test du code postal et de la ville
console.log(paris15.match(/[0-9]{5} [a-zA-Z]+/)); <co xml:id="CO9-3"/>
console.log(paris15.match(/[0-9]{5} [a-z]+/i));   <co xml:id="CO9-4"/>

// test sur un nom de ville composé
console.log(avray.match(/[0-9]{5} [a-z]+/i));     <co xml:id="CO9-5"/>
console.log(avray.match(/[0-9]{5} [a-z'-]+/i));   <co xml:id="CO9-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO9-1">
<para>Affiche <literal>["75"]</literal>&#160;— les 2 premiers caractères numériques de la chaîne.</para>
</callout>
<callout arearefs="CO9-2">
<para>Affiche <literal>["75015"]</literal>&#160;– les 5 premiers caractères numériques (satisfait la condition <literal>5</literal> de <emphasis>entre 2 et 5</emphasis> de <literal>{2,5}</literal>).</para>
</callout>
<callout arearefs="CO9-3">
<para>Affiche <literal>["75015 Paris"]</literal>.</para>
</callout>
<callout arearefs="CO9-4">
<para>Affiche <literal>["75015 Paris"]</literal>&#160;— l&#8217;option <literal>i</literal> nous permet de nous passer de l&#8217;ensemble <literal>A-Z</literal>.</para>
</callout>
<callout arearefs="CO9-5">
<para>Affiche <literal>["92410 Ville"]</literal>&#160;— capture les caractères jusqu&#8217;à ce que la condition ne soit plus remplie en rencontrant le <emphasis>trait d&#8217;union</emphasis> (<literal>-</literal>).</para>
</callout>
<callout arearefs="CO9-6">
<para>Affiche <literal>["92410 Ville-d&#8217;Avray"]</literal>.</para>
</callout>
</calloutlist>
<simpara>D&#8217;autres opérateurs <emphasis role="strong">délimitent notre recherche</emphasis>&#160;:</simpara>
<variablelist>
<varlistentry>
<term>début et fin de chaîne (<literal>^</literal> et <literal>$</literal>)</term>
<listitem>
<simpara>Symbolise le début (<literal>^</literal>) ou la fin (<literal>$</literal>) d&#8217;une chaîne de caractères.<?asciidoc-br?>
Quand l&#8217;option multi-ligne (<literal>m</literal>) est utilisée, les notions de <emphasis>début</emphasis>
et de <emphasis>fin</emphasis> s&#8217;appliquent au niveau de la <emphasis>ligne</emphasis>&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>limite de mot (<literal>\b</literal>)</term>
<listitem>
<simpara>Symbolise tout caractère ne faisant pas partie d&#8217;un mot, y compris le début ou la fin d&#8217;une chaîne&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ou (<literal>|</literal>)</term>
<listitem>
<simpara>Sépare deux choix l&#8217;un de l&#8217;autre.
Exemple&#160;: <literal>/noir|blanc/</literal>&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>groupe de capture (entre <literal>(</literal> et <literal>)</literal>)</term>
<listitem>
<simpara>Délimite un groupe de caractères.
Les groupes peuvent par la suite être <emphasis>identifiés</emphasis> et <emphasis>remplacés</emphasis>.<?asciidoc-br?>
On notera également que l&#8217;emploi des <emphasis>groupes</emphasis> change
la structure des résultats en un tableau de plusieurs éléments.
Ce tableau a la forme <literal>["chaine identifiée", "groupe 1", "groupe 2" &#8230;&#8203;]</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/limits.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const postcode = '75015 Paris';
const cedex = `CODEPOSTAL VILLE CEDEX
33900 Bordeaux Cedex 9
33074 BORDEAUX CEDEX
33700 MERIGNAC Cidex 40`;

const nogroup = /^[0-9]{5} [a-z0-9' -]+/i;
const group = /^([0-9]{5}) [a-z0-9' -]+/i;

// avec ou sans groupe de capture
console.log(postcode.match(nogroup));         <co xml:id="CO10-1"/>
console.log(postcode.match(group));           <co xml:id="CO10-2"/>

// mode multiligne avec ou sans option globale
console.log(cedex.match(/^([0-9]{5})/im));    <co xml:id="CO10-3"/>
console.log(cedex.match(/^([0-9]{5})/gim));   <co xml:id="CO10-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO10-1">
<para>Affiche <literal>["75015 Paris"]</literal>.</para>
</callout>
<callout arearefs="CO10-2">
<para>Affiche <literal>["75015 Paris", "75015"]</literal>&#160;— le premier élément correspond à la chaîne identifiée tandis que le second élément correspond au <emphasis>premier</emphasis> groupe de capture.</para>
</callout>
<callout arearefs="CO10-3">
<para>Affiche <literal>["33900", "33900"]</literal>&#160;– l&#8217;option multi-ligne itère de ligne en ligne jusqu&#8217;à trouver un motif.</para>
</callout>
<callout arearefs="CO10-4">
<para>Affiche <literal>["33900", "33074", "33700"]</literal>&#160;— l&#8217;option multi-ligne globale retourne tous les groupes de capture.</para>
</callout>
</calloutlist>
<simpara>On notera qu&#8217;il faut faire attention à ce que l&#8217;on regarde dans les résultats&#160;:
le format de résultat varie selon qu&#8217;on utilise ou non des groupes de capture,
selon qu&#8217;on utilise l&#8217;option globale ou multi-ligne.</simpara>
<simpara>Des classes de caractère servent de raccourcis pour désigner
plusieurs caractères à la fois&#160;:</simpara>
<variablelist>
<varlistentry>
<term>tout caractère (<literal>.</literal>)</term>
<listitem>
<simpara>Équivalent à <emphasis>tout caractère</emphasis> sauf le saut de ligne.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>caractère de mot (<literal>\w</literal>)</term>
<listitem>
<simpara>Équivalent à tout caractère pouvant composer un mot anglais&#160;:
les caractères accentués ne sont pas englobés par cette classe de caractères.
Identique à <literal>[A-Za-z0-9_]</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>caractère numérique (<literal>\d</literal>)</term>
<listitem>
<simpara>Équivalent à tout caractère numérique.
Identique à <literal>[0-9]</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>caractère d&#8217;espacement (<literal>\s</literal>)</term>
<listitem>
<simpara>Équivalent à tout caractère d&#8217;espacement
(espace, tabulation, retour chariot, etc.).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>caractère Unicode (<literal>\u{&#8230;&#8203;.}</literal>)</term>
<listitem>
<simpara>Doit être combiné avec l&#8217;option <literal>u</literal> (<literal>/&#8230;&#8203;/u</literal>).
Exemple&#160;: ♥︎ &#8594; <literal>\u{2665}</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Les alternatives de classes en majuscules sont des <emphasis>négations</emphasis>.
<literal>\W</literal> pour "tout sauf un caractère de mot", <literal>\S</literal> pour "tout sauf un caractère
d&#8217;espacement", etc.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/classes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ RegExp in 2018';
console.log(text.match(/\u{2665} (\w+)/u));   <co xml:id="CO11-1"/>

const [,iLove,year] = text.match(/^(I \u{2665}).+(\d{4})$/u);
console.log(`${iLove} ${year}`);              <co xml:id="CO11-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO11-1">
<para>Affiche <literal>["♥ RegExp", "RegExp"]</literal>&#160;— et s&#8217;arrête là car l&#8217;espace suivant n&#8217;est pas un caractère de mot.</para>
</callout>
<callout arearefs="CO11-2">
<para>Affiche <literal>"I ♥ 2018"</literal>&#160;— on a extrait le début de la phrase et l&#8217;année placée en fin de chaîne.</para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> expressions régulières</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur expressions régulières.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/RegExp</link>
</simpara>
</note>
<simpara>La méthode <literal>test</literal> est pratique si la seule chose qui vous intéresse
est de tester si une chaîne correspond à un motif&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/test.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const cedex = `CODEPOSTAL VILLE CEDEX
33900 Bordeaux Cedex 9
33074 BORDEAUX CEDEX
33700 MERIGNAC Cidex 40`;

const postcode_tester = /^\d{5}\s/m;

if (postcode_tester.test(cedex)) {
  console.log(cedex.match(/^(\d{5})\b/gm));
}</programlisting>
</para>
</formalpara>
<simpara>Enfin, la méthode <literal>replace</literal> est très utile pour transformer des chaînes de
caractères, surtout en combinaison avec les groupes de capture&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/replace.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ JavaScript';


console.log(text.replace('♥', 'love'));     <co xml:id="CO12-1"/>
console.log(text.replace(/\b\w+$/, 'PHP')); <co xml:id="CO12-2"/>

console.log(text.replace(/^.+(\u{2665}) (\w+)$/u, '$2 $1 me')); <co xml:id="CO12-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO12-1">
<para>Affiche <literal>"I love JavaScript"</literal>&#160;— si le premier argument de <literal>replace</literal> est une chaîne, elle est convertie automatiquement en expression régulière.</para>
</callout>
<callout arearefs="CO12-2">
<para>Affiche <literal>"I ♥ PHP"</literal>.</para>
</callout>
<callout arearefs="CO12-3">
<para>Affiche <literal>JavaScript ♥ me"</literal>&#160;— les symboles <literal>$&lt;numéro&gt;</literal> représentent les groupes de capture on peut les placer dans l&#8217;ordre de notre choix.</para>
</callout>
</calloutlist>
<simpara>D&#8217;ailleurs le second argument accepte une <link linkend="functions">fonction</link>
pour procéder à des remplacements dynamiques&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>regexp/replace-function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const text = 'I ♥ JavaScript';

const shout = text.replace(/\b(\w+)$/u, (pattern, lang) =&gt; {
  return lang.toLocaleUpperCase();
});

console.log(shout);   <co xml:id="CO13-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO13-1">
<para>Affiche <literal>"I ♥ JAVASCRIPT"</literal>&#160;— le dernier mot est transformé en majuscules.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="boolean">
<title>Manipuler des booléens</title>
<simpara>Un booléen est une donnée de type logique qui peut être <emphasis>vraie</emphasis> ou <emphasis>fausse</emphasis> en prenant respectivement la valeur <literal>true</literal> ou <literal>false</literal>.
C&#8217;est un type de choix pour effectuer des <emphasis>assertions</emphasis> et vérifier des <emphasis>conditions</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>boolean/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const counter = 3;

console.log(counter);               <co xml:id="CO14-1"/>
console.log(counter === 3);         <co xml:id="CO14-2"/>

const check = (counter === 3);

console.log(check);                 <co xml:id="CO14-3"/>
console.log(check === true);        <co xml:id="CO14-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO14-1">
<para>Affiche <literal>3</literal>.</para>
</callout>
<callout arearefs="CO14-2">
<para>Affiche <literal>true</literal>&#160;— la condition est vérifiée (3 équivaut strictement à 3).</para>
</callout>
<callout arearefs="CO14-3">
<para>Affiche <literal>true</literal>&#160;— c&#8217;est la valeur de la variable <literal>check</literal> suite à son assignation lors de la ligne précédente.</para>
</callout>
<callout arearefs="CO14-4">
<para>Affiche <literal>true</literal>&#160;— la variable <literal>check</literal> équivaut strictement à <literal>true</literal>.</para>
</callout>
</calloutlist>
<simpara>Une donnée d&#8217;un autre type peut être convertie en booléen.
La logique qui déterminera si la conversion retournera <literal>true</literal> ou <literal>false</literal>
est la suivante&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>true</literal></simpara>
</entry>
<entry>
<simpara>Toute valeur non-nulle.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>false</literal></simpara>
</entry>
<entry>
<simpara>Toute valeur nulle (<literal>null</literal>, <literal>0</literal>, <literal>NaN</literal>), vide (<literal>''</literal>)
ou indéfinie (<literal>undefined</literal>).</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>boolean/convert.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const counter = 3;

console.log(Boolean(''));       <co xml:id="CO15-1"/>
console.log(Boolean(counter));  <co xml:id="CO15-2"/>
console.log(Boolean([]));       <co xml:id="CO15-3"/>

if (counter) {
  console.log('if (counter) équivaut à if (Boolean(counter))');
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO15-1">
<para>Affiche <literal>false</literal>&#160;— il s&#8217;agit d&#8217;une <emphasis>chaîne vide</emphasis>.</para>
</callout>
<callout arearefs="CO15-2">
<para>Affiche <literal>true</literal>&#160;— il s&#8217;agit d&#8217;une valeur <emphasis>non-nulle</emphasis>.</para>
</callout>
<callout arearefs="CO15-3">
<para>Affiche <literal>true</literal>&#160;— le tableau est vide mais l&#8217;objet en lui-même <emphasis>vaut</emphasis> quelque chose&#160;: un tableau.</para>
</callout>
</calloutlist>
</section>
<section xml:id="number">
<title>Manipuler des nombres (<emphasis>Number</emphasis>, <emphasis>Math</emphasis>)</title>
<simpara>ECMAScript ne fait pas de distinction entre des nombres entiers et des
nombres contenant des décimales&#160;: ce sont des <emphasis>nombres</emphasis> un point c&#8217;est tout.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(40);
console.log(40.0);

console.log(40 === 40.0);   <co xml:id="CO16-1"/>
console.log(40 === '40.0'); <co xml:id="CO16-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO16-1">
<para>Affiche <literal>true</literal>&#160;— les deux valeurs sont strictement équivalentes.</para>
</callout>
<callout arearefs="CO16-2">
<para>Affiche <literal>false</literal>&#160;— un élément entre guillemets est une chaîne de caractère.</para>
</callout>
</calloutlist>
<simpara>Les nombres sont représentés par défaut en <emphasis>base 10</emphasis>.
La plage de nombre utilisable démarre à <emphasis>moins l&#8217;infini</emphasis> et va jusqu&#8217;à <emphasis>plus l&#8217;infini</emphasis>.
Des constantes définies par ECMAScript contiennent les valeurs minimales et
maximales que l&#8217;on peut représenter dans un programme&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/constants.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Number.POSITIVE_INFINITY);  <co xml:id="CO17-1"/>
console.log(Number.NEGATIVE_INFINITY);  <co xml:id="CO17-2"/>

console.log(Number.MAX_VALUE);          <co xml:id="CO17-3"/>
console.log(Number.MIN_VALUE);          <co xml:id="CO17-4"/>

console.log(Number.MAX_SAFE_INTEGER);   <co xml:id="CO17-5"/>
console.log(Number.MIN_SAFE_INTEGER);   <co xml:id="CO17-6"/></programlisting>
</para>
</formalpara>
<simpara>Il est aussi possible de compter dans d&#8217;autres bases comme la <emphasis>base 16</emphasis>,
c&#8217;est-à-dire une représentation hexadécimale de 0 à 16, exprimée de 0 à F
—&#160;A vaut 10 (car juste après 9), B vaut 11, etc.
Leur notation se fait en préfixant la valeur par <literal>0x</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/hexa.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(0x0000);
console.log(0x000A);
console.log(0x00A0);
console.log(0x0A00);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO17-1">
<para>Affiche <literal>0</literal>.</para>
</callout>
<callout arearefs="CO17-2">
<para>Affiche <literal>10</literal>&#160;— car <literal>A</literal> en hexadécimal vaut 10 en décimal.</para>
</callout>
<callout arearefs="CO17-3">
<para>Affiche <literal>160</literal>&#160;— pour <literal>10 x 16</literal> (une dizaine vaut 16).</para>
</callout>
<callout arearefs="CO17-4">
<para>Affiche <literal>2560</literal>&#160;— pour <literal>10 x 16 x 16</literal> (une centaine vaut 16x16).</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Rumeur</phrase> JavaScript est nul en virgule flottante !</title>
<simpara>ECMAScript est souvent décrié par son incapacité à gérer les opérations
mathématiques avec précision.</simpara>
<programlisting role="interactive interactive--javascript interactive--runtime--node-v10" language="javascript" linenumbering="unnumbered">0.2 + 0.6</programlisting>
<simpara>ECMAScript respecte le standard <emphasis>IEEE 754</emphasis> de gestion de nombres à virgule flottante sur 64 bits de données.
Qui d&#8217;autre l&#8217;utilise&#160;?
D&#8217;autres langages "inconnus" comme Python, PHP et Ruby, entre autres.</simpara>
<simpara>Pour en savoir plus&#160;: <phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/IEEE_754">fr.wikipedia.org/wiki/IEEE_754</link></phrase>.</simpara>
</note>
<section xml:id="opérations_mathématiques">
<title>Opérations mathématiques</title>
<simpara>Les nombres s&#8217;utilisent pour effectuer des opérations mathématiques.
Chaque opération est dotée d&#8217;un symbole&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>addition</simpara>
</entry>
<entry>
<simpara><literal>+</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>soustraction</simpara>
</entry>
<entry>
<simpara><literal>-</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>multiplication</simpara>
</entry>
<entry>
<simpara><literal>*</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>division</simpara>
</entry>
<entry>
<simpara><literal>/</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>modulo (reste de division)</simpara>
</entry>
<entry>
<simpara><literal>%</literal></simpara>
</entry>
</row>
<row>
<entry>
<simpara>exposant (puissance)</simpara>
</entry>
<entry>
<simpara><literal>**</literal></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/operations.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(2 + 4);     <co xml:id="CO18-1"/>
console.log(2 - 4);     <co xml:id="CO18-2"/>
console.log(2 * 4);     <co xml:id="CO18-3"/>
console.log(2 / 4);     <co xml:id="CO18-4"/>
console.log(2 % 4);     <co xml:id="CO18-5"/>
console.log(2 ** 4);    <co xml:id="CO18-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO18-1">
<para>Affiche <literal>6</literal>.</para>
</callout>
<callout arearefs="CO18-2">
<para>Affiche <literal>-2</literal>.</para>
</callout>
<callout arearefs="CO18-3">
<para>Affiche <literal>8</literal>.</para>
</callout>
<callout arearefs="CO18-4">
<para>Affiche <literal>0.5</literal>.</para>
</callout>
<callout arearefs="CO18-5">
<para>Affiche <literal>2</literal>.</para>
</callout>
<callout arearefs="CO18-6">
<para>Affiche <literal>16</literal>.</para>
</callout>
</calloutlist>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Opérations exotiques</title>
<simpara>Est-ce que vous avez déjà tenté d&#8217;additionner un nombre avec un tableau&#160;?
Pas forcément mais ECMAScript ne vous en empêchera pas.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/operations-types.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10 / '1');    <co xml:id="CO19-1"/>
console.log(10 / 0);      <co xml:id="CO19-2"/>
console.log(10 / []);
console.log(10 / {});     <co xml:id="CO19-3"/>
console.log(10 + null);
console.log(10 + true);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO19-1">
<para>La chaîne <literal>'1'</literal> sera convertie en nombre (voir section ci-après).</para>
</callout>
<callout arearefs="CO19-2">
<para>On nous a toujours interdit la division par zéro&#160;? En vrai on crée l'<emphasis>infini</emphasis>.</para>
</callout>
<callout arearefs="CO19-3">
<para>Seule cette opération retournera autre chose qu&#8217;un nombre.</para>
</callout>
</calloutlist>
<simpara>Rendez-vous à la <link linkend="nan">section suivante</link> pour se prémunir des nombres qui n&#8217;en sont pas.</simpara>
</caution>
</section>
<section xml:id="nan">
<title>Les nombres qui n&#8217;en sont pas (<emphasis>NaN</emphasis>)</title>
<simpara>Certaines opérations n&#8217;aboutiront pas et n&#8217;afficheront pas d&#8217;erreur pour autant.
Dans ce cas, le résultat de l&#8217;opération vaudra <literal>NaN</literal>.
Pour <emphasis>not a number</emphasis> (littéralement&#160;: "n&#8217;est pas un nombre").</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10 / 'fromage');</programlisting>
</para>
</formalpara>
<simpara>La fonction <literal>Number.isNaN</literal> nous aidera à vérifier si la valeur d&#8217;une variable
ou le résultat d&#8217;une opération est un <literal>NaN</literal> ou non.
Cette fonction retourne un <link linkend="boolean">booléen</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/is-nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Number.isNaN(NaN));             <co xml:id="CO20-1"/>
console.log(Number.isNaN(10 / 'fromage'));  <co xml:id="CO20-2"/>

console.log(Number.isNaN(10));              <co xml:id="CO20-3"/>
console.log(Number.isNaN('fromage'));       <co xml:id="CO20-4"/></programlisting>
</para>
</formalpara>
<warning>
<title><phrase role="RemarquePreTitre">Assertion</phrase> <literal>NaN</literal> n&#8217;est pas un nombre ?</title>
<simpara>Il faut se méfier de <literal>NaN</literal> comme de la peste car il est considéré
comme un nombre d&#8217;un point ECMAScript.
Toute opération mathématique impliquant <literal>NaN</literal> renverra un <literal>NaN</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/nan-number.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(typeof NaN);
console.log(typeof 10);</programlisting>
</para>
</formalpara>
<simpara>Il vaut mieux s&#8217;assurer qu&#8217;une variable est à la fois un nombre et
n&#8217;est pas équivalent à <literal>NaN</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/is-not-a-nan.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const result = 10 / 'fromage';

if (typeof result === 'number' &amp;&amp; !Number.isNaN(result)) {
  console.log('Ceci n\'est pas un NaN.');
}
else {
  console.log('L\'opération produit un nombre qui n\'en est pas un.');
}</programlisting>
</para>
</formalpara>
</warning>
</section>
<section xml:id="convertir_en_nombre">
<title>Convertir en nombre</title>
<simpara>Les lignes qui précédent l&#8217;évoquent un peu&#160;: on peut passer d&#8217;autres types
de données à des nombres.
Idéalement, on voudra transformer explicitement quelque chose en un nombre.</simpara>
<simpara>Pour cela nous avons deux fonctions à disposition&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>parseInt</literal></simpara>
</entry>
<entry>
<simpara>Essaie d&#8217;interpréter un nombre entier&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>parseFloat</literal></simpara>
</entry>
<entry>
<simpara>Essaie d&#8217;interpréter un nombre à virgule.
La fonction s&#8217;arrête dès qu&#8217;elle n&#8217;a plus affaire à un chiffre.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(parseInt('3.141592653589793'));   <co xml:id="CO20-5"/>
console.log(parseFloat('3.141592653589793')); <co xml:id="CO20-6"/>

console.log(parseInt('14.10-patch.2'));   <co xml:id="CO20-7"/>
console.log(parseFloat('14.10-patch.2')); <co xml:id="CO20-8"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO20-1 CO20-5">
<para>Affiche <literal>3</literal>.</para>
</callout>
<callout arearefs="CO20-2 CO20-6">
<para>Affiche <literal>3.141592653589793</literal>.</para>
</callout>
<callout arearefs="CO20-3 CO20-7">
<para>Affiche <literal>14</literal>&#160;— ça ne change rien pour <literal>parseInt</literal>.</para>
</callout>
<callout arearefs="CO20-4 CO20-8">
<para>Affiche <literal>14.1</literal>&#160;— la fonction s&#8217;arrête à la décimale précédant une lettre.</para>
</callout>
</calloutlist>
<simpara><literal>parseInt</literal> a cette particularité que l&#8217;on peut choisir la base
de la conversion avec le second argument de la fonction&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/parse-int.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(parseInt(10, 16));    <co xml:id="CO21-1"/>
console.log(parseInt('A', 16));   <co xml:id="CO21-2"/>
console.log(parseInt('A00', 16)); <co xml:id="CO21-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO21-1">
<para>Affiche <literal>16</literal>.</para>
</callout>
<callout arearefs="CO21-2">
<para>Affiche <literal>10</literal>&#160;— <literal>A</literal> étant juste après <literal>10</literal> en hexadécimal.</para>
</callout>
<callout arearefs="CO21-3">
<para>Affiche <literal>2560</literal>&#160;— aurait pu s&#8217;écrire <literal>0xF00</literal>&#160;— cf. le <link linkend="number">début de cette même section</link>, à propos des bases.</para>
</callout>
</calloutlist>
</section>
<section xml:id="formater_et_arrondir_des_nombres">
<title>Formater et arrondir des nombres</title>
<simpara>Si l&#8217;envie vous prenait de vouloir arrondir des nombres, il existe
quelques fonctions pour nous aider.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>Math.round</literal></simpara>
</entry>
<entry>
<simpara>Arrondit à l&#8217;entier le plus proche&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Math.ceil</literal></simpara>
</entry>
<entry>
<simpara>Arrondit à l&#8217;entier supérieur du nombre donné&#160;;</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Math.floor</literal></simpara>
</entry>
<entry>
<simpara>Arrondit à l&#8217;entier inférieur du nombre donné.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Math.ceil, Math.floor</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/round.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Math.round(3.1));    <co xml:id="CO22-1"/>
console.log(Math.round(3.8));    <co xml:id="CO22-2"/>
console.log(Math.round(3.5));    <co xml:id="CO22-3"/>

console.log(Math.ceil(3.14));    <co xml:id="CO22-4"/>
console.log(Math.floor(3.99));   <co xml:id="CO22-5"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO22-1">
<para>Affiche <literal>3</literal>&#160;— l&#8217;entier le plus proche est 3.</para>
</callout>
<callout arearefs="CO22-2">
<para>Affiche <literal>4</literal>&#160;— l&#8217;entier le plus proche est 4.</para>
</callout>
<callout arearefs="CO22-3">
<para>Affiche <literal>4</literal>&#160;— idem.</para>
</callout>
<callout arearefs="CO22-4">
<para>Affiche <literal>4</literal>.</para>
</callout>
<callout arearefs="CO22-5">
<para>Affiche <literal>3</literal>.</para>
</callout>
</calloutlist>
<simpara>Enfin, on peut préserver le formatage du nombre de décimales
après la virgule en transformant le nombre <emphasis>en chaîne de caractères</emphasis>
grâce à la méthode <literal>toFixed</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>number/to-fixed.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(10.0101.toFixed(2));     <co xml:id="CO23-1"/>
console.log(10.0101.toFixed(0));     <co xml:id="CO23-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO23-1">
<para>Affiche <literal>'10.01'</literal>.</para>
</callout>
<callout arearefs="CO23-2">
<para>Affiche <literal>'10'</literal>.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="functions">
<title>Manipuler des fonctions</title>
<simpara>Une fonction est un mécanisme pour <emphasis role="strong">rendre du code réutilisable</emphasis>.
Une fonction <emphasis>retourne</emphasis> un résultat.
À l&#8217;aide de <emphasis>paramètres</emphasis>, on peut faire varier ce résultat.</simpara>
<simpara>Cela se passe en deux temps&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la <emphasis>création</emphasis> de la fonction&#160;;</simpara>
</listitem>
<listitem>
<simpara>l'<emphasis>exécution</emphasis> de la fonction.</simpara>
</listitem>
</orderedlist>
<simpara>ECMAScript fournit un ensemble de fonctions de base
(<literal>console.log</literal>, <literal>setTimeout</literal> etc).
Node ajoute les siennes (comme <literal>require</literal>).
Nous avons la liberté d&#8217;en créer nous-même, spécifiques à nos besoins.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const hello = (mot) =&gt; `Hello ${mot}`;  <co xml:id="CO24-1"/>

console.log(hello);                     <co xml:id="CO24-2"/>
console.log(hello('World'));            <co xml:id="CO24-3"/>
console.log(hello('toi'));

const random = () =&gt; {
  const limit = 100;

  return Math.floor(Math.random() * limit);
};

console.log(random());                  <co xml:id="CO24-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO24-1">
<para>On <emphasis>crée</emphasis> la fonction <literal>hello</literal>.</para>
</callout>
<callout arearefs="CO24-2">
<para>Affiche <literal>[Function: hello]</literal>&#160;— il s&#8217;agit de la définition de la fonction.</para>
</callout>
<callout arearefs="CO24-3">
<para>Affiche <literal>"Hello World"</literal>&#160;— il s&#8217;agit de l'<emphasis>exécution</emphasis> de la fonction, qui <emphasis>retourne</emphasis> un résultat.</para>
</callout>
<callout arearefs="CO24-4">
<para>Affiche un nombre aléatoire entre 0 et 100&#160;— cette fonction est invoquée sans paramètre.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent nous indique qu&#8217;une fonction se découpe en 3 parties&#160;:</simpara>
<variablelist>
<varlistentry>
<term>les <emphasis role="strong">arguments</emphasis></term>
<listitem>
<simpara>C&#8217;est la partie à gauche de la flèche (<literal>&#8658;</literal>).
Les arguments sont séparés par des virgules (exemple&#160;: <literal>(argument1, argument2, etc.)</literal>)&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>le <emphasis role="strong">corps</emphasis></term>
<listitem>
<simpara>C&#8217;est la partie entre accolades (<literal>{ &#8230;&#8203; }</literal>).
Quand la fonction est sur une ligne,
le résultat de l&#8217;opération est <emphasis>implicitement retourné</emphasis>.
On peut dans ce cas se passer du mot-clé <literal>return</literal>&#160;;</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>la <emphasis role="strong">valeur de retour</emphasis></term>
<listitem>
<simpara>C&#8217;est la valeur renvoyée en dehors de la fonction.
La valeur de retour est définie à l&#8217;aide du mot-clé <literal>return</literal>.
La valeur <literal>undefined</literal> est retournée de manière implicite
lorsque le mot-clé <literal>return</literal> est absent.</simpara>
</listitem>
</varlistentry>
</variablelist>
<tip>
<title><phrase role="RemarquePreTitre">Rappelle-toi</phrase> Variables et portée</title>
<simpara>Le corps d&#8217;une fonction constitue une <emphasis>portée</emphasis>&#160;: toute variable définie
dans le corps d&#8217;une fonction est invisible en dehors.</simpara>
<simpara>On en parle plus en détails dans la <link linkend="scope">section portée</link>
en début de section.</simpara>
</tip>
<section xml:id="anonymous-function">
<title>Les fonctions anonymes</title>
<simpara>Les fonctions anonymes sont employées en <emphasis role="strong">arguments d&#8217;autres fonctions</emphasis>.
On les dit <emphasis>anonymes</emphasis>, car elles ne sont pas consignées dans des <emphasis>variables</emphasis>.
Il est fréquent de les utiliser pour <emphasis>itérer</emphasis> sur des tableaux,
lors d&#8217;événements ou dans des <link linkend="promise">promesses</link>.</simpara>
<simpara>C&#8217;est une manière élégante d&#8217;encapsuler du code à exécuter plus tard.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/anonymous.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">setTimeout(() =&gt; console.log('Une seconde plus tard'), 1000);

setTimeout(() =&gt; {
  console.log('Deux secondes plus tard');     <co xml:id="CO25-1"/>
}, 2000);

process.on('exit', () =&gt; {
  console.log('Le processus se termine');     <co xml:id="CO25-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO25-1">
<para>Affiche <literal>"Deux secondes plus tard"</literal> deux secondes après le début du script.</para>
</callout>
<callout arearefs="CO25-2">
<para>Affiche <literal>"Le processus se termine"</literal> quand le processus se termine, une fois que toutes les actions en attente ont été exécutées.</para>
</callout>
</calloutlist>
</section>
<section xml:id="callback">
<title>Les fonctions de <emphasis>callback</emphasis></title>
<simpara>Quand une fonction est passée en argument d&#8217;une autre fonction,
on appelle cela un <emphasis>callback</emphasis>.
On l&#8217;appelle plus tard (<emphasis>to call back</emphasis>) que le moment où elle est définie.
La fonction peut recevoir des paramètres qui aident à reconstruire un contexte
<emphasis>au moment</emphasis> de son exécution.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/callback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const printYear = (date) =&gt; {             <co xml:id="CO26-1"/>
  console.log(date.getUTCFullYear());     <co xml:id="CO26-2"/>
}

setTimeout(printYear, 1000, new Date());  <co xml:id="CO26-3"/>
// équivalent à
// setTimeout(date =&gt; printYear(date), 1000, new Date());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO26-3">
<para>Le troisième argument (et les suivants) de <literal>setTimeout</literal> sont transmis en paramètre de la fonction de <emphasis>callback</emphasis>.</para>
</callout>
<callout arearefs="CO26-1">
<para>Cette fonction sera invoquée une seconde après le début du script, et recevra la date du moment en paramètre.</para>
</callout>
<callout arearefs="CO26-2">
<para>Affiche l&#8217;année de la date passée en argument&#160;— l&#8217;année en cours dans cet exemple.</para>
</callout>
</calloutlist>
</section>
<section xml:id="rest-parameters">
<title>Paramètres du reste (<emphasis>rest parameters</emphasis>)</title>
<simpara>Les <emphasis>paramètres du reste</emphasis> collecte un nombre indéfini de paramètres.
Les paramètres sont <emphasis role="strong">regroupés dans un même <link linkend="array">tableau</link></emphasis> (voir ci-après).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>functions/rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const combien_de = (nom, ...params) =&gt; {
  console.log(`On a compté ${params.length} ${nom}.`);
};

combien_de('patates', 'un', 'deux', 'trois'); <co xml:id="CO27-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO27-1">
<para>Affiche <literal>"On a compté 3 patates."</literal>.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="array">
<title>Manipuler des tableaux (<emphasis>Array</emphasis>)</title>
<simpara>Les tableaux (ou listes indexées) servent à <emphasis role="strong">lister des éléments</emphasis>,
de tout type et dans l&#8217;ordre de notre choix.
Chaque élément de tableau se voit attribué un numéro (<emphasis>index</emphasis>).
On peut retrouver l&#8217;élément par son numéro, en itérant à l&#8217;aide de boucles
ou en ayant recours à d&#8217;autres méthodes d&#8217;identification.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];

console.log(weekdays);          <co xml:id="CO28-1"/>
console.log(weekdays.length);   <co xml:id="CO28-2"/>
console.log(weekdays[1]);       <co xml:id="CO28-3"/>
console.log(weekdays[0]);
console.log(weekdays[5]);       <co xml:id="CO28-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO28-1">
<para>Affiche <literal>["lundi", "mardi", "mercredi", "jeudi", "vendredi"]</literal>.</para>
</callout>
<callout arearefs="CO28-2">
<para>Affiche <literal>5</literal>&#160;— soit la longueur du tableau.</para>
</callout>
<callout arearefs="CO28-3">
<para>Affiche <literal>"mardi"</literal>&#160;— c&#8217;est l&#8217;élément défini à l&#8217;index <literal>1</literal>.</para>
</callout>
<callout arearefs="CO28-4">
<para>Affiche <literal>undefined</literal>&#160;— il n&#8217;y a aucun élément défini à l&#8217;index <literal>5</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre plusieurs caractéristiques des collections&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la numérotation débute à l&#8217;index <literal>0</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la propriété <literal>length</literal> contient la longueur du tableau&#160;;</simpara>
</listitem>
<listitem>
<simpara>la valeur <literal>undefined</literal> est retournée quand on tente d&#8217;accéder à un index
qui n&#8217;existe pas.</simpara>
</listitem>
</orderedlist>
<section xml:id="créer_des_tableaux_à_partir_d_autres_valeurs">
<title>Créer des tableaux à partir d&#8217;autres valeurs</title>
<simpara>La fonction <literal>Array.from</literal> est une manière de créer
un tableau à partir de quelque chose qui <emphasis>ressemble à un tableau</emphasis>.</simpara>
<formalpara xml:id="array.from" role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/from.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(Array.from('fromage'));                                   <co xml:id="CO29-1"/>

// utilisation du second argument
console.log(Array.from('fromage', (letter) =&gt; letter.toUpperCase())); <co xml:id="CO29-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO29-1">
<para>Affiche <literal>["f", "r", "o", "m", "a", "g", "e"]</literal>&#160;— chaque lettre de la chaîne.</para>
</callout>
<callout arearefs="CO29-2">
<para>Affiche <literal>["F", "R", "O", "M", "A", "G", "E"]</literal>&#160;— chaque lettre de la chaîne a été passée en majuscules.</para>
</callout>
</calloutlist>
<simpara>Le deuxième argument de <literal>Array.from</literal> est facultatif.
C&#8217;est une <link linkend="anonymous-function">fonction anonyme</link> qui s&#8217;utilise comme les <link linkend="array.forEach">méthodes d&#8217;itération</link> <literal>Array.forEach</literal> et <literal>Array.map</literal>.</simpara>
<simpara>Cette méthode est des plus utiles pour itérer sur des listes d&#8217;éléments DOM
obtenues avec les fonctions <literal>document.querySelectorAll</literal>
et <literal>document.getElementsByTagName</literal>, entre autres.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const links = document.querySelectorAll('a');

console.log(Array.from(links).map(a =&gt; a.textContent));
// parce qu'on ne peut pas faire
// links.map(a =&gt; a.textContent);</programlisting>
</section>
<section xml:id="array.concat">
<title>Combiner des tableaux</title>
<simpara>Il est relativement aisé de composer des tableaux en fonction d&#8217;autres tableaux.
Une première manière d&#8217;y parvenir est d&#8217;utiliser la méthode <literal>concat</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/concat.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mousquetaires = ['Atos', 'Portos', 'Aramis'];
const extras = ['d\'Artagnan', 'Albert'];

console.log(mousquetaires.concat(extras));      <co xml:id="CO30-1"/>

// autre manière d'obtenir la liste des 5 mousquetaires
console.log([].concat(mousquetaires, extras));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO30-1">
<para>Affiche <literal>["Atos", "Portos", "Aramis", "d&#8217;Artagnan", "Albert"]</literal>.</para>
</callout>
</calloutlist>
<simpara>Cette méthode <emphasis>crée un nouveau tableau</emphasis> à partir d&#8217;une liste de tableaux
passés en paramètre.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Opérateur <literal>&#8230;&#8203;</literal> (<emphasis>spread</emphasis>)</title>
<simpara>Une autre manière de faire est d&#8217;utiliser l&#8217;opérateur <literal>&#8230;&#8203;</literal>
(aussi appelé <link linkend="spread">spread</link>) pour éclater plusieurs tableaux et
les rassembler dans un autre&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/spread.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const mousquetaires = ['Atos', 'Portos', 'Aramis'];
const extras = ['d\'Artagnan', 'Albert'];

console.log([...mousquetaires, ...extras]);   <co xml:id="CO31-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO31-1">
<para>Affiche <literal>["Atos", "Portos", "Aramis", "d&#8217;Artagnan", "Albert"]</literal>.</para>
</callout>
</calloutlist>
</note>
<simpara>À l&#8217;inverse, la méthode <literal>join</literal> <emphasis>concatène</emphasis> tous les éléments
dans une <link linkend="string">chaîne de caractères</link> avec le séparateur de notre choix.
Ce séparateur est optionnel.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/join.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const headers = ['ID', 'NOM', 'PRENOM'];

console.log(headers.join());    <co xml:id="CO32-1"/>
console.log(headers.join(';')); <co xml:id="CO32-2"/>
console.log(headers.join(''));  <co xml:id="CO32-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO32-1">
<para>Affiche <literal>"ID,NOM,PRENOM"</literal>&#160;— le séparateur par défaut est une virgule (<literal>,</literal>).</para>
</callout>
<callout arearefs="CO32-2">
<para>Affiche <literal>"ID;NOM;PRENOM"</literal>&#160;— on a choisi le séparateur <literal>;</literal>.</para>
</callout>
<callout arearefs="CO32-3">
<para>Affiche <literal>"IDNOMPRENOM"</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.forEach">
<title>Itérer sur les valeurs avec des boucles</title>
<simpara>Les boucles sont une manière de <emphasis role="strong">parcourir plusieurs valeurs</emphasis>.
Elles aident la mise en place d&#8217;automatismes pour éviter de répéter du code.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/loop.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];

for (const day of weekdays) {
  console.log(day);                           <co xml:id="CO33-1"/>
}

// on obtient le même résultat avec la méthode `forEach`
weekdays.forEach((day) =&gt; console.log(day));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO33-1">
<para>Affiche successivement chaque valeur du tableau&#160;— <literal>"lundi"</literal>, <literal>"mardi"</literal>, <literal>"mercredi"</literal>, <literal>"jeudi"</literal>, <literal>"vendredi"</literal>.</para>
</callout>
</calloutlist>
<simpara>Prenons le temps de revenir sur cet exemple.
On y découvre plusieurs manières de faire des boucles sur un tableau&#160;:</simpara>
<variablelist>
<varlistentry>
<term><literal>for&#8230;&#8203;of</literal></term>
<listitem>
<simpara>On assigne une variable pour chaque élément (opérateur <literal>of</literal>) du tableau.
Les expressions situées entre accolade (<literal>{&#8230;&#8203;}</literal>) sont exécutées pour
chaque élément du tableau.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>forEach(element &#8658; expression)</literal></term>
<listitem>
<simpara>La méthode <literal>forEach</literal> applique une <link linkend="anonymous-function">fonction anonyme</link>
pour chaque élément du tableau.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Il y a en réalité deux manières d&#8217;itérer avec la boucle <literal>for</literal>&#160;:
sur les <emphasis>index</emphasis> (avec l&#8217;opérateur <literal>in</literal>)
et sur les <emphasis>valeurs</emphasis> (avec l&#8217;opérateur <literal>of</literal>).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/for-of-in.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekend = ['samedi', 'dimanche'];

for (const index in weekend) {
  console.log(index);             <co xml:id="CO34-1"/>
  console.log(weekend[index]);    <co xml:id="CO34-2"/>
}

for (const day of weekend) {
  console.log(day);               <co xml:id="CO34-3"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO34-1">
<para>Affiche successivement <literal>0</literal> puis <literal>1</literal>.</para>
</callout>
<callout arearefs="CO34-2">
<para>Affiche successivement <literal>"samedi"</literal> puis <literal>"dimanche"</literal>&#160;— l&#8217;index permet de retrouver la valeur du tableau.</para>
</callout>
<callout arearefs="CO34-3">
<para>Affiche successivement <literal>"samedi"</literal> puis <literal>"dimanche"</literal>.</para>
</callout>
</calloutlist>
<simpara>La méthode <literal>forEach</literal> propage en réalité 3 arguments à notre fonction anonyme&#160;:
l'<emphasis role="strong">élément</emphasis> en cours de l&#8217;itération,
l'<emphasis role="strong">index</emphasis> de l&#8217;élément,
le <emphasis role="strong">tableau</emphasis> d&#8217;origine.</simpara>
<simpara>Pourquoi passer le tableau d&#8217;origine alors qu&#8217;on itère sur ce même tableau&#160;?
Pour donner du contexte au cas où on opère
avec une <link linkend="function">fonction nommée</link>.
Nous verrons un usage concret de ce troisième argument
dans la section <link linkend="array.map">transformer les valeurs</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/foreach-function.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const undeux = ['un', 'deux'];

const printIndex = (element, index, array) =&gt; {
  console.log(`${element} se trouve à l'index ${index}`);  <co xml:id="CO35-1"/>
}

undeux.forEach(printIndex);                                <co xml:id="CO35-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO35-2">
<para>Applique la fonction <literal>printIndex</literal> pour chaque élément du tableau <literal>undeux</literal>.</para>
</callout>
<callout arearefs="CO35-1">
<para>Affiche successivement <literal>"un se trouve à l&#8217;index 0"</literal> puis <literal>"deux se trouve à l&#8217;index 1"</literal>.</para>
</callout>
</calloutlist>
<simpara>Outre l&#8217;inspection et l&#8217;affichage des valeurs, les boucles offrent la liberté
de <link linkend="array.sort">faire des tris</link>, de <link linkend="array.map">transformer les valeurs</link>, de <link linkend="array.filter">filtrer selon des conditions</link>
mais aussi de <link linkend="array.reduce">créer de nouvelles structures de données</link>.</simpara>
<simpara>Ces méthodes sont décrites dans les sections suivantes.</simpara>
</section>
<section xml:id="array.sort">
<title>Trier les valeurs</title>
<simpara>La méthode <literal>sort</literal> change l&#8217;ordre des éléments d&#8217;un tableau.
Cette méthode utilise une <link linkend="anonymous-function">fonction anonyme</link>.
La fonction anonyme compare deux éléments entre eux.
Elle retourne un nombre positif, négatif ou égal à zéro selon la
logique que l&#8217;on souhaite donner au tri&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>quand la comparaison est <emphasis>positive</emphasis>&#160;:
<literal>sort</literal> placera le premier élément <emphasis>avant</emphasis> le second&#160;;</simpara>
</listitem>
<listitem>
<simpara>quand la comparaison est <emphasis>négative</emphasis>&#160;:
<literal>sort</literal> placera le premier élément <emphasis>après</emphasis> le second&#160;;</simpara>
</listitem>
<listitem>
<simpara>quand la comparaison est nulle ou non spécifiée&#160;:
l&#8217;ordre des éléments restera inchangé.</simpara>
</listitem>
</itemizedlist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/sort.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const sortAsc = (a, b) =&gt; a - b;
const sortDesc = (a, b) =&gt; b - a;

console.log([1, 3, 2].sort(sortAsc));                   <co xml:id="CO36-1"/>

const undeux = [{label: 'deux', order: 2}, {label: 'un', order: 1}];

console.log(undeux.sort((a, b) =&gt; a.order - b.order));  <co xml:id="CO36-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO36-1">
<para>Affiche <literal>[1, 2, 3]</literal>.</para>
</callout>
<callout arearefs="CO36-2">
<para>Affiche <literal>[ { label: "un", order: 1 }, { label: "deux", order: 2 } ]</literal>&#160;— le tableau a été trié sur la valeur de <literal>order</literal>.</para>
</callout>
</calloutlist>
<simpara>Les <link linkend="string">chaînes de caractères</link> peuvent être comparées
avec la méthode <literal>localeCompare</literal>.
Cette méthode retourne un nombre après une comparaison caractère par caractère
entre deux chaînes&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/sort-strings.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const sortAlpha = (a, b) =&gt; a.localeCompare(b);

console.log(['A', 'b', 'c', 'a'].sort(sortAlpha));                  <co xml:id="CO37-1"/>

const undeux = [{label: 'un', order: 1}, {label: 'deux', order: 2}];

console.log(undeux.sort((a, b) =&gt; a.label.localeCompare(b.label))); <co xml:id="CO37-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO37-1">
<para>Affiche <literal>["a", "A", "b", "c"]</literal>&#160;— les majuscules influencent le tri.</para>
</callout>
<callout arearefs="CO37-2">
<para>Affiche <literal>[ { label: "deux", order: 2 }, { label: "un", order: 1 } ]</literal>&#160;— le tableau a été trié sur la valeur de <literal>label</literal> cette fois-ci.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> <literal>Array.reverse</literal></title>
<simpara>La méthode <literal>reverse</literal> transforme le tableau d&#8217;origine
en inversant l&#8217;ordre de ses éléments.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/reverse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekend = ['samedi', 'dimanche'];

weekend.reverse();

console.log(weekend);     <co xml:id="CO38-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO38-1">
<para>Affiche <literal>["dimanche", "samedi"]</literal>.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="array.map">
<title>Transformer les valeurs</title>
<simpara>La méthode <literal>map</literal> fonctionne quasiment comme la méthode <literal>forEach</literal>.
À ceci près qu&#8217;elle retourne un nouveau tableau,
constitué des valeurs retournées par la fonction appliquée sur chaque élément.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/map.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const newArray = ['a', ' b', 'c '].map(value =&gt; {
  return value.trim().toUpperCase();
});

console.log(newArray); <co xml:id="CO39-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO39-1">
<para>Retourne <literal>['A', 'B', 'C']</literal>&#160;— on a passé tous les éléments en lettres majuscules.</para>
</callout>
</calloutlist>
<simpara>Le troisième argument de la méthode <literal>map</literal> prend ici tout son sens.
Par exemple si l&#8217;on souhaite dédoublonner un tableau&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/map-dedupe.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const soundcheck = ['un', 'deux', 'un', 'deux'];

const dedupe = (element, index, array) =&gt; {
  if (array.slice(index+1).includes(element)) {
    return null;
  }

  return element;
}

console.log(soundcheck.map(dedupe));          <co xml:id="CO40-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO40-1">
<para>Affiche <literal>[null, null, "un", "deux"]</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent vérifie à chaque itération si la valeur de l&#8217;élément
est contenue dans la <emphasis>suite du tableau</emphasis>.
<literal>array.slice(index+1)</literal> crée un nouveau tableau contenant tous les éléments
situés <emphasis>après</emphasis> l&#8217;élément courant (<literal>index+1</literal>).</simpara>
<simpara>La méthode <literal>reduce</literal> est une autre méthode de transformation.
Elle est différente, car elle passe le résultat de la précédente itération
à la suivante.
C&#8217;est comme si elle <emphasis>accumulait</emphasis> les résultats.
<literal>reduce</literal> retourne une valeur finale qui peut être autre chose qu&#8217;un tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/reduce.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const stats = [2, 4, 6, 10];

const sum = (previous, element) =&gt; previous + element;    <co xml:id="CO41-1"/>

console.log(stats.reduce(sum, 0));    <co xml:id="CO41-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO41-2">
<para>Effectue une <emphasis>réduction</emphasis> à l&#8217;aide de la fonction <literal>sum</literal> et d&#8217;une valeur par défaut de <literal>0</literal>&#160;— affiche <literal>22</literal> à l&#8217;issue des itérations .</para>
</callout>
<callout arearefs="CO41-1">
<para>La valeur de l'<emphasis role="strong">élément</emphasis> est le <emphasis>second paramètre</emphasis> le premier paramètre correspond au résultat de l&#8217;itération précédente ou à la valeur initiale, passée en argument à <literal>reduce</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.filter">
<title>Filtrer les valeurs</title>
<simpara>La méthode <literal>filter</literal> retourne un nouveau tableau filtré à l&#8217;aide
d&#8217;une <link linkend="anonymous-function">fonction anonyme</link>.
Seuls les éléments qui satisfont la condition établie par la fonction
se retrouvent dans le nouveau tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/filter.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [null, 'un', 'deux', 3];

console.log(values.filter(value =&gt; Number.isFinite(value)));  <co xml:id="CO42-1"/>
console.log(values.filter(value =&gt; value));                   <co xml:id="CO42-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO42-1">
<para>Retourne <literal>[3]</literal>&#160;— c&#8217;est la seule valeur qui est un nombre.</para>
</callout>
<callout arearefs="CO42-2">
<para>Retourne <literal>["un", "deux", 3]</literal>&#160;— ce sont les valeurs non-nulles.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array.find">
<title>Identifier une ou plusieurs valeurs</title>
<simpara>Les méthodes <literal>indexOf</literal>, <literal>lastIndexOf</literal> et <literal>includes</literal> identifient une
<emphasis>valeur exacte</emphasis> au sein d&#8217;un tableau.</simpara>
<simpara><literal>indexOf</literal> et <literal>lastIndexOf</literal> retournent l'<emphasis>index</emphasis> de la valeur recherchée.
Si aucun élément n&#8217;a été retrouvé, elles retourneront la valeur <literal>-1</literal>.<?asciidoc-br?>
<literal>includes</literal> retourne un <link linkend="boolean">booléen</link> indiquant si la recherche
est fructueuse (<literal>true</literal>) ou non (<literal>false</literal>).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/index-of-includes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const soundcheck = ['un', 'deux', 'un', 'deux'];

console.log(soundcheck.indexOf('un'));        <co xml:id="CO43-1"/>
console.log(soundcheck.indexOf('deux'));      <co xml:id="CO43-2"/>
console.log(soundcheck.indexOf('trois'));     <co xml:id="CO43-3"/>

console.log(soundcheck.lastIndexOf('deux'));  <co xml:id="CO43-4"/>

console.log(soundcheck.includes('deux'));     <co xml:id="CO43-5"/>
console.log(soundcheck.includes('trois'));    <co xml:id="CO43-6"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO43-1">
<para>Affiche <literal>0</literal>&#160;— le premier <literal>"un"</literal> est l&#8217;élément <literal>0</literal> du tableau.</para>
</callout>
<callout arearefs="CO43-2">
<para>Affiche <literal>1</literal>&#160;— le premier <literal>"deux"</literal> est l&#8217;élément <literal>1</literal> du tableau.</para>
</callout>
<callout arearefs="CO43-3">
<para>Affiche <literal>-1</literal>&#160;— cet élément est absent du tableau.</para>
</callout>
<callout arearefs="CO43-4">
<para>Affiche <literal>3</literal>&#160;— le dernier <literal>"deux"</literal> est l&#8217;élément <literal>3</literal> du tableau.</para>
</callout>
<callout arearefs="CO43-5">
<para>Affiche <literal>true</literal>&#160;— l&#8217;élément <literal>"un"</literal> existe dans le tableau.</para>
</callout>
<callout arearefs="CO43-6">
<para>Affiche <literal>false</literal>&#160;— l&#8217;élément <literal>"trois"</literal> n&#8217;existe pas dans le tableau.</para>
</callout>
</calloutlist>
<simpara>Il existe ensuite d&#8217;autres méthodes comme <literal>find</literal>, <literal>some</literal> et <literal>every</literal>.
Elles <emphasis role="strong">identifient des éléments à partir d&#8217;une fonction</emphasis>.
Les conditions de recherche sont plus complètes, car on n&#8217;est pas obligé
de connaître la valeur exacte recherchée.</simpara>
<simpara>La méthode <literal>find</literal> retourne l'<emphasis>élément</emphasis> qui satisfait la condition en premier.
La méthode <literal>findIndex</literal> retourne l'<emphasis>index de l&#8217;élément</emphasis>
qui satisfait la condition en premier.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/find.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [null, 2, 10, 100];

const biggerThan50 = (value) =&gt; value &gt; 50;   <co xml:id="CO44-1"/>

console.log(values.find(biggerThan50));       <co xml:id="CO44-2"/>
console.log(values.findIndex(biggerThan50));  <co xml:id="CO44-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO44-1">
<para>La fonction <literal>isFinite</literal> retourne <literal>true</literal> si la valeur passée en argument est un nombre supérieur à <literal>50</literal>.</para>
</callout>
<callout arearefs="CO44-2">
<para>Affiche <literal>100</literal>.</para>
</callout>
<callout arearefs="CO44-3">
<para>Affiche <literal>3</literal>&#160;— c&#8217;est l&#8217;index de la valeur <literal>100</literal>.</para>
</callout>
</calloutlist>
<simpara>Les méthodes <literal>some</literal> et <literal>every</literal> retournent un <link linkend="boolean">booléen</link>
lorsque la condition est satisfaite.
<literal>some</literal> retourne <literal>true</literal> si <emphasis>au moins une itération</emphasis> est satisfaisante.
<literal>every</literal> retourne <literal>true</literal> si <emphasis>toutes les itérations</emphasis> sont satisfaisantes.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/some.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = [1, 'a', 120, undefined, 4];
const isUndefined = (value) =&gt; value === undefined;

console.log(values.every(isUndefined));                <co xml:id="CO45-1"/>
console.log(values.some(isUndefined));                 <co xml:id="CO45-2"/>
console.log(values.filter(d =&gt; d).some(isUndefined));  <co xml:id="CO45-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO45-1">
<para>Affiche <literal>false</literal>&#160;— toutes les valeurs ne sont pas égales à <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO45-2">
<para>Affiche <literal>true</literal>&#160;— au moins une valeur est égale à <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO45-3">
<para>Affiche <literal>false</literal>&#160;— il n&#8217;y a plus de valeur <literal>undefined</literal> dans le tableau, car on a utilisé la méthode <link linkend="array.filter">filter</link> pour supprimer les valeurs non-vides.</para>
</callout>
</calloutlist>
</section>
<section xml:id="array-destructuring">
<title>Décomposition de tableau (<emphasis>destructuring</emphasis>)</title>
<simpara>L&#8217;affectation par <emphasis>décomposition</emphasis> (<emphasis>destructuring</emphasis>) est une manière élégante
de piocher une ou plusieurs valeurs dans un <link linkend="array">tableau</link>.
La décomposition n&#8217;altère pas le contenu des variables décomposées.
Ce mécanisme existe aussi pour les <link linkend="object-destructuring">objets</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/destructuring.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];

const [first, second] = weekdays;
console.log(first);           <co xml:id="CO46-1"/>
console.log(second);          <co xml:id="CO46-2"/>

const [,, third] = weekdays;
console.log(third);           <co xml:id="CO46-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO46-1">
<para>Affiche <literal>"lundi"</literal>.</para>
</callout>
<callout arearefs="CO46-2">
<para>Affiche <literal>"mardi"</literal>.</para>
</callout>
<callout arearefs="CO46-3">
<para>Affiche <literal>"mercredi"</literal>&#160;— l&#8217;utilisation des virgules sans variable a permis de <emphasis>sauter</emphasis> des positions dans la décomposition.</para>
</callout>
</calloutlist>
<simpara>La décomposition se combine agréablement avec l&#8217;opérateur <literal>&#8230;&#8203;</literal> (opérateur <emphasis>spread</emphasis>).
Il accumule <emphasis>le reste</emphasis> des éléments dans une variable, sous forme de tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/destructuring-rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const weekdays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];

const [first, second, ...rest] = weekdays;
console.log(rest);           <co xml:id="CO47-1"/>

// revient au même que
// const [,, ...rest] = weekdays;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO47-1">
<para>Affiche <literal>["mercredi", "jeudi", "vendredi"]</literal>.</para>
</callout>
</calloutlist>
<simpara>La méthode <literal>slice</literal> offre davantage de souplesse pour gérer les <emphasis>limites</emphasis>.
On choisit <emphasis>l&#8217;index de début</emphasis> et <emphasis>l&#8217;index de fin</emphasis> de la décomposition.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/slice.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = ['un', 'deux', 'trois', 'quatre'];

console.log(values.slice(1));     <co xml:id="CO48-1"/>
console.log(values.slice(1, 2));  <co xml:id="CO48-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO48-1">
<para>Affiche <literal>["deux", "trois", "quatre"]</literal>&#160;— à partir de l&#8217;index <literal>1</literal>.</para>
</callout>
<callout arearefs="CO48-2">
<para>Affiche <literal>["deux"]</literal>&#160;— à partir de l&#8217;index <literal>1</literal> et jusqu&#8217;à l&#8217;index <literal>2</literal> (non-inclus).</para>
</callout>
</calloutlist>
<simpara>Si les valeurs de début et/ou de fin sont <emphasis>négatives</emphasis>,
les index sont calculés <emphasis>à partir de la fin</emphasis> du tableau.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>array/slice-negative.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const values = ['un', 'deux', 'trois', 'quatre'];

console.log(values.slice(-1));     <co xml:id="CO49-1"/>
console.log(values.slice(-3));     <co xml:id="CO49-2"/>

console.log(values.slice(0, -1));  <co xml:id="CO49-3"/>
console.log(values.slice(0, -3));  <co xml:id="CO49-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO49-1">
<para>Affiche <literal>["quatre"]</literal>&#160;— premier élément à partir de la fin.</para>
</callout>
<callout arearefs="CO49-2">
<para>Affiche <literal>["deux", "trois", "quatre"]</literal>&#160;— les trois premiers éléments à partir de la fin.</para>
</callout>
<callout arearefs="CO49-3">
<para>Affiche <literal>["un", "deux", "trois"]</literal>&#160;— jusqu&#8217;au dernier élément à partir de la fin (non-inclus).</para>
</callout>
<callout arearefs="CO49-4">
<para>Affiche <literal>["un"]</literal>&#160;— jusqu&#8217;au troisième élément à partir de la fin (non-inclus).</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="object">
<title>Manipuler des structures d&#8217;objet</title>
<simpara>Les structures d&#8217;objet servent à <emphasis role="strong">lister des éléments</emphasis> de tout type
au sein d&#8217;une même variable.
L&#8217;indexation se fait <emphasis>comme dans un dictionnaire</emphasis>,
avec un identifiant unique pour chaque valeur.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(francine.first_name); <co xml:id="CO50-1"/>

francine.age = 25;                <co xml:id="CO50-2"/>
console.log(francine.age);        <co xml:id="CO50-3"/>
console.log(francine.twitter);    <co xml:id="CO50-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO50-1">
<para>Affiche <literal>"Francine"</literal>.</para>
</callout>
<callout arearefs="CO50-2">
<para>On assigne une valeur numérique dans l&#8217;index <literal>age</literal> une fois l&#8217;objet créé.</para>
</callout>
<callout arearefs="CO50-3">
<para>Affiche <literal>25</literal>&#160;— la valeur numérique précédemment assignée.</para>
</callout>
<callout arearefs="CO50-4">
<para>Affiche <literal>undefined</literal>&#160;— aucune valeur n&#8217;est assignée pour cette clé.</para>
</callout>
</calloutlist>
<simpara>Nous pouvons nous baser sur une autre syntaxe pour <emphasis>créer</emphasis> et <emphasis>accéder</emphasis>
à des valeurs en utilisant des variables en guise d&#8217;identifiant d&#8217;index&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/dynamic.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const SOCIAL_NETWORK = 'twitter';

const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  [SOCIAL_NETWORK]: '@FrancineDu26',    <co xml:id="CO51-1"/>
};

console.log(francine[SOCIAL_NETWORK]);  <co xml:id="CO51-2"/>

// manières équivalentes, sans utilisation de variable
console.log(francine.twitter);
console.log(francine['twitter']);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO51-1">
<para>Assigne la chaîne <literal>@FrancineDu26</literal> dans l&#8217;index correspondant à la valeur de la variable <literal>SOCIAL_NETWORK</literal>.</para>
</callout>
<callout arearefs="CO51-2">
<para>Affiche <literal>"@FrancineDu26"</literal>.</para>
</callout>
</calloutlist>
<section xml:id="object-destructuring">
<title>Décomposition d&#8217;objet (<emphasis>destructuring</emphasis>)</title>
<simpara>L&#8217;affectation par décomposition (<emphasis>destructuring</emphasis>) est une manière
élégante de piocher une ou plusieurs valeurs dans un <link linkend="object">objet</link>.
Ce mécanisme existe aussi pour les <link linkend="array-destructuring">tableaux</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: '@FrancineDu26',
};

const {location,twitter} = francine;
console.log(location);            <co xml:id="CO52-1"/>

const {first_name:prenom} = francine;
console.log(prenom);              <co xml:id="CO52-2"/>

const {is_admin=false} = francine;
console.log(is_admin);            <co xml:id="CO52-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO52-1">
<para>Affiche <literal>"Drôme"</literal>&#160;— on a décomposé la clé <literal>location</literal>.</para>
</callout>
<callout arearefs="CO52-2">
<para>Affiche <literal>"Francine"</literal>&#160;— on a décomposé puis renommé la clé <literal>first_name</literal> en une nouvelle variable&#160;: <literal>prenom</literal>.</para>
</callout>
<callout arearefs="CO52-3">
<para>Affiche <literal>false</literal>&#160;— on a décomposé la clé <literal>is_admin</literal> et comme elle n&#8217;existe pas, on a spécifié la valeur par défaut <literal>false</literal>, au lieu de <literal>undefined</literal>.</para>
</callout>
</calloutlist>
<simpara>La décomposition se combine agréablement avec l&#8217;opérateur <literal>&#8230;&#8203;</literal>
(opérateur <emphasis>spread</emphasis>).
Il accumule <emphasis>le reste</emphasis> des éléments dans une variable,
sous forme d&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring-rest.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: '@FrancineDu26',
};

const {first_name, ...metadata} = francine;

console.log(first_name);          <co xml:id="CO53-1"/>
console.log(metadata);            <co xml:id="CO53-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO53-1">
<para>Affiche <literal>"Francine"</literal>.</para>
</callout>
<callout arearefs="CO53-2">
<para>Affiche <literal>{ location: "Drôme", twitter: "@FrancineDu26" }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="object.assign">
<title>Combiner des objets</title>
<simpara><literal>Object.assign</literal> est une méthode qui permet d&#8217;étendre et combiner plusieurs objets.
On a le choix d&#8217;intégrer les nouveaux éléments à un objet existant
ou bien d&#8217;en créer un nouveau.
Les objets sont combinés dans le premier paramètre de la fonction.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/assign.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
};

const francine26 = Object.assign({}, francine, {location: 'Drôme'});
console.log(francine26);      <co xml:id="CO54-1"/>
console.log(francine);        <co xml:id="CO54-2"/>

Object.assign(francine26, {location: 'Paris'}, {location: 'Ardèche'});
console.log(francine26);      <co xml:id="CO54-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO54-1">
<para>Affiche <literal>{ first_name: "Francine", location: "Drôme" }</literal>&#160;— la nouvelle variable contient nos deux objets combinés.</para>
</callout>
<callout arearefs="CO54-2">
<para>Affiche <literal>{ first_name: "Francine" }</literal>&#160;— ce sont les valeurs originelles de notre objet.</para>
</callout>
<callout arearefs="CO54-3">
<para>Affiche <literal>{ first_name: "Francine", location: 'Ardèche' }</literal>&#160;— l&#8217;objet <literal>francine26</literal> a reçu la nouvelle propriété <literal>location</literal>.</para>
</callout>
</calloutlist>
<simpara>À noter que les assignations se font de <emphasis>gauche à droite</emphasis>.
Toute clé existante est remplacée.</simpara>
<simpara>La <link linkend="object-destructuring">décomposition d&#8217;objet</link> sert également à combiner
un ou plusieurs objets entre eux.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/destructuring-spread.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
};

const francine26 = {...francine, location: 'Drôme'};
console.log(francine26);      <co xml:id="CO55-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO55-1">
<para>Affiche <literal>{ first_name: "Francine", location: "Drôme" }</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="itérer_sur_des_objets">
<title>Itérer sur des objets</title>
<simpara>La méthode <literal>Object.entries</literal> est probablement la méthode
la plus adaptée pour itérer à la fois sur les <emphasis>clés</emphasis> et sur les <emphasis>valeurs</emphasis>
d&#8217;un objet.
<literal>Object.entries</literal> est une fonction qui retourne un tableau.
Ce tableau contient autant de paires de <literal>[clé, valeur]</literal> qu&#8217;il y a
d&#8217;éléments dans l&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/entries.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Object.entries(francine)); <co xml:id="CO56-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO56-1">
<para>Affiche <literal>[[ "first_name", "Francine" ], [ "location", "Drôme" ]]</literal>.</para>
</callout>
</calloutlist>
<simpara>Libre à nous d'<link linkend="array.forEach">itérer sur les valeurs</link>
et d&#8217;utiliser la <link linkend="array-destructuring">décomposition de tableaux</link>
pour rendre notre code explicite&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/entries-loop.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

Object.entries(francine).forEach(([key, value]) =&gt; {
  console.log(`francine.${key} vaut ${value}`);   <co xml:id="CO57-1"/>
})

// même résultat, autre méthode
for (const [key, value] of Object.entries(francine)) {
  console.log(`francine.${key} vaut ${value}`);   <co xml:id="CO57-2"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO57-1">
<para>Affiche successivement <literal>"francine.first_name vaut Francine"</literal> puis <literal>"francine.location vaut Drôme"</literal>.</para>
</callout>
<callout arearefs="CO57-2">
<para>Idem.</para>
</callout>
</calloutlist>
<simpara>Deux autres méthodes récupèrent
soit <emphasis>la liste des clés</emphasis> d&#8217;un objet (<literal>Object.keys</literal>)
soit <emphasis>la liste des valeurs</emphasis> d&#8217;un objet (<literal>Object.values</literal>).
Dans les deux cas, les résultats sont retournés
sous forme d&#8217;un <link linkend="array">tableau</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/keys.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Object.keys(francine));     <co xml:id="CO58-1"/>
console.log(Object.values(francine));   <co xml:id="CO58-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO58-1">
<para>Affiche <literal>["first_name", "location"]</literal>.</para>
</callout>
<callout arearefs="CO58-2">
<para>Affiche <literal>["Francine", "Drôme"]</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="identifier_une_ou_plusieurs_valeurs">
<title>Identifier une ou plusieurs valeurs</title>
<simpara>Il y a trois manières d&#8217;identifier si un objet contient une valeur
associée à une clé.</simpara>
<simpara>Le plus simple est d&#8217;utiliser la méthode <literal>hasOwnProperty</literal>.
Elle prend en argument le nom de la clé à tester et
retourne un <link linkend="boolean">booléen</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/has-own-property.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(francine.hasOwnProperty('location'));   <co xml:id="CO59-1"/>
console.log(francine.hasOwnProperty('twitter'));    <co xml:id="CO59-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO59-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO59-2">
<para>Affiche <literal>false</literal>&#160;— cette clé n&#8217;existe pas dans cet objet.</para>
</callout>
</calloutlist>
<simpara>La seconde manière est d&#8217;utiliser l&#8217;opérateur <literal>in</literal>.
On l&#8217;aura déjà rencontré lors des <link linkend="array.forEach">boucles</link>.
Sauf que cette fois, on l&#8217;utilise une seule fois&#160;— et non dans une boucle.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key-in.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log('location' in francine);   <co xml:id="CO60-1"/>
console.log('twitter' in francine);    <co xml:id="CO60-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO60-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO60-2">
<para>Affiche <literal>false</literal>&#160;— cette clé n&#8217;existe pas dans cet objet.</para>
</callout>
</calloutlist>
<simpara>Enfin, on peut tester la valeur associée avec la syntaxe standard <literal>objet.clé</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
};

console.log(Boolean(francine.location));   <co xml:id="CO61-1"/>
console.log(Boolean(francine.twitter));    <co xml:id="CO61-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO61-1">
<para>Affiche <literal>true</literal>.</para>
</callout>
<callout arearefs="CO61-2">
<para>Affiche <literal>false</literal>.</para>
</callout>
</calloutlist>
<simpara>Attention toutefois, car cette méthode <emphasis>teste uniquement la valeur</emphasis>.
Si la clé existe et contient <literal>undefined</literal>, vous ne verrez pas la différence.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>object/key-undefined.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const francine = {
  first_name: 'Francine',
  location: 'Drôme',
  twitter: undefined
};

console.log(Boolean(francine.twitter));          <co xml:id="CO62-1"/>
console.log(francine.twitter !== undefined);     <co xml:id="CO62-2"/>

console.log(francine.hasOwnProperty('twitter')); <co xml:id="CO62-3"/>
console.log('twitter' in francine);              <co xml:id="CO62-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO62-1">
<para>Affiche <literal>false</literal>&#160;— la valeur <literal>undefined</literal> est convertie en <literal>false</literal>.</para>
</callout>
<callout arearefs="CO62-2">
<para>Affiche <literal>false</literal>&#160;— la clé existe bien, mais elle contient la valeur <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO62-3">
<para>Affiche <literal>true</literal>&#160;— le test se fait sur l&#8217;existence de la clé.</para>
</callout>
<callout arearefs="CO62-4">
<para>Affiche <literal>true</literal>&#160;— idem.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="json">
<title>Manipuler des structures de données JSON</title>
<simpara>JSON (<phrase role="URL"><link xl:href="http://json.org">json.org</link></phrase>) est un format de données textuel standardisé.
Son but est de pouvoir <emphasis role="strong">représenter des données informatiques</emphasis> de manière
interopérable entre différents langages.</simpara>
<formalpara>
<title>json/base.json</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  "title": "Node.js",
  "price_tag": 32,
  "keywords": [
    "JavaScript",
    "Node.js",
    "Apprendre par l'exemple"
  ]
}</programlisting>
</para>
</formalpara>
<simpara>Le format JSON ressemble beaucoup à une structure d'<link linkend="object">objet</link> ECMAScript.
La représentation est plus stricte car <emphasis>toute donnée</emphasis> doit être représentée
de manière textuelle.
Ainsi, toutes les clés sont entourées de <emphasis>guillemets doubles</emphasis>.</simpara>
<simpara>Les types de données autorisés sont les nombres, les chaînes de caractère,
les booléens, les tableaux, les objets et la valeur <literal>null</literal>.
On ne peut donc pas représenter de <link linkend="function">fonction</link>,
d'<link linkend="class">instance d&#8217;objet</link> ni même la valeur <literal>undefined</literal>.</simpara>
<simpara>ECMAScript embarque le nécessaire pour <emphasis>parser</emphasis> depuis et <emphasis>convertir</emphasis> en JSON.
Cela se fait respectivement avec les fonctions <literal>JSON.parse</literal> et <literal>JSON.stringify</literal>.</simpara>
<simpara>La fonction <literal>JSON.parse</literal> consomme du texte.
Elle retourne une représentation ECMAScript ou lance une <link linkend="error">erreur</link>
en cas de problème.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/parse.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const json_object = '{ "title": "Node.js", "price_tag": 32 }';
const json_string = '"Hello World!"';
const json_number = '32';

console.log(JSON.parse(json_string)); <co xml:id="CO63-1"/>
console.log(JSON.parse(json_number)); <co xml:id="CO63-2"/>
console.log(JSON.parse(json_object)); <co xml:id="CO63-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO63-1">
<para>Affiche <literal>"Hello World!"</literal>.</para>
</callout>
<callout arearefs="CO63-2">
<para>Affiche <literal>32</literal>.</para>
</callout>
<callout arearefs="CO63-3">
<para>Affiche <literal>{price_tag: 32, title: "Node.js"}</literal>.</para>
</callout>
</calloutlist>
<simpara>À l&#8217;inverse, la fonction <literal>JSON.stringify</literal> convertit une structure ECMAScript
en chaîne de caractères au format JSON&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/stringify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949
}

console.log(JSON.stringify(location));  <co xml:id="CO64-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO64-1">
<para>Affiche <literal>"{\"lat\":48.8503439,\"lon\":2.34658949}"</literal>.</para>
</callout>
</calloutlist>
<simpara>La fonction <literal>JSON.stringify</literal> parcourt tous les éléments
pour les sérialiser en forme textuelle.
Quand la fonction de sérialisation rencontre la la clé spéciale <literal>toJSON</literal>,
elle l&#8217;utilisera pour effectuer la conversion&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/to-json.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949,
  toJSON() {
    return `geo=${this.lat},${this.lon}`;
  }
}

console.log(JSON.stringify(location));    <co xml:id="CO65-1"/>

delete location.toJSON;
console.log(JSON.stringify(location));    <co xml:id="CO65-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO65-1">
<para>Affiche <literal>"\"geo=48.8503439,2.34658949\""</literal>&#160;— c&#8217;est la sérialisation definie par notre fonction <literal>toJSON</literal>.</para>
</callout>
<callout arearefs="CO65-2">
<para>Affiche <literal>"{\"lat\":48.8503439,\"lon\":2.34658949}"</literal>&#160;— sans la clé <literal>toJSON</literal>, notre objet initial est sérialisé tel quel.</para>
</callout>
</calloutlist>
<simpara>Notre implémentation contenue dans la fonction <literal>toJSON</literal> est
responsable de <emphasis role="strong">renvoyer du texte seulement</emphasis> <emphasis>et</emphasis> de <emphasis role="strong">choisir les clés</emphasis>
à sérialiser.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>json/to-json-extra.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const location = {
  lat: 48.8503439,
  lon: 2.34658949,
  city: 'Paris',
  toJSON() {
    return `geo=${this.lat},${this.lon}`;
  }
}

console.log(JSON.stringify(location));    <co xml:id="CO66-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO66-1">
<para>Affiche <literal>"\"geo=48.8503439,2.34658949\""</literal>.</para>
</callout>
</calloutlist>
<simpara>Dans cette variante d&#8217;exemple, la clé <literal>city</literal> n&#8217;a pas été sérialisée
car notre fonction <literal>toJSON</literal> se préoccupait seulement des clés <literal>lat</literal> et <literal>lon</literal>.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> JSON</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur JSON.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/JSON</link>
</simpara>
</note>
</section>
<section xml:id="date">
<title>Manipuler des dates</title>
<simpara>Les calculs de date s&#8217;effectuent à l&#8217;aide des objets <literal>Date</literal>.
Chaque instance de <literal>Date</literal> représente un moment dans le temps, à un jour
et à une heure donnée.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const now = new Date();
const past = new Date('2013-12-04 10:00:00'); <co xml:id="CO67-1"/>

console.log(past.getUTCFullYear());           <co xml:id="CO67-2"/>
console.log(now.getUTCFullYear());            <co xml:id="CO67-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO67-1">
<para>On initialise l&#8217;objet date <literal>past</literal> au 04 décembre 2013.</para>
</callout>
<callout arearefs="CO67-2">
<para>Affiche <literal>2013</literal>&#160;— l&#8217;année liée à l&#8217;objet <literal>past</literal>.</para>
</callout>
<callout arearefs="CO67-3">
<para>Affiche <literal>2018</literal>&#160;— l&#8217;année liée à l&#8217;objet <literal>now</literal> (aujourd&#8217;hui).</para>
</callout>
</calloutlist>
<simpara>Un certain nombre de méthodes <emphasis>retournent</emphasis> différents éléments de la date
contenue dans l&#8217;objet&#160;: année, secondes, jour de la semaine, etc.
Il en existe tout autant pour <emphasis>modifier</emphasis> ces éléments de date.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/set.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');

past.setUTCFullYear('2015');           <co xml:id="CO68-1"/>
console.log(past.toISOString());       <co xml:id="CO68-2"/>

past.setUTCMonth(1);                   <co xml:id="CO68-3"/>
console.log(past.toISOString());       <co xml:id="CO68-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO68-1">
<para>Change la date vers l&#8217;année <literal>2015</literal>.</para>
</callout>
<callout arearefs="CO68-2">
<para>Affiche <literal>"2015-12-04T10:00:00.000Z"</literal>.</para>
</callout>
<callout arearefs="CO68-3">
<para>Change la date vers le mois <literal>1</literal>.</para>
</callout>
<callout arearefs="CO68-4">
<para>Affiche <literal>"2015-02-04T10:00:00.000Z"</literal>&#160;— pourquoi le mois de février&#160;??</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre l&#8217;ambiguïté de la notion de <emphasis>mois</emphasis>.
Il s&#8217;agit en réalité de l'<emphasis>index du mois</emphasis>&#160;:
0 correspond à janvier, 1 à février, etc.</simpara>
<simpara>La plupart des méthodes natives font référence à l&#8217;anglais.
Elles offrent peu de confort de manipulation&#160;— on aimerait pouvoir
compter facilement le nombre de jours entre deux dates, ou retirer 30 jours.</simpara>
<simpara>Quand nous utiliserons <link linkend="../chapter-04/index.adoc">Node</link> et
<link linkend="../chapter-05/index.adoc">npm</link>, nous verrons que nous aurons
à disposition des librairies facilitant les manipulations de dates.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Date</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Date.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date</link>
</simpara>
</note>
<section xml:id="intl.datetimeformat">
<title>Formatage internationalisé (<emphasis>Intl.DateTimeFormat</emphasis>)</title>
<simpara>La spécification <emphasis>ECMA Intl</emphasis> a été conçue pour ajouter des
fonctionnalités relatives aux langues.
Cette spécification est complémentaire.
Son comportement varie en fonction du système d&#8217;exploitation
—&#160;mode d&#8217;installation de Node et/ou version du navigateur web.</simpara>
<simpara>Les méthodes de date <literal>toLocaleString</literal>, <literal>toLocaleDateString</literal> et
<literal>toLocaleTimeString</literal> renvoient une version localisée
d&#8217;une date complète, d&#8217;une date et d&#8217;une heure, respectivement.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/to-locale-date.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');

console.log(past.toLocaleDateString());                           <co xml:id="CO69-1"/>
console.log(past.toLocaleDateString('fr-FR', { month: 'long' })); <co xml:id="CO69-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO69-1">
<para>Affiche <literal>04/12/2013</literal>.</para>
</callout>
<callout arearefs="CO69-2">
<para>Affiche <literal>décembre</literal>.</para>
</callout>
</calloutlist>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Tu vois M01, M02, etc. ?</title>
<simpara>Si en formatant une date, les caractères <literal>M01</literal>, <literal>M02</literal> ou autre s&#8217;affiche,
c&#8217;est que le système n&#8217;est pas configuré avec les libellés de la langue
demandée.</simpara>
<simpara>La langue par défaut est l&#8217;anglais.</simpara>
</caution>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Date/toLocaleDateString</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Date/toLocaleDateString.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</link>
</simpara>
</note>
<simpara>Une version plus verbeuse consiste à créer un formateur avec
<literal>Intl.DateTimeFormat</literal>.
Ce formateur se réutilise pour transformer plusieurs fois
des dates différentes avec les mêmes réglages
ou une même date avec des formatages différents.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>date/intl.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const past = new Date('2013-12-04 10:00:00');

const options = { year: 'numeric', month: 'short', day: 'numeric' };
const longOptions = {...options, weekday: 'long', month: 'long'};
const fr = new Intl.DateTimeFormat('fr-FR', options);
const frLong = new Intl.DateTimeFormat('fr-FR', longOptions);

console.log(fr.format(past));         <co xml:id="CO70-1"/>
console.log(frLong.format(past));     <co xml:id="CO70-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO70-1">
<para>Affiche <literal>4 déc. 2013</literal>.</para>
</callout>
<callout arearefs="CO70-2">
<para>Affiche <literal>mercredi 4 décembre 2013</literal>.</para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> DateTimeFormat</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur DateTimeFormat.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/DateTimeFormat</link>
</simpara>
</note>
</section>
</section>
<section xml:id="class">
<title>Manipuler des classes d&#8217;objet (<emphasis>Class</emphasis>)</title>
<simpara>Une classe est une <emphasis role="strong">structure qui partage des propriétés</emphasis>
et des méthodes entre objets qui l&#8217;instancient.
Une instance de classe est créée en préfixant un appel de fonction
par l&#8217;opérateur <literal>new</literal>.</simpara>
<programlisting role="interactive interactive--javascript interactive--runtime--node-v10" language="javascript" linenumbering="unnumbered">const date1 = new Date();
const date2 = new Date('2013-12-04');</programlisting>
<simpara>Si on se réfère à l&#8217;exemple précédent,
nos deux variables sont des objets issus de la <emphasis>classe</emphasis> <link linkend="date">Date</link>.
Chacune des variables bénéficie des méthodes définies par la classe <literal>Date</literal>.</simpara>
<simpara>Autrement dit, si les <link linkend="object">structures d&#8217;objet</link> définissent des données,
les classes définissent des <emphasis role="strong">comportements partagés</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title, ean13 }) {     <co xml:id="CO71-1"/>
    this.title = title;               <co xml:id="CO71-2"/>
    this.ean13 = ean13;
  }

  toJSON() {                          <co xml:id="CO71-3"/>
    const {title, ean13} = this;
    return {title, ean13};
  }

  get isbn() {                        <co xml:id="CO71-4"/>
    return this.ean13.split(3)[1];
  }

  static clean(value) {               <co xml:id="CO71-5"/>
    return value.replace(/\D/g, '');
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO71-1">
<para>Le constructeur reçoit un ou plusieurs arguments lors de l&#8217;instanciation de la classe.</para>
</callout>
<callout arearefs="CO71-2">
<para><literal>this</literal> fait référence à <emphasis>ce contexte</emphasis>, c&#8217;est-à-dire à <emphasis>cette instance de classe</emphasis>&#160;; deux instances peuvent être initialisées avec des données différentes.</para>
</callout>
<callout arearefs="CO71-3">
<para><literal>toJSON</literal> est une méthode de la classe.</para>
</callout>
<callout arearefs="CO71-4">
<para><literal>isbn</literal> est un accesseur (préfixe <literal>get</literal>)&#160;— une propriété dont la valeur est calculée à chaque fois qu&#8217;elle est appelée.</para>
</callout>
<callout arearefs="CO71-5">
<para><literal>clean</literal> est une méthode dite <emphasis>statique</emphasis>&#160;— elle est appelée en dehors d&#8217;une instance.</para>
</callout>
</calloutlist>
<simpara>Nous développerons cet exemple dans les sections qui suivent.
On peut d&#8217;ores et déjà noter que la structure d&#8217;une classe
se décompose en plusieurs parties&#160;:</simpara>
<variablelist>
<varlistentry>
<term>la définition</term>
<listitem>
<simpara>Définit le nom de la classe que l&#8217;on pourra instancier.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>le constructeur</term>
<listitem>
<simpara>Partie exécutée lorsque la classe est instanciée.
On y met le moins de choses possibles.
En général on copie les données passées en argument.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>les méthodes</term>
<listitem>
<simpara>Fonctions partagées entre toutes les instances de la classe.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>les méthodes statiques</term>
<listitem>
<simpara>Fonctions partagées sans avoir à instancier la classe.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>les accesseurs et mutateurs</term>
<listitem>
<simpara>Fonctions qui définissent le comportement de propriétés dynamiques.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>le contexte (<literal>this</literal>)</term>
<listitem>
<simpara>On peut y référer dans les méthodes de la classe pour dire
<emphasis>je fais référence à cet objet</emphasis>.
Et donc d&#8217;appeler les données et méthodes attenantes.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Classes</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Classes.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes</link>
</simpara>
</note>
<section xml:id="class.method">
<title>Méthodes d&#8217;instance</title>
<simpara>Les méthodes définissent des comportements partagés entre chaque instance
de la classe.
Elles servent à <emphasis>retourner</emphasis> ou <emphasis>transformer</emphasis> des valeurs rattachées à l&#8217;objet.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/methods.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title }) {
    this.title = title;
  }

  isPublished() {
    return this.is_published === true;
  }

  publish() {
    this.is_published = true;
  }
}

const book1 = new Book({ title: 'Node.js' });
console.log(book1.isPublished());   <co xml:id="CO72-1"/>
book1.publish();
console.log(book1.isPublished());   <co xml:id="CO72-2"/>

const book2 = new Book({ title: 'CSS maintenables' });
console.log(book2.isPublished());   <co xml:id="CO72-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO72-1">
<para>Affiche <literal>false</literal>&#160;— la propriété n&#8217;existe pas.</para>
</callout>
<callout arearefs="CO72-2">
<para>Affiche <literal>true</literal>&#160;— la propriété <literal>is_published</literal> a été changée à la ligne précédente.</para>
</callout>
<callout arearefs="CO72-3">
<para>Affiche <literal>false</literal>&#160;— les données sont étanches entre chaque instance.</para>
</callout>
</calloutlist>
</section>
<section xml:id="class.static">
<title>Méthodes statiques</title>
<simpara>Les méthodes statiques sont pratiques pour mettre à disposition du code
métier de manière organisée.
Elles se caractérisent par le préfixe <literal>static</literal> devant un nom de fonction.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/static.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title, ean13 }) {
    this.title = title;
    this.ean13 = ean13;
  }

  static clean(value) {
    return value.replace(/\D/g, '');
  }
}

const nodebook = new Book({
  title: 'Node.js',
  ean13: Book.clean('978-2212139938'),  <co xml:id="CO73-1"/>
});

console.log(nodebook.ean13);            <co xml:id="CO73-2"/>
console.log(nodebook.clean);            <co xml:id="CO73-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO73-1">
<para>On appelle la méthode statique <literal>Book.clean</literal> pour nettoyer le code EAN13.</para>
</callout>
<callout arearefs="CO73-2">
<para>Affiche <literal>"9782212139938"</literal>&#160;— la valeur a bien été nettoyée.</para>
</callout>
<callout arearefs="CO73-3">
<para>Affiche <literal>undefined</literal>&#160;— les méthodes statiques ne sont pas accessibles depuis l&#8217;instance de classe.</para>
</callout>
</calloutlist>
<simpara>On verra dans le <link linkend="../chapter-04/index.adoc">chapitre sur Node</link>
qu&#8217;on peut se baser sur les modules pour partager du code
sans avoir à l&#8217;affecter à une classe.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Classes/static</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Classes/static.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Classes/static</link>
</simpara>
</note>
</section>
<section xml:id="object-getset">
<title>Accesseurs et mutateurs</title>
<simpara>Ce type particulier de méthode permet de définir des <emphasis>attributs</emphasis>
dont la valeur est <emphasis>dynamique</emphasis> (accesseur).
Le <emphasis>mutateur</emphasis> gère l&#8217;affectation de valeur vers cet <emphasis>attribut dynamique</emphasis>.
Ces méthodes sont préfixées par <literal>get</literal> ou <literal>set</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/getters.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Book {
  constructor({ title, ean13 }) {
    this.title = title;
    this.ean13 = ean13;
  }

  get isbn() {                <co xml:id="CO74-1"/>
    return this.ean13.slice(3);
  }
}

const nodebook = new Book({ title: 'Node.js', ean13: '9782212139938' });

console.log(nodebook.ean13);  <co xml:id="CO74-2"/>
console.log(nodebook.isbn);   <co xml:id="CO74-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO74-1">
<para>Définition de l'<emphasis>accesseur</emphasis> <literal>isbn</literal>.</para>
</callout>
<callout arearefs="CO74-2">
<para>Affiche <literal>"9782212139938"</literal>&#160;— c&#8217;est une propriété de l&#8217;objet <literal>nodebook</literal>.</para>
</callout>
<callout arearefs="CO74-3">
<para>Affiche <literal>"2212139938"</literal>&#160;— <literal>isbn</literal> s&#8217;utilise comme un attribut mais sa valeur est calculée à chaque fois qu&#8217;elle est appelée.</para>
</callout>
</calloutlist>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Functions/get</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Functions/get.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/get</link>
</simpara>
</note>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Functions/set</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Functions/set.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Functions/set</link>
</simpara>
</note>
</section>
<section xml:id="class.extends">
<title>Héritage</title>
<simpara>L&#8217;héritage est un mécanisme d&#8217;extension de classe.
C&#8217;est une pratique peu employée en JavaScript,
principalement de par sa nature modulaire et fonctionnelle.</simpara>
<simpara>L&#8217;héritage se caractérise par l&#8217;usage de l&#8217;opérateur <literal>extends</literal> lors de la
définition de la classe et aussi par l&#8217;utilisation du mot-clé <literal>super</literal>
dans le constructeur.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>class/extends.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">class Product {
  constructor({ ean13 }) {
    this.ean13 = ean13;
  }
}

class Book extends Product {
  constructor(options) {
    super(options);

    this.title = options.title;
  }
}

const nodebook = new Book({ title: 'Node.js', ean13: '9782212139938' });
console.log(nodebook.title);    <co xml:id="CO75-1"/>
console.log(nodebook.ean13);    <co xml:id="CO75-2"/>

const nodeproduct = new Product({ title: 'Node.js', ean13: '9782212139938' });
console.log(nodeproduct.title); <co xml:id="CO75-3"/>
console.log(nodeproduct.ean13); <co xml:id="CO75-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO75-1">
<para>Affiche <literal>"Node.js"</literal>&#160;— la propriété <literal>title</literal> est assignée dans le constructeur de la classe <literal>Book</literal>.</para>
</callout>
<callout arearefs="CO75-2">
<para>Affiche <literal>"9782212139938"</literal>&#160;— la propriété <literal>ean13</literal> est assignée dans le constructeur de <literal>Product</literal>, la classe dont on hérite grâce à <literal>extends</literal> et à l&#8217;appel de <literal>super()</literal> qui transmet les arguments d&#8217;initialisation.</para>
</callout>
<callout arearefs="CO75-3">
<para>Affiche <literal>undefined</literal>&#160;— la propriété <literal>title</literal> n&#8217;est pas assignée dans le constructeur de la classe <literal>Product</literal>.</para>
</callout>
<callout arearefs="CO75-4">
<para>Affiche <literal>"9782212139938"</literal>&#160;— la propriété <literal>ean13</literal> est assignée dans le constructeur de <literal>Product</literal> qu&#8217;on appelle directement cette fois-ci.</para>
</callout>
</calloutlist>
<simpara>En pratique, c&#8217;est comme si on empilait les classes les unes sur les autres.
On lègue des méthodes aux classes qui héritent.
Si une méthode porte le même nom, elle sera écrasée.</simpara>
<simpara>L&#8217;appel à la fonction <literal>super()</literal> <emphasis>appelle le constructeur de la classe étendue</emphasis>.
Si on ne l&#8217;appelle pas, le constructeur de la classe parent ne sera pas invoqué.</simpara>
<simpara>On reparlera de l&#8217;héritage dans la
<link xl:href="../chapter-09/index.xml#react">section React</link>
du <link linkend="../chapter-09/index.adoc">chapitre 9</link>.
C&#8217;est un exemple populaire d&#8217;héritage de composants graphiques.</simpara>
</section>
</section>
<section xml:id="promise">
<title>Manipuler des promesses (<emphasis>Promise</emphasis>)</title>
<simpara>Une promesse est <emphasis role="strong">un objet retourné immédiatement</emphasis>.
Le <emphasis role="strong">résultat est obtenu plus tard</emphasis>.
Cette résolution peut être soit <emphasis>positive</emphasis> soit <emphasis>négative</emphasis>.
On dit alors que l&#8217;action est <emphasis>asynchrone</emphasis>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/base.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const p = new Promise((resolve) =&gt; resolve('promesse tenue'));

console.log(p);                           <co xml:id="CO76-1"/>
console.log('un');                        <co xml:id="CO76-2"/>
p.then(message =&gt; console.log(message));  <co xml:id="CO76-3"/>
console.log('deux');                      <co xml:id="CO76-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO76-1">
<para>Affiche <literal>Promise</literal>&#160;— ce n&#8217;est pas le résultat que l&#8217;on voit mais l&#8217;objet avec lequel interagir pour être prévenu de la mise à disposition du résultat.</para>
</callout>
<callout arearefs="CO76-2">
<para>Affiche <literal>"un"</literal>.</para>
</callout>
<callout arearefs="CO76-4">
<para>Affiche <literal>"deux"</literal>&#160;— c&#8217;est parce que la ligne d&#8217;avant a mis en attente la <link linkend="anonymous-function">fonction anonyme</link>.</para>
</callout>
<callout arearefs="CO76-3">
<para>Affiche <literal>"promesse tenue"</literal> en dernier.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Design Pattern</phrase> Executor</title>
<simpara>Le fait qu&#8217;une fonction nous passe d'<emphasis>autres fonctions</emphasis> pour commander
un résultat s&#8217;appelle le <emphasis>pattern Executor</emphasis>.</simpara>
</note>
<simpara>Une <literal>Promise</literal> s&#8217;orchestre en deux temps.
L'<emphasis role="strong">initialisation</emphasis>&#160;: on décide de la manière dont le traitement asynchrone
sera effectué.
Puis la <emphasis role="strong">résolution</emphasis>&#160;: <emphasis>positive</emphasis> en appelant <literal>resolve()</literal>
ou <emphasis>négative</emphasis>, en appelant <literal>reject()</literal>.
Le résultat passé à <literal>resolve</literal> sera transmis au premier argument de <literal>then</literal>.
Le résultat passé à <literal>reject</literal> sera transmis au deuxième argument de <literal>then</literal>
mais aussi au premier argument de <literal>catch</literal>.</simpara>
<simpara>Une instance de <literal>Promise</literal> expose plusieurs méthodes
pour propager le statut de son exécution.</simpara>
<variablelist>
<varlistentry>
<term><literal>then(onSuccess[, onError])</literal></term>
<listitem>
<simpara>Fonction acceptant un <emphasis>callback</emphasis> de résolution et
un <emphasis>callback</emphasis> de rejet (facultatif).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>catch(onError)</literal></term>
<listitem>
<simpara>Fonction acceptant un <emphasis>callback</emphasis> de rejet.</simpara>
</listitem>
</varlistentry>
</variablelist>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/then-catch.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const oddTime = (date) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    parseInt(date.getTime() / 1000) % 2                         <co xml:id="CO77-1"/>
      ? resolve('le nombre de secondes est impair :-)')
      : reject('le nombre de secondes n\'est pas impair :-(');
  });
}

const now = new Date();

oddTime(now)
  .then(msg =&gt; console.log(msg), msg =&gt; console.error(msg)); <co xml:id="CO77-2"/>

oddTime(new Date(now.getTime() + 1000))                      <co xml:id="CO77-3"/>
  .then(msg =&gt; console.log(msg))                             <co xml:id="CO77-4"/>
  .catch(msg =&gt; console.error(msg))                          <co xml:id="CO77-5"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO77-1">
<para>La fonction <literal>oddTime</literal> accepte un argument de type &lt;&lt;date,Date&gt;. Elle résout la promesse <emphasis>positivement</emphasis> (<literal>resolve</literal>) si le nombre de secondes est impair, sinon elle résout la promesse <emphasis>négativement</emphasis> (<literal>reject</literal>).</para>
</callout>
<callout arearefs="CO77-2">
<para>Utilisation de la forme compacte de <literal>then</literal> avec deux <emphasis>callbacks</emphasis>&#160;: un de succès (associé à <literal>resolve</literal>) et un d&#8217;échec (associé à <literal>reject</literal>).</para>
</callout>
<callout arearefs="CO77-3">
<para>On crée une nouvelle promesse, avec une date calée une seconde plus tard c&#8217;est histoire de s&#8217;assurer que les deux appels aboutissent à une résolution différente.</para>
</callout>
<callout arearefs="CO77-4">
<para>Affiche <literal>"le nombre de secondes est impair&#160;:-)"</literal> si la résolution est positive.</para>
</callout>
<callout arearefs="CO77-5">
<para>Affiche <literal>"le nombre de secondes n&#8217;est pas impair&#160;:-("</literal> si la résolution est négativement.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Standard <literal>Promise/A+</literal></title>
<simpara>Historiquement, de nombreuses librairies ont proposé leur propre implémentation de promesses.
Elles avaient le défaut de ne pas être interopérables entre elles.
La spécification <emphasis>Promise/A+</emphasis> a émergé pour établir un standard de compatibilité.</simpara>
<simpara>ECMAScript 2015 introduit nativement cette API.
Plus besoin de <emphasis>polyfill</emphasis> ou de librairie pour en bénéficier nativement.</simpara>
<simpara><phrase role="URL"><link xl:href="https://github.com/promises-aplus/promises-spec">github.com/promises-aplus/promises-spec</link></phrase></simpara>
</note>
<simpara>En général, on utilise les promesses <emphasis role="strong">pour aller plus vite</emphasis>.
Parce qu&#8217;on peut continuer à traiter d&#8217;autres actions
<emphasis role="strong">en attendant l&#8217;arrivée du résultat</emphasis>.</simpara>
<simpara>C&#8217;est comme quand on se rend au restaurant&#160;:
les personnes en cuisine effectuent le traitement des commandes
(actions longues) tandis que les personnes au service gèrent
des interactions plus courtes mais plus fréquentes.
Au final, le ticket de commande contient la liste des promesses dont
on attend la résolution.</simpara>
<simpara>Nous verrons d&#8217;autres utilisations des promesses
avec <link xl:href="../chapter-09/index.xml#io-fetch">fetch()</link> au chapitre 9,
avec <link xl:href="../chapter-04/index.xml#util.promisify">promisify</link> au chapitre 4
et dans l'<link xl:href="../appendix-b/index.xml#promise">annexe B</link>.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> Promise</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur Promise.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise">developer.mozilla.org/docs/fr/Web/JavaScript/Reference/Global_Objects/Promise</link>
</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Guide des promesses</title>
<simpara>Un guide <emphasis>très</emphasis> complet&#160;— en anglais&#160;— est publié en libre consultation sur le site du W3C.
Un dépôt sur GitHub permet d&#8217;y contribuer.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.w3.org/2001/tag/doc/promises-guide">www.w3.org/2001/tag/doc/promises-guide</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/w3ctag/promises-guide">github.com/w3ctag/promises-guide</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<section xml:id="promise.all">
<title>Collection de promesses</title>
<simpara><literal>Promise.all</literal> est une <link linkend="class.static">méthode statique</link> de la class <emphasis>Promise</emphasis>.
Elle accepte un <link linkend="array">tableau</link> de promesses.
<literal>Promise.all</literal> retourne elle-même une promesse.
Cette promesse est résolue positivement si toutes les promesses réussissent.
Elle est résolue négativement dès que l'<emphasis>une d&#8217;entre elles</emphasis> échoue.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/all.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const asyncRandom = () =&gt; new Promise((resolve) =&gt; {
  const timing = Math.floor(Math.random() * 2000);
  setTimeout(() =&gt; resolve(`résolu après ${timing}ms`), timing);        <co xml:id="CO78-1"/>
});

const all = Promise.all([asyncRandom(), asyncRandom(), asyncRandom()]); <co xml:id="CO78-2"/>
all.then(messages =&gt; console.log(messages));                            <co xml:id="CO78-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO78-1">
<para>Cette fonction résout la promesse après un délai aléatoire compris entre 0 et 2000 millisecondes.</para>
</callout>
<callout arearefs="CO78-2">
<para>On passe 3 promesses à <literal>Promise.all</literal>.</para>
</callout>
<callout arearefs="CO78-3">
<para>La résolution est déclenchée dès que les 3 promesses sont résolues&#160;— l&#8217;argument contient un tableau listant les résultats <emphasis>dans l&#8217;ordre initial</emphasis> des promesses.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent illustre la <emphasis role="strong">parallélisation des actions</emphasis>.
Si la promesse la plus longue prend 1 seconde à être résolue,
alors le temps d&#8217;attente pour la résolution de <emphasis>toutes les promesses</emphasis>
est de 1 seconde.<?asciidoc-br?>
Si on avait été dans un enchainement séquentiel, le temps d&#8217;attente
final aurait été l&#8217;accumulation des temps d&#8217;attente de la résolution
de chacune des promesses.</simpara>
<simpara>Les promesses sont un des meilleurs moyens à notre disposition pour
<emphasis role="strong">modulariser</emphasis>, <emphasis role="strong">linéariser</emphasis> et <emphasis role="strong">clarifier le sens</emphasis> du flot de notre code.</simpara>
</section>
<section xml:id="async-await">
<title>async/await</title>
<simpara>Les opérateurs <literal>async</literal> et <literal>await</literal> aident à mettre en pause
l&#8217;interpréteur ECMAScript, en attendant le résultat d&#8217;une
fonction asynchrone (préfixée par <literal>async</literal>).
Les <link linkend="promise">promesses</link> sont implicitement compatibles.
On peut donc les mettre à plat pour obtenir un résultat
sans avoir à utiliser <literal>then</literal> ni <literal>catch</literal>.</simpara>
<simpara>Transformons l&#8217;exemple de la section <link linkend="promise.all">Promise.all</link>
pour comprendre l&#8217;impact de <literal>async</literal> et de <literal>await</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>promise/async-await.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">function asyncRandom() {
  return new Promise((resolve) =&gt; {
    const timing = Math.floor(Math.random() * 2000);
    setTimeout(() =&gt; resolve(`résolu après ${timing}ms`), timing);
  });
}

(async () =&gt; {                                                    <co xml:id="CO79-1"/>
  const all = [
    await asyncRandom(), await asyncRandom(), await asyncRandom() <co xml:id="CO79-2"/>
  ];

  console.log(all);                                               <co xml:id="CO79-3"/>
})();</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO79-1">
<para>On crée une <emphasis>fonction asynchrone auto-invoquée</emphasis>&#160;— c&#8217;est pas pour frimer mais parce qu&#8217;on ne peut pas encore utiliser de fonction asynchrone directement au niveau principal d&#8217;un script.</para>
</callout>
<callout arearefs="CO79-2">
<para>Chaque utilisation de <literal>await</literal> met l&#8217;interpréteur en pause.</para>
</callout>
<callout arearefs="CO79-3">
<para>L&#8217;affichage du temps d&#8217;exécution de chaque promesse se fait lorsque les 3 promesses sont résolues.</para>
</callout>
</calloutlist>
<simpara>On gagne en lisibilité, mais <emphasis role="strong">on perd en vitesse</emphasis>.
Les promesses sont exécutées <emphasis>les unes à la suite des autres</emphasis>
et non plus en parallèle.
Il est important d&#8217;arbitrer les choix de <emphasis>design</emphasis> et d&#8217;éviter de bloquer
l&#8217;exécution de vos scripts sans raison explicite.</simpara>
</section>
</section>
<section xml:id="conclusion_3">
<title>Conclusion</title>
<simpara>ECMAScript est un langage bien plus riche, complet et élégant qu&#8217;il n&#8217;y parait.</simpara>
<simpara>Ce chapitre nous a <emphasis role="strong">appris les différentes structures de langage</emphasis>
communes à toutes les environnements comprenant ECMAScript.
Cela s&#8217;applique aussi bien à Node qu&#8217;aux navigateurs web.<?asciidoc-br?>
Je vous invite à revenir à ce chapitre pour vous rafraîchir la mémoire
mais aussi pour <emphasis role="strong">jouer avec les exemples</emphasis> afin de confirmer votre compréhension
du langage.</simpara>
<simpara>Dans le <link linkend="../chapter-04/index.adoc">chapitre suivant</link>, nous allons
<emphasis role="strong">relier ces apprentissages avec Node</emphasis>&#160;— l&#8217;interpréteur et l&#8217;environnement
d&#8217;exécution JavaScript que nous avons appris à installer au
<link linkend="../chapter-02/index.adoc">chapitre 2</link>.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avec_node_js">
<title>Jouer avec Node.js</title>
<simpara>On peut utiliser Node en parlant directement avec l&#8217;interpréteur, en créant
un script ou en programmant une application plus complexe.</simpara>
<simpara>Ce chapitre explique ce qu&#8217;il faut savoir pour interagir avec l&#8217;exécutable
<literal>node</literal>, le fonctionnement des <emphasis>modules</emphasis> et les variables à disposition.</simpara>
<simpara>Nous en profiterons aussi pour passer en revue la variété de modules
disponibles par défaut.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Interagir avec l&#8217;interpréteur Node</simpara>
</listitem>
<listitem>
<simpara>Les modules de base</simpara>
</listitem>
<listitem>
<simpara>Créer ses propres modules</simpara>
</listitem>
<listitem>
<simpara>S&#8217;en sortir quand ça ne se passe pas comme prévu</simpara>
</listitem>
<listitem>
<simpara>Les différences de JavaScript entre Node et les navigateurs web</simpara>
</listitem>
<listitem>
<simpara>Options utiles pour démarrer Node</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>TBD.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<section xml:id="interagir_avec_l_interpréteur_node">
<title>Interagir avec l&#8217;interpréteur Node</title>
<simpara>L'<emphasis role="strong">interpréteur Node</emphasis> est le programme qui nous permet d&#8217;obtenir des résultats
en échange d&#8217;instructions ECMAScript.
Le <emphasis role="strong">terminal</emphasis> est un autre programme qui nous permet de dialoguer avec
un ordinateur et les programmes installés.</simpara>
<simpara>Le <link xl:href="../chapter-02/index.xml">chapitre 2</link> détaille comment installer
<emphasis>Node</emphasis> et un <emphasis>terminal</emphasis> sur son ordinateur.
Il contient également des conseils pour utiliser Node depuis un
navigateur web.
Cela peut rendre l&#8217;accès au terminal plus facile.</simpara>
<simpara>La suite de ce chapitre se base sur le principe que vous avez un terminal
sous le nez, prêt·e à saisir des instructions ECMAScript.</simpara>
<figure>
<title>Exemple de <emphasis>terminal</emphasis> sous macOS.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/terminal.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>terminal</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-04
$ cd $(nodebook dir chapter-04)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="node-version">
<title>Afficher la version</title>
<simpara>Nous pourrions commencer par afficher la version de l&#8217;interpréteur Node.
Nous nous assurons ainsi que nous pouvons interagir avec
l&#8217;interpréteur Node avec succès <emphasis>et</emphasis> que l&#8217;interpréteur
est celui que nous attendons, dans la bonne version.
La version de Node conditionne la liste des fonctionnalités du langage
ECMAScript à disposition.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Syntaxe ECMAScript</title>
<simpara>Le site web <phrase role="URL"><link xl:href="https://node.green">node.green</link></phrase> liste le niveau de compatibilité
des fonctionnalités ECMAScript.</simpara>
<simpara>Cette page vous aidera à comprendre quelles fonctionnalités utiliser en toute
sécurité, version par version de Node.</simpara>
</tip>
<simpara>Une fois votre terminal ouvert, saisissez la commande suivante&#160;:</simpara>
<screen>$ node --version</screen>
<simpara>Le numéro de version de l&#8217;interpréteur Node s&#8217;affiche alors.
Par exemple&#160;: <literal>v10.3.0</literal>.</simpara>
<simpara>Si c&#8217;est ce à quoi vous vous attendiez, nous pouvons passer à la suite.
À l&#8217;inverse, si une erreur se produit ou que le numéro de version
n&#8217;est pas celui que vous attendiez, jetez un œil à la
<link xl:href="../chapter-02/index.xml#install">section <emphasis>Installer Node.js</emphasis></link> du chapitre 2.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-04
$ cd $(nodebook dir chapter-04)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
</section>
<section xml:id="script">
<title>Avec un script</title>
<simpara>L&#8217;exécution d&#8217;un script Node est très certainement la pratique la plus courante.</simpara>
<simpara>L&#8217;interpréteur Node lit le contenu d&#8217;un fichier et exécute les instructions.
L&#8217;interpréteur reste actif jusqu&#8217;à ce que toutes les instructions
soient traitées.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>script.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(2 + 2);
console.log('abc'.toLocaleUpperCase());</programlisting>
</para>
</formalpara>
<simpara>Dans cet exemple, le fichier <literal>script.js</literal> contient <emphasis>deux instructions</emphasis>.
Node les interprète lorsqu&#8217;on lui passe le chemin du fichier en paramètre
dans une invite de commande&#160;:</simpara>
<screen>$ node script.js
4
ABC</screen>
<simpara>Node interprète le contenu du fichier <literal>script.js</literal>.
Il nous rend ensuite la main pour exécuter d&#8217;autres commandes.</simpara>
<simpara>On apprendra à passer des <link linkend="process.argv">arguments d&#8217;exécution</link>
dans la section <link linkend="process">module <literal>process</literal></link>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Performances</phrase> Ressources machine</title>
<simpara>Démarrer un processus Node a un coût incompressible en ressources machine&#160;:
environ <emphasis role="strong">30Mo de RAM</emphasis> et <emphasis role="strong">environ 40 millisecondes de CPU</emphasis> avant d&#8217;exécuter nos
instructions.</simpara>
</tip>
</section>
<section xml:id="repl">
<title>Avec l&#8217;invite de commande interactive (<emphasis>REPL</emphasis>)</title>
<simpara>L&#8217;invite de commande interactive est une manière de parler
à l&#8217;interpréteur Node sans écrire de fichier.</simpara>
<simpara>J&#8217;utilise l&#8217;invite de commande pour tester des idées et des éléments de syntaxe
quand je ne m&#8217;en rappelle plus.</simpara>
<simpara>Le mode interactif s&#8217;active en exécutant Node sans aucun autre argument&#160;:</simpara>
<screen>$ node
&gt; </screen>
<simpara>On notera au passage que l&#8217;invite est préfixée par le caractère <literal>&gt;</literal>
afin de marquer notre présence dans un environnement différent.
On retrouve un comportement similaire dans les invites de commande
des langages Ruby (<literal>irb</literal>), Python (<literal>python</literal>) et PHP (<literal>php -a</literal>)</simpara>
<simpara>Lorsque nous sommes dans l&#8217;interpréteur interactif,
toutes les expressions sont interprétées par Node&#160;:</simpara>
<screen>$ node
&gt; 2 + 2
4
&gt; "abc".toLocaleUpperCase()
'ABC'
&gt; </screen>
<simpara>Des expressions sont réservées pour obtenir de l&#8217;aide, sortir de l&#8217;interpréteur
ou simplement pour nettoyer ce que l&#8217;on voit à l&#8217;écran.
Pour cela on fait appel à l&#8217;instruction <literal>.help</literal>&#160;:</simpara>
<screen>$ node
&gt; .help
.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the repl
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file</screen>
<simpara>Ces touches ou combinaisons de touches sont utiles pour naviguer dans
l&#8217;invite de commande&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> annule
la saisie de la ligne en cours&#160;— c&#8217;est <keycombo><keycap>⌃</keycap><keycap>C</keycap></keycombo> sous macOS&#160;;</simpara>
</listitem>
<listitem>
<simpara>les touches <emphasis>flèche haut</emphasis> (<keycap>&#11014;</keycap>) et <emphasis>flèche bas</emphasis>
(<keycap>&#11015;</keycap>) aident à naviguer dans l&#8217;historique des commandes&#160;;</simpara>
</listitem>
<listitem>
<simpara>la touche <emphasis>tabulation</emphasis> (<keycap>TAB</keycap>) tente de compléter la saisie avec une
expression ou variable connue.</simpara>
</listitem>
</itemizedlist>
<simpara>La touche <keycap>TAB</keycap> complètera automatiquement la saisie,
offrira une liste de choix de complétion&#160;:</simpara>
<screen>$ node
&gt; conso<keycap>TAB</keycap>
&gt; console
&gt; console.<keycap>TAB</keycap>
...
console.assert                console.clear                 console.count
...</screen>
<simpara>On notera que l&#8217;utilisation de <keycap>TAB</keycap> après un caractère <emphasis>point</emphasis> (<literal>.</literal>)
listera l&#8217;intégralité des propriétés de cet objet.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Afficher tous les variables connues</title>
<simpara>L&#8217;utilisation de la touche <keycap>TAB</keycap> affichera <emphasis>toutes</emphasis> les variables connues
de la session interactive en cours.
Il suffit d&#8217;appuyer une ou deux fois sur la touche <keycap>TAB</keycap>
dans une invite vide&#160;:</simpara>
<screen>$ node
&gt; <keycap>TAB</keycap><keycap>TAB</keycap>
Array                         Boolean                       Date
Error                         EvalError                     Function
Infinity                      JSON                          Math
NaN                           Number                        Object
...</screen>
<simpara>C&#8217;est un excellent moyen de <emphasis role="strong">découvrir des éléments du langage</emphasis> qui nous
étaient inconnus jusque-là.</simpara>
</tip>
<simpara>La sortie de l&#8217;invite de commande se fait à l&#8217;aide de
l&#8217;utilisation répétée de la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
(ou <keycombo><keycap>⌃</keycap><keycap>C</keycap></keycombo> sous macOS).
On revient ainsi à l&#8217;état initial où l&#8217;on était avant de
saisir la commande <literal>node</literal>&#160;:</simpara>
<screen>$ node
&gt; 
(To exit, press ^C again or type .exit)
&gt; 
$ </screen>
<simpara>Ce même résultat s&#8217;obtient en saisissant <literal>.exit</literal>
ou en utilisant la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo> (ou <keycombo><keycap>⌃</keycap><keycap>D</keycap></keycombo> sous macOS).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variable magique <literal>_</literal></title>
<simpara>La variable <literal>_</literal> est spécifique à l&#8217;invite de commande Node.
Elle contient systématiquement le _résultat retourné_ par
la dernière évaluation de code&#160;:</simpara>
<screen>$ node
&gt; 2 + 2
4
&gt; _ + 2
6</screen>
<simpara>Cette variable magique est équivalente à la variable <literal>$_</literal> dans la console
des outils de développement des navigateurs web.</simpara>
</tip>
</section>
</section>
<section xml:id="modules-builtin">
<title>Les modules de base</title>
<simpara>Les modules de base <emphasis role="strong">étendent le champ d&#8217;action de Node</emphasis>.
Ils servent d&#8217;interface pour communiquer avec le système d&#8217;exploitation,
le système de fichier, des ressources HTTP et des connexions réseau, entre autres.<?asciidoc-br?>
Ces modules sont inclus avec chaque installation de Node.
On peut donc en bénéficier sans effort supplémentaire.</simpara>
<simpara>Le chargement d&#8217;un module de base s&#8217;effectue en passant son identifiant
à la fonction <literal>require()</literal>.
Cette fonction retourne alors un objet avec un certain nombre de <emphasis>propriétés</emphasis> et
de <emphasis>fonctions</emphasis>.</simpara>
<simpara>Ainsi, on chargera le <link linkend="fs">module <literal>fs</literal></link> (pour <emphasis>file system</emphasis>&#160;— <emphasis>système de fichiers</emphasis>)
afin d&#8217;interagir avec les fichiers et les répertoires présents sur l&#8217;ordinateur&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/read-dir.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');             <co xml:id="CO80-1"/>

fs.readdir('.', (error, files) =&gt; {   <co xml:id="CO80-2"/>
  console.log(files);                 <co xml:id="CO80-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO80-1">
<para>On assigne les fonctions et attributs du module <literal>fs</literal> dans la variable <literal>fs</literal>&#160;— on pourrait l&#8217;appeler autrement si on en avait envie.</para>
</callout>
<callout arearefs="CO80-2">
<para>L&#8217;appel à la fonction <literal>fs.readdir</literal> passe un objet d&#8217;erreur ainsi que la liste des fichiers et répertoires contenus dans le chemin indiqué.</para>
</callout>
<callout arearefs="CO80-3">
<para>Affiche un tableau contenant les noms de fichiers et de répertoires présents dans le dossier courant.</para>
</callout>
</calloutlist>
<simpara>Ces modules de base représentent la pierre angulaire de nos applications Node.
Ils fournissent le nécessaire pour tout faire&#160;!
On apprendra à étendre encore plus le champ des possibles dans
le <link xl:href="../chapter-05/index.xml">chapitre 5</link>
grâce aux <link xl:href="../chapter-05/index.xml#modules">modules npm</link>.</simpara>
<simpara>Les modules de base changent au fil du temps&#160;:
les nouvelles versions de Node ajoutent, corrigent et complètent les modules et
fonctions existantes.
La documentation officielle de Node reflète ces changements et
affiche un indice de stabilité pour savoir à quoi s&#8217;en tenir.</simpara>
<figure>
<title>Documentation du module <literal>fs</literal> et son indice de stabilité.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/api-fs.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>api fs</phrase></textobject>
</mediaobject>
</figure>
<simpara>Exceptionnellement, un module de base (ou une de ses fonctions) peut être supprimé.
L&#8217;équipe de Node annonce ces changements en <emphasis role="strong">dépréciant</emphasis> le module en question&#160;:
le code reste en place et sera supprimé dans une version ultérieure.
En général, c&#8217;est une question de mois voire d&#8217;années.<?asciidoc-br?>
On verra plus loin comment <link linkend="deprecation">afficher les alertes de dépréciation</link>.</simpara>
<figure>
<title>Documentation de la fonction <literal>fs.exists</literal>, affichée comme dépréciée depuis Node v1.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/api-deprecation-fs-exists.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>api deprecation fs exists</phrase></textobject>
</mediaobject>
</figure>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Lecture des indices de stabilité</title>
<simpara>Node communique un indice de stabilité pour les modules de base.
Cette échelle se décompose en trois niveaux&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><emphasis role="strong">déprécié</emphasis></simpara>
</entry>
<entry>
<simpara>Le module sera supprimé dans une prochaine version majeure.
À l&#8217;avenir, il vaut mieux ne pas se compter dessus.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><emphasis role="strong">expérimental</emphasis></simpara>
</entry>
<entry>
<simpara>Le module est en cours de développement.
Une fonctionnalité expérimentale peut changer radicalement entre deux
versions de Node.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><emphasis role="strong">stable</emphasis></simpara>
</entry>
<entry>
<simpara>On peut faire confiance à ce module.
Des choses peuvent changer exceptionnellement mais l&#8217;intention est d&#8217;offrir
une stabilité.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>L&#8217;indice est parfois appliqué à des fonctions dont les attentes
changeraient d&#8217;une version à l&#8217;autre de Node.</simpara>
</note>
<simpara>Les sections suivantes illustrent des usages courants des modules de base
pour mieux comprendre quoi en attendre et comment les utiliser.</simpara>
<section xml:id="console">
<title><literal>console</literal> : déboguer rapidement des variables</title>
<simpara>L&#8217;objet <literal>console</literal> est une boîte à outils pour afficher
ce qu&#8217;il se passe à un moment donné dans un de nos scripts.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>console/log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let count = 0;

count++; count++; count++;

console.log('Valeur de count :', count);</programlisting>
</para>
</formalpara>
<simpara>La fonction écrit les messages et la valeur des variables dans la
<link linkend="process.std">sortie standard</link> du terminal&#160;:</simpara>
<screen>$ node console/log.js
Valeur de count : 3</screen>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variable globale <literal>console</literal></title>
<simpara>Node charge automatiquement le module pour nous et
le rend utilisable à tout moment à travers la variable globale <literal>console</literal>.</simpara>
<simpara>Nul besoin de charger le module manuellement avec <literal>require('console')</literal>.</simpara>
</tip>
<simpara><literal>console.log</literal> sait interpoler les valeurs passées en argument avec le marqueur <literal>%s</literal>.
C&#8217;est utile pour structurer un message complexe en gardant les variables à part&#160;:</simpara>
<formalpara>
<title>console/interpolate.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('Soupe %s et carottes', 'lentilles');  <co xml:id="CO81-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO81-1">
<para>Affiche <literal>Soupe lentilles et carottes</literal>.</para>
</callout>
</calloutlist>
<simpara><literal>%s</literal> ne sait afficher que des chaînes de caractères.
D&#8217;autres marqueurs savent afficher d&#8217;autres types de données&#160;:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>%d</literal></simpara>
</entry>
<entry>
<simpara>Affiche la valeur en tant que <link xl:href="../chapter-03/index.xml#number">nombre</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%j</literal></simpara>
</entry>
<entry>
<simpara>Affiche la valeur en tant que <link xl:href="../chapter-03/index.xml#json">structure JSON</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%O</literal></simpara>
</entry>
<entry>
<simpara>Affiche l&#8217;objet avec une profondeur maximum de 4 éléments.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>%o</literal></simpara>
</entry>
<entry>
<simpara>Idem que <literal>%O</literal> mais sur une profondeur maximum de 2 éléments.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>console.log()</literal></simpara>
</entry>
<entry>
<simpara>Affichage de messages et de variables dans le terminal.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.error()</literal></simpara>
</entry>
<entry>
<simpara>Comportement identique à <literal>console.log()</literal> mais à réserver aux erreurs.
La fonction écrit dans la <link linkend="process.std">sortie erreur</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.dir()</literal></simpara>
</entry>
<entry>
<simpara>Affichage dédié aux objets et tableaux.
On peut paramétrer la profondeur d&#8217;affichage
(par défaut, jusqu&#8217;à 2 niveaux).</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.group()</literal></simpara>
</entry>
<entry>
<simpara>Regroupe visuellement les appels à <literal>console.log</literal> et <literal>console.error</literal>.<?asciidoc-br?>
Un groupe se clôt avec <literal>console.groupEnd()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>console.time()</literal></simpara>
</entry>
<entry>
<simpara>Démarre un chronomètre en lui attribuant un nom.<?asciidoc-br?>
Le chronomètre s&#8217;arrête et sa durée s&#8217;affiche avec <literal>console.timeEnd()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>Console</literal></simpara>
</entry>
<entry>
<simpara>Crée un objet similaire à <literal>console</literal> mais en dirigeant l&#8217;affichage ailleurs
que vers les <link linkend="process.std">flux standards</link>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Web</phrase> Console et navigateurs web</title>
<simpara>L&#8217;objet <literal>console</literal> est originaire du monde des navigateurs web.
C&#8217;est un onglet de la boîte à outils de développement.
On peut y lire des messages placés dans le code JavaScript de la page web.
On l&#8217;utilise aussi pour inspecter et interagir la page avec du code.</simpara>
<figure>
<title>Console web dans le navigateur web Firefox.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-console.png"/>
</imageobject>
<textobject><phrase>web console</phrase></textobject>
</mediaobject>
</figure>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>console</literal></title>
<simpara>La documentation du module <literal>console</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/console.html">nodejs.org/docs/latest-v10.x/api/console.html</link></phrase></simpara>
</note>
</section>
<section xml:id="path">
<title><literal>path</literal> : manipuler des chemins de fichier</title>
<simpara>Le module <literal>path</literal> offre un ensemble de fonctions et de propriétés pour
manipuler et construire des chemins vers des fichiers et répertoires.</simpara>
<simpara>Ces opérations permettent à notre code de fonctionner de manière identique
sur des systèmes d&#8217;exploitation exprimant les chemins de manière différente&#160;—
comme Linux et Windows par exemple.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

console.log(path.dirname('/tmp/package.json'));           <co xml:id="CO82-1"/>
console.log(path.basename('/tmp/package.json'));          <co xml:id="CO82-2"/>
console.log(path.extname('/tmp/package.json'));           <co xml:id="CO82-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO82-1">
<para>Affiche <literal>/tmp</literal>.</para>
</callout>
<callout arearefs="CO82-2">
<para>Affiche <literal>package.json</literal>.</para>
</callout>
<callout arearefs="CO82-3">
<para>Affiche <literal>.json</literal>.</para>
</callout>
</calloutlist>
<simpara>Certaines fonctions comme <literal>path.join</literal> tiennent compte de la nature du système
d&#8217;exploitation.
Le résultat d&#8217;un même appel de fonction sera différent <emphasis>mais</emphasis> correspondra
à la même intention&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/platform.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

console.log(path.sep);                          <co xml:id="CO83-1"/>
console.log(path.join('tmp', 'package.json'));  <co xml:id="CO83-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO83-1">
<para>Affiche <literal>/</literal>&#160;— <literal>\</literal> sous Windows.</para>
</callout>
<callout arearefs="CO83-2">
<para>Affiche <literal>tmp/package.json</literal>&#160;— <literal>tmp\package.json</literal> sous Windows.</para>
</callout>
</calloutlist>
<simpara>On constate que <literal>path.join</literal> assemble les chemins en utilisant la valeur de
<literal>path.sep</literal>.
Ce qui est bien pour nous, c&#8217;est qu&#8217;on n&#8217;a pas besoin d&#8217;y penser&#160;:
<emphasis role="strong">Node se charge de la compatibilité</emphasis> avec le système d&#8217;exploitation.</simpara>
<simpara>La différence de résultats se précise un peu plus lorsque l&#8217;on tente de calculer
des chemins complets, <emphasis>relatifs à notre emplacement</emphasis> actuel&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/relative.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const path = require('path');

const diff = path.relative('/tmp/package.json', '/tmp/source');

console.log(diff);                                                <co xml:id="CO84-1"/>
console.log(path.resolve('/tmp/package.json', '..', './source')); <co xml:id="CO84-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO84-1">
<para>Affiche <literal>../source</literal>&#160;— <literal>..\source</literal> sous Windows&#160;— c&#8217;est le chemin à parcourir pour aller du premier chemin au second chemin.</para>
</callout>
<callout arearefs="CO84-2">
<para>Affiche <literal>/tmp/source</literal>&#160;— <literal>C:\tmp\source</literal> sous Windows&#160;— on constate que le chemin <emphasis>résolu</emphasis> est absolu, et intègre la lettre du lecteur sous Windows.</para>
</callout>
</calloutlist>
<simpara>Les résultats produits par les fonctions du module <literal>path</literal>
se combinent particulièrement bien avec celles <link linkend="fs">du module <literal>fs</literal></link>, pour
accéder aux fichiers en question.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>path.basename()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le nom de fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.dirname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le nom de répertoire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.extname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;extension d&#8217;un fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.isAbsolute()</literal></simpara>
</entry>
<entry>
<simpara>Indique si le chemin est <emphasis>absolu</emphasis> ou non.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.join()</literal></simpara>
</entry>
<entry>
<simpara>Assemble des bouts de chemin.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.parse()</literal></simpara>
</entry>
<entry>
<simpara>Retourne des informations liées à la compréhension d&#8217;un chemin
(extension, nom de fichier, nom de répertoire).</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.relative()</literal></simpara>
</entry>
<entry>
<simpara>Calcule le chemin relatif entre un chemin source et un chemin de destination.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>path.resolve()</literal></simpara>
</entry>
<entry>
<simpara>Calcule un chemin absolu à partir de plusieurs bouts de chemin.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>path.sep</literal></simpara>
</entry>
<entry>
<simpara>Retourne le caractère servant de séparateur de répertoires
pour le système d&#8217;exploitation sur lequel est exécuté le script.
Par exemple <literal>/</literal> pour Linux et macOS&#160;; <literal>\</literal> pour Windows.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Manipuler des chemins Windows sous Linux et vice-versa</title>
<simpara>On peut avoir besoin de manipuler des chemins Windows avec du code
exécuté sur un autre système d&#8217;exploitation comme Linux et macOS.
C&#8217;est exactement ce que proposent les fonctions de <literal>path.win32</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>path/win32.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {join,resolve} = require('path').win32; <co xml:id="CO85-1"/>

console.log(join('tmp', 'package.json'));     <co xml:id="CO85-2"/>
console.log(resolve('C:\\tmp', '../etc'));       <co xml:id="CO85-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO85-1">
<para>On déstructure les fonctions depuis la variante <literal>win32</literal> du module <literal>path</literal>.</para>
</callout>
<callout arearefs="CO85-2">
<para>Affiche <literal>tmp\package.json</literal>.</para>
</callout>
<callout arearefs="CO85-3">
<para>Affiche <literal>C:\etc</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;objet <literal>path.posix</literal> fonctionne de la même manière pour des chemins Linux.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>path</literal></title>
<simpara>La documentation du module <literal>path</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/path.html">nodejs.org/docs/latest-v10.x/api/path.html</link></phrase></simpara>
</note>
</section>
<section xml:id="url">
<title><literal>url</literal> : manipuler des URL</title>
<simpara>Le module <literal>url</literal> offre des outils pour interpréter des URL, les transformer
et les assembler à nouveau sous forme de chaîne de caractères.
La variable <literal>URL</literal> (en majuscules) est disponible de manière globale.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/node.js/');

console.log(example.hostname);  <co xml:id="CO86-1"/>
console.log(example.pathname);  <co xml:id="CO86-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO86-1">
<para>Affiche <literal>oncletom.io</literal>.</para>
</callout>
<callout arearefs="CO86-2">
<para>Affiche <literal>/node.js/</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Web</phrase> Compatibilité avec les navigateurs</title>
<simpara>La classe <literal>URL</literal> que nous utilisons dans Node est la même que dans les
navigateurs web modernes.
Son fonctionnement suit le standard <phrase role="URL"><link xl:href="https://url.spec.whatwg.org">url.spec.whatwg.org</link></phrase>.</simpara>
</tip>
<simpara>L&#8217;objet retourné par le constructeur de <literal>URL</literal> est modifiable.
Il est ainsi possible de modifier les parties de l&#8217;URL qui nous intéressent
et de récupérer une URL sous forme d&#8217;une chaîne de caractères&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/to-string.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/node.js/');
example.pathname = '/';
example.hash = '#top';

console.log(example.toString());  <co xml:id="CO87-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO87-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/#top">oncletom.io/#top</link></literal>&#160;— le chemin et le fragment ont été modifiées.</para>
</callout>
</calloutlist>
<simpara>La fonction <literal>format()</literal> va plus loin que <literal>url.toString()</literal>.
Ses options contrôlent plus finement ce qui sera conservé ou retiré lors
de la conversion en chaîne de caractères&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/format.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {format} = require('url');

const example = new URL('https://user:password@oncletom.io/#top?test=1');
const options = {
  auth: false,
  search: false,
  fragment: false,
};

console.log(format(example, options));  <co xml:id="CO88-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO88-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>&#160;— les identifiants, l&#8217;ancre et les arguments ont été retirés par la fonction <literal>format()</literal>.</para>
</callout>
</calloutlist>
<simpara>Le constructeur <literal>URL</literal> accepte une URL de référence en second argument.
Cette adresse résout un chemin absolu à partir du premier argument&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/resolve.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const url1 = new URL('/node.js/', 'https://oncletom.io');
const url2 = new URL('../', 'https://oncletom.io/node.js/');

console.log(url1.toString()); <co xml:id="CO89-1"/>
console.log(url2.toString()); <co xml:id="CO89-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO89-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/node.js/">oncletom.io/node.js/</link></literal>.</para>
</callout>
<callout arearefs="CO89-2">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>.</para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>url.parse()</literal></simpara>
</entry>
<entry>
<simpara>Transforme une chaîne de caractères en un objet utilisable avec la fonction
<link linkend="http.request"><literal>http.request()</literal></link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>URL</literal></simpara>
</entry>
<entry>
<simpara>Représentation de la structure d&#8217;une URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>classe <literal>URLSearchParams</literal></simpara>
</entry>
<entry>
<simpara>Représentation des paramètres d&#8217;URL.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>URL</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>url.format()</literal></simpara>
</entry>
<entry>
<simpara>Transforme un objet <literal>URL</literal> en chaîne de caractères grâce à des contrôles fins.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>url.toString()</literal></simpara>
</entry>
<entry>
<simpara>Transforme l&#8217;objet <literal>URL</literal> en chaîne de caractères.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.hash</literal></simpara>
</entry>
<entry>
<simpara>Fragment de l&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.hostname</literal></simpara>
</entry>
<entry>
<simpara>Nom de l&#8217;hôte.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.pathname</literal></simpara>
</entry>
<entry>
<simpara>Chemin d&#8217;accès à la ressource.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.protocol</literal></simpara>
</entry>
<entry>
<simpara>Protocole spécifié.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.search</literal></simpara>
</entry>
<entry>
<simpara>Paramètres de l&#8217;URL, caractère <literal>?</literal> inclus.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>url.searchParams</literal></simpara>
</entry>
<entry>
<simpara>Objet permettant de manipuler les paramètres.
Voir ci-après.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Manipuler une URL est plus aisé lorsqu&#8217;elle est structurée sous forme d&#8217;objet.
Les paramètres ne sont pas en reste avec l&#8217;attribut <literal>searchParams</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>url/search-params.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const example = new URL('https://oncletom.io/');
example.searchParams.set('search', 'node.js');

console.log(example.toString());               <co xml:id="CO90-1"/>
console.log(example.searchParams.toString());  <co xml:id="CO90-2"/>

example.searchParams.delete('search');
console.log(example.toString());               <co xml:id="CO90-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO90-1">
<para>Affiche <literal><link xl:href="https://oncletom.io/?search=node.js">oncletom.io/?search=node.js</link></literal>&#160;— représentation de l&#8217;URL complète.</para>
</callout>
<callout arearefs="CO90-2">
<para>Affiche <literal>search=node.js</literal>&#160;— représentation des paramètres seulement.</para>
</callout>
<callout arearefs="CO90-3">
<para>Affiche <literal><link xl:href="https://oncletom.io/">oncletom.io/</link></literal>&#160;— le paramètre <literal>search</literal> et sa valeur ont été supprimés de l&#8217;URL.</para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>URLSearchParams</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>searchParams.append()</literal></simpara>
</entry>
<entry>
<simpara>Ajoute un paramètre à la suite de l&#8217;URL.
Cette fonction permet d&#8217;ajouter plusieurs fois une même clé, peu importe sa valeur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.delete()</literal></simpara>
</entry>
<entry>
<simpara>Supprime un paramètre d&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.get()</literal></simpara>
</entry>
<entry>
<simpara>Retoure la valeur d&#8217;un paramètre donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.getAll()</literal></simpara>
</entry>
<entry>
<simpara>Retourne toutes les valeurs d&#8217;un paramètre donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.has()</literal></simpara>
</entry>
<entry>
<simpara>Retourne <literal>true</literal> si les paramètres contiennent une clé donnée.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.set()</literal></simpara>
</entry>
<entry>
<simpara>Assigne une valeur à un paramètre d&#8217;URL.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>searchParams.toString()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une représentation de l&#8217;objet sous forme d&#8217;une chaîne
de caractères exploitable dans une URL.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>url</literal></title>
<simpara>La documentation du module <literal>url</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/url.html">nodejs.org/docs/latest-v10.x/api/url.html</link></phrase></simpara>
</note>
</section>
<section xml:id="fs">
<title><literal>fs</literal> : manipuler le système de fichiers</title>
<simpara>Le module <literal>fs</literal> est un incontournable.
On y a recours dès que l&#8217;on a besoin de lire ou d&#8217;écrire dans un fichier.
On s&#8217;en sert également pour créer, déplacer ou supprimer des fichiers
et des répertoires.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');
const path = require('path');
const filename = path.join(__dirname, 'package.json');

fs.readFile(filename, (err, content) =&gt; {   <co xml:id="CO91-1"/>
  console.log(String(content));             <co xml:id="CO91-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO91-1">
<para>Lorsque la lecture du fichier aboutit, la <link linkend="callbacks">fonction de callback</link> est appelée avec 2 paramètres&#160;: un objet d&#8217;erreur et le contenu.</para>
</callout>
<callout arearefs="CO91-2">
<para>Affiche le contenu d&#8217;un fichier <literal>package.json</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Variables <literal>__filename</literal> et <literal>__dirname</literal></title>
<simpara><literal>__filename</literal> est une chaîne de caractères faisant référence au fichier actuel.<?asciidoc-br?>
<literal>__dirname</literal> fait référence au répertoire du fichier actuel.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>dirname-filename.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log(__filename);                      <co xml:id="CO92-1"/>
console.log(module.filename === __filename);  <co xml:id="CO92-2"/>

console.log(__dirname);                       <co xml:id="CO92-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO92-1">
<para>Affiche <literal>/&#8230;&#8203;/chapter-04/examples/dirname-filename.js</literal>.</para>
</callout>
<callout arearefs="CO92-2">
<para>Affiche <literal>true</literal>&#160;— ça ne serait pas un <emphasis>raccourci</emphasis> sinon&#160;;-).</para>
</callout>
<callout arearefs="CO92-3">
<para>Affiche <literal>/&#8230;&#8203;/chapter-04/examples</literal>.</para>
</callout>
</calloutlist>
<simpara>Ces variables sont utiles pour opérer sur
des <emphasis>chemins relatifs au fichier actuel</emphasis>.</simpara>
</tip>
<simpara>Dans l&#8217;exemple précédent, nous avons parcouru le contenu d&#8217;un fichier.
<literal>fs.readdir()</literal> parcourt un répertoire&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/ls.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {readdir} = require('fs');

readdir('.', (error, files) =&gt; console.log(files));</programlisting>
</para>
</formalpara>
<simpara>En l&#8217;exécutant, nous obtenons ces résultats&#160;:</simpara>
<screen>$ node fs/ls.js
[ '.eslintrc.yaml',
  'console',
  'debug.txt',
  'deprecation-warning.js',
  'process/env.js',
  ...
  'util' ]</screen>
<simpara>Dans les environnements UNIX, le <literal>.</literal> fait référence au <emphasis>répertoire courant</emphasis>
et <literal>..</literal> au <emphasis>répertoire parent</emphasis>.
C&#8217;est le cas avec Node également.
Par la notion de <emphasis>courant</emphasis> fait référence
à l&#8217;emplacement depuis lequel nous appelons l&#8217;exécutable <literal>node</literal>.<?asciidoc-br?>
Changeons de répertoire pour voir&#160;:</simpara>
<screen>$ cd ../..
$ node chapter-04/examples/fs/ls.js
[ '.eslintignore',
  'README.md',
  'chapter-01'
  'chapter-02'
  ...
  'tests' ]</screen>
<simpara>Les <emphasis>chemins relatifs</emphasis> sont
<emphasis role="strong">relatifs à l&#8217;emplacement depuis lequel on exécute la commande <literal>node</literal></emphasis>.
<literal>__dirname</literal> et de <literal>__filename</literal> sont déterminés par rapport
à l&#8217;emplacement du script qui fait référence à ces variables.</simpara>
<simpara>Puisque les opérations liées au système de fichier ne sont pas immédiates
alors la majorité des fonctions de ce module est <emphasis role="strong">asynchrone</emphasis>.
Leur rapidité d&#8217;exécution varie en fonction du support de stockage utilisé
(à disque, à mémoire), de son usure et de la capacité de traitement du CPU
de l&#8217;ordinateur.</simpara>
<simpara>Cela veut aussi dire que les erreurs sont obtenues de manière asynchrone&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/rmdir.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');

fs.rmdir(__dirname, (error) =&gt; console.error(error.message)); <co xml:id="CO93-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO93-1">
<para>Indique que la suppression n&#8217;a pas abouti car le répertoire en question n&#8217;est pas vide&#160;— et pour cause, c&#8217;est celui qui contient notre fichier d&#8217;exemple.</para>
</callout>
</calloutlist>
<simpara>On peut articuler plusieurs opérations entre elles.
Et utiliser le <link linkend="path">module <literal>path</literal></link> pour construire des chemins robustes
qui fonctionnent avec tous les systèmes d&#8217;exploitation, sans effort.</simpara>
<simpara>L&#8217;exemple suivant crée un répertoire dans un <link linkend="os">dossier temporaire</link>,
effectue une copie de fichier sous un autre nom et liste le contenu du répertoire
une fois la copie effectuée&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>fs/copy-tmp.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {tmpdir} = require('os');
const {join} = require('path');
const fs = require('fs');

const dest_dir = join(tmpdir(), 'test');          <co xml:id="CO94-1"/>

fs.mkdir(dest_dir, (error) =&gt; {                   <co xml:id="CO94-2"/>
  const dest = join(dest_dir, 'example-copy.js');

  fs.copyFile(__filename, dest, (error) =&gt; {      <co xml:id="CO94-3"/>
    if (error === null) {
      console.log(`La copie vers ${dest} s'est bien passée.`);
    }
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO94-1">
<para>On assemble un chemin composé à partir du <link linkend="os">répertoire temporaire</link> fourni par le système d&#8217;exploitation.</para>
</callout>
<callout arearefs="CO94-2">
<para>Crée le répertoire en question.</para>
</callout>
<callout arearefs="CO94-3">
<para>Copie le contenu de ce script d&#8217;exemple vers le répertoire en question en lui attribuant un nouveau nom.</para>
</callout>
</calloutlist>
<warning>
<title><phrase role="RemarquePreTitre">Sécurité</phrase> Utilisateur et permissions</title>
<simpara>Le script Node exécuté a le droit d&#8217;accéder, d&#8217;altérer et de supprimer
au même titre que l&#8217;utilisateur système qui lance le script.</simpara>
<simpara>Ce n&#8217;est pas grave si on exécute du code écrit soi-même.
Il faut être vigilant·e et pouvoir faire confiance si le code exécuté provient
d&#8217;une autre personne.</simpara>
</warning>
<simpara>Si l&#8217;exemple précédent semble agréable à lire, il révèle <emphasis role="strong">deux points de vigilance</emphasis>.</simpara>
<simpara>J&#8217;ai écrit le code de manière <emphasis>optimiste</emphasis>, pour des questions de lisibilité.
Pourtant à chaque opération, il y a une <emphasis role="strong">possibilité d&#8217;erreur</emphasis> à gérer&#160;:
de la création du répertoire jusqu&#8217;à la lecture des fichiers de ce répertoire.<?asciidoc-br?>
Il faudrait vérifier l&#8217;argument <literal>error</literal> à chaque fois et décider quoi faire
en fonction de la <link linkend="errors">nature du problème</link>.</simpara>
<simpara>Je vous invite à modifier le code de l&#8217;exemple précédent
pour afficher la valeur des variables <literal>error</literal> avec à l&#8217;aide des
<link linkend="console">fonctions du module <literal>console</literal></link>.
Certaines erreurs apparaissent quand invoque le script une deuxième fois.</simpara>
<simpara>L&#8217;imbrication des <link linkend="callbacks">fonctions de callback</link> fait qu&#8217;il est
<emphasis role="strong">difficile d&#8217;interrompre une suite de <emphasis>callbacks</emphasis></emphasis>.
Une bonne piste serait d&#8217;appliquer l'<link linkend="util">utilitaire <literal>promisify</literal></link>
sur les fonctions du module <literal>fs</literal> créer une
<link xl:href="../chapter-03/index.xml#promise">chaine de promesses</link>.<?asciidoc-br?>
Nous apprendrons à faire ça dans la section du <link linkend="util">module <literal>util</literal></link>.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>fs.appendFile()</literal></simpara>
</entry>
<entry>
<simpara>Ajoute un contenu à la suite d&#8217;un fichier existant.
Le fichier sera créé le cas échéant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.copyFile()</literal></simpara>
</entry>
<entry>
<simpara>Copie un fichier depuis un emplacement vers un autre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.mkdir()</literal></simpara>
</entry>
<entry>
<simpara>Crée un nouveau répertoire.
Le répertoire parent doit déjà exister.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.readdir()</literal></simpara>
</entry>
<entry>
<simpara>Obtient la liste des fichiers et dossiers contenus dans un répertoire donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.readFile()</literal></simpara>
</entry>
<entry>
<simpara>Lit le contenu d&#8217;un fichier.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.rename()</literal></simpara>
</entry>
<entry>
<simpara>Renomme un fichier ou un répertoire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.rmdir()</literal></simpara>
</entry>
<entry>
<simpara>Supprime un répertoire.
Il doit être vide.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.stat()</literal></simpara>
</entry>
<entry>
<simpara>Retourne des informations à propos d&#8217;un chemin d&#8217;accès&#160;:
est-ce que c&#8217;est un fichier, un répertoire, un lecteur, un lien symbolique etc.
Des attributs clarifient la taille du fichier (en octets), l&#8217;identifiant
système de son propriétaire, la date de création/modification/dernier accès etc.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.symlink()</literal></simpara>
</entry>
<entry>
<simpara>Crée un lien symbolique vers un emplacement.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.truncate()</literal></simpara>
</entry>
<entry>
<simpara>Raccourcit le contenu d&#8217;un fichier à une longueur donnée (en nombre d&#8217;octets).
Si aucun argument n&#8217;est donné, le contenu du fichier est remis à zéro.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.createReadStream()</literal></simpara>
</entry>
<entry>
<simpara>Crée un <link linkend="stream">flux de lecture</link>, pour lire un fichier en continu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>fs.createWriteStream()</literal></simpara>
</entry>
<entry>
<simpara>Crée un <link linkend="stream">flux d&#8217;écriture</link>, pour écrire en continu dans un fichier.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Définition</phrase> Lien symbolique</title>
<simpara>Fichier qui fait référence à un autre fichier&#160;— c&#8217;est comme un <emphasis>alias</emphasis>.
Toutes les modifications effectuées sur le lien symbolique sont
répercutées sur le fichier d&#8217;origine.</simpara>
<simpara>En savoir plus sur <phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Lien_symbolique">fr.wikipedia.org/wiki/Lien_symbolique</link></phrase>.</simpara>
</note>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>fs</literal></title>
<simpara>La documentation du module <literal>fs</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/fs.html">nodejs.org/docs/latest-v10.x/api/fs.html</link></phrase></simpara>
</note>
</section>
<section xml:id="events">
<title><literal>events</literal> : programmer des événements</title>
<simpara>Le module <literal>events</literal> contient le nécessaire pour créer du code communiquant
à l&#8217;aide de fonctions d&#8217;écoute et d&#8217;émission de messages.
C&#8217;est comme un <emphasis>centre de tri postal</emphasis> mais pour Node avec des variables
en guise de courriers.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();               <co xml:id="CO95-1"/>

emitter.on('date', (date) =&gt; {                    <co xml:id="CO95-2"/>
  console.log('Année : %d', date.getFullYear());
});

emitter.emit('date', new Date('2018-03-01'));     <co xml:id="CO95-3"/>
emitter.emit('date', new Date('1983-03-24'));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO95-1">
<para>Création d&#8217;un gestionnaire d&#8217;événements.</para>
</callout>
<callout arearefs="CO95-2">
<para>Enregistrement d&#8217;une fonction d&#8217;écoute&#160;— elle sera exécutée à chaque émission de l&#8217;événement <literal>date</literal>.</para>
</callout>
<callout arearefs="CO95-3">
<para>Émission d&#8217;un événement <literal>date</literal> avec comme argument, un <link xl:href="../chapter-03/index.xml#date">objet <literal>Date</literal></link>.</para>
</callout>
</calloutlist>
<simpara>Un événement se décompose en 3 parties&#160;: les <emphasis role="strong">fonctions d&#8217;écoute</emphasis>,
les <emphasis role="strong">émissions de message</emphasis> et un <emphasis role="strong">objet <literal>EventEmitter</literal></emphasis>
qui fait le lien entre les deux.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Langage</phrase> ECMAScript n&#8217;est pas événementiel</title>
<simpara>Contrairement à ce que l&#8217;on pourrait penser, le langage ECMAScript ne possède
aucune structure de gestion d&#8217;événements.</simpara>
<simpara>S&#8217;il est possible de réagir à des événements dans les navigateurs web,
c&#8217;est grâce à la spécification DOM&#160;— l&#8217;API JavaScript pour manipuler
une structure de document HTML.</simpara>
<simpara>Pour en savoir plus&#160;: <phrase role="URL"><link xl:href="https://developer.mozilla.org/fr/docs/Web/Events">developer.mozilla.org/fr/docs/Web/Events</link></phrase>.</simpara>
</note>
<simpara>On peut décider d&#8217;écouter un événement une seule fois avec <literal>emitter.once()</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/once.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();

emitter.once('date', (date) =&gt; {                  <co xml:id="CO96-1"/>
  console.log('Année : %d', date.getFullYear());
});

emitter.emit('date', new Date('2018-03-01'));
emitter.emit('date', new Date('1983-03-24'));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO96-1">
<para>Bien que l&#8217;événement <literal>date</literal> soit appelé deux fois, la fonction d&#8217;écoute ne réagira qu&#8217;une seule fois.</para>
</callout>
</calloutlist>
<simpara>La fonction <literal>emitter.remove</literal> débranche une fonction d&#8217;écoute selon
les critères de notre choix&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/remove.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');
const emitter = new EventEmitter();
const tick = () =&gt; process.stdout.write('.');
let counter = 0;

setInterval(() =&gt; {
  counter++;
  emitter.emit('date', new Date());             <co xml:id="CO97-1"/>

  if (counter === 5) {
    process.exit(0);
  }
}, 1000);

emitter.on('date', tick);                       <co xml:id="CO97-2"/>
emitter.on('date', () =&gt; {
  if (counter === 3) {
    emitter.removeListener('date', tick);       <co xml:id="CO97-3"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO97-1">
<para>L&#8217;événement <literal>date</literal> est émis toutes les secondes.</para>
</callout>
<callout arearefs="CO97-2">
<para>La fonction <literal>tick</literal> est appelée toutes les secondes.</para>
</callout>
<callout arearefs="CO97-3">
<para>La fonction <literal>tick</literal> est débranchée de l&#8217;événement <literal>date</literal> au bout de 3 incréments.</para>
</callout>
</calloutlist>
<simpara>On remarquera qu&#8217;il faut pouvoir faire référence à la fonction d&#8217;écoute
afin de la débrancher.</simpara>
<simpara>Une utilisation alternative des événements consiste à étendre la classe <literal>EventEmitter</literal>.
Une fois étendue, notre nouvelle classe bénéficiera des méthodes <literal>.on()</literal> etc.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>events/class.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const EventEmitter = require('events');

class Car extends EventEmitter {                                      <co xml:id="CO98-1"/>
  constructor (name) {
    super();                                                          <co xml:id="CO98-2"/>
    this.name = name;
  }

  start () {
    this.emit('action', this, 'démarrer');                            <co xml:id="CO98-3"/>
  }
}

const auto = new Car('Boombo');
auto.on('action', (car, action) =&gt; {                                  <co xml:id="CO98-4"/>
  console.log('La voiture %s est en train de %s', car.name, action);
});

auto.start();</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO98-1">
<para>Extension de la classe <literal>EventEmitter</literal>.</para>
</callout>
<callout arearefs="CO98-2">
<para>L&#8217;utilisation de la fonction spéciale <literal>super()</literal> est indispensable. Elle revient à invoquer <literal>new EventEmitter()</literal> par mécanisme de cascade.</para>
</callout>
<callout arearefs="CO98-3">
<para>La méthode <literal>.start()</literal> encapsule un appel à la méthode <literal>.emit()</literal>.</para>
</callout>
<callout arearefs="CO98-4">
<para>La fonction réagira à l&#8217;émission de l&#8217;événement <literal>action</literal> quand la méthode <literal>.start()</literal> sera appelée.</para>
</callout>
</calloutlist>
<simpara>Ce <emphasis role="strong">mécanisme est utile</emphasis> pour cacher de la complexité applicative,
pour exécuter une fonction plusieurs fois lors d&#8217;un événement donné,
pour exposer une surface d&#8217;action compréhensible,
tout en rendant notre code communiquant vers l&#8217;extérieur.</simpara>
<simpara>Plusieurs modules Node utilisent les événements pour nous permettre d&#8217;y
réagir de manière totalement optionnelle.
Tout ce que l&#8217;on vient d&#8217;expliquer s&#8217;applique à l&#8217;identique
au <link linkend="process">module <literal>process</literal></link>, au <link linkend="child_process">module <literal>child_process</literal></link>
ainsi qu&#8217;au <link linkend="http">module <literal>http</literal></link>.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>EventEmitter</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>on()</literal></simpara>
</entry>
<entry>
<simpara>Enregistre une nouvelle fonction réagissant à un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>once()</literal></simpara>
</entry>
<entry>
<simpara>Enregistre une nouvelle fonction réagissant <emphasis>une seule fois</emphasis> à un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>emit()</literal></simpara>
</entry>
<entry>
<simpara>Émet un événement.
Si un ou plusieurs arguments additonnels sont présents,
ils sont transmis aux fonctions écoutant cet événement.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>eventNames()</literal></simpara>
</entry>
<entry>
<simpara>Liste les événements pour lesquels on a enregistré au moins une fonction d&#8217;écoute.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>listeners()</literal></simpara>
</entry>
<entry>
<simpara>Liste les fonctions écoutant les événements.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>removeListener()</literal></simpara>
</entry>
<entry>
<simpara>Supprime une fonction d&#8217;écoute d&#8217;un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>removeAllListeners()</literal></simpara>
</entry>
<entry>
<simpara>Supprime toutes les fonctions d&#8217;écoute d&#8217;un événement donné.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>setMaxListeners()</literal></simpara>
</entry>
<entry>
<simpara>Change le nombre maximum de fonctions d&#8217;écoute possibles.<?asciidoc-br?>
Par défaut cette limite est de <emphasis>10 fonctions maximum</emphasis>.
Ça paraît peu.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>events</literal></title>
<simpara>La documentation du module <literal>events</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/events.html">nodejs.org/docs/latest-v10.x/api/events.html</link></phrase></simpara>
</note>
</section>
<section xml:id="util">
<title><literal>util</literal> : transformer des <emphasis>callbacks</emphasis> en promesses</title>
<simpara>Le module <literal>util</literal> est un petit module contenant des fonctions utilitaires
qui ne rentreraient pas dans le périmètre d&#8217;autres modules.</simpara>
<simpara>On y trouve <literal>util.format()</literal>, une fonction qui fait beaucoup penser à
<link linkend="console"><literal>console.log</literal></link> mais sans afficher le message&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/format.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {format} = require('util');

const message = format('Il fait %s aujourd\'hui', '☀️ '); <co xml:id="CO99-1"/>
// console.log(message);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO99-1">
<para>Assigne le message formaté dans une variable sans l&#8217;afficher.</para>
</callout>
</calloutlist>
<simpara>Pour afficher la valeur de la variable <literal>message</literal> de l&#8217;exemple précédent,
il suffirait de décommenter la dernière ligne et de (re)lancer le script.</simpara>
<simpara>La fonction <literal>util.debuglog()</literal> formate aussi des messages.
Son affichage est toutefois conditionnel.
Ce qui est pratique quand on veut déboguer des variables sans toucher au code
entre deux exécutions&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/debuglog.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {debuglog} = require('util');
const {cpus} = require('os');

const debug = debuglog('nodebook');                     <co xml:id="CO100-1"/>
const infos = cpus().map(cpu =&gt; cpu.model);

console.log('Cet ordinateur a %d CPU.', infos.length);  <co xml:id="CO100-2"/>
debug('Le modèle de CPU est %s.', infos[0]);            <co xml:id="CO100-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO100-1">
<para>Création d&#8217;un débogueur nommé <literal>nodebook</literal>.</para>
</callout>
<callout arearefs="CO100-2">
<para>Ce message s&#8217;affiche systématiquement quand on exécute le script.</para>
</callout>
<callout arearefs="CO100-3">
<para>Le modèle de CPU sera affiché en invoquant Node en présence de la variable d&#8217;environnement <literal>NODE_DEBUG</literal>.</para>
</callout>
</calloutlist>
<simpara>En lançant la commande suivante, seul le message de <literal>console.log</literal> s&#8217;affiche&#160;:</simpara>
<screen>$ node util/debuglog.js
Cet ordinateur a 4 CPU.</screen>
<simpara>Il nous faut alors utiliser la <link linkend="process.env">variable d&#8217;environnement</link> <literal>NODE_DEBUG</literal>.
En lui attribuant la même valeur que notre débogueur, celui-ci affichera alors
le contenu attendu&#160;:</simpara>
<screen>$ NODE_DEBUG=nodebook node util/debuglog.js
Cet ordinateur a 4 CPU.
NODEBOOK 32486: Le modèle de CPU est Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz.</screen>
<simpara>Si l&#8217;on souhaite avoir plusieurs débogueurs, dans un ou plusieurs scripts,
il suffit de séparer leur nom par une virgule.
Par exemple <literal>NODE_DEBUG=nodebook,test,fromage</literal>.</simpara>
<simpara>Une de mes fonctions préférées est <literal>util.promisify()</literal>.
Elle convertit une fonction acceptant un <link linkend="callback">callback</link> en une fonction
retournant une <link xl:href="../chapter-03/index.xml#promise">promesse</link>.
C&#8217;est d&#8217;autant plus pratique quand on n&#8217;a pas la maitrise du
code source original&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/fs-readdir-promisified.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {promisify} = require('util');
const readdir = promisify(require('fs').readdir);   <co xml:id="CO101-1"/>

readdir(__dirname)                                  <co xml:id="CO101-2"/>
  .then((files) =&gt; console.log(files))              <co xml:id="CO101-3"/>
  .catch((error) =&gt; console.error(error.message));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO101-1">
<para>Assigne une version transformée de <literal>fs.readdir</literal> grâce à <literal>util.promisify</literal>.</para>
</callout>
<callout arearefs="CO101-2">
<para>On ne passe pas de <link linkend="callbacks">callback</link> contrairement à <literal>fs.readdir</literal>.</para>
</callout>
<callout arearefs="CO101-3">
<para>Le résultat de l&#8217;opération est passé à la résolution de promesse.</para>
</callout>
</calloutlist>
<simpara>Ça paraît rien mais ça ouvre un potentiel de simplification énorme pour nous.
Fini l&#8217;argument <literal>error</literal> qui nous embête&#160;: on peut le collecter quand ça
nous arrange grâce à <literal>.catch()</literal>.</simpara>
<simpara>Ça nous évite aussi d&#8217;avoir à écrire toutes ces lignes de code
pour arriver au même résultat&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>util/fs-readdir-promise.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const fs = require('fs');

const readdir = (path) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    fs.readdir(path, (error, files) =&gt; {
      error ? reject(error) : resolve(files);
    });
  });
};

readdir(__dirname)
  .then((files) =&gt; console.log(files))
  .catch((error) =&gt; console.error(error.message));</programlisting>
</para>
</formalpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>util.debuglog()</literal></simpara>
</entry>
<entry>
<simpara>Crée une fonction de débogage similaire à <link linkend="console"><literal>console.error</literal></link>.
Les messages ne s&#8217;afficheront que si la <link linkend="process.env">variable d&#8217;environnement</link>
<literal>NODE_DEBUG</literal> mentionne l&#8217;identifiant du débogueur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.deprecate()</literal></simpara>
</entry>
<entry>
<simpara>Affiche un message d&#8217;avertissement lorsque vous souhaitez retirer une fonction
partagée dans une version ultérieure de votre code.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.format()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une chaîne de caractères formatée, comme <link linkend="console"><literal>console.log</literal></link>
mais sans l&#8217;envoyer dans un <link linkend="process.std">flux de sortie</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>util.promisify()</literal></simpara>
</entry>
<entry>
<simpara>Transforme une <link linkend="callbacks">fonction de callback</link> en
<link xl:href="../chapter-03/index.xml#promise">promesse</link>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>util</literal></title>
<simpara>La documentation du module <literal>util</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/util.html">nodejs.org/docs/latest-v10.x/api/util.html</link></phrase></simpara>
</note>
</section>
<section xml:id="http">
<title><literal>http</literal> : créer et interroger des ressources via le protocole HTTP</title>
<simpara>Le module <literal>http</literal> est un module incontournable de Node.
Il a <emphasis>2 facettes</emphasis>&#160;: la création de <emphasis role="strong">requêtes HTTP</emphasis> et la création
de <emphasis role="strong">serveurs HTTP</emphasis>.
Dans un cas on utilise le protocole HTTP pour <emphasis role="strong">accéder à une ressource distante</emphasis>
et recevoir une <emphasis>réponse</emphasis>.
Dans l&#8217;autre cas on utilise le protocole HTTP pour
<emphasis role="strong">mettre à disposition des ressources</emphasis> et les envoyer en <emphasis>réponse</emphasis>.</simpara>
<simpara>Le module <literal>https</literal> offre exactement les mêmes propriétés.
Il est à privilégier pour établir des connections sécurisées
vers des adresses commençant par <literal>https://</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {get} = require('https');

get('https://oncletom.io/node.js/package.json', (response) =&gt; { <co xml:id="CO102-1"/>
  response.on('data', (data) =&gt; {
    console.log(data.toString());                               <co xml:id="CO102-2"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO102-1">
<para>Initialisation de la requête&#160;— un objet représentant la <link linkend="http.IncomingMessage">réponse du serveur distant</link> nous est transmis. À ce stade là, le serveur n&#8217;a pas encore commencé à renvoyer des données.</para>
</callout>
<callout arearefs="CO102-2">
<para>On en est à l&#8217;étape où on reçoit des données. Le contenu du fichier <literal>package.json</literal> est affiché sous forme de chaînes de caractères.</para>
</callout>
</calloutlist>
<simpara>Ce premier exemple met en lumière <emphasis role="strong">la nature asynchrone et non-bloquante par défaut de Node</emphasis>.
La création d&#8217;une requête et l&#8217;obtention de la réponse sont séparées d&#8217;un délai
variable pendant lequel Node ne bloque pas le reste du code de s&#8217;exécuter.
Les <link linkend="callbacks">callbacks</link> sont appelés lorque l&#8217;action est terminée.</simpara>
<simpara>En regardant le code de l&#8217;exemple précédent, on en apprend un peu plus sur
le fonctionnement d&#8217;une requête HTTP&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>envoi de la requête au serveur distant (<literal>get()</literal>)</simpara>
</listitem>
<listitem>
<simpara>obtention d&#8217;une réponse (objet <literal>response</literal> dans le callback)</simpara>
</listitem>
<listitem>
<simpara>transmission d&#8217;informations (événement <literal>data</literal>)</simpara>
</listitem>
<listitem>
<simpara>clôture de la transmission (événement <literal>end</literal>&#160;— cf. exemple suivant)</simpara>
</listitem>
</orderedlist>
<simpara>Pour rester rapide, Node fait aussi le choix de transmettre les données
au fur et à mesure.
L'<link linkend="events">événement</link> <literal>data</literal> renvoie en réalité environ <literal>10Ko</literal> de données.
L&#8217;exemple précédent a tout renvoyé d&#8217;un coup car le volume des données
était inférieur à 10Ko.</simpara>
<simpara>Voyons maintenant ce qu&#8217;il se passe lorsqu&#8217;on fait appel à un fichier
plus volumineux&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/get.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {get} = require('https');
let count = 0;

get('https://oncletom.io/node.js/index.html', (response) =&gt; {
  response.on('data', (data) =&gt; {
    console.log('Morceau #%d : %iKo', ++count, data.length/1024); <co xml:id="CO103-1"/>
  });

  response.on('end', () =&gt; {                                      <co xml:id="CO103-2"/>
    console.log('Transmission finie en %d morceaux', count);      <co xml:id="CO103-3"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO103-1">
<para>Affiche ce message à chaque morceau/paquet reçu.</para>
</callout>
<callout arearefs="CO103-2">
<para>L&#8217;événement <literal>end</literal> se déclenche lorsque la requête n&#8217;a plus de données à recevoir.</para>
</callout>
<callout arearefs="CO103-3">
<para>Affiche le nombre de morceaux reçus pour obtenir une <emphasis>réponse complète</emphasis>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Paramètre URL</title>
<simpara>Les fonctions <literal>http.get()</literal> et <literal>http.request()</literal> accepte une chaîne de caractères
comme premier argument.</simpara>
<simpara>Il est aussi possible de lui passer un <link linkend="url">objet URL</link>.
Pratique si vous manipulez des URL complexes ou si vous paginez.</simpara>
</tip>
<simpara>En clair, on peut recevoir une réponse en plusieurs fois, petit bout par petit bout.
Les données reçues ne sont pas forcément complètes.
Ça pose problème à des fonctions comme
<link xl:href="../chapter-03/index.xml#json"><literal>JSON.parse</literal></link>.
Elle nécessite un document JSON complet pour produire un résultat.</simpara>
<simpara>Une solution consiste accumuler les morceaux de réponse et à les assembler.
Cela veut aussi dire que l&#8217;on consomme autant de mémoire que l&#8217;on reçoit de données.</simpara>
<simpara>Une autre solution repose sur l&#8217;utilisation des <link linkend="stream">flux de données</link>.
Ils pompent et brassent les données comme du liquide, en consommant peu de mémoire.
On en parle plus loin, dans la section sur le <link linkend="stream">module <literal>streams</literal></link>.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>http.createServer()</literal></simpara>
</entry>
<entry>
<simpara>Initialise un serveur HTTP et fournit une boîte à outil pour
gérer les connexions entrantes via <link linkend="http.Server"><literal>http.Server</literal></link></simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>http.get()</literal></simpara>
</entry>
<entry>
<simpara>Crée une connexion HTTP de type <literal>GET</literal>.
Il s&#8217;agit d&#8217;une version simplifiée de <literal>http.request()</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>http.request()</literal></simpara>
</entry>
<entry>
<simpara>Crée une connexion HTTP du type de son choix (<literal>GET</literal>, <literal>POST</literal>, <literal>OPTION</literal>, <literal>PUT</literal>,
etc.).</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara xml:id="http.request">La fonction <literal>http.request()</literal> gère une requête plus finement.
On peut aisément régler les entêtes, le verbe HTTP et les modalités de
transmission des données.</simpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;envoi d&#8217;une requête <literal>HEAD</literal>.
Ce verbe HTTP indique au serveur distant de répondre avec les métadonnées
de la ressource mais sans les données (<literal>response.on('data')</literal>)&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>http/request.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const https = require('https');
const options = {                                           <co xml:id="CO104-1"/>
  protocol: 'https:',
  host: 'oncletom.io',
  path: '/node.js/package.json',
  method: 'HEAD',
};

const request = https.request(options);
request.setHeader('Accept', 'application/json');            <co xml:id="CO104-2"/>
request.end();                                              <co xml:id="CO104-3"/>

request.on('response', (response) =&gt; {
  const lastModified = response.headers['last-modified'];

  console.log('Dernière modification : %s', lastModified);  <co xml:id="CO104-4"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO104-1">
<para>Construction des paramètres de requête pour <literal>http.request()</literal>.</para>
</callout>
<callout arearefs="CO104-2">
<para>Explicite au serveur distant la nature du contenu que l&#8217;on s&#8217;apprête à recevoir.</para>
</callout>
<callout arearefs="CO104-3">
<para>Déclenche l&#8217;envoi de la requête sur le réseau.</para>
</callout>
<callout arearefs="CO104-4">
<para>Affiche la date de modification de la ressource distante.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Parser, destructurer, combiner</title>
<simpara>La fonction <literal>url.parse</literal> du <link linkend="url">module <literal>url</literal></link> est une alternative à la
construction manuelle de l&#8217;URL.
Les opérateurs de <link xl:href="../chapter-03/index.xml#object">manipulation d&#8217;objets</link>
comme le <emphasis>destructuring</emphasis> et l&#8217;expansion (<emphasis>rest</emphasis>) favorisent
une écriture concise et élégante.</simpara>
<formalpara>
<title>http/request-advanced.js</title>
<para>
<screen>const https = require('https');
const {parse} = require('url');
const url = parse('https://oncletom.io/node.js/package.json');

const request = https.request({ ...url, method: 'HEAD'});</screen>
</para>
</formalpara>
</note>
<simpara>L&#8217;utilisation de <literal>http.get</literal> et <literal>http.request</literal> est simple tant qu&#8217;on évite
la personnalisation de la requête.
On ajoute progressivement de plus en plus de travail pour bien envoyer une
requête, collecter les données et gérer les erreurs.</simpara>
<simpara>Nous verrons comment arriver au même résultat en écrivant moins de code grâce aux
<link xl:href="../chapter-05/index.xml#modules">modules npm</link>
(<link xl:href="../chapter-05/index.xml">chapitre 5</link>).</simpara>
<table xml:id="http.ClientRequest" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.ClientRequest</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>request.on('response')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsque la ressource distante a accepté la requête et s&#8217;apprête
à nous transmettre les données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Délenché lorsque la ressource distante a signalé ne plus avoir de données
à nous transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.end()</literal></simpara>
</entry>
<entry>
<simpara>Termine l&#8217;initialisation et entame la connexion vers la ressource distante.<?asciidoc-br?>
Dans le cas d&#8217;une requête <literal>POST</literal>, <literal>PUT</literal> ou <literal>DELETE</literal>, le premier paramètre
sert à passer une donnée au serveur distant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.getHeader()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la valeur d&#8217;une entête de requête.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.setHeader()</literal></simpara>
</entry>
<entry>
<simpara>Change la valeur d&#8217;une entête de requête.
C&#8217;est une pratique courante pour préciser nos intentions auprès du serveur
distant&#160;: format de fichier à réponse attendu (<literal>Accept</literal>), agent utilisateur
(<literal>User-Agent</literal>), nature des données envoyées (<literal>Content-Type</literal>), etc.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.setTimeout()</literal></simpara>
</entry>
<entry>
<simpara>Définit un chronomètre pour déclarer la requête en erreur si aucune réponse
n&#8217;a été obtenue dans ce délai imparti.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>request.write()</literal></simpara>
</entry>
<entry>
<simpara>Transmets un morceau de contenu vers la ressource distante.
Cette méthode s&#8217;utilise lorsque l&#8217;on effectue un téléversement progressif.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table xml:id="http.IncomingMessage" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.IncomingMessage</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>message.on('data')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché quand un morceau de données est obtenu par le client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché quand nous avons obtenu toutes les données émises par le serveur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.on('readable')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché quand nous pouvons commencer à lire les données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.read()</literal></simpara>
</entry>
<entry>
<simpara>Obtient un morceau de données manuellement&#160;— au lieu d&#8217;utiliser
l&#8217;événement <literal>data</literal>, automatique.
On apprendra mieux comment manipuler cette fonction dans la section
<link linkend="stream">module <literal>streams</literal></link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>message.destroy()</literal></simpara>
</entry>
<entry>
<simpara>Termine la transmission des données sans que le serveur distant
nous aie tout transmis.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>message.headers</literal></simpara>
</entry>
<entry>
<simpara>Objet contenant les entêtes de la réponse&#160;— c&#8217;est le serveur distant qui décide
de leur contenu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>message.statusCode</literal></simpara>
</entry>
<entry>
<simpara>Code qui reflète l&#8217;état de compréhension de notre requête par le serveur distant.
<literal>200</literal> correspond à <emphasis>tout va bien</emphasis>, <literal>404</literal> à <emphasis>ressource introuvable</emphasis>,
<literal>301</literal> à <emphasis>la ressource a été déplacée</emphasis>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Il est temps de nous pencher sur l&#8217;autre versant du module&#160;: la création
d&#8217;un serveur HTTP.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();

server.listen(4000, 'localhost');                                   <co xml:id="CO105-1"/>
server.on('listening', () =&gt; console.log('Serveur démarré !'));     <co xml:id="CO105-2"/>
server.on('request', (request, response) =&gt; {
  console.log('URL demandée : %s %s', request.method, request.url); <co xml:id="CO105-3"/>

  response.end('Coucou');                                           <co xml:id="CO105-4"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO105-1">
<para>Ouverture de l&#8217;acceptation des connexions réseaux sur le port <literal>8000</literal>, uniquement sur la boucle locale (<literal>localhost</literal>)&#160;— une erreur sera affichée si ce port réseau est déjà pris par un autre processus.</para>
</callout>
<callout arearefs="CO105-2">
<para>Affiche <literal>Serveur démarré&#160;!</literal> quand Node a fini de négocier l&#8217;accès aux ressources réseau avec le système d&#8217;exploitation&#160;— à ce stade, le serveur est prêt à recevoir des <emphasis>connexions entrantes</emphasis>.</para>
</callout>
<callout arearefs="CO105-3">
<para>Lorsqu&#8217;une requête arrive, affiche l&#8217;URL demandée par le client.</para>
</callout>
<callout arearefs="CO105-4">
<para>Termine la connexion avec le client&#160;— ce dernier considère sa <emphasis>requête</emphasis> comme terminée.</para>
</callout>
</calloutlist>
<note>
<title><phrase role="RemarquePreTitre">Apparté</phrase> Pourquoi démarrer un serveur HTTP ?</title>
<simpara>Ce concept peut sembler étrange lorsqu&#8217;on vient d&#8217;un autre langage de programmation.
Après tout, Apache ou nginx s&#8217;en chargent très bien pour nous.</simpara>
<simpara>Un serveur HTTP embarqué avec Node, c&#8217;est avant tout
<emphasis role="strong">une question d&#8217;autonomie et d&#8217;interopérabilité</emphasis>.
Pas besoin de module spécial pour Apache.
Pas besoin de module spécial pour nginx.</simpara>
<simpara>On peut développer un site web et le faire fonctionner instantément sans
installer autre chose.
L&#8217;intégration avec un serveur Apache, nginx ou autre nécessite ensuite
très peu d&#8217;efforts.</simpara>
</note>
<simpara>Le serveur se démarre de la même manière qu&#8217;un script ordinaire&#160;:</simpara>
<screen>$ node http/server.js
Serveur démarré !</screen>
<simpara>Le serveur continuera d&#8217;accepter les requêtes entrantes jusqu&#8217;à ce que le
<link linkend="process">processus</link> soit interrompu par une erreur ou par un
<link linkend="signals">signal d&#8217;arrêt</link>
—&#160;en utilisant la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> par exemple.</simpara>
<simpara>Accédez au serveur HTTP en ouvrant un navigateur web comme Firefox ou Chrome
puis en inscrivant <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal> dans la barre d&#8217;adresses.
Dirigez ensuite le navigateur vers <literal><link xl:href="http://localhost:4000/test">localhost:4000/test</link></literal> et observez les
changements.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Parler au serveur depuis le terminal</title>
<simpara>La commande Unix <literal>curl</literal> sait envoyer des requêtes HTTP.
On peut l&#8217;utiliser pour <emphasis>lire</emphasis> les réponses de notre serveur&#160;:</simpara>
<screen>$ curl -i http://localhost:4000/test
$ curl -i -XHEAD http://localhost:4000/test</screen>
<simpara>L&#8217;option <literal>-i</literal> affiche les entêtes de réponse.
C&#8217;est l&#8217;équivalent de <literal>response.headers</literal>.</simpara>
</tip>
<simpara>On a posé les bases d&#8217;un serveur HTTP minimaliste sur lequel on va
pouvoir construire pas à pas tout type d&#8217;applications web.
Et qu&#8217;est-ce qu&#8217;il manque pour en faire un serveur web&#160;?
De pouvoir <emphasis>typer</emphasis> les ressources renvoyées afin qu&#8217;elles soient comprises
par un navigateur web.
c&#8217;est-à-dire de pouvoir signaler que nos réponses contiennent du HTML, du CSS,
des images etc.</simpara>
<simpara>Modifions notre exemple précédent pour renvoyer du HTML&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/web-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  response.end();
});</programlisting>
</para>
</formalpara>
<warning>
<title><phrase role="RemarquePreTitre">Important</phrase> La fonction <literal>response.end()</literal></title>
<simpara>L&#8217;appel de la fonction <literal>response.end()</literal> est impératif.
Sans ça, le client&#160;— ici, le navigateur web&#160;— pense que des données peuvent
encore arriver.</simpara>
<simpara>Si on supprime l&#8217;appel à <literal>response.end()</literal> dans l&#8217;exemple précédent,
l&#8217;indicateur de chargement du navigateur sera actif pendant 2 minutes,
suite à quoi Node interrompra la connexion, considérant qu&#8217;elle met trop
de temps pour aboutir.</simpara>
</warning>
<simpara>Dirigeons notre navigateur web vers <literal><link xl:href="http://localhost:4000">localhost:4000</link></literal> pour observer
le résultat.</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server.js</literal>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server</phrase></textobject>
</mediaobject>
</figure>
<simpara>La balise HTML <literal>&lt;h1&gt;</literal> a bien été prise en compte mais qu&#8217;en est-il du
caractère <literal>Ã&#160;</literal>&#160;?
Il semblerait que le caractère accentué n&#8217;aie pas été compris par le navigateur.</simpara>
<simpara>Si le serveur distant ne précise pas l'<emphasis>encodage des caractères</emphasis>,
le navigateur va l&#8217;interpréter en <link linkend="ascii">ASCII</link>.
Or les éditeurs de code enregistrent les fichiers avec un autre encodage&#160;: <emphasis>UTF-8</emphasis>.
Ce standard englobe les alphabets du monde entier, dont les accents et
caractères diacritique de la langue française.</simpara>
<note xml:id="ascii">
<title><phrase role="RemarquePreTitre">Histoire</phrase> American Standard Code for Information Interchange (<emphasis>ASCII</emphasis>)</title>
<simpara>L&#8217;informatique contemporaine a débuté aux États-Unis.
Les systèmes ont été conçus à cette époque pour comprendre l&#8217;alphabet anglais,
les signes de ponctuations et des caractères spéciaux.
On parle alors de standard d&#8217;encodage ASCII.</simpara>
<simpara>L&#8217;émergence d&#8217;Internet et du World Wide Web ont popularisé l&#8217;encodage UTF-8
afin d&#8217;exprimer de manière commune les caractères spéciaux de toutes les
langues du monde entier.</simpara>
</note>
<simpara>Ce qui nous intéresse, c&#8217;est de pouvoir indiquer aux navigateurs web
quel est l&#8217;encodage utilisé pour qu&#8217;il soit respecté à l&#8217;affichage.<?asciidoc-br?>
Le protocole HTTP dispose justement de l&#8217;entête <literal>Content-Type</literal>&#160;:</simpara>
<formalpara>
<title>http/web-server-ok.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  response.setHeader('Content-Type', 'text/html; charset=utf-8'); <co xml:id="CO106-1"/>

  response.write('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  response.end();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO106-1">
<para>L&#8217;entête HTTP <literal>Content-Type</literal> indique explicitement que le contenu transféré est du HTML, encodé en UTF-8.</para>
</callout>
</calloutlist>
<simpara>Cette indication suffit au navigateur pour décoder les caractères
et les afficher comme on l&#8217;espérait.</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server-ok.js</literal>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server-ok.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server ok</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;étape suivante consisterait à transmettre deux contenus différents selon
l&#8217;URL demandée.
Par exemple, une page HTML et un fichier CSS habillant la page HTML.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10 interactive--endpoint">
<title>http/web-server-routes.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const http = require('http');
const server = http.createServer();
server.listen(4000, 'localhost');

server.on('request', (request, response) =&gt; {
  if (request.url === '/main.css') {                                    <co xml:id="CO107-1"/>
    response.setHeader('Content-Type', 'text/css; charset=utf-8');      <co xml:id="CO107-2"/>
    response.write('body{ font: 18px/1.5 sans-serif; color: blue; }');
    response.end();
  }
  else {
    response.setHeader('Content-Type', 'text/html; charset=utf-8');
    response.write('&lt;link rel="stylesheet" href="/main.css"&gt;');
    response.end('&lt;h1&gt;Salut à toi&lt;/h1&gt;');
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO107-1">
<para>Si la requête entrante indique <literal>/main.css</literal> comme chemin, alors on lui renvoie du contenu interprétable comme du CSS.</para>
</callout>
<callout arearefs="CO107-2">
<para>On indique au client que ce contenu est du texte contenant une feuille de style CSS.</para>
</callout>
</calloutlist>
<simpara>Si tout se passe bien, le chargement de la page HTML devrait déclencher
une requête vers <literal><link xl:href="http://localhost:4000/main.css">localhost:4000/main.css</link></literal>.
La confirmation est visuelle en visitant notre serveur avec un navigateur web&#160;:</simpara>
<figure>
<title>Rendu navigateur de l&#8217;exemple <literal>http/web-server-routes.js</literal>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/web-server-routes.png" contentwidth="65%"/>
</imageobject>
<textobject><phrase>web server routes</phrase></textobject>
</mediaobject>
</figure>
<simpara>On est en situation de contrôle&#160;: on décide de ce qu&#8217;on répond.
C&#8217;est une manière d&#8217;apprendre petit à petit comment fonctionne
le protocole HTTP sur lequel repose une majorité de notre activité sur Internet.</simpara>
<simpara>On a couvert les principes du module <literal>http</literal> mais il reste beaucoup de choses
à apprendre pour développer une application web maintenable.
C&#8217;est justement le sujet du <link linkend="../chapter-07/index.adoc">chapitre 7</link>,
aidé par les <link xl:href="../chapter-05/index.xml#modules">modules npm</link> que l&#8217;on apprendra
à manipuler dans le <link xl:href="../chapter-05/index.xml">chapitre 5</link>.</simpara>
<table xml:id="http.Server" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.Server</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>server.close()</literal></simpara>
</entry>
<entry>
<simpara>Arrête l&#8217;écoute de nouvelles connexions.
Les connexions existantes sont maintenues jusqu&#8217;à ce qu&#8217;elles soient honorées.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.listen()</literal></simpara>
</entry>
<entry>
<simpara>Démarre l&#8217;acceptation des connexions sur un port et une adresse donnée.
Combinée avec <link linkend="os"><literal>os.networkInterfaces()</literal></link>, vous pourriez choisir
sur quelle carte/adresse réseau écouter les requêtes entrantes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('close')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsque le serveur s&#8217;arrête et a terminé d&#8217;honorer toutes les
connexions déjà ouvertes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('connection')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;une nouvelle connexion réseau est établie.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('request')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;une nouvelle requête entrante est adressée au serveur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>server.on('upgrade')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;une requête entrante demande un changement de protocole.
Utilisé pour basculer vers HTTP/2 et
<link xl:href="../chapter-09/index.xml#io-websocket">WebSocket</link>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table xml:id="http.ServerResponse" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de <literal>http.ServerResponse</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>response.on('close')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsque la requête a été terminée par le client,
avant qu&#8217;on ait pu transmettre l&#8217;intégralité des données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.on('finish')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;on a envoyé le dernier morceau de données au client
ayant initié la requête.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.end()</literal></simpara>
</entry>
<entry>
<simpara>Signale au client que nous n&#8217;avons plus de données à transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.getHeader()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la valeur d&#8217;une entête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.removeHeader()</literal></simpara>
</entry>
<entry>
<simpara>Supprime une entête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.setHeader()</literal></simpara>
</entry>
<entry>
<simpara>Assigne une valeur à une entête de la réponse.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.write()</literal></simpara>
</entry>
<entry>
<simpara>Transmet un morceau de données au client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>response.writeHead()</literal></simpara>
</entry>
<entry>
<simpara>Transmet le code de réponse et un ensemble d&#8217;entêtes au client.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>response.statusCode</literal></simpara>
</entry>
<entry>
<simpara>Contient le code de réponse qui sera transmis au client.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>http</literal></title>
<simpara>La documentation du module <literal>http</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/http.html">nodejs.org/docs/latest-v10.x/api/http.html</link></phrase></simpara>
</note>
</section>
<section xml:id="os">
<title><literal>os</literal> : en savoir plus sur les capacités de l&#8217;ordinateur</title>
<simpara>Le module <literal>os</literal> permet d&#8217;en savoir plus sur l&#8217;environnement système dans lequel
le script est exécuté.
Ça permet par exemple de <emphasis role="strong">prendre des décisions par rapport aux ressources disponibles</emphasis>
(mémoire, CPU, réseau, etc.).
Idem par rapport au type de système d&#8217;exploitation (Windows, Linux, etc.).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const os = require('os');

const {username} = os.userInfo();
const cpus = os.cpus().length;

console.log(
  `L'ordinateur a ${cpus} CPU et une session ouverte par ${username}.`  <co xml:id="CO108-1"/>
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO108-1">
<para>Affiche un message du genre <literal>L&#8217;ordinateur a 4 CPU et une session ouverte par anonymous.</literal>.</para>
</callout>
</calloutlist>
<simpara>Node a pour vocation de nous abstraire du système d&#8217;exploitation
en faisant en sorte que notre code fonctionne partout pareil.
Pourtant des situations nous obligent à prendre en compte certains critères
pour déterminer un choix.</simpara>
<simpara>Par exemple, lister les applications installées sur l&#8217;ordinateur.
Leur emplacement d&#8217;installation est différent sous Linux, Windows et macOS.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/apps.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {type} = require('os');
const {readdir} = require('fs');

const log = (label) =&gt; (error, modules) =&gt; {
  console.log('Applications installées sous %s : %j', label, modules);
};

switch (type()) {
  case 'Windows_NT':  readdir('C:\\Program Files', log('Windows')); break;
  case 'Linux':       readdir('/usr/bin', log('Linux')); break;
  case 'Darwin':      readdir('/Applications', log('macOS')); break;
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent se base sur la valeur retournée par la fonction <literal>os.type()</literal>
afin de choisir quel est le bon répertoire à lister.</simpara>
<simpara>On pourrait combiner ce mécanisme avec le <link linkend="child_process">module <literal>child_process</literal></link>,
pour appeler une application système différent pour parvenir
à un résultat similaire.</simpara>
<simpara>À l&#8217;inverse, on peut <emphasis role="strong">accéder à une ressource de manière uniforme</emphasis>, peu importe
le nom du compte utilisateur ou du type de système d&#8217;exploitation.
Nous allons maintenant lire le contenu du fichier <literal>.npmrc</literal>,
le fichier de configuration de
l'<link xl:href="../chapter-05/index.xml#cli">exécutable npm</link>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>os/npmrc.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {homedir} = require('os');
const {readFile} = require('fs');
const {join} = require('path');

const file = join(homedir(), '.npmrc');     <co xml:id="CO109-1"/>

readFile(file, (error, content='') =&gt; {
  if (error &amp;&amp; error.code !== 'ENOENT') {   <co xml:id="CO109-2"/>
    return console.log(error);
  }

  console.log(String(content));
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO109-1">
<para>Construit un chemin agnostique du système d&#8217;exploitation. Par exemple <literal>C:\Users\anonymous\.npmrc</literal> pour Windows, <literal>/Users/anonymous/.npmrc</literal> pour macOS et <literal>/home/anonymous/.npmrc</literal> pour Linux.</para>
</callout>
<callout arearefs="CO109-2">
<para><literal>ENOENT</literal> est un <link linkend="fs.errors">code d&#8217;erreur</link> indiquant que le fichier n&#8217;existe pas&#160;; on se permet de l&#8217;ignorer et de considérer que le fichier est vide.</para>
</callout>
</calloutlist>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>os.arch()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;architecture du CPU.
Les valeurs les plus courantes sont généralement <literal>x64</literal>, <literal>arm</literal> et <literal>arm64</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.cpus()</literal></simpara>
</entry>
<entry>
<simpara>Retourne un tableau contenant des informations à propos du ou des CPU.<?asciidoc-br?>
Parmi ces informations, on retrouve leur modèle, leur fréquence et
le temps passé en attente ou en action depuis le démarrage de l&#8217;ordinateur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.homedir()</literal></simpara>
</entry>
<entry>
<simpara>Retourne le chemin vers le répertoire utilisateur.<?asciidoc-br?>
Équivalent à la variable <literal>$HOME</literal> sous Unix et <literal>%USERPROFILE%</literal> ou <literal>%AppData%</literal>
sous Windows.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.hostname()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;identifiant réseau de la machine.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.networkInterfaces()</literal></simpara>
</entry>
<entry>
<simpara>Retourne un tableau contenant des informations à propos de la ou des
cartes réseaux de l&#8217;ordinateur.<?asciidoc-br?>
Parmi ces informations, on retrouve l&#8217;adresse IP (IPv4, IPv6), l&#8217;adresse MAC
et le masque réseau.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.platform()</literal></simpara>
</entry>
<entry>
<simpara>Retourne la nature du système d&#8217;exploitation.<?asciidoc-br?>
Les valeurs les plus courantes sont généralement <literal>win32</literal>, <literal>linux</literal>, <literal>darwin</literal>
et <literal>freebsd</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.tmpdir()</literal></simpara>
</entry>
<entry>
<simpara>Retourne l&#8217;emplacement du <emphasis>répertoire temporaire</emphasis> fourni par
le système d&#8217;exploitation.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>os.type()</literal></simpara>
</entry>
<entry>
<simpara>Retourne une forme normalisée de nature de système d&#8217;exploitation.
La valeur est équivalente à ce que retournerait la commande Unix <literal>uname -s</literal>.<?asciidoc-br?>
Les valeurs les plus courantes sont généralement
<literal>Windows_NT</literal>, <literal>Linux</literal>, <literal>Darwin</literal> et <literal>FreeBSD</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>os.constants</literal></simpara>
</entry>
<entry>
<simpara>Objet contenant la liste des <link linkend="signals">signaux système</link> et des codes d&#8217;erreur.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>attribut <literal>os.EOL</literal></simpara>
</entry>
<entry>
<simpara>Caractère utilisé pour marquer les fins de ligne.<?asciidoc-br?>
En général le caractère <literal>\n</literal> sous Unix et <literal>\r\n</literal> sous Windows.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>os</literal></title>
<simpara>La documentation du module <literal>os</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/os.html">nodejs.org/docs/latest-v10.x/api/os.html</link></phrase></simpara>
</note>
</section>
<section xml:id="child_process">
<title><literal>child_process</literal> : appeler un exécutable système</title>
<simpara>Le module <literal>child_process</literal> <emphasis role="strong">exécute des programmes externes</emphasis>,
leur transmet des données et consulte leurs résultats via
les <link linkend="process.std">flux standards</link>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('npm --version', (error, stdout, stderr) =&gt; {              <co xml:id="CO110-1"/>
  console.log(`version installée de npm : ${stdout.trim()}`);   <co xml:id="CO110-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO110-1">
<para>L&#8217;exécution de la commande exécute la fonction de callback, avec comme arguments la <link linkend="process.std">sortie standard</link> et la <link linkend="process.std">sortie erreur</link> du processus enfant.</para>
</callout>
<callout arearefs="CO110-2">
<para>Affiche <literal>version installée de npm&#160;: 6.1.0</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;utilisation du module <literal>child_process</literal> se justifie quand un programme
externe fournit une fonctionnalité <emphasis>mais</emphasis> ne s&#8217;interface pas avec Node.
Ou encore quand on veut sortir l&#8217;exécution d&#8217;un script Node du processus courant
pour tirer parti des autres CPU de l&#8217;ordinateur sans ralentir l&#8217;application principale.</simpara>
<simpara>La fonction <literal>child_process.exec</literal> accepte un deuxième argument optionnel.<?asciidoc-br?>
<literal>cwd</literal> (<emphasis>current working directory</emphasis>) est une des options utiles de cet argument.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/ls.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('ls .', {cwd: null}, (error, stdout, stderr) =&gt; {  <co xml:id="CO111-1"/>
  console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO111-1">
<para>On lance la commande système <literal>ls</literal> sans spécifier le répertoire de travail.</para>
</callout>
</calloutlist>
<simpara>Exécutons le script pour observer le résultat&#160;:</simpara>
<screen>$ node child_process/ls.js</screen>
<simpara>Le constat est similaire à celui produit avec le <link linkend="fs">module <literal>fs</literal></link>&#160;:
les fichiers listés sont ceux du <emphasis>répertoire courant</emphasis>,
notre emplacement dans le terminal.</simpara>
<simpara>Modifions maintenant la valeur de l&#8217;option <literal>cwd</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/ls-root.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

exec('ls .', {cwd: '/'}, (error, stdout, stderr) =&gt; { <co xml:id="CO112-1"/>
  console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO112-1">
<para>La valeur de <literal>cwd</literal> est réglée sur <literal>/</literal>, c&#8217;est-à-dire le répertoire racine du système de fichiers.</para>
</callout>
</calloutlist>
<screen>$ node child_process/ls-root.js</screen>
<simpara>La liste des fichiers et répertoires affichée est désormais différente,
même si la commande passée à <literal>child_process.exec</literal> est la même.
<literal>cwd</literal> a changé le <emphasis>répertoire courant</emphasis> l&#8217;espace d&#8217;une commande.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Performance</phrase> commande <literal>ls</literal> vs. <literal>fs.readdir</literal></title>
<simpara>Si on arrive au même résultat en utilisant <literal>exec('ls')</literal>, pourquoi utiliser
la fonction <literal>fs.readdir</literal> du <link linkend="fs">module <literal>fs</literal></link>&#160;?
<literal>fs.readdir</literal> a au moins 3 avantages&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>elle est <emphasis role="strong">plus rapide</emphasis>&#160;— à écrire, à exécuter, à diagnostiquer</simpara>
</listitem>
<listitem>
<simpara>on <emphasis role="strong">économise</emphasis> la création d&#8217;un processus système</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">compatibilité</emphasis> avec <emphasis>tous</emphasis> les systèmes d&#8217;exploitation</simpara>
</listitem>
</orderedlist>
</note>
<simpara><literal>env</literal> est une deuxième option à passer à <literal>child_process.exec</literal>.
Elle redéfinit les <link linkend="process.env">variables d&#8217;environnement</link> utilisables
par le processus enfant&#160;:</simpara>
<formalpara>
<title>child_process/ping.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {exec} = require('child_process');

const env = {PING_COUNT: 1, ...process.env};                        <co xml:id="CO113-1"/>

exec('ping -c $PING_COUNT oncletom.io', {env}, (error, stdout) =&gt; { <co xml:id="CO113-2"/>
  if (error) {
    return console.error(error);
  }

  console.log(stdout);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO113-1">
<para>On transmet les variables d&#8217;environnement existantes au processus enfant.</para>
</callout>
<callout arearefs="CO113-2">
<para>Utilisation de la variable d&#8217;environnement <literal>PING_COUNT</literal> comme valeur d&#8217;option du programme <literal>ping</literal>.</para>
</callout>
</calloutlist>
<simpara>Si on ne transmettait pas les valeurs de <literal>process.env</literal> au processus enfant,
la variable d&#8217;environnement <literal>PATH</literal> ne serait pas définie.
Le processus enfant ne saurait plus où chercher l&#8217;exécutable <literal>ping</literal>.<?asciidoc-br?>
On aurait pu appeler le programme <literal>ping</literal> en utilisant un chemin absolu comme
<literal>/sbin/ping</literal> mais son emplacement varie selon les systèmes d&#8217;exploitation.</simpara>
<screen>$ node child_process/ping.js
PING oncletom.io (185.31.40.11): 56 data bytes
64 bytes from 185.31.40.11: icmp_seq=0 ttl=56 time=23.763 ms

--- oncletom.io ping statistics ---
1 packets transmitted, 1 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 23.763/23.763/23.763/0.000 ms</screen>
<warning>
<title><phrase role="RemarquePreTitre">Compatibilité</phrase> Mon programme ne fonctionne pas sous Windows/Linux/macOS</title>
<simpara>Le programme externe peut ne pas exister sur tous les systèmes d&#8217;exploitation,
voire il ne s&#8217;appelle pas avec les mêmes arguments, ni avec le même nom.</simpara>
<simpara>Une des solutions pourrait consister à se reposer sur le <link linkend="os">module <literal>os</literal></link>
et adapter la commande en fonction du système d&#8217;exploitation.</simpara>
</warning>
<simpara><literal>child_process.spawn</literal> est une <emphasis>autre approche</emphasis> de démarrage
et de communication avec un processus externe.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/spawn.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {spawn} = require('child_process');

const subprocess = spawn('cat', ['package.json']);  <co xml:id="CO114-1"/>

subprocess.stdout.on('data', (data) =&gt; {            <co xml:id="CO114-2"/>
  console.log(String(data));                        <co xml:id="CO114-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO114-1">
<para><literal>cat</literal> est un programme qui affiche le contenu d&#8217;un fichier&#160;— un peu comme <literal>fs.readFile</literal>.</para>
</callout>
<callout arearefs="CO114-2">
<para>Les données retournées par la commande externe se lisent depuis les <link linkend="process.std">flux de sorties</link>.</para>
</callout>
<callout arearefs="CO114-3">
<para>Affiche le contenu du fichier <literal>package.json</literal>.</para>
</callout>
</calloutlist>
<simpara>Les arguments et options à transmettre au programme sont passées dans un tableau.
Dans le programme externe, on y accède avec <link linkend="process.argv"><literal>process.argv</literal></link>.</simpara>
<simpara>Pour transmettre un volume de données plus important en paramètre,
il vaut mieux faire appel appel à la propriété <literal>stdin</literal>.
C&#8217;est un <link linkend="stream">Stream d&#8217;écriture</link> dont le fonctionnement est identique
à <link linkend="process.std"><literal>process.stdin</literal></link>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>child_process/spawn-stdin.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {spawn} = require('child_process');

const subprocess = spawn('tr', ['0-9a-f', 'a-p']);
subprocess.stdout.on('data', (data) =&gt; {
  console.log(String(data));              <co xml:id="CO115-1"/>
});

subprocess.stdin.write('0123 abcd');      <co xml:id="CO115-2"/>
subprocess.stdin.end();                   <co xml:id="CO115-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO115-2">
<para>Écrit <literal>0123 abcd</literal> dans le flux d&#8217;entrée.</para>
</callout>
<callout arearefs="CO115-3">
<para>Signale au processus externe qu&#8217;il n&#8217;aura plus de donnée&#160;— le programme <literal>tr</literal> rendra la main dès qu&#8217;il nous aura tout transmis.</para>
</callout>
<callout arearefs="CO115-1">
<para>Affiche <literal>abcd klmn</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exécutable <literal>tr</literal> (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Tr_(Unix">fr.wikipedia.org/wiki/Tr_(Unix</link>)</phrase>)
substitue des plages de caractères.
On lui a transmis des caractères en entrée et spécifié les plages de traduction
en arguments.
Nous avons utilisé la <link linkend="process.std">sortie standard</link> pour lire les résultats.</simpara>
<simpara>L&#8217;exemple précédent revient au même que cette commande&#160;:</simpara>
<screen>$ echo -n '0123 abcd' | tr 0-9a-f a-p
abcd klmn</screen>
<simpara>Dans ce cas précis, je trouve que le <emphasis>scripting shell</emphasis> est plus concis
que l&#8217;utilisation d&#8217;un script Node faisant appel à <literal>child_process.spawn</literal>.
J&#8217;aurais plutôt tendance à transmettre le résultat de cette commande
à l'<link linkend="process.std">entrée standard</link> d&#8217;un script Node.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>child_process.exec()</literal></simpara>
</entry>
<entry>
<simpara>Exécute une commande et retourne son <emphasis>résultat</emphasis>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>child_process.spawn()</literal></simpara>
</entry>
<entry>
<simpara>Exécute une commande et retourne un objet <link linkend="process">processus</link>.
Le script Node et le nouveau processus peuvent communiquer entre eux.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Propriétés notables de la classe <literal>ChildProcess</literal></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>process.on('message')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsque le processus enfant reçoit un message envoyé par l&#8217;autre script.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.kill()</literal></simpara>
</entry>
<entry>
<simpara>Envoie un <link linkend="signals">signal d&#8217;arrêt</link> au processus enfant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.send()</literal></simpara>
</entry>
<entry>
<simpara>Envoie un message au processus enfant.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>process.stdin</literal></simpara>
<simpara><literal>process.stdout</literal></simpara>
<simpara><literal>process.stderr</literal></simpara>
</entry>
<entry>
<simpara><link linkend="process.std">Flux standards</link> du processus enfant.
Idéal pour envoyer et récupérer des données en continu.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>child_process</literal></title>
<simpara>La documentation du module <literal>child_process</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/child_process.html">nodejs.org/docs/latest-v10.x/api/child_process.html</link></phrase></simpara>
</note>
</section>
<section xml:id="process">
<title><literal>process</literal> : en savoir plus sur le processus en cours</title>
<simpara>La module <literal>process</literal> retourne des informations
sur l&#8217;environnement dans lequel le script est exécuté.
À l&#8217;instar du <link linkend="console">module <literal>console</literal></link>, la variable <literal>process</literal>
est globale.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>process/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const variables = Object.keys(process.env);

console.log(variables);                     <co xml:id="CO116-1"/>
console.log(process.argv);                  <co xml:id="CO116-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO116-1">
<para>Affiche quelque chose comme <literal>['LANG', 'SHELL', 'PATH', 'HOME', 'USER', &#8230;&#8203;]</literal>&#160;— cf.&#160;<link linkend="process.env">variables d&#8217;environnement</link>.</para>
</callout>
<callout arearefs="CO116-2">
<para>Affiche <literal>[ '&#8230;&#8203;/v10.3.0/bin/node', '&#8230;&#8203;/chapter-04/examples/process/intro.js' ]</literal>&#160;— cf.&#160;<link linkend="process.argv">arguments d&#8217;exécution</link>.</para>
</callout>
</calloutlist>
<simpara>Notre code peut être interprété par Node
sur plusieurs types de machines
(ordinateur récent ou fatigué, Raspberry Pi, etc.),
sur différents systèmes d&#8217;exploitation (Windows, Linux, macOS, etc.).<?asciidoc-br?>
Nous avons ainsi tout le loisir d&#8217;adapter notre code
à ces différents environnements.</simpara>
<simpara xml:id="process.env">Les variables d&#8217;environnement sont des
<emphasis role="strong">variables définies au niveau du système d&#8217;exploitation</emphasis>.
Elles contiennent des informations comme le <emphasis>répertoire courant</emphasis>, langue du système d&#8217;exploitation, l&#8217;utilisateur système courant, le type de terminal, les emplacements d&#8217;installation des exécutables, etc.</simpara>
<simpara>On retrouve ces variables sous la forme d&#8217;un
<link xl:href="../chapter-03/index.xml#object">objet ECMAScript</link> nommé <literal>process.env</literal>&#160;:</simpara>
<screen>$ node -p 'process.env'
{ ITERM_PROFILE: 'Default',
  LANG: 'en_GB.UTF-8',
  PWD: '/Users/oncletom/workspace/nodebook',
  SHELL: '/bin/zsh',
  TERM_PROGRAM_VERSION: '3.1.5',
  TERM_PROGRAM: 'iTerm.app',
  ...
}</screen>
<simpara>Nous pouvons créer des variables d&#8217;environnement pour
<emphasis role="strong">transmettre des informations contextuelles</emphasis> à nos programmes&#160;:
des chemins d&#8217;accès à une base de données, si on est en situation de test
ou de production, l&#8217;emplacement de fichiers nécessaires au fonctionnement
de notre programme, etc.</simpara>
<simpara>Par exemple et par convention, la variable <literal>NODE_ENV</literal> est utilisée pour indiquer au programme
s&#8217;il est lancé dans le cadre du développement, de l&#8217;exécution des tests
ou s&#8217;il tourne sur le serveur de production.</simpara>
<variablelist>
<varlistentry>
<term>Variable d&#8217;environnement éphémère</term>
<listitem>
<simpara>La variable n&#8217;existe que pendant la durée de vie du programme.
La définition <literal>CLÉ=valeur</literal> est placée sur la même ligne que le programme
en question.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>$ NODE_ENV=production node process/env.js
mode : production</screen>
<variablelist>
<varlistentry>
<term>Variable d&#8217;environnement permanente</term>
<listitem>
<simpara>La variable existe pendant la durée de la session
grâce à l&#8217;opérateur <literal>export</literal> sous Linux et macOS et
avec l&#8217;opérateur <literal>set</literal> sous Windows.<?asciidoc-br?>
La définition <literal>export CLÉ=valeur</literal> est placée sur sa propre ligne.
Elle restera accessible à <emphasis>tout programme</emphasis> jusqu&#8217;à la fin de la session
ou jusqu&#8217;à ce qu&#8217;on efface la variable.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>$ export NODE_ENV=production
$ node process/env.js
mode : production</screen>
<tip>
<title><phrase role="RemarquePreTitre">Revenir en arrière</phrase> Effacer une variable d&#8217;environnement</title>
<simpara>L&#8217;opérateur <literal>unset</literal> dans un terminal efface le contenu
d&#8217;une variable d&#8217;environnement.</simpara>
<screen>$ export NODE_ENV=dev
$ echo $NODE_ENV
$ unset NODE_ENV
$ echo $NODE_ENV</screen>
</tip>
<simpara>Voici le contenu du fichier <literal>process/env.js</literal> utilisé dans les exemples précédents&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>process/env.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {NODE_ENV} = process.env;

if (NODE_ENV === 'dev') {
  console.log('On est en mode développement.');
}

console.log('mode : %s', NODE_ENV);</programlisting>
</para>
</formalpara>
<simpara>On notera que son comportement s&#8217;adapte à la <emphasis>présence</emphasis> et à la <emphasis>valeur</emphasis>
de la variable d&#8217;environnement <literal>NODE_ENV</literal>.
Elle est accessible dans Node en tant que <literal>process.env.NODE_ENV</literal>.</simpara>
<screen>$ NODE_ENV=dev node process/env.js
On est en mode développement.
mode : dev</screen>
<simpara>Nous verrons d&#8217;autres mises en situation des variables d&#8217;environnement pour
<link xl:href="../chapter-06/index.xml#configuration">configurer une application</link>
dans le <link xl:href="../chapter-06/index.xml">chapitre 6</link> et pour
<link xl:href="../chapter-08/index.xml#debug">déboguer une application en ligne de commande</link>
dans le <link xl:href="../chapter-08/index.xml">chapitre 8</link>.</simpara>
<simpara xml:id="process.argv">Les arguments d&#8217;exécution sont des morceaux d&#8217;information transmis
à un script Node.
On les place à la droite du nom du fichier, comme illustré dans cet exemple&#160;:</simpara>
<screen>$ node print-first.js salut
"salut"</screen>
<simpara>On utilise les <emphasis>arguments</emphasis> pour affiner le comportement d&#8217;un programme.
Je pense par exemple au numéro du port sur lequel lancer un serveur web,
une liste de fichiers à traiter ou
encore de fonctionnalités à activer ou à désactiver.</simpara>
<simpara>Il faut imaginer les arguments comme des <emphasis role="strong">paramètres de fonction</emphasis>,
accessibles dans un programme Node dans
le <link xl:href="../chapter-03/index.xml#array">tableau</link> <literal>process.argv</literal>&#160;:</simpara>
<formalpara>
<title>print-first.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const [,,first_arg] = process.argv;

console.log(first_arg);</programlisting>
</para>
</formalpara>
<simpara>Les deux premiers éléments de <literal>process.argv</literal> sont rarement utilisés.
Ils correspondent respectivement à l&#8217;emplacement de l&#8217;exécutable Node
et à l&#8217;emplacement du script.</simpara>
<simpara>Tous les autres arguments sont accessibles à partir de l&#8217;index 2 de
<literal>process.argv</literal>, dans l&#8217;ordre où ils sont placés&#160;:</simpara>
<screen>$ node print-first.js salut ça va ?
"salut"</screen>
<simpara>Le script <literal>print-first.js</literal> affiche le premier argument.
On peut en conclure que les arguments sont séparés par le caractère "espace".</simpara>
<simpara>Dans le cas où un argument doit contenir un espace, on l&#8217;encadre alors
entre guillemets&#160;:</simpara>
<screen>$ node print-first.js "salut ça va ?" "oui et toi ?"
"salut ça va ?"</screen>
<simpara>L&#8217;inconvénient des arguments est que leur ordre compte
et qu&#8217;il devient difficile de connaitre leur rôle sans se référer
au manuel d&#8217;utilisation.</simpara>
<simpara>C&#8217;est là qu&#8217;interviennent les <emphasis role="strong">options</emphasis>.
Comme le nom l&#8217;indique, ce sont des <emphasis>arguments optionnels</emphasis>.
Elles sont préfixées de deux <emphasis>traits d&#8217;union</emphasis> (<literal>--</literal>).
On peut choisir de leur associer ou non une valeur.</simpara>
<screen>$ node print-text.js "salut ça va ?" --uppercase
SALUT ÇA VA ?</screen>
<simpara>Quand on n&#8217;associe pas de valeur à une option,
on considère qu&#8217;elle équivaut à un <link xl:href="../chapter-03/index.xml#boolean">booléen</link>
de valeur <literal>true</literal>.</simpara>
<formalpara>
<title>print-text.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let [,,text] = process.argv;

if (process.argv.includes('--uppercase')) { <co xml:id="CO117-1"/>
  text = text.toLocaleUpperCase();
}

console.log(text);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO117-1">
<para>La condition est positive si l&#8217;on détecte <literal>--uppercase</literal> dans la liste des arguments.</para>
</callout>
</calloutlist>
<simpara>Les <emphasis>options</emphasis> se combinent très bien avec les <emphasis>arguments</emphasis>.
Il faut les imaginer comme des interrupteurs.</simpara>
<simpara>Dans d&#8217;autres situations, on a besoin de <emphasis role="strong">passer une valeur à une option</emphasis>&#160;:</simpara>
<screen>$ node print-text-limit.js "salut ça va ?" --limit 2
salut ça</screen>
<simpara>L&#8217;exemple précédent illustre la césure d&#8217;une phrase à 2 mots
lorsque l&#8217;option <literal>--limit</literal> est associée à la valeur <literal>2</literal>.</simpara>
<formalpara>
<title>print-text-limit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let [,,text] = process.argv;

const limitIndex = process.argv.indexOf('--limit');     <co xml:id="CO118-1"/>

if (limitIndex &gt;= 2) {
  const limitValue = process.argv[limitIndex + 1];      <co xml:id="CO118-2"/>
  text = text.split(' ').slice(0, limitValue).join(' ');<co xml:id="CO118-3"/>
}

console.log(text);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO118-1">
<para>On récupère l&#8217;index de l&#8217;option <literal>--limit</literal> dans le tableau <literal>process.argv</literal>.</para>
</callout>
<callout arearefs="CO118-2">
<para>On récupère la valeur de l&#8217;élément suivant <literal>--limit</literal> dans <literal>process.argv</literal>.</para>
</callout>
<callout arearefs="CO118-3">
<para>La troncature est paramétrée en fonction de la valeur associée à <literal>--limit</literal>.</para>
</callout>
</calloutlist>
<simpara>Au fond, <emphasis role="strong">les options sont des repères pour les utilisateurs</emphasis> de nos programmes.
Elles leur permettent de s&#8217;interfacer avec leurs fonctionnalités.
Un peu à la manière des différents boutons qu&#8217;on retrouve
en façade d&#8217;une machine à laver.</simpara>
<simpara>L&#8217;exemple suivant est totalement fictif mais il illustre comment
on s&#8217;interfacerait avec une machine à laver
si elle mettait à disposition en ligne de commande&#160;:</simpara>
<screen>$ machine-a-laver P-ECO 40 --fast --no-dry --room kitchen</screen>
<simpara>Ce qu&#8217;il faut en comprendre, c&#8217;est qu&#8217;on démarrerait la machine située
dans la cuisine avec un programme économique <emphasis>et</emphasis> à 40°C,
en activant l&#8217;option rapide et <emphasis>en désactivant</emphasis> l&#8217;option séchage.</simpara>
<simpara>Nous verrons d&#8217;autres mises en situation pour
<link xl:href="../chapter-08/index.xml#argv">passer des paramètres à une application en ligne de commande</link>
dans le <link xl:href="../chapter-08/index.xml">chapitre 8</link>.</simpara>
<simpara xml:id="process.std">Chaque processus système est doté de 3 flux de données&#160;:
le flux d'<emphasis role="strong">entrée</emphasis> (<literal>stdin</literal>), le flux de <emphasis role="strong">sortie</emphasis> (<literal>stdout</literal>)
et le flux d'<emphasis role="strong">erreur</emphasis> (<literal>stderr</literal>).</simpara>
<simpara>Les flux standards peuvent être alimentés pendant la durée de vie du processus
en utilisant peu de mémoire.
On les utilisera pour <emphasis role="strong">passer le résultat d&#8217;un autre programme</emphasis>
à notre script Node, pour <emphasis role="strong">informer l&#8217;utilisateur</emphasis> de notre programme
mais aussi pour <emphasis role="strong">consigner les erreurs</emphasis>.</simpara>
<simpara>Node expose ces flux standards via les variables <literal>process.stdin</literal> (entrée),
<literal>process.stdout</literal> (sortie) et <literal>process.stderr</literal> (erreur).
Chacune de ces variables possède des méthodes pour <emphasis>écouter</emphasis> ce qu&#8217;il s&#8217;y passe,
pour y <emphasis>écrire</emphasis> du contenu et pour <link linkend="stream">rediriger leur flux</link>.</simpara>
<simpara>Commençons par l&#8217;utilisation de <literal>process.stdout</literal> pour écrire un message
dans notre terminal&#160;:</simpara>
<screen>$ node process/stdout.js
un deuxtrois
quatre</screen>
<simpara>Le code source de <literal>process/stdout.js</literal> fait appel à la fonction
<literal>process.stdout.write</literal> par deux fois.<?asciidoc-br?>
On notera que le caractère <literal>\n</literal> symbolise un retour à la ligne
(<literal>\r\n</literal> sous Windows)&#160;:</simpara>
<formalpara>
<title>process/stdout.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.stdout.write('un deux');
process.stdout.write('trois\nquatre');</programlisting>
</para>
</formalpara>
<simpara>Ça ne vous rappelle pas nos précédentes utilisations de la fonction
<literal>console.log</literal>&#160;?
Pas étonnant puisque <literal>console.log</literal> se repose sur <literal>process.stdout</literal>
(voir encadré ci-contre).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Les fonctions <literal>console.log</literal> et <literal>console.error</literal></title>
<simpara>La fonction d&#8217;affichage <literal>console.log</literal> écrit dans le flux de sortie
<literal>process.stdout</literal>.
Sans surprise, <literal>console.error</literal> écrit dans le flux d&#8217;erreur
<literal>process.stderr</literal>.</simpara>
<simpara>Elles ajoutent un <emphasis>retour à la ligne</emphasis> et des options de formatage pour
notre confort.</simpara>
<simpara>On en parlera davantage dans la section <link linkend="console">console</link>.</simpara>
</tip>
<simpara>Les flux de <emphasis>sortie</emphasis> et d'<emphasis>erreur</emphasis> sont manipulables en continu.
Comment&#160;?
À l&#8217;aide d&#8217;utilitaires systèmes existants (<literal>grep</literal>, <literal>awk</literal> etc.)
ou des programmes spécifiques (analyse de <emphasis>logs</emphasis>, etc.).<?asciidoc-br?>
On peut ainsi se concentrer sur un programme qui
fait <emphasis role="strong">juste ce dont on a besoin</emphasis>.
On laisse le travail de spécialisation à d&#8217;autres programmes.</simpara>
<simpara><emphasis>Filtrons</emphasis> la sortie de l&#8217;exemple précédent sans écrire une ligne de code de plus.
Le programme <emphasis>grep</emphasis> (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Grep">fr.wikipedia.org/wiki/Grep</link></phrase>)
est fourni par défaut sur les systèmes Linux et macOS.
Il ne retourne que les lignes qui contiennent le motif
donné en <link linkend="process.arv">argument</link>&#160;:</simpara>
<screen>$ node process/stdout.js | grep 'tre'
qua&lt;i&gt;tre&lt;/i&gt;</screen>
<simpara>La <emphasis>sortie standard</emphasis> de <literal>process/stdout.js</literal> est devenue l'<emphasis>entrée standard</emphasis>
de <literal>grep</literal> grâce à l&#8217;utilisation du <emphasis>pipe</emphasis> (<literal>|</literal>).</simpara>
<simpara>C&#8217;est le moment idéal pour regarder du côté de l'<emphasis>entrée standard</emphasis> de Node.
Implémentons quelque chose qui transforme un message&#160;:</simpara>
<screen>$ echo "un deuxtrois\nquatre" | node process/stdin-uppercase.js
UN DEUXTROIS
QUATRE</screen>
<simpara>On aurait aussi pu réutiliser la <emphasis>sortie</emphasis> de l&#8217;exemple <literal>process/stdout.js</literal>&#160;:</simpara>
<screen>$ node process/stdout.js | node process/stdin-uppercase.js
UN DEUXTROIS
QUATRE</screen>
<simpara>Voyons comment ça fonctionne sous le capot&#160;:</simpara>
<formalpara>
<title>process/stdin-uppercase.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.stdin.on('data', (chunk) =&gt; {             <co xml:id="CO119-1"/>
  const text = chunk.toString();                  <co xml:id="CO119-2"/>

  process.stdout.write(text.toLocaleUpperCase()); <co xml:id="CO119-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO119-1">
<para>Chaque afflux de donnée appelle notre fonction en lui fournissant un seul paramètre contenant les données en question.</para>
</callout>
<callout arearefs="CO119-2">
<para>Le paramètre est de <link linkend="buffer">type Buffer</link>&#160;— on souhaite le transformer en <link xl:href="../chapter-03/index.xml#string">chaîne de caractères</link>.</para>
</callout>
<callout arearefs="CO119-3">
<para>La <emphasis>chaîne de caractères</emphasis> est transformable en majuscules, que l&#8217;on écrit dans le flux de sortie.</para>
</callout>
</calloutlist>
<simpara>Terminons avec la <emphasis>sortie erreur</emphasis> (<literal>process.stderr</literal>).
Elle fonctionne de manière identique à la <emphasis>sortie standard</emphasis> (<literal>process.stdout</literal>).
S&#8217;il n&#8217;y a visuellement aucune différence, la <emphasis>sortie erreur</emphasis> écrit son contenu
dans un canal différent&#160;— un <emphasis>descripteur</emphasis> différent.<?asciidoc-br?>
On l&#8217;utilise pour <emphasis role="strong">déboguer des programmes</emphasis>, pour <emphasis role="strong">lister des erreurs</emphasis> ou des
contenus que l&#8217;on souhaite dissocier de la sortie standard.</simpara>
<simpara>L&#8217;exemple suivant affiche un nombre toutes les demi-secondes et l&#8217;état
du compteur de nombres tous les 10 affichages&#160;:</simpara>
<screen>$ node process/stdout-long.js
7
24
3
19
25
Compteur = 5
22
...</screen>
<note>
<title><phrase role="RemarquePreTitre">Rappel</phrase> Interrompre un programme avec <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></title>
<simpara>Un programme peut être interrompu à tout moment en utilisant la combinaison
de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</simpara>
</note>
<formalpara>
<title>process/stdout-long.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const random = (limit) =&gt; Math.floor(Math.random() * limit);
let counter = 0;

setInterval(() =&gt; {
  counter++;
  process.stdout.write(`${random(30)}\n`);                <co xml:id="CO120-1"/>

  if (Number.isInteger(counter / 5)) {                    <co xml:id="CO120-2"/>
    process.stderr.write(`Compteur = ${counter}\n`);      <co xml:id="CO120-3"/>
  }
}, 500);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO120-1">
<para>Écrit un nombre entre 0 et 30 dans la <emphasis>sortie standard</emphasis>.</para>
</callout>
<callout arearefs="CO120-2">
<para>On vérifie si la valeur du compteur est divisible par 5&#160;— c&#8217;est le cas si la division produit un entier au lieu d&#8217;un nombre à virgule.</para>
</callout>
<callout arearefs="CO120-3">
<para>Affiche <literal>Compteur = 5</literal> puis <literal>Compteur = 10</literal> (et ainsi de suite) dans la <emphasis>sortie erreur</emphasis>.</para>
</callout>
</calloutlist>
<simpara>On pourrait décider de n&#8217;afficher que le flux d&#8217;erreur.
Utilisons l&#8217;opérateur <literal>&gt;</literal> pour <emphasis role="strong">rediriger la sortie standard vers un fichier</emphasis>&#160;:</simpara>
<screen>$ node process/stdout-long.js &gt; stdout.txt
Compteur = 5
Compteur = 10
...</screen>
<simpara>En ouvrant le fichier <literal>stdout.txt</literal>, on voit
la liste de nombre générée par notre programme.</simpara>
<simpara>En maitrisant les flux standards, on peut <emphasis role="strong">créer des programmes modulaires</emphasis>
qui consomment du contenu sans avoir à connaître leur provenance.
<emphasis role="strong">Les données peuvent aller et venir</emphasis> <emphasis>depuis</emphasis> et <emphasis>vers</emphasis> des programmes externes,
des fichiers ou des sites web distants.</simpara>
<simpara>Pour mieux comprendre la logique de <emphasis>flux continu</emphasis> que l&#8217;on vient de découvrir,
je vous invite à lire la section liée au <link linkend="stream">module <literal>stream</literal></link>
de ce même chapitre.
On y détaillera la liste des événements à écouter ainsi que les différentes
méthodes d&#8217;écriture, de pause et de lecture.</simpara>
<simpara xml:id="process.on">Un processus système reçoit et émet des données mais il peut aussi
<emphasis role="strong">écouter des événements</emphasis> grâce à la fonction <literal>process.on</literal>.</simpara>
<formalpara>
<title>process/exit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">console.log('Le processus démarre');

process.on('exit', (code) =&gt; {
  console.log(`Le processus termine avec le code ${code}`);
});</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exemple ci-dessus illustre l&#8217;événement <literal>exit</literal>.
Cet événement est déclenché quand le processus se termine.
À ce titre, un <emphasis role="strong">code de sortie</emphasis> est fourni pour signaler l&#8217;état dans
lequel le programme se termine.
On parlera davantage du code de sortie et de leur signification
dans la section ci-après, <link linkend="process.exit">Mettre fin au processus</link>.</simpara>
<simpara>Essayons de lancer l&#8217;exemple précédent pour voir&#160;:</simpara>
<screen>$ node process/exit.js
Le processus démarre
Le processus termine avec le code 0</screen>
<simpara>Tout s&#8217;est passé correctement.
Le <emphasis>code de sortie</emphasis> équivaut alors à <literal>0</literal>.</simpara>
<simpara>Si le programme venait à se terminer de manière imprévue, nous pouvons
supposer que le code serait différent.<?asciidoc-br?>
L&#8217;exemple suivant provoque volontairement une erreur en faisant
référence à une variable qui n&#8217;existe pas&#160;:</simpara>
<formalpara>
<title>process/exit-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.on('exit', (code) =&gt; {
  console.log(`Le processus termine avec le code ${code}`);
});

/* eslint-disable-next-line no-undef */
console.log(jenexistepas);</programlisting>
</para>
</formalpara>
<simpara>Que verrions-nous si on lançait le script&#160;?</simpara>
<screen>$ node process/exit-error.js
Le processus termine avec le code 1

&lt;i&gt;ReferenceError&lt;/i&gt;: jenexistepas is not defined
    at Object.&lt;anonymous&gt; (/.../examples/process/&lt;i&gt;exit-error.js&lt;/i&gt;:&lt;i&gt;5&lt;/i&gt;:13)</screen>
<simpara>Cette fois-ci le code de sortie est <literal>1</literal>.
Cela correspond à une <emphasis>erreur qui n&#8217;a pas été capturée</emphasis>.
Le reste du message décrit <emphasis>pourquoi</emphasis> l&#8217;erreur s&#8217;est manifestée.</simpara>
<simpara>&lt;i&gt;On peut écouter d&#8217;autres événements liés au cycle de vie de nos applications&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Événements liés au cycle de vie du processus Node</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Événement</entry>
<entry align="left" valign="top">Paramètres</entry>
<entry align="left" valign="top">Raison du déclenchement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>exit</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(exitCode)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le programme se termine et va rendre la main au système d&#8217;exploitation.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>unhandledRejection</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(reason, promise)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Une <link xl:href="../chapter-03/index.xml#promise">promesse</link> a échoué
et n&#8217;a pas été capturée à l&#8217;aide de la méthode <literal>.catch()</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>uncaughtException</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(error)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Une erreur s&#8217;est produite et n&#8217;a pas été capturée.
Si rien n&#8217;est fait, le processus va s&#8217;arrêter avec un code erreur.<?asciidoc-br?>
<emphasis role="strong">Note</emphasis> : il vaut mieux qu&#8217;un programme s&#8217;arrête en cas de problème.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>message</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>(message, sourceSocket)</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Un <link linkend="child_process">processus parent</link> nous envoie un message.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara xml:id="signals">La méthode <literal>process.on</literal> est à l&#8217;écoute des <emphasis role="strong">signaux système</emphasis>.
Vous vous souvenez de la combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
utilisée précédemment&#160;?
Cette combinaison émet en réalité un <emphasis>signal d&#8217;interruption</emphasis>.
Un signal d&#8217;interruption répond à l&#8217;identifiant <literal>SIGINT</literal>.</simpara>
<simpara>Node gère ces signaux pour nous.
Mais on peut aussi se mettre à les écouter et décider de faire autrement
que son comportement par défaut.</simpara>
<simpara>On pourrait par exemple afficher l&#8217;heure de l&#8217;arrêt
du processus avant de rendre la main&#160;:</simpara>
<formalpara>
<title>process/interrupt.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const log = (msg) =&gt; {
  console.log(`${new Date().toISOString()} - ${msg}`);
}

log('Processus démarré');                     <co xml:id="CO121-1"/>

process.on('SIGINT', () =&gt; {                  <co xml:id="CO121-2"/>
  log('Processus terminé (manuellement)');
  process.exit(0);                            <co xml:id="CO121-3"/>
});

setTimeout(() =&gt; {                            <co xml:id="CO121-4"/>
  log('Processus terminé (timeout)');
  process.exit(0);
}, 5000)</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO121-1">
<para>Un premier message s&#8217;affichera au démarrage du script.</para>
</callout>
<callout arearefs="CO121-2">
<para>Cette <link xl:href="../chapter-03/index.xml#function">fonction</link> se déclenche lors de la réception du <emphasis>signal d&#8217;interruption</emphasis> (<literal>SIGINT</literal>), lorsque le système d&#8217;exploitation lui relaie notre combinaison de touches <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</para>
</callout>
<callout arearefs="CO121-3">
<para>La fonction <link linkend="process.exit"><literal>process.exit</literal></link> nous permet de mettre fin manuellement au processus (voir section ci-après).</para>
</callout>
<callout arearefs="CO121-4">
<para>Sinon ce <emphasis>timer</emphasis> mettra fin au processus au bout de 5 secondes.</para>
</callout>
</calloutlist>
<simpara>En pratique le résultat ressemblerait à ceci&#160;:</simpara>
<screen>$ node process/interrupt.js
2018-03-16T10:58:32.855Z - Processus démarré
<keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>
2018-03-16T10:58:40.000Z - Processus terminé (manuellement)</screen>
<simpara>En plus du signal <literal>SIGINT</literal>, Node nous relaie les signaux suivants&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Événements liés aux <emphasis>signaux</emphasis> systèmes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="66.6667*"/>
<thead>
<row>
<entry align="left" valign="top">Événement</entry>
<entry align="left" valign="top">Raison du déclenchement</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>SIGINT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Interruption de la commande en cours</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGTERM</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Demande au processus de s&#8217;arrêter</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGUSR1</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Node reçoit le signal d&#8217;attacher l'<link linkend="inspect">inspecteur</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGHUP</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le terminal est en train d&#8217;être fermé</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>SIGWINCH</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le terminal a été redimensionné</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><literal>SIGKILL</literal> est un autre événement important mais on ne peut <emphasis>pas</emphasis> l&#8217;écouter.
Quand il est émis, le processus doit être arrêté quoiqu&#8217;il arrive.
On l&#8217;utilise justement en cas de dernier recours, quand <literal>SIGINT</literal>
et <literal>SIGTERM</literal> ne font pas effet&#160;; par exemple à cause d&#8217;un bug dans notre code,
ou une ressource qui ne rend pas la main.</simpara>
<simpara xml:id="process.exit"><emphasis role="strong">Un processus Node se termine quand il n&#8217;a plus d&#8217;instructions à exécuter</emphasis>.
Un processus Node peut être terminé via
l'<link linkend="signals">émission d&#8217;un signal extérieur</link>.
Mais on peut aussi y mettre fin <emphasis>de l&#8217;intérieur</emphasis> par l&#8217;intermédiaire
de la fonction <literal>process.exit</literal>.</simpara>
<simpara>On utilise cette fonction car le <emphasis role="strong">programme a atteint son but</emphasis>.
On le fait aussi lorsqu&#8217;on intercepte une erreur en souhaitant
effectuer un <emphasis role="strong">traitement spécial avant de mettre fin au processus</emphasis>.
Il se peut aussi qu&#8217;il vaille mieux terminer l&#8217;application en cas de perte
d&#8217;accès à des ressources distantes (base de données, stockage de fichiers, etc)
et ce, <emphasis role="strong">au lieu de présenter une application web instable</emphasis>.</simpara>
<simpara>L&#8217;exemple suivant illustre que l&#8217;on souhaite clôturer notre script
si on trouve le bon nombre&#160;:</simpara>
<screen>$ node process/exit-devinette.js
JEU ! Trouve le nombre auquel je pense :
10<keycap>ENTER</keycap>
Hm hm, essaie encore.
3<keycap>ENTER</keycap>
Tu as trouvé, bravo !</screen>
<simpara>Dans cet exemple, on écoute l&#8217;utilisateur de manière indéfinie, jusqu&#8217;à ce qu&#8217;il
ou elle trouve le bon nombre.
Lorsque c&#8217;est le cas, on peut interrompre le programme en transmettant
un code de sortie <emphasis>de réussite</emphasis>&#160;: le code <literal>0</literal> (zéro).</simpara>
<formalpara>
<title>process/exit-devinette.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const secret_number = Number(process.argv[2] || 3);       <co xml:id="CO122-1"/>

console.log('JEU ! Trouve le nombre auquel je pense :');
process.stdin.on('data', (chunk) =&gt; {                     <co xml:id="CO122-2"/>
  if (parseFloat(chunk) === secret_number) {
    console.log('Tu as trouvé, bravo !');
    process.exit(0);                                      <co xml:id="CO122-3"/>
  }
  else {
    console.log('Hm hm, essaie encore.');                 <co xml:id="CO122-4"/>
  }
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO122-1">
<para>Le nombre secret est <literal>3</literal> par défaut, sauf s&#8217;il est passé <link linkend="process.argv">en argument</link> du script.</para>
</callout>
<callout arearefs="CO122-2">
<para>Cette fonction est invoquée à chaque saisie suivie de l&#8217;utilisation de la touche <keycap>ENTER</keycap>.</para>
</callout>
<callout arearefs="CO122-3">
<para>Cette ligne met fin immédiatement au script, après avoir affiché un message de félicitations.</para>
</callout>
<callout arearefs="CO122-4">
<para>Ce message s&#8217;affichera à chaque saisie erronée, jusqu&#8217;à ce que le nombre secret soit trouvé.</para>
</callout>
</calloutlist>
<simpara>On pourrait tout à fait imaginer une variante de ce script dans laquelle
on limiterait le nombre de mauvaises réponses.
Lorsqu&#8217;on attendrait cette limite, le programme utiliserait un code de sortie
différent de zéro.
Le code <literal>9</literal> ferait l&#8217;affaire puisqu&#8217;il indique qu&#8217;un <emphasis>argument invalide</emphasis> a été
passé.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> <literal>process.abort</literal></title>
<simpara>À la manière de <literal>process.exit</literal>, le programme est terminé immédiatement.
On l&#8217;utilise quand quelque chose d&#8217;inopiné et nécessitant un débogage
avancé se produit.</simpara>
<simpara>La fonction génère un fichier de débogage qui contient tout le contenu
de la mémoire utilisée par Node (<emphasis>core file</emphasis>).
Ce fichier dit <emphasis>core file</emphasis> s&#8217;analyse avec des logiciels avancés comme <literal>mdb_v8</literal>.</simpara>
</note>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>process</literal></title>
<simpara>La documentation du module <literal>process</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/process.html">nodejs.org/docs/latest-v10.x/api/process.html</link></phrase></simpara>
</note>
</section>
<section xml:id="stream">
<title><literal>stream</literal> : manipuler des flux de données</title>
<simpara>Le module <literal>stream</literal> contient les éléments de base pour lire, écrire et
transformer des flux de données rapidement et avec peu de mémoire.</simpara>
<simpara>Créer ses propres flux est une chose assez compliquée à réaliser.
Dans cette section nous allons nous focaliser sur l&#8217;utilisation des modules
Node qui génèrent de tels flux.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/intro.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');

createReadStream(__filename)                    <co xml:id="CO123-1"/>
  .on('data', (data) =&gt; {                       <co xml:id="CO123-2"/>
    console.log('%d octets lus', data.length);  <co xml:id="CO123-3"/>
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO123-1">
<para>On crée un <emphasis>flux de lecture</emphasis> qui ouvre le fichier courant (<literal>__filename</literal>).</para>
</callout>
<callout arearefs="CO123-2">
<para>Invoque cette fonction à chaque morceau de données lu.</para>
</callout>
<callout arearefs="CO123-3">
<para>Affiche le nombre d&#8217;octets lus dans ce morceau.</para>
</callout>
</calloutlist>
<screen>$ node stream/intro.js
214 octets lus</screen>
<simpara><emphasis role="strong">Un <emphasis>flux</emphasis> de lecture consomme les données en <emphasis>morceaux</emphasis></emphasis>.
Il correspond à une instance de l&#8217;objet <link linkend="stream.Readable"><literal>stream.Readable</literal></link>.
L&#8217;exemple précédent n&#8217;a affiché qu&#8217;un seul morceau car la taille maximale
par défaut est d&#8217;environ <literal>16Ko</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/read.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');

createReadStream(__filename, {highWaterMark: 100})          <co xml:id="CO124-1"/>
  .on('end', () =&gt; console.log('Lecture terminée'))         <co xml:id="CO124-2"/>
  .on('data', (data) =&gt; {
    console.log('%d octets reçus', data.length);
  });</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO124-1">
<para>On spécifie cette fois qu&#8217;on lit <literal>100 octets</literal> à la fois.</para>
</callout>
<callout arearefs="CO124-2">
<para>Affiche <literal>Lecture terminée</literal> lorsque tous les morceaux ont été lus.</para>
</callout>
</calloutlist>
<simpara>L&#8217;option <literal>highWaterMark</literal> adapte le débit de lecture.
Cette valeur est exprimé en <emphasis>octets</emphasis>.
Plus ce nombre est petit, moins Node utilise de mémoire&#160;:</simpara>
<screen>$ node stream/read.js
100 octets lus
100 octets lus
78 octets lus
Lecture terminée</screen>
<simpara>Le mécanisme de flux s&#8217;applique également à l&#8217;écriture.
<emphasis role="strong">Un flux d&#8217;écriture nous permet d&#8217;écrire des données par morceaux</emphasis>.
Il correspond à une instance de l&#8217;objet <link linkend="stream.Writeable"><literal>stream.Writeable</literal></link>.</simpara>
<simpara>L&#8217;exemple suivant illustre une succession d&#8217;écriture dans un même flux&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/write.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createWriteStream, readFile} = require('fs');
const {join} = require('path');

const dest = join(__dirname, 'debug.txt');
const stream = createWriteStream(dest);                       <co xml:id="CO125-1"/>

stream.on('finish', () =&gt; {
  readFile(dest, (error, data) =&gt; console.log(String(data))); <co xml:id="CO125-2"/>
});

stream.write('Hell');                                         <co xml:id="CO125-3"/>
stream.write('o Worl');
stream.end('d!');                                             <co xml:id="CO125-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO125-1">
<para>On crée un <emphasis>flux d&#8217;écriture</emphasis> vers le fichier <literal>stream/debug.txt</literal>.</para>
</callout>
<callout arearefs="CO125-3">
<para>Écrit <literal>Hell</literal> dans le flux.</para>
</callout>
<callout arearefs="CO125-4">
<para>Écrit <literal>d!</literal> dans le flux et signale que nous n&#8217;avons plus de données à transmettre.</para>
</callout>
<callout arearefs="CO125-2">
<para>Lit le contenu du fichier en une seule fois et affiche <literal>Hello World!</literal>.</para>
</callout>
</calloutlist>
<simpara>Cette écriture par morceaux a pour effet de réduire la pression mémoire
exercée par Node sur le système d&#8217;exploitation <emphasis>et</emphasis> pour le reste du programme.
Ce mécanisme est particulièrement adapté lorsque l&#8217;écriture prendra du temps
ou implique un certain volume de données.</simpara>
<simpara><emphasis role="strong">Les flux de lecture et d&#8217;écriture peuvent être combinés</emphasis>.
Les données lues depuis une source (<literal>Readable</literal>) sont redirigées vers
une destination (<literal>Writeable</literal>) à l&#8217;aide de la fonction <literal>pipe()</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream, createWriteStream} = require('fs');
const {join} = require('path');

const source = createReadStream(__filename);                  <co xml:id="CO126-1"/>
const dest = createWriteStream(join(__dirname, 'copie.js'));  <co xml:id="CO126-2"/>

source.pipe(dest)                                             <co xml:id="CO126-3"/>
      .on('finish', () =&gt; console.log('Copie terminée !'));   <co xml:id="CO126-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO126-1">
<para>On crée un flux de lecture.</para>
</callout>
<callout arearefs="CO126-2">
<para>On crée un flux d&#8217;écriture.</para>
</callout>
<callout arearefs="CO126-3">
<para>On <emphasis>redirige</emphasis> le flux de lecture <emphasis>vers</emphasis> le flux d&#8217;écriture.</para>
</callout>
<callout arearefs="CO126-4">
<para>La redirection retourne le flux d&#8217;écriture, que l&#8217;on écoute pour savoir quand il a terminé d&#8217;écrire sur le disque.</para>
</callout>
</calloutlist>
<simpara>Dans cet exemple, nous avons pris deux fichiers comme source de lecture
et destination d&#8217;écriture.
Nous avons assemblé les deux flux avec <literal>pipe()</literal> puis détecté la fin de la copie.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Unix</phrase> Opérateur <emphasis>pipe</emphasis> (<literal>|</literal>)</title>
<simpara>La fonction <literal>stream.pipe()</literal> correspond littéralement à l&#8217;opérateur Unix <literal>|</literal>.</simpara>
<simpara>Les morceaux de données d&#8217;un premier programme sont transmis en entrée à un
second programme.
Ici, le mécanisme s&#8217;applique à des fonctions Node.</simpara>
</note>
<simpara>L&#8217;utilisation de <literal>pipe()</literal> peut paraitre superflue pour copier des fichiers.
À vrai dire, la fonction <link linkend="fs"><literal>fs.copyFile</literal></link> fait exactement la même chose.<?asciidoc-br?>
Le mécanisme de redirection proposé par <literal>pipe()</literal> est modulaire et composable.</simpara>
<simpara>On peut par exemple diriger une source de données vers <emphasis role="strong">plusieurs flux d&#8217;écriture</emphasis>.
En même temps&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe-multi.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream, createWriteStream} = require('fs');
const {join} = require('path');

const read = createReadStream(__filename);
read.on('end', () =&gt; console.log('Lecture terminée !'));

read.pipe(createWriteStream(join(__dirname, 'copie.js')));  <co xml:id="CO127-1"/>
read.pipe(process.stdout);                                  <co xml:id="CO127-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO127-1">
<para>Écrit une copie du fichier comme dans l&#8217;exemple <literal>stream/pipe.js</literal>.</para>
</callout>
<callout arearefs="CO127-2">
<para>Redirige le contenu de lecture vers la <link linkend="process.std">sortie standard</link> de notre terminal.</para>
</callout>
</calloutlist>
<simpara>Cette technique agit comme une gare de triage&#160;: nous avons la liberté
d&#8217;agir sur les données avant de les envoyer vers leur flux d&#8217;écriture distinct.</simpara>
<simpara>On peut aussi <emphasis role="strong">transformer les contenus à la volée</emphasis> en utilisant plusieurs
fois la fonction <literal>pipe()</literal>.
Les données sont passées à des objets capable de lire et d&#8217;écrire des flux.
C&#8217;est le cas du <link linkend="extras">module <literal>zlib</literal></link>, responsable de compresser et de
décompresser des données&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>stream/pipe-transform.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const {createReadStream} = require('fs');
const {createGzip} = require('zlib');

createReadStream(__filename)
  .pipe(createGzip())         <co xml:id="CO128-1"/>
  .pipe(process.stdout);      <co xml:id="CO128-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO128-1">
<para>Compresse les données à la volée.</para>
</callout>
<callout arearefs="CO128-2">
<para>Les données compressées sont transmises à la <link linkend="process.std">sortie standard</link>.</para>
</callout>
</calloutlist>
<simpara>Cet exemple devrait afficher le contenu de notre fichier source avec une taille
réduite grâce à la compression <emphasis>gzip</emphasis>&#160;:</simpara>
<screen>$ node stream/pipe-transform.js</screen>
<simpara>L&#8217;affichage semble bizarre et c&#8217;est normal&#160;: ce sont des données compressées
au format <emphasis>gzip</emphasis>&#160;— un format de compression libre.</simpara>
<simpara>Le programme Unix <literal>gzip</literal> sait décoder des données compressées dans ce format.
Il sait aussi les décoder à la volée avec un <emphasis>pipe</emphasis>&#160;:</simpara>
<screen>$ node stream/pipe-transform.js | gzip</screen>
<simpara>Nous avons vu comment transmettre des <emphasis role="strong">flux de données de manière interopérable</emphasis>
entre un script Node et un programme externe, entre deux programmes externes
et entre deux scripts Node.</simpara>
<table xml:id="stream.Readable" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Principaux attributs d&#8217;un flux <emphasis>Readable</emphasis></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>stream.pipe()</literal></simpara>
</entry>
<entry>
<simpara>Redirige un flux de lecture vers un flux d&#8217;écriture.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('data')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;un morceau de données a été lu.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('error')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorqu&#8217;une erreur se produit.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('end')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;il n&#8217;y a plus de données à lire.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('readable')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsque la lecture de données est prête à démarrer.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<table xml:id="stream.Writeable" tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Principaux attributs d&#8217;un flux <emphasis>Writeable</emphasis></title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>stream.write()</literal></simpara>
</entry>
<entry>
<simpara>Écrit des données dans le flux.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.end()</literal></simpara>
</entry>
<entry>
<simpara>Signale que nous n&#8217;avons plus de données à transmettre.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('drain')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorque la mémoire d&#8217;écriture est vide et prête à accepter
de nouvelles données.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('error')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorqu&#8217;une erreur se produit.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>stream.on('finish')</literal></simpara>
</entry>
<entry>
<simpara>Déclenché lorsqu&#8217;on a clôturé le flux d&#8217;écriture.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>stream</literal></title>
<simpara>La documentation du module <literal>stream</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/stream.html">nodejs.org/docs/latest-v10.x/api/stream.html</link></phrase></simpara>
</note>
</section>
<section xml:id="d_autres_modules_pour_aller_plus_loin">
<title>D&#8217;autres modules pour aller plus loin</title>
<simpara>Node embarque d&#8217;autres modules que ceux listés précédemment.
Ils nécessitent des connaissances sur des sujets bas niveau,
plus proches du matériel et des protocoles réseaux.</simpara>
<variablelist>
<varlistentry>
<term><anchor xml:id="cluster" xreflabel="[cluster]"/>module <literal>cluster</literal></term>
<listitem>
<simpara>Gère la distribution d&#8217;une application sur plusieurs CPU d&#8217;un même ordinateur.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="crypto" xreflabel="[crypto]"/>module <literal>crypto</literal></term>
<listitem>
<simpara>Fonctions cryptographiques pour chiffrer, signer et vérifier des données.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="dgram" xreflabel="[dgram]"/>module <literal>dgram</literal></term>
<listitem>
<simpara>Création et consommation de ressources UDP.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="dns" xreflabel="[dns]"/>module <literal>dns</literal></term>
<listitem>
<simpara>Fonctions de résolution et de lecture d&#8217;enregistrements DNS.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="net" xreflabel="[net]"/>module <literal>net</literal></term>
<listitem>
<simpara>Création et consommation de ressources TCP.<?asciidoc-br?>
Les modules <literal>http</literal>, <literal>https</literal> et <literal>http2</literal> se basent dessus.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="readline" xreflabel="[readline]"/>module <literal>readline</literal></term>
<listitem>
<simpara>Manipulation ligne par ligne d&#8217;un <link linkend="stream">stream</link>.
Le module est particulièrement utilisé dans des
<link xl:href="../chapter-08/index.xml">applications en ligne de commande</link> (chapitre 8),
pour mettre à jour une barre de progression et animer des éléments d&#8217;affichage.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="tty" xreflabel="[tty]"/>module <literal>tty</literal></term>
<listitem>
<simpara>Gestion d&#8217;interface de terminal en mode texte.
Le module <literal>readline</literal> se base dessus.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="v8" xreflabel="[v8]"/>module <literal>v8</literal></term>
<listitem>
<simpara>Fonctions de lecture et d&#8217;écriture d&#8217;instructions de la machine virtuelle V8
dans le processus actuel.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="vm" xreflabel="[vm]"/>module <literal>vm</literal></term>
<listitem>
<simpara>Fonctions de création de nouveaux contextes d&#8217;interprétation de la machine virtuelle V8.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><anchor xml:id="zlib" xreflabel="[zlib]"/>module <literal>zlib</literal></term>
<listitem>
<simpara>Fonctions de compression et de décompression de données (Gzip, Inflate/Deflate).<?asciidoc-br?>
Ces formats sont utilisés pour la compression de requêtes HTTP.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="modules">
<title>Créer ses propres modules Node</title>
<simpara>Le chargement des <link linkend="modules-builtin">modules de base</link> nous a aidé à utiliser
des fonctionnalités fournies directement par Node.
Nous pouvons exploiter ce mécanisme pour
<emphasis role="strong">organiser son code dans plusieurs fichiers</emphasis>.
C&#8217;est un mécanisme comparable à ce que l&#8217;on retrouve en Python (<literal>import</literal>),
PHP (<literal>require</literal>) et Ruby (<literal>require</literal> et <literal>require_relative</literal>).</simpara>
<section xml:id="modules.require">
<title>Importer et exporter des valeurs</title>
<formalpara>
<title>modules/enfant.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;</programlisting>
</para>
</formalpara>
<simpara>Le fichier d&#8217;exemple <literal>modules/enfant.js</literal> contient une variable, <literal>number</literal>.
Essayons de la réutiliser dans le fichier <literal>modules/parent.js</literal>
à l&#8217;aide de la fonction <literal>require()</literal>&#160;:</simpara>
<formalpara>
<title>modules/parent.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant.js');    <co xml:id="CO129-1"/>

console.log(enfant.number);               <co xml:id="CO129-2"/>
console.log(enfant);                      <co xml:id="CO129-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO129-1">
<para>Contrairement aux <link linkend="modules-builtin">modules de base</link>, on passe un <emphasis role="strong">chemin relatif au fichier courant</emphasis>.</para>
</callout>
<callout arearefs="CO129-2">
<para>Est-ce que cela affichera la valeur de la variable <literal>number</literal>&#160;?</para>
</callout>
<callout arearefs="CO129-3">
<para>Mais au fond, que contient notre variable <literal>enfant</literal>&#160;?</para>
</callout>
</calloutlist>
<simpara>Exécutons le fichier <literal>modules/parent.js</literal> avec Node pour en avoir le cœur net&#160;:</simpara>
<screen>$ node modules/parent.js
undefined
{}</screen>
<simpara>De là nous pouvons en tirer un apprentissage important&#160;:
<emphasis role="strong">on ne peut pas voir ce qu&#8217;il y a <emphasis>dans</emphasis> un module depuis <emphasis>l&#8217;extérieur</emphasis></emphasis>.</simpara>
<simpara>Choisissons maintenant ce que l&#8217;on souhaite exporter en assignant
la valeur de notre choix à <literal>module.exports</literal>&#160;:</simpara>
<formalpara>
<title>modules/enfant-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;

module.exports = number;</programlisting>
</para>
</formalpara>
<simpara>Comment est-ce que ça se traduit lorsqu&#8217;on l&#8217;appelle avec <literal>require()</literal>&#160;?</simpara>
<formalpara>
<title>modules/parent-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant-export.js');

console.log(enfant.number);               <co xml:id="CO130-1"/>
console.log(enfant);                      <co xml:id="CO130-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO130-1">
<para>Affiche <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO130-2">
<para>Affiche <literal>42</literal>.</para>
</callout>
</calloutlist>
<simpara><emphasis role="strong"><literal>module.exports</literal> rend visible ce qui est exporté par un module</emphasis>.
Les éléments exportés sont visibles depuis l&#8217;extérieur.
Par défaut, <literal>module.exports</literal> est un objet.</simpara>
<simpara>Essayons maintenant d&#8217;exporter plusieurs valeurs en une seule fois&#160;:</simpara>
<formalpara>
<title>modules/enfant-export-multiple.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;

module.exports.number = number;
module.exports.random = (limit = 100) =&gt; Math.floor(Math.random() * limit);</programlisting>
</para>
</formalpara>
<simpara>Nous avons créé deux nouvelles valeurs&#160;: <literal>number</literal> (un nombre) et
<literal>random</literal> (une fonction).</simpara>
<formalpara>
<title>modules/parent-export-multiple.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const enfant = require('./enfant-export-multiple.js');

console.log(enfant.number);               <co xml:id="CO131-1"/>
console.log(enfant.random());             <co xml:id="CO131-2"/>

module.exports = enfant.random;           <co xml:id="CO131-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO131-1">
<para>Affiche <literal>42</literal>.</para>
</callout>
<callout arearefs="CO131-2">
<para>Affiche un nombre aléatoire entre 0 et 100.</para>
</callout>
<callout arearefs="CO131-3">
<para>Réexporte la fonction <literal>enfant.number</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Exporter un objet</title>
<simpara>L&#8217;utilisation de la syntaxe d&#8217;objet raccourcie évite la répétition
du nom des variables lors de l&#8217;export.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">const number = 42;
const random = (limit = 100) =&gt; Math.floor(Math.random() * limit);

module.exports = {number, random};      <co xml:id="CO132-1"/></programlisting>
<calloutlist>
<callout arearefs="CO132-1">
<para>Liste des valeurs retournée par l&#8217;objet <literal>module.exports</literal>.</para>
</callout>
</calloutlist>
</tip>
<simpara>En résumé, <emphasis role="strong">pour Node tout fichier <literal>.js</literal> est un module</emphasis>.
Le mécanisme d&#8217;import et d&#8217;export est basé sur des chemins de fichiers.
Si on n&#8217;utilise pas de chemin de fichiers, Node pense que l&#8217;on fait
référence à un <link linkend="modules-builtin">module de base</link> ou à un
<link xl:href="../chapter-05/index.xml#modules">module npm</link>
(cf. <link xl:href="../chapter-05/index.xml">chapitre 5</link>).</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Modules <emphasis>CommonJS</emphasis></title>
<simpara>Le mécanisme de modules implémenté dans Node est <emphasis>basé sur</emphasis> la
spécification <emphasis>CommonJS</emphasis>, à peu de choses près.</simpara>
<simpara><phrase role="URL"><link xl:href="http://www.commonjs.org/specs/modules/1.0/">www.commonjs.org/specs/modules/1.0/</link></phrase></simpara>
</note>
</section>
<section xml:id="aller_plus_loin_avec_literal_require_literal">
<title>Aller plus loin avec <literal>require()</literal></title>
<simpara>Lorsqu&#8217;on fait appel à la fonction <literal>require()</literal>, Node effectue la <emphasis role="strong">liste d&#8217;actions</emphasis> suivantes&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>résolution du chemin vers le module en question</simpara>
</listitem>
<listitem>
<simpara>lecture du fichier</simpara>
</listitem>
<listitem>
<simpara>interprétation du code</simpara>
</listitem>
<listitem>
<simpara>exécution du code</simpara>
</listitem>
<listitem>
<simpara>retourne la valeur de <literal>module.exports</literal></simpara>
</listitem>
</orderedlist>
<simpara>L&#8217;utilisation de <literal>require()</literal> est <emphasis role="strong">synchrone</emphasis> et <emphasis role="strong">bloquante</emphasis>.
Si l&#8217;exécution du code dans le module chargé prend du temps
—&#160;code <emphasis>lent</emphasis>, accès à une ressource distante&#160;— le chargement
du module en prendra un coup.</simpara>
<simpara><literal>require()</literal> permet de <emphasis role="strong">charger 3 types de modules</emphasis>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>des <emphasis role="strong">fichiers relatifs au module actuel</emphasis><?asciidoc-br?>
<literal>require('./module.js')</literal> cherchera le fichier <literal>module.js</literal> dans le <emphasis>répertoire courant</emphasis>.
<literal>require('../module.js')</literal> cherchera <literal>module.js</literal> dans le <emphasis>répertoire parent</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>des <emphasis role="strong">modules Node</emphasis><?asciidoc-br?>
Ils sont disponibles avec chaque installation de Node.
On en parle plus en détail dans la section <link linkend="modules-builtin">modules Node</link>
de ce même chapitre.</simpara>
</listitem>
<listitem>
<simpara>des <emphasis role="strong">modules npm</emphasis><?asciidoc-br?>
Ils sont disponibles avec une étape d&#8217;installation supplémentaire.
On en parle plus en détails dans le <link xl:href="../chapter-05/index.xml">chapitre 5</link>
consacré à <emphasis>npm</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Node met les modules en cache</emphasis>.
Si on inclut deux fois le même module, le deuxième import ira directement
à la dernière étape de la <emphasis>liste d&#8217;actions</emphasis>.
Ça implique aussi que si le module modifie une de ses variables privée,
cette modification impactera le deuxième import.</simpara>
<simpara>Voici un module illustrant une variable privée et une variable exportée&#160;:</simpara>
<formalpara>
<title>modules/increment.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let counter = 0;                      <co xml:id="CO133-1"/>

const increment = () =&gt; ++counter;

module.exports = increment;           <co xml:id="CO133-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO133-1">
<para>Variable privée.</para>
</callout>
<callout arearefs="CO133-2">
<para><literal>increment</literal> est rendue publique à cet endroit&#160;— la fonction incrémente la variable privée <literal>counter</literal>.</para>
</callout>
</calloutlist>
<simpara>Nous allons importer ce module par deux fois, dans deux variables différentes&#160;:</simpara>
<formalpara>
<title>modules/double-import.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const first = require('./increment.js');
const second = require('./increment.js');

console.log(first());   <co xml:id="CO134-1"/>
console.log(first());   <co xml:id="CO134-2"/>
console.log(second());  <co xml:id="CO134-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO134-1">
<para>Affiche <literal>1</literal>.</para>
</callout>
<callout arearefs="CO134-2">
<para>Affiche <literal>2</literal>.</para>
</callout>
<callout arearefs="CO134-3">
<para>Affiche <literal>1</literal> ou <literal>3</literal>&#160;?</para>
</callout>
</calloutlist>
<simpara>Quel est le verdict à votre avis&#160;?
Rien ne vaut une vérification, quitte à remettre en question
notre avis initial&#160;:</simpara>
<screen>$ node modules/double-import.js
1
2
3</screen>
<simpara>Il faut garder cette information en tête lorsqu&#8217;on importe un module.
Sans oublier que ce mécanisme se transforme en atout afin de partager
une variable entre plusieurs modules.
Pratique dans le cas d&#8217;un <emphasis>cache de données</emphasis> ou d&#8217;une <emphasis>configuration partagée</emphasis>.</simpara>
<simpara>Enfin, plusieurs <emphasis role="strong">problèmes</emphasis> peuvent apparaitre lors du chargement d&#8217;un module&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le chemin vers le module est erroné&#160;;</simpara>
</listitem>
<listitem>
<simpara>le module contient une erreur de syntaxe.</simpara>
</listitem>
</itemizedlist>
<simpara>Node lancera une <link linkend="errors">exception</link> et
le programme s&#8217;arrêtera aussitôt.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Module <emphasis>modules</emphasis></title>
<simpara>L&#8217;intégralité des variables, fonctions et classes du module <literal>modules</literal>
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</simpara>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/modules.html">nodejs.org/docs/latest-v10.x/api/modules.html</link></phrase></simpara>
</note>
</section>
<section xml:id="esm">
<title>Le futur : les modules ECMAScript</title>
<simpara>Pendant que le mécanisme de modules de Node montait en puissance,
les navigateurs web étaient en attente d&#8217;une solution native.
La spécification des modules ECMAScript a été validée en 2013
mais les navigateurs ont tardé à implémenter le mécanisme.</simpara>
<simpara>La plupart d&#8217;entre eux ont implémenté les modules ECMAScript en 2017.
C&#8217;est le cas du navigateur web Chrome et de
sa <link xl:href="../chapter-01/index.xml#v8">machine virtuelle V8</link>.</simpara>
<warning>
<title><phrase role="RemarquePreTitre">Attention</phrase> Fonctionnalité expérimentale</title>
<simpara>Si la syntaxe des modules ECMAScript est standardisée,
ce n&#8217;est pas encore aussi stable du côté de Node.</simpara>
<simpara>Les modules ECMAScript sont suffixés de l&#8217;extension <literal>.mjs</literal>
et nécessitent l&#8217;utilisation de l'<link linkend="options">option de démarrage</link>
<literal>--experimental-modules</literal>.</simpara>
</warning>
<simpara>Reprenons l&#8217;exemple <literal>modules/increment.js</literal> pour le
transformer en module ECMAScript&#160;:</simpara>
<formalpara>
<title>modules/increment.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let counter = 0;

export default () =&gt; ++counter;           <co xml:id="CO135-1"/>
export const reset = () =&gt; counter = 0;   <co xml:id="CO135-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO135-1">
<para>Export <emphasis>par défaut</emphasis>.</para>
</callout>
<callout arearefs="CO135-2">
<para>Export <emphasis>nommé</emphasis>.</para>
</callout>
</calloutlist>
<simpara>La syntaxe <literal>export</literal> sert à exporter des variables.
Elle se combine avec <literal>import</literal>&#160;:</simpara>
<formalpara>
<title>modules/ecmascript.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import increment from './increment.js';     <co xml:id="CO136-1"/>

console.log(increment());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO136-1">
<para>On n&#8217;importe ici que la <emphasis>valeur par défaut</emphasis>.</para>
</callout>
</calloutlist>
<simpara>Il ne nous reste maintenant plus qu&#8217;à exécuter notre script <literal>.mjs</literal>
pour observer le résultat.
On notera l&#8217;utilisation de <literal>--experimental-modules</literal>&#160;:</simpara>
<screen>$ node --experimental-modules modules/ecmascript.mjs
(node:35074) ExperimentalWarning: The ESM module loader is experimental.
1</screen>
<simpara>Reprenons cet exemple pour <emphasis>importer plusieurs exports d&#8217;un coup</emphasis>&#160;:</simpara>
<formalpara>
<title>modules/ecmascript-multiple.mjs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import increment, {reset} from './increment.mjs'; <co xml:id="CO137-1"/>

increment();
console.log(increment());

reset();                                          <co xml:id="CO137-2"/>
console.log(increment());</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO137-1">
<para>On importe la <emphasis>valeur par défaut</emphasis> ainsi qu&#8217;une <emphasis>valeur nommée</emphasis>&#160;— c&#8217;est particulièrement pratique pour sélectionner avec finesse ce que l&#8217;on veut utiliser d&#8217;un module.</para>
</callout>
<callout arearefs="CO137-2">
<para>La fonction <literal>reset</literal> remet le compteur à zéro.</para>
</callout>
</calloutlist>
<simpara>On notera au passage qu&#8217;on utilise la
<link xl:href="../chapter-03/index.xml#object-destructuring">destructuration d&#8217;objet</link>
pour extraire un <emphasis>export nommé</emphasis> depuis un module ECMAScript.</simpara>
<screen>$ node --experimental-modules modules/ecmascript-multiple.mjs
(node:35074) ExperimentalWarning: The ESM module loader is experimental.
2
1</screen>
<simpara>La fonction <literal>reset</literal> a bien remis à zéro le compteur entre temps.
Objectif accompli&#160;!</simpara>
<simpara>Résumons les différences notables avec le mécanisme de modules Node&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>tous les appels à <literal>import</literal> doivent se faire en début de fichier</simpara>
</listitem>
<listitem>
<simpara>on ne peut pas utiliser <literal>import</literal> de manière dynamique
(dans un <literal>if/else</literal> par exemple)</simpara>
</listitem>
<listitem>
<simpara>on peut exporter une <emphasis>variable par défaut</emphasis> <emphasis role="strong">et</emphasis> plusieurs <emphasis>variables nommées</emphasis></simpara>
</listitem>
<listitem>
<simpara>on peut importer des modules Node depuis un module ECMAScript&#160;—
l&#8217;inverse n&#8217;est pas vrai</simpara>
</listitem>
<listitem>
<simpara>les fichiers doivent être suffixés par <literal>.mjs</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Ce dernier point est le plus embêtant car il ralentit l&#8217;interopérabilité
entre les scripts destinés au développement web front-end et les scripts Node.</simpara>
<simpara>L&#8217;histoire nous dira si les modalités s&#8217;assoupliront avec le temps.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module <literal>esm</literal></title>
<simpara>Le <link xl:href="../chapter-05/index.xml#modules">module npm</link> <literal>esm</literal>
(<phrase role="URL"><link xl:href="https://npmjs.com/esm">npmjs.com/esm</link></phrase>) a pris le parti de déblayer le chemin
de l&#8217;interopérabilité.
Il suffit de charger le module <literal>esm</literal> avant de démarrer un script Node,
peu importe son mécanisme de chargement de modules&#160;:
<literal>esm</literal> rendra le chargement des modules totalement transparent.</simpara>
<screen>$ node -r esm modules/ecmascript.js
1
$ node -r esm modules/ecmascript.mjs
1</screen>
<simpara>Pour en savoir plus sur l&#8217;option <literal>-r</literal>, rendez-vous
dans la section <link linkend="require">précharger un module</link></simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Modules ECMAScript</title>
<simpara>L&#8217;intégralité des fonctionnalités des modules ECMAScript
est documentée sur le site web du projet Node.
La documentation contient des informations à jour et qui ne sont pas
forcément listées dans cet ouvrage.</simpara>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/esm.html">nodejs.org/docs/latest-v10.x/api/esm.html</link></phrase></simpara>
</note>
</section>
</section>
<section xml:id="errors">
<title>S&#8217;en sortir quand ça ne se passe pas comme prévu</title>
<simpara>On fait toutes et tous des erreurs.
Du coup forcément, notre code va mener à des plantages applicatifs.
La nature des causes varie et impacte notre lecture des messages d&#8217;erreur.</simpara>
<simpara>Cette section a pour intention de nous aider à prendre confiance dans ce qu&#8217;on
voit et de piocher l&#8217;information qui va nous aider à résoudre le problème.</simpara>
<section xml:id="une_erreur_est_nichée_dans_notre_code">
<title>Une erreur est nichée dans notre code</title>
<simpara>Il y a 2 familles d&#8217;erreurs dans du code ECMAScript&#160;: les <emphasis role="strong">erreurs de syntaxe</emphasis>
et les <emphasis role="strong">erreurs d&#8217;exécution</emphasis>.</simpara>
<simpara>Dans tous les cas, Node <emphasis role="strong">lance une exception</emphasis> complétée d&#8217;une <emphasis role="strong">trace d&#8217;erreurs</emphasis>.
Le but est de comprendre où l&#8217;interpréteur se prend les pieds dans le tapis
et quel est le chemin parcouru au sein du code pour y parvenir.</simpara>
<simpara>Commençons avec une <emphasis>erreur de syntaxe</emphasis>&#160;:</simpara>
<screen>$ node &lt;i&gt;syntax-error.js&lt;/i&gt;
console.log(&lt;i&gt;'oups j'&lt;/i&gt;ai fait une erreur de guillemets);
            ^^^^^^^^

&lt;i&gt;SyntaxError&lt;/i&gt;: &lt;i&gt;missing ) after argument list&lt;/i&gt;
    at new Script (vm.js:74:7)
    at createScript (vm.js:246:10)
    at Object.runInThisContext (vm.js:298:10)</screen>
<simpara><emphasis role="strong">Une erreur de syntaxe est immédiate</emphasis>.
Node la détecte lorsqu&#8217;il <emphasis>parse</emphasis> notre code.</simpara>
<simpara>Dans l&#8217;exemple précédent, Node indique qu&#8217;il manque une parenthèse après le
deuxième guillemet, car c&#8217;est le symbole que l&#8217;interpréteur attend.<?asciidoc-br?>
Pourquoi Node attend-il une parenthèse&#160;?
Car le guillemet indique une intention incorrecte&#160;: on ne veut pas qu&#8217;il
signifie la fin de la chaîne mais qu&#8217;il représente un caractère apostrophe dans
la chaîne.</simpara>
<simpara>La correction à entreprendre ne sera pas d&#8217;ajouter une parenthèse après le
guillemet mais bien de l'<emphasis>échapper</emphasis> en le préfixant d&#8217;un caractère <literal>\</literal>.
Node l&#8217;interprétera alors comme un caractère.</simpara>
<simpara>Penchons-nous à présent sur les <emphasis>erreurs d&#8217;exécution</emphasis>,
<emphasis role="strong">provoquée lorsque le code est exécuté</emphasis>&#160;:</simpara>
<screen>$ node process/exit-error.js
console.log(&lt;i&gt;jenexistepas&lt;/i&gt;);
            ^
&lt;i&gt;ReferenceError&lt;/i&gt;: &lt;i&gt;jenexistepas&lt;/i&gt; &lt;i&gt;is not defined&lt;/i&gt;
    at Object.&lt;anonymous&gt; (/.../chapter-04/examples/process/&lt;i&gt;exit-error.js&lt;/i&gt;:&lt;i&gt;5&lt;/i&gt;:13)
    at Module._compile (module.js:643:30)</screen>
<simpara>Le marqueur <literal>^</literal> indique l&#8217;emplacement où le problème est rencontré.
La ligne en-dessous documente le <emphasis>type d&#8217;erreur</emphasis> (<literal>ReferenceError</literal>)
en précisant ce qui n&#8217;est pas défini (la variable <literal>jenexistepas</literal>).<?asciidoc-br?>
La notation <literal>exit-error.js:5:13</literal> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <emphasis>ligne 5</emphasis> du fichier <literal>exit-error.js</literal>.</simpara>
<simpara>Comment y remédier&#160;?
En vérifiant si on appelle bien la bonne variable ou en la créant
avec la valeur attendue le cas échéant.</simpara>
<simpara>Les erreurs d&#8217;exécution sont pernicieuses elles sont parfois
provoquées après le démarrage de l&#8217;application.
Dans, elle se produit deux secondes après le démarrage du script&#160;:</simpara>
<screen>$ node runtime-error.js
setTimeout(() =&gt; console.log(&lt;i&gt;secret.toLocaleUperCase()&lt;/i&gt;), 2000);
                                    ^
&lt;i&gt;TypeError&lt;/i&gt;: &lt;i&gt;secret.toLocaleUperCase&lt;/i&gt; &lt;i&gt;is not a function&lt;/i&gt;
    at Timeout.setTimeout [as _onTimeout] (/.../chapter-04/examples/runtime-error.js:4:37)</screen>
<simpara>La notation <literal>runtime-error.js:4:37</literal> indique que l&#8217;origine de l&#8217;erreur
se trouve à la <emphasis>ligne 4</emphasis> du fichier <literal>runtime-error.js</literal>, <emphasis>colonne 37</emphasis>.
Le type d&#8217;erreur (<literal>TypeError</literal>) signifie qu&#8217;on cherche à manipuler une variable
de manière <emphasis role="strong">inattendue par rapport à son type</emphasis>.
Le message d&#8217;erreur nous précise qu&#8217;on appelle comme une fonction quelque chose
qui ne serait donc pas une fonction.</simpara>
<simpara>Pourquoi <literal>toLocaleUperCase</literal> n&#8217;est pas une fonction&#160;?
Une typo s&#8217;est introduite dans notre code&#160;: <literal>secret.toLocaleUperCase</literal> vaut <literal>undefined</literal>.
L&#8217;erreur serait corrigée en utilisant <literal>secret.toLocaleUpperCase</literal> (avec 2 <emphasis>p</emphasis>).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module <literal>eslint</literal></title>
<simpara>Le module npm <literal>eslint</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/eslint">npmjs.com/eslint</link></phrase>)
est un vérificateur syntaxique.
Son intention est de s&#8217;accorder sur le style d&#8217;écriture et d&#8217;éviter des
effets de bord du langage
qui causent des problèmes difficiles à déceler.</simpara>
<simpara>On apprendra à le configurer dans l'<link xl:href="../appendix-a/index.xml#eslint">annexe A</link>.</simpara>
</tip>
<simpara>Les erreurs affichées affichent des informations importantes.
Si elles n&#8217;indiquent pas forcément le chemin de résolution évident,
elles demandent à ce qu&#8217;on cherche à <emphasis role="strong">comprendre la nature de l&#8217;erreur</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module <literal>pretty-error</literal></title>
<simpara>Le module npm <literal>pretty-error</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/pretty-error">npmjs.com/pretty-error</link></phrase>) enjolive
l&#8217;affichage des erreurs.
Il suffit de l&#8217;installer, de le <link linkend="require">précharger</link> et
d&#8217;exécuter un script pour en bénéficier.</simpara>
<screen>$ node -r pretty-error/start process/exit-error.js</screen>
<simpara>On apprendra au <link xl:href="../chapter-05/index.xml">chapitre 5</link> comment installer
des modules npm.</simpara>
</tip>
</section>
<section xml:id="une_erreur_est_retournée_dans_un_emphasis_callback_emphasis">
<title>Une erreur est retournée dans un <emphasis>callback</emphasis></title>
<simpara>La fonction de <emphasis>callback</emphasis> est un des moyen de retourner le résultat
d&#8217;une exécution asynchrone.
Par convention, le <emphasis role="strong">premier paramètre est une erreur</emphasis>.</simpara>
<simpara>Ce paramètre est nul (<literal>null</literal>) ou indéfini (<literal>undefined</literal>) lorsqu&#8217;il n&#8217;y a pas eu
d&#8217;erreurs en cours de route.
En revanche ce paramètre contient un <emphasis role="strong">objet d&#8217;erreur</emphasis> lorsque un problème
s&#8217;est produit&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/callback.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {readFile} = require('fs');

readFile('je-n-existe-pas.txt', (error, content) =&gt; {
  if (error) {                                          <co xml:id="CO138-1"/>
    console.error(error.message);                       <co xml:id="CO138-2"/>
    console.error(error);                               <co xml:id="CO138-3"/>
    return;
  }

  console.log(String(content));
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO138-1">
<para>On vérifie la présence de l&#8217;erreur.</para>
</callout>
<callout arearefs="CO138-2">
<para><literal>error.message</literal> contient une raison textuelle de l&#8217;erreur.</para>
</callout>
<callout arearefs="CO138-3">
<para>Affichage de l&#8217;objet d&#8217;erreur complet.</para>
</callout>
</calloutlist>
<screen>$ node errors/callback.js
&lt;i&gt;ENOENT&lt;/i&gt;: &lt;i&gt;no such file or directory&lt;/i&gt;, open '&lt;i&gt;je-n-existe-pas.txt&lt;/i&gt;'
{ Error: ENOENT: no such file or directory, open 'je-n-existe-pas.txt'
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: 'je-n-existe-pas.txt' }</screen>
<simpara>L&#8217;erreur affichée nous précise que le fichier demandé n&#8217;existe pas.
Son code (<literal>ENOENT</literal>) signifie la même chose mais a l&#8217;avantage d&#8217;être plus
facile à vérifier dans une condition.</simpara>
<simpara>L&#8217;objet <literal>error</literal> donné en argument de la fonction de callback est utile
pour vérifier des détails précis de l&#8217;erreur et mieux interagir avec
au niveau du code.
Nous y retrouvons le type d&#8217;erreur (<literal>errno</literal>),
la référence vers la ressource concernée (<literal>path</literal>) et le nom de la fonction
système utilisée par Node pour accéder à la ressource (<literal>syscall</literal>).</simpara>
<simpara>La valeur et la signification du code d&#8217;erreur varie en fonction
du module Node employé à ce moment là.
Le <link linkend="fs">module <literal>fs</literal></link> ne retourne pas les mêmes codes
que le <link linkend="http">module <literal>http</literal></link>.<?asciidoc-br?>
Les appels à des ressources système retournent
<link linkend="errors.system">une variété de codes d&#8217;erreur</link>.</simpara>
<simpara>La décision nous appartient de savoir quoi faire quand l&#8217;erreur se produit.
Doit-on arrêter le programme (avec <link linkend="process.exit"><literal>process.exit()</literal></link>)&#160;?
Est-ce que ce n&#8217;est pas grave et on passe à la suite&#160;?
Ou peut-être que ce fichier était censé exister et qu&#8217;on devrait
notifier l&#8217;équipe de maintenance et
afficher une page d&#8217;erreur côté utilisateur.</simpara>
</section>
<section xml:id="une_erreur_est_retournée_dans_une_promesse">
<title>Une erreur est retournée dans une promesse</title>
<simpara>La gestion d&#8217;erreurs des <link xl:href="../chapter-03/index.xml#promise">promesses</link>
s&#8217;effectue à l&#8217;aide de la fonction <literal>.catch()</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok')
  .then((message) =&gt; {
    throw new Error('Oops !');                      <co xml:id="CO139-1"/>
  })
  .catch((error) =&gt; console.error(error));          <co xml:id="CO139-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO139-1">
<para>On génère une erreur dans notre code.</para>
</callout>
<callout arearefs="CO139-2">
<para>L&#8217;objet d&#8217;erreur est transmis à la prochaine occurrence de <literal>.catch()</literal>.</para>
</callout>
</calloutlist>
<simpara>Le contenu de l&#8217;erreur est accessible dans le premier et seul argument de
la fonction de <emphasis>callback</emphasis> passée à <literal>.catch()</literal>.</simpara>
<screen>$ node errors/promise.js
Error: &lt;i&gt;Oops !&lt;/i&gt;
    at &lt;i&gt;Promise.resolve&lt;/i&gt;.&lt;i&gt;then&lt;/i&gt; (/.../chapter-04/examples/errors/&lt;i&gt;promise.js&lt;/i&gt;:&lt;i&gt;5&lt;/i&gt;:11)
    at process._tickCallback (internal/process/next_tick.js:178:7)</screen>
<simpara>La trace indique que l&#8217;erreur s&#8217;est produite à la ligne 5,
dans la méthode <literal>.then()</literal> suite à l&#8217;utilisation de <literal>Promise.resolve()</literal>.</simpara>
<simpara>L'<emphasis role="strong">utilisation multiple de <literal>.catch()</literal></emphasis> nous aide à gérer finement les erreurs&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise-chain.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.reject(new Error('Oops !'))
  .catch((error) =&gt; {
    console.error('Une erreur s\'est produite : %s', error.message);  <co xml:id="CO140-1"/>
    return 'Aaah';                                                    <co xml:id="CO140-2"/>
  })
  .then((message) =&gt; console.log(message))                            <co xml:id="CO140-3"/>
  .catch((error) =&gt; console.error(error));                            <co xml:id="CO140-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO140-1">
<para>On gère l&#8217;erreur en la signalant dans le terminal.</para>
</callout>
<callout arearefs="CO140-2">
<para>Le <emphasis>callback</emphasis> d&#8217;erreur a la possibilité de retourner un résultat.</para>
</callout>
<callout arearefs="CO140-3">
<para>Ce résultat est transmis à la prochaine occurrence de <literal>.then()</literal>.</para>
</callout>
<callout arearefs="CO140-4">
<para>Dans ce cas, le dernier <literal>.catch()</literal> n&#8217;affiche rien car nous n&#8217;avons pas rencontré d&#8217;autre erreur entre temps.</para>
</callout>
</calloutlist>
<simpara>L&#8217;absence de <literal>.catch()</literal> provoque un plantage applicatif et le délenchement
de l'<link linkend="process.on">événement de processus</link> <literal>unhandledRejection</literal>&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/promise-no-catch.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok')
  .then(() =&gt; {
    throw new Error('Oops !');
  });</programlisting>
</para>
</formalpara>
<screen>$ node errors/promise-no-catch.js
(node:27412) &lt;i&gt;UnhandledPromiseRejectionWarning&lt;/i&gt;: Error: Oops !
    at &lt;i&gt;Promise.resolve&lt;/i&gt;.&lt;i&gt;then&lt;/i&gt; (/.../chapter-04/examples/errors/&lt;i&gt;promise-no-catch.js&lt;/i&gt;:&lt;i&gt;5&lt;/i&gt;:11)
    at process._tickCallback (internal/process/next_tick.js:178:7)</screen>
<simpara>L&#8217;affichage de <literal>UnhandledPromiseRejectionWarning</literal> indique que l&#8217;erreur s&#8217;est
produite mais qu&#8217;aucun <literal>.catch()</literal> ne l&#8217;a pris en charge.
Nous savons cependant que l&#8217;erreur s&#8217;est produite dans la méthode <literal>.then()</literal>
suite à l&#8217;utilisation de <literal>Promise.resolve()</literal>.</simpara>
</section>
<section xml:id="une_erreur_est_retournée_dans_un_événement">
<title>Une erreur est retournée dans un événement</title>
<simpara>Tout élément dôté d&#8217;une méthode <literal>.on()</literal> a un événement spécial&#160;: <literal>.on('error')</literal>.
Il est appelé à chaque fois qu&#8217;une erreur se produit.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/on-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

process.emit('error', new Error('Oops !'));             <co xml:id="CO141-1"/>

process.on('error', (error) =&gt; console.error(error));   <co xml:id="CO141-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO141-1">
<para>On émet un événement <literal>error</literal> avec un objet <literal>Error</literal> précisant la nature du problème.</para>
</callout>
<callout arearefs="CO141-2">
<para>L&#8217;objet d&#8217;erreur est transmis à l&#8217;événement <literal>error</literal>.</para>
</callout>
</calloutlist>
<screen>$ node errors/on-error.js
Error: &lt;i&gt;Oops !&lt;/i&gt;
    at Object.&lt;i&gt;&amp;lt;anonymous&amp;gt;&lt;/i&gt; (/.../chapter-04/examples/errors/&lt;i&gt;on-error.js&lt;/i&gt;:&lt;i&gt;5&lt;/i&gt;:23)
    at Module._compile (internal/modules/cjs/loader.js:678:30)</screen>
<simpara>La trace d&#8217;erreur est similaire à celle des promesses et des callbacks.
Le message d&#8217;erreur précise le problème tandis que son origine (fichier, ligne)
nous indiquent quoi regarder pour mieux comprendre la cause.</simpara>
<simpara>Si une erreur est émise et qu&#8217;aucune fonction n&#8217;est à l&#8217;écoute,
l&#8217;événement <literal>uncaughtException</literal> est produit&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>errors/on-error.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

process.emit('error', new Error('Oops !'));</programlisting>
</para>
</formalpara>
<screen>$ node errors/on-error-uncaught.js
events.js:167
      throw er; // &lt;i&gt;Unhandled 'error'&lt;/i&gt; event
      ^

Error: Oops !
    at Object.&lt;i&gt;&amp;lt;anonymous&amp;gt;&lt;/i&gt; (/.../chapter-04/examples/errors/&lt;i&gt;on-error-uncaught.js&lt;/i&gt;:&lt;i&gt;3&lt;/i&gt;:23)
    at Module._compile (internal/modules/cjs/loader.js:678:30)</screen>
<simpara>La section liée au <link linkend="events">module <literal>events</literal></link> explique plus en détails
la gestion des événements.
On les retrouve par exemple dans les modules <link linkend="http"><literal>http</literal></link>, <link linkend="stream"><literal>stream</literal></link>
et <link linkend="process"><literal>process</literal></link>.</simpara>
</section>
<section xml:id="errors.system">
<title>Une erreur est renvoyée par le système d&#8217;exploitation</title>
<simpara>L&#8217;accès à une ressource distante est plus complexe qu&#8217;il n&#8217;y parait
car la nature des erreurs est variée et sujet à interprétation au cas par cas,
en fonction de notre intention et du contexte d&#8217;exécution.</simpara>
<simpara>Les erreurs systèmes indiquent la raison du problème.
À vous de trouver <emphasis>pourquoi</emphasis> un tel problème se produit.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Erreurs couramment rencontrées</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Code erreur</entry>
<entry align="left" valign="top">Raison</entry>
<entry align="left" valign="top">Indice de résolution</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>EACCES</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Permission refusée : nous n&#8217;avons pas le droit d&#8217;accéder à cette ressource.</simpara></entry>
<entry align="left" valign="top"><simpara>Changer les permissions d&#8217;accès sans mettre en péril la sécurité.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EADDRINUSE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Adresse déjà utilisée : nous tentons de créer une ressource réseau alors qu&#8217;une
interface existe déjà à la même adresse.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier l&#8217;origine du serveur déjà en place à cette adresse.
Attribuer une autre adresse/port à la ressource réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ECONNREFUSED</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource distante a refusé la connexion.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier si c&#8217;est normal que la ressource distante soit inactive.
Vérifier qu&#8217;on se connecte à la bonne ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ECONNRESET</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource distante a été interrompue en cours de route.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter la connexion. Vérifier la stabilité de la connexion réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EEXIST</literal></simpara></entry>
<entry align="left" valign="top"><simpara>La ressource à créer existe déjà.</simpara></entry>
<entry align="left" valign="top"><simpara>C&#8217;est un problème seulement si la ressource n&#8217;était pas censée exister au prélable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EMFILE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Trop de fichiers sont ouverts en simultané.</simpara></entry>
<entry align="left" valign="top"><simpara>Les systèmes d&#8217;exploitation peuvent travailler sur une quantité finie de fichiers.
Peut-être que vous avez ouvert trop de fichiers en même temps.
Fermer l&#8217;accès aux fichiers ouverts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ENOENT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Ressource inexistante.</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier que le chemin d&#8217;accès est correct.
Inspecter la raison de l&#8217;inexistance de la ressource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EPERM</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;opération n&#8217;est pas autorisée.</simpara></entry>
<entry align="left" valign="top"><simpara>Des droits d&#8217;administration sont nécessaires pour effectuer cette opération.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>EPIPE</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;accès à la ressource distante a été interrompu.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter l&#8217;opération.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ETIMEDOUT</literal></simpara></entry>
<entry align="left" valign="top"><simpara>L&#8217;opération a été annulée car la ressource distante a mis trop de temps pour aboutir.</simpara></entry>
<entry align="left" valign="top"><simpara>Retenter l&#8217;opération. Vérifier la disponibilité de la ressource distante.
S&#8217;assurer que le volume demandé n&#8217;est pas trop important.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="le_programme_ne_se_termine_pas">
<title>Le programme ne se termine pas</title>
<simpara>Il arrive qu&#8217;un programme ne se termine pas contrairement à nos attentes.
Il peut y avoir plusieurs raisons à ça&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>une ressource distante <emphasis role="strong">met du temps à répondre</emphasis>&#160;—
un <emphasis>timeout</emphasis> déclenchera une erreur (généralement sous 30 secondes)</simpara>
</listitem>
<listitem>
<simpara>un traitement prend du temps</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">événement est en cours d&#8217;écoute</emphasis>&#160;— typiquement un serveur web qui attend
des requêtes entrantes</simpara>
</listitem>
<listitem>
<simpara>une erreur n&#8217;a pas été capturée et perturbe les instructions suivantes</simpara>
</listitem>
</itemizedlist>
<simpara>Il faudra inspecter le système pour en savoir plus et observer la
consommation mémoire et CPU du processus Node en question.</simpara>
<simpara>Peut-être qu&#8217;il faudra sonder le programme pour déceler le point de blocage.
L'<link linkend="inspect">inspecteur Node</link> est un outil particulièrement adapté à cet usage.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">npm</phrase> Module <literal>debug</literal></title>
<simpara>Le module npm <literal>debug</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/debug">npmjs.com/debug</link></phrase>) affiche des
messages dans la console de manière conditionnelle.
Les messages s&#8217;affichent lorsque les variables d&#8217;environnement de notre choix
sont renseignées au démarrage de l&#8217;application.</simpara>
<simpara>On apprendra à le configurer dans l'<link xl:href="../appendix-a/index.xml#debug">annexe A</link>.</simpara>
</tip>
</section>
<section xml:id="deprecation">
<title>Une alerte de dépréciation s&#8217;affiche</title>
<simpara>Un des objectifs de l&#8217;équipe de développement de Node est de maintenir
la stabilité de la plate-forme.
Certains de leurs choix de conception sont revisités en changeant
leur comportement ou en les retirant des modules de base.</simpara>
<simpara>Quand ce changement affecte notre code,
<emphasis role="strong">une alerte de dépréciation s&#8217;affiche</emphasis>.
Par exemple&#160;:</simpara>
<formalpara>
<title>deprecation-warning.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const a = new Buffer(10);</programlisting>
</para>
</formalpara>
<screen>$ node deprecation-warning.js
(node:8130) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.</screen>
<simpara>Nous avons ainsi le temps de modifier notre code pour migrer
vers la nouvelle recommandation petit à petit.</simpara>
</section>
</section>
<section xml:id="les_différences_de_javascript_entre_node_et_les_navigateurs_web">
<title>Les différences de JavaScript entre Node et les navigateurs web</title>
<simpara>Puisqu&#8217;on utilise du code JavaScript avec Node et avec les navigateurs web,
qu&#8217;est-ce qui les distingue vraiment&#160;?</simpara>
<simpara>Cette section détricotte les derniers doutes que l&#8217;on pourrait avoir dans notre tête.</simpara>
<section xml:id="l_absence_du_dom_et_des_variables_literal_window_literal_et_literal_document_literal">
<title>L&#8217;absence du DOM et des variables <literal>window</literal> et <literal>document</literal></title>
<simpara>Dans Node, il n&#8217;est pas possible de faire appel aux variables <literal>window</literal>
et <literal>document</literal> (raccourci pour <literal>window.document</literal>).</simpara>
<simpara>Ces variables représentent respectivement la fenêtre/onglet et le document
HTML interprété par le navigateur web.
L&#8217;appel aux fonctions <literal>document.querySelector()</literal> et <literal>document.createElement()</literal>
relèvent du DOM (<emphasis>Document Object Model</emphasis>), une représentation JavaScript interactive
du document HTML.</simpara>
<simpara>L&#8217;équivalent de <literal>window</literal> pour Node serait la variable <link linkend="process"><literal>process</literal></link>&#160;:
elle décrit le processus exécutant notre code.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Variables globales</title>
<simpara>La documentation des variables globales est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/globals.html">nodejs.org/docs/latest-v10.x/api/globals.html</link></phrase></simpara>
</note>
</section>
<section xml:id="il_n_y_a_pas_d_interface_graphique">
<title>Il n&#8217;y a pas d&#8217;interface graphique</title>
<simpara>Suite logique du point précédent&#160;: Node n&#8217;a pas d&#8217;interface graphique.
Le code exécuté n&#8217;affiche rien en tant que tel, à part les messages dirigés
vers la <link linkend="console">console</link>.</simpara>
<simpara>L'<link linkend="inspect">inspecteur Node</link> est un moyen de visualiser l&#8217;état interne
d&#8217;un script .</simpara>
<simpara>On peut toutefois construire des applications graphiques en ligne de commande.
Nous verrons comment faire dans le <link xl:href="../chapter-08/index.xml">chapitre 8</link>.</simpara>
</section>
<section xml:id="le_mécanisme_de_modules">
<title>Le mécanisme de modules</title>
<simpara>Node utilise un <link linkend="modules">mécanisme de modules</link> (<emphasis>CommonJS</emphasis>) différent
des <emphasis>modules ECMAScript</emphasis> des navigateurs web.</simpara>
<simpara>La convergence vers les <emphasis>modules ECMAScript</emphasis> est en cours.
Il y a fort à parier qu&#8217;ils soient supportés nativement par Node dans une
version ultérieure.</simpara>
<simpara>Nous verrons comment utiliser les modules Node dans les navigateurs web
dans le <link xl:href="../chapter-08/index.xml">chapitre 9</link>.</simpara>
</section>
<section xml:id="l_interfaçage_avec_le_système_d_exploitation">
<title>L&#8217;interfaçage avec le système d&#8217;exploitation</title>
<simpara>Les fonctions JavaScript spécifiques aux navigateurs web sont liées
à la récupération d&#8217;informations (<literal>AJAX</literal>, <literal>fetch()</literal>),
à l&#8217;affichage (Canvas, WebGL, WebVR) ainsi qu&#8217;à la manipulation de documents HTML.</simpara>
<simpara>Les fonctions JavaScript fournies par les <link linkend="modules-builtin">modules Node</link>
sont liées à la gestion des ressources dont le système d&#8217;exploitation
se fait l&#8217;interface&#160;: fichiers (<link linkend="fs">module <literal>fs</literal></link>),
réseau (<link linkend="http">module <literal>http</literal></link>, <link linkend="net">module <literal>net</literal></link>, <link linkend="dns">module <literal>dns</literal></link>,
<link linkend="dgram">module <literal>dgram</literal></link>), terminal (<link linkend="tty">module <literal>tty</literal></link>,
<link linkend="readline">module <literal>readline</literal></link>) et processus
(<link linkend="process">module <literal>process</literal></link>, <link linkend="child_process">module <literal>child_process</literal></link>).</simpara>
</section>
<section xml:id="node_est_un_processus_système">
<title>Node est un processus système</title>
<simpara>Le système d&#8217;exploitation crée un nouveau processus dès
qu&#8217;on exécute le programme <literal>node</literal>.
Ce processus peut être de <emphasis>courte durée</emphasis> ou de <emphasis>longue durée</emphasis>,
selon qu&#8217;il dure quelques secondes ou un temps indéfini.</simpara>
<simpara>Le processus s&#8217;arrête en cas d&#8217;erreur, lorsqu&#8217;il n&#8217;y a plus d&#8217;opération
à effectuer ou en cas d&#8217;interruption volontaire.</simpara>
<simpara>Le code JavaScript exécuté dans un navigateur web dépasse rarement la durée
d&#8217;une session utilisateur, de quelques secondes à quelques heures.
En cas de problème, un rafraîchissement de la page remet à zéro l&#8217;état de la page.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Performances</phrase> Utilisation des CPU</title>
<simpara>Un <emphasis role="strong">processus Node est <emphasis>mono</emphasis> CPU</emphasis>.
Tous les autres processus système assignés à ce même CPU
se partageront une quantité finie de puissance.</simpara>
<simpara>Par exemple, si un processus Node partage le même CPU qu&#8217;une base de données
et qu&#8217;une requête gourmande s&#8217;exécute, la rapidité de notre application
en sera affectée.</simpara>
</note>
</section>
</section>
<section xml:id="options">
<title>Options utiles pour démarrer Node</title>
<simpara>L&#8217;exécutable <literal>node</literal> accepte plusieurs options afin de personnaliser
son comportement et l&#8217;affichage des résultats.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Exécutable <literal>node</literal></title>
<simpara>La documentation de l&#8217;exécutable <literal>node</literal> est disponible sur le site officiel de Node&#160;:
<phrase role="URL"><link xl:href="https://nodejs.org/docs/latest-v10.x/api/cli.html">nodejs.org/docs/latest-v10.x/api/cli.html</link></phrase></simpara>
</note>
<section xml:id="print-eval">
<title>Afficher le résultat d&#8217;une expression, sans script</title>
<simpara>L&#8217;interpréteur Node sait interpréter du code qu&#8217;on lui donnerait
via l&#8217;option <literal>-p</literal> (pour <emphasis>print</emphasis>, c&#8217;est-à-dire <emphasis>afficher</emphasis>).
L&#8217;interpréteur affichera le résultat de l&#8217;expression ou
détaillera la <link linkend="errors">raison de l&#8217;erreur</link>.</simpara>
<simpara>J&#8217;utilise cette forme d&#8217;interaction pour obtenir un résultat rapide,
sans créer de nouveau fichier.
Par exemple, le résultat d&#8217;une opération mathématique&#160;:</simpara>
<screen>$ node -p '2 + 2'
4</screen>
<simpara>Toute expression ECMAScript valide est acceptée&#160;:</simpara>
<screen>$ node -p '"abc".toLocaleUpperCase()'
ABC</screen>
<simpara>Ce dernier exemple illustre la transformation de
<link xl:href="../chapter-03/index.xml#string">chaîne de caractères</link> documentée
dans le <link xl:href="../chapter-03/index.xml">chapitre 3</link>.</simpara>
</section>
<section xml:id="require">
<title>Précharger un module</title>
<simpara>L&#8217;option de démarrage <literal>--require</literal> charge le module indiqué <emphasis>avant</emphasis> le script Node.</simpara>
<screen>$ node --require ./print-exit.js url/intro.js</screen>
<simpara>Dans cet exemple, le <link linkend="modules">module <literal>print-exit.js</literal></link> sera chargé
avant <literal>url/intro.js</literal>.</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>print-exit.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">process.on('exit', (code) =&gt; {
  const {filename} = process.mainModule;

  console.log('Le fichier %s s\'arrête avec un code %d', filename, code);
});</programlisting>
</para>
</formalpara>
<simpara>Le chargement de ce module aura pour effet d&#8217;afficher un message
avec le chemin du fichier chargé et le <link linkend="process.exit">code de sortie</link>.</simpara>
<simpara>On peut appeler l&#8217;option <literal>--require</literal> plusieurs fois.
On peut aussi utiliser l&#8217;option raccourcie <literal>-r</literal>.</simpara>
<simpara>Ce mécanisme fonctionne très bien avec des
<link xl:href="../chapter-05/index.xml">modules npm</link> conçus pour
rendre nos scripts <link linkend="esm">compatibles avec les modules ECMAScript</link>
ou pour <link linkend="pretty-error">simplifier les erreurs</link> affichées
lors d&#8217;un plantage applicatif, entre autres.</simpara>
</section>
<section xml:id="inspect">
<title>Inspecter notre code avec Google Chrome</title>
<simpara>Node accepte deux options <literal>--inspect</literal> et <literal>--inspect-brk</literal>.
Elles exposent toutes deux un protocole de débogage
auquel on peut se connecter avec le navigateur <emphasis>Google Chrome</emphasis>.</simpara>
<screen>$ node --inspect-brk print-text.js texte --uppercase
Debugger listening on ws://127.0.0.1:9229/ddd9bbfd-09ac-4426-a53e-c8abe4fc36da
For help see https://nodejs.org/en/docs/inspector</screen>
<simpara>Cette commande lance un de nos exemples de la section
<link linkend="process.argv">arguments d&#8217;exécution</link> du <link linkend="process">module <literal>process</literal></link>.
L&#8217;option <literal>--inspect-brk</literal> démarre l&#8217;inspecteur
et met son <emphasis role="strong">exécution en pause aussitôt</emphasis>.</simpara>
<simpara>Le logo de Node s&#8217;affiche dans les outils de développement de <emphasis>Google Chrome</emphasis>&#160;:</simpara>
<figure>
<title>Outils de développement <emphasis>Google Chrome</emphasis> avec l&#8217;icône de l&#8217;inspecteur Node.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/chrome-devtools.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>chrome devtools</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un clic sur le logo Node ouvre une nouvelle fenêtre.
Cette fenêtre est outillée pour inspecter ce qu&#8217;il se passe dans notre script Node.</simpara>
<figure>
<title>Inspecteur en pause sur la première ligne de notre script Node.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-paused.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector paused</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Outils de développement</phrase> Point d&#8217;arrêt</title>
<simpara>Un point d&#8217;arrêt se crée en cliquant sur le numéro de ligne souhaité.</simpara>
<simpara>Le débogueur se mettra en pause à chaque fois que le chemin d&#8217;exécution
de l&#8217;interpréteur atteindra cette ligne.</simpara>
<simpara>La valeur des variables ECMAScript courantes s&#8217;affichent au survol de la souris
ou en interagissant avant la console.</simpara>
</tip>
<figure>
<title>Inspecteur en pause, avec un point d&#8217;arrêt marqué sur une des lignes du script.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-breakpoint.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector breakpoint</phrase></textobject>
</mediaobject>
</figure>
<simpara>C&#8217;est le moment idéal pour placer un ou plusieurs points d&#8217;arrêt.</simpara>
<simpara>Un clic sur le bouton <guibutton>&#9654;</guibutton> met alors fin à la pause.
Le script s&#8217;exécutera jusqu&#8217;à l&#8217;épuisement des instructions
ou jusqu&#8217;au <emphasis>prochain point d&#8217;arrêt</emphasis>.</simpara>
<figure>
<title>Inspecteur en pause, suite à la rencontre d&#8217;un point d&#8217;arrêt.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/inspector-breakpoint-in.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>inspector breakpoint in</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;option d&#8217;invocation <literal>--inspect</literal> est adaptée à des processus de longue durée,
comme un serveur HTTP.
L&#8217;option <literal>--inspect-brk</literal> est adaptée à des processus de courte durée et qui
se termineraient avant qu&#8217;on ait le temps de jeter un œil au contenu.</simpara>
</section>
<section xml:id="ajuster_les_options_de_compatibilité_et_de_traçabilité_de_v8">
<title>Ajuster les options de compatibilité et de traçabilité de V8</title>
<simpara>Node repose sur la <link xl:href="../chapter-01/index.xml#v8">machine virtuelle V8</link>
pour interpréter nos instructions ECMAScript.
Node expose différentes options de V8 pour affiner son comportement en fonction
de notre environnement.</simpara>
<simpara>L&#8217;intégralité des options de configuration de V8 s&#8217;affiche
avec l&#8217;option <literal>--v8-options</literal>&#160;:</simpara>
<screen>$ node --v8-options</screen>
<simpara>Il n&#8217;y a pas de meilleure configuration qui conviendrait à chacun de nos usages.
Le mieux reste encore d&#8217;explorer les options possibles, les différents concepts
et d&#8217;ajuster les valeurs offrant le meilleur rapport stabilité/performances.</simpara>
<variablelist>
<title>Options notables de V8</title>
<varlistentry>
<term><literal>--optimize_for_size</literal></term>
<listitem>
<simpara>Optimise le fonctionnement interne pour utiliser moins de mémoire,
au détriment de la vitesse.<?asciidoc-br?>
Idéal pour l&#8217;exécution de scripts Node sur des environnement à faible mémoire,
comme les Raspberry Pi.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--mem_old_space_limit</literal></term>
<listitem>
<simpara>Détermine la quantité de mémoire maximale qu&#8217;un processus Node pourra utiliser.<?asciidoc-br?>
Idéal pour confiner Node sur des environnements à faible mémoire.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--gc_inverval</literal></term>
<listitem>
<simpara>Détermine le nombre de cycles entre chaque déclenchement du ramasse-miettes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--expose_gc</literal></term>
<listitem>
<simpara>Expose les fonctions de manipulation du ramasse-miettes.<?asciidoc-br?>
Idéal si vous souhaitez contrôler finement l&#8217;optimisation de la mémoire.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--stack_trace_limit</literal></term>
<listitem>
<simpara>Change la limite du nombre de lignes affichées dans une trace d&#8217;erreurs.<?asciidoc-br?>
Par défaut&#160;: 10 lignes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--trace-deopt</literal></term>
<listitem>
<simpara>Signale les optimisations invalidées par V8.
Les portions de code indiquées gagneraient à être retravaillées, pour rendre
uniforme le type de variables passées en arguments par exemple.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>--trace-gc</literal></term>
<listitem>
<simpara>Signale les moments où le ramasse-miettes se déclenche.
On peut ainsi mieux comprendre les raisons qui le pousse à se déclencher.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<title><phrase role="RemarquePreTitre">Notion</phrase> Ramasse-miettes (<emphasis>garbage collector</emphasis>)</title>
<simpara>Le ramasse-miettes est un mécanisme informatique qui libère les objets inutilisés
de la mémoire.
Il est déclenché de manière cyclique par la machine virtuelle
<link xl:href="../chapter-01/index.xml#v8">V8</link>.</simpara>
<simpara>En savoir plus sur <phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Ramasse-miettes_(informatique">fr.wikipedia.org/wiki/Ramasse-miettes_(informatique</link>)</phrase>.</simpara>
</note>
<simpara>Les options préfixées par <literal>harmony</literal> activent la prise en charge
de fonctionnalités ECMAScript qui ne font pas encore partie du standard.
Elles sont encore au stade expérimental.</simpara>
</section>
</section>
<section xml:id="conclusion_4">
<title>Conclusion</title>
<simpara>TBD.</simpara>
</section>
</chapter>
<chapter xml:id="jouer_avec_npm">
<title>Jouer avec npm</title>
<simpara>Savoir naviguer dans la richesse de l&#8217;écosystème npm est une force pour
la durabilité de nos projets.
Ces modules nous aident à façonner un outillage résilient et adapté à chacun
de nos projets.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Créer un fichier <literal>package.json</literal></simpara>
</listitem>
<listitem>
<simpara>Installer un module npm</simpara>
</listitem>
<listitem>
<simpara>Outiller un projet avec les scripts npm</simpara>
</listitem>
<listitem>
<simpara>Anatomie du fichier <literal>package.json</literal></simpara>
</listitem>
<listitem>
<simpara>Quelques commandes pour aller plus loin</simpara>
</listitem>
<listitem>
<simpara>Questions et mystères autour de npm</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Ce chapitre va nous permettre d&#8217;y voir plus clair du côté des <link linkend="modules">modules npm</link>.
Nous apprendrons comment identifier des module de confiance, les installer et
les mettre à jour sans casser nos projets.</simpara>
<simpara>Nous nous tournerons ensuite du côté des <link linkend="scripts">scripts npm</link> pour créer
un outillage sur mesure et de qualité.
Grâce à eux, nous serons en mesure d&#8217;automatiser les tâches répétitives à notre
rythme.</simpara>
<simpara>Enfin, nous découvrirons des commandes moins connues de npm.
Elles pourrons nous faciliter la vie ou nous débloquer quand ça ne va pas.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<simpara>Le mot <emphasis>npm</emphasis> correspond à trois concepts différents que nous aborderons
tout au long de ce chapitre&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>l'<emphasis role="strong">exécutable</emphasis> <literal>npm</literal>&#160;— un programme écrit en JavaScript&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis role="strong">registre</emphasis> <emphasis>npm</emphasis>&#160;— une plate-forme de distribution de modules&#160;;</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">module</emphasis> <emphasis>npm</emphasis>&#160;— en général installé depuis le registre et utilisable
avec les fonctions <literal>require()</literal> et <literal>import</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Je préciserai toujours si l&#8217;utilisation de <emphasis>npm</emphasis> fait référence
à l'<emphasis>exécutable</emphasis>, au <emphasis>registre</emphasis> ou à un <emphasis>module</emphasis>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> est installé par défaut avec Node.
Vérifions la version installée en ouvrant un terminal
et en écrivant la commande suivante&#160;:</simpara>
<screen>$ npm --version
6.1.0</screen>
<simpara>Si un message s&#8217;affiche en indiquant que <literal>npm</literal> n&#8217;est pas un programme reconnu,
veuillez vous référer au <link linkend="../chapter-02/index.adoc">chapitre 2</link> et
vérifier que Node v10 est bien installé.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-05
$ cd $(nodebook dir chapter-05)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="cli">
<title>Créer un fichier <literal>package.json</literal></title>
<simpara>La présence d&#8217;un fichier <literal>package.json</literal> devient nécessaire dès qu&#8217;un projet
inclut un <link linkend="modules">module npm</link> ou a vocation à être publié pour être repris
dans un autre projet&#160;— que ça soit dans un cadre professionnel ou personnel.</simpara>
<simpara>Le fichier <literal>package.json</literal> est une clé de voute pour reproduire l&#8217;installation
du projet et créer un <link linkend="scripts">outillage autonome</link>.
La commande <literal>npm init</literal> génère un tel fichier.
L&#8217;utilisation de l&#8217;option <literal>--yes</literal> va plus vite car elle nous évite
de répondre aux questions&#160;:</simpara>
<screen>$ npm init --yes</screen>
<simpara>Si un fichier <literal>package.json</literal> n&#8217;existe pas dans le répertoire courant,
il sera créé avec des valeurs par défaut&#160;— le nom du module correspondra
au nom du répertoire courant.
Si ce fichier existait déjà, il sera alors préservé et son contenu sera affiché&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "name": "nodebook.chapter-05",
  "private": true,
  "version": "1.0.0",
  "main": "./examples/index.js",
  "description": "",
  "scripts": {
    "lint": "eslint ./examples",
    "print-args": "node examples/print-args.js",
    "start": "micro examples/app.js",
    "test": "mocha examples/tests.js",
    "pretest": "npm run lint"
  },
  "engines": {
    "node": "^10.0.0"
  },
  "author": "Thomas Parisot (https://oncletom.io)",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/oncletom/nodebook/issues"
  },
  "homepage": "https://github.com/oncletom/nodebook",
  "dependencies": {
    "cowsay": "^1.3.0",
    "lodash": "^4.17.10",
    "micro": "^9.3.2"
  },
  "devDependencies": {
    "eslint": "^4.19.1",
    "mocha": "^5.2.0"
  }
}</screen>
</para>
</formalpara>
<simpara>Nous reviendrons sur la structure du fichier dans la section
<link linkend="package.json">anatomie du fichier <literal>package.json</literal></link>.
En attendant, focalisons-nous sur les opérations courantes comme
l&#8217;installation de modules.</simpara>
</section>
<section xml:id="modules">
<title>Installer des modules npm</title>
<simpara>Le mécanisme de modules est documenté dans
le <link xl:href="../chapter-04/index.xml#modules">chapitre 4</link>.
Les fonctions <literal>require()</literal> et <literal>import</literal> chargent nos propres modules mais aussi
les modules de base, installés avec Node.
Les modules npm sont des <emphasis role="strong">modules complémentaires et téléchargeables</emphasis> à l&#8217;aide
de l&#8217;exécutable <literal>npm</literal>.</simpara>
<simpara>Cette section va nous aider à comprendre ce qu&#8217;il se passe sous le capot
pendant les phases d&#8217;installation, de mise à jour et de désinstallation
des modules npm.</simpara>
<section xml:id="depuis_le_registre_npm">
<title>Depuis le registre npm</title>
<simpara>Le registre npm (<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>) est l&#8217;hébergement principal
des modules JavaScript.</simpara>
<simpara>La commande <literal>npm install</literal> s&#8217;utilise directement quand nous connaissons déjà
le nom d&#8217;un module à installer,
par exemple le module <emphasis>cowsay</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/cowsay">npmjs.com/cowsay</link></phrase>)&#160;:</simpara>
<screen>$ npm install cowsay
+ cowsay@1.3.0
added 10 packages from 3 contributors in 1.667s
found 0 vulnerabilities</screen>
<simpara>Le module est installé et prêt à être inclus dans un script.
Nous pouvons aussi constater que le champ <literal>dependencies</literal> est apparu
dans le fichier <literal>package.json</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.0"
  }
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>npm</literal> tient les comptes des modules installés à notre demande.
Ça nous sera utile pour <link linkend="install">installer les modules sur un autre ordinateur</link>.
Nous reviendrons plus tard sur la notation des versions
—&#160;on en reparlera sous le nom de <emphasis>versions sémantiques</emphasis> (<emphasis>Semantic Versionning</emphasis>).</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>cow.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {say} = require('cowsay');
const message = say({ text: 'Bonjour !' });

console.log(message);</programlisting>
</para>
</formalpara>
<simpara>Nous pouvons remarquer que l&#8217;inclusion d&#8217;un module npm est identique
à celle d&#8217;un <link xl:href="../chapter-04/index.xml#modules-builtin">module de base</link>.<?asciidoc-br?>
Regardons le résultat sans plus tarder&#160;:</simpara>
<screen>$ node cow.js
___________
&lt; Bonjour ! &gt;
-----------
       \   ^__^
        \  (oo)\_______
           (__)\       )\/\
               ||----w |</screen>
<simpara>L&#8217;utilisation d&#8217;un module npm nous a permis d&#8217;utiliser du code sans avoir à le
créer alors qu&#8217;il n&#8217;était pas fourni par la plate-forme Node.</simpara>
<simpara>Maintenant que nous savons installer un module npm, nous pouvons en chercher
d&#8217;autres et comprendre comment les utiliser.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Où sont stockés les modules npm ?</title>
<simpara>Les modules npm et leurs dépendances sont stockés dans un répertoire
<literal>node_modules</literal>.
Ce répertoire est situé au même niveau que le fichier <literal>package.json</literal>.</simpara>
</note>
<note>
<title><phrase role="RemarquePreTitre">Sous le capôt</phrase> Ce que fait l&#8217;exécutable <literal>npm</literal> pendant l&#8217;installation</title>
<simpara>L&#8217;exécutable <literal>npm</literal> effectue un bon nombre d&#8217;actions après avoir
saisi la commande <literal>npm install cowsay</literal>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>il interroge le registre <emphasis>npmjs.com</emphasis> pour obtenir des informations sur le module demandé&#160;;</simpara>
</listitem>
<listitem>
<simpara>il détermine que <literal>1.3.0</literal> est la version la plus récente&#160;;</simpara>
</listitem>
<listitem>
<simpara>il télécharge une archive compressée (<literal>.tar.gz</literal>) qui contient tous les fichiers de la version <literal>1.3.0</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;archive est décompressée dans le répertoire <literal>node_modules</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>les dépendances sont elles aussi téléchargées puis décompressées dans le répertoire <literal>node_modules</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le module <literal>cowsay</literal> est inscrit dans le fichier <literal>package.json</literal>.</simpara>
</listitem>
</orderedlist>
</note>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Dépendances de développement</title>
<simpara>Il existe une variante de la commande pour distinguer les dépendances
spécifiques à l&#8217;outillage du projet.
Rendez-vous dans la section <link linkend="install.dev">dépendances de développement</link>
pour en savoir plus.</simpara>
</note>
</section>
<section xml:id="registry">
<title>Trouver son bonheur dans le registre npm</title>
<simpara>Le <emphasis>registre npm</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>) fourmille de modules
—&#160;de simples fonctions, des librairies ou des <emphasis>frameworks</emphasis> complets.
Ils couvrent un spectre d&#8217;usages allant de l&#8217;accès aux bases de données,
à des frameworks web, à des outils front-end, des utilitaires de test,
de compression de données, du paiement bancaire, des frameworks mobiles, etc.</simpara>
<simpara>Essayons de chercher une librairie qui puisse nous connecter à une
base de données MySQL ou MariaDB.
Tapez <literal>mysql</literal> dans le champ de recherche du registre npm ou saisissez
directement l&#8217;URL menant aux résultats de cette recherche en vous
rendant sur <phrase role="URL"><link xl:href="https://npmjs.com/search?q=mysql">npmjs.com/search?q=mysql</link></phrase>&#160;:</simpara>
<figure>
<title>Extrait des résultats d&#8217;une recherche de modules npm avec le mot-clé <emphasis>mysql</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-registry-search.png"/>
</imageobject>
<textobject><phrase>npm registry search</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les résultats sont triés par pertinence&#160;— un mélange entre popularité,
qualité et maintenance des projets.</simpara>
<simpara>Je trouve qu&#8217;il est difficile de décider uniquement en regardant la liste.
J&#8217;ai tendance à ouvrir un onglet par module pour lire leur documentation.
Prenons le cas du module <emphasis>mysql2</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mysql2">npmjs.com/mysql2</link></phrase>) justement&#160;:</simpara>
<figure>
<title>Extrait de la page consacrée au module npm <emphasis>mysql2</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-mysql2.png"/>
</imageobject>
<textobject><phrase>npm package mysql2</phrase></textobject>
</mediaobject>
</figure>
<simpara>Plusieurs éléments de cette page tendent à me rassurer
et m&#8217;aident à juger de la robustesse de ce module&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>les badges colorés qui affichent le statut d&#8217;exécution des tests&#160;;</simpara>
</listitem>
<listitem>
<simpara>une introduction de <emphasis role="strong">documentation claire et concise</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">nombre de téléchargements</emphasis> en progrès réguliers&#160;;</simpara>
</listitem>
<listitem>
<simpara>il s&#8217;utilise avec des <link xl:href="../chapter-03/index.xml#promise">promesses</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le nombre important de modules dépendants&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">je reconnais une autrice</emphasis> qui contribue du code de qualité&#160;— Rebecca Turner (<phrase role="URL"><link xl:href="https://npmjs.com/~iarna">npmjs.com/~iarna</link></phrase>).</simpara>
</listitem>
</itemizedlist>
<simpara>J&#8217;ai un doute quand je lis <emphasis>108 issues</emphasis> et <emphasis>13 pull requests</emphasis>.
Dans ce cas-là je me dis que les personnes qui maintiennent le projet ne sont
pas forcément très réactives.</simpara>
<simpara>Cependant, il y a suffisamment d&#8217;indicateurs au vert pour l&#8217;installer à coup de
<literal>npm install mysql2</literal> puis à l&#8217;essayer dans un script.</simpara>
<simpara>Le module <emphasis>mysql-libmysqlclient</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mysql-libmysqlclient">npmjs.com/mysql-libmysqlclient</link></phrase>)
ne me fait pas du tout le même effet&#160;:</simpara>
<figure>
<title>Extrait de la page consacrée au module npm <emphasis>mysql-libmysqlclient</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-mysql-libmysqlclient.png"/>
</imageobject>
<textobject><phrase>npm package mysql libmysqlclient</phrase></textobject>
</mediaobject>
</figure>
<simpara>La page du module ne met pas d&#8217;exemple simple à comprendre et fait référence
à des versions de Node antédiluviennes.
Rien n&#8217;indique qu&#8217;il ne peut pas fonctionner avec Node v10
mais la présence du mot <emphasis>binding</emphasis> m&#8217;évoque que l&#8217;installation du module
compile un programme écrit dans un autre langage
—&#160;en l&#8217;occurrence, <emphasis>libmysqlclient</emphasis>.</simpara>
<simpara>Point positif&#160;: il n&#8217;y a que 14 <emphasis>issues</emphasis> GitHub.
C&#8217;est peu mais l&#8217;une d&#8217;entre elle est intitulée
«&#160;<emphasis>Does not work with any modern version of Node.js</emphasis>&#160;».
Ça confirme les doutes du paragraphe précédent&#160;:
c&#8217;est suffisant pour que je passe mon chemin.</simpara>
<simpara>En continuant plus loin dans la liste des résultats de recherche,
je suis tombé sur le module npm nommé <emphasis>falchion</emphasis>&#160;:</simpara>
<figure>
<title>Extrait de la page consacrée au module npm <emphasis>falchion</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-package-falchion.png"/>
</imageobject>
<textobject><phrase>npm package falchion</phrase></textobject>
</mediaobject>
</figure>
<simpara>Il n&#8217;y a qu&#8217;une seule version du module, qui date de quatre années
avec une documentation qui tient sur une ligne.<?asciidoc-br?>
Il y a très peu de chances que nous puissions en faire quelque chose.</simpara>
<simpara><?asciidoc-hr?></simpara>
<simpara>Voici au final ce que j&#8217;estime être le plus important pour me faire
une idée d&#8217;un module et décider de l&#8217;installer ou non&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>présence d&#8217;une <emphasis role="strong">documentation</emphasis>&#160;— je peux me faire une idée des fonctionnalités
et de la complexité d&#8217;utilisation du module&#160;;</simpara>
</listitem>
<listitem>
<simpara>des badges d'<emphasis role="strong">intégration continue</emphasis>&#160;— je sais ainsi qu&#8217;il y a des tests
unitaires qui sont exécutés automatiquement avant que le module soit publié&#160;;</simpara>
</listitem>
<listitem>
<simpara>le nombre de <emphasis role="strong">téléchargements</emphasis>&#160;— je sais si d&#8217;autres personnes s&#8217;en servent
en espérant qu&#8217;ils remontent les problèmes rencontrés&#160;;</simpara>
</listitem>
<listitem>
<simpara>le nombre de <emphasis role="strong">versions</emphasis>&#160;— ça me donne une idée de la maturité du projet
et de la réactivité aux demandes de la communauté.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce sont des <emphasis role="strong">critères subjectifs</emphasis>.
Un module peut être populaire par ancienneté alors qu&#8217;il existe des alternatives,
plus légères ou plus simple d&#8217;utilisation.
C&#8217;est le cas du module <emphasis>moment.js</emphasis> qui est plus populaire que <emphasis>date-fns</emphasis>
—&#160;alors que je préfère ce dernier.</simpara>
<simpara>Il y a aussi des modules dans lesquels j&#8217;ai une confiance quasi-aveugle.
Ils sont publiés par les personnes présentes dans cette liste non-exhaustive&#160;:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Auteurs et autrices de modules npm à suivre</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>dougwilson</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~dougwilson">npmjs.com/~dougwilson</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>feross</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~feross">npmjs.com/~feross</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>fgribreau</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~fgribreau">npmjs.com/~fgribreau</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>iarna</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~iarna">npmjs.com/~iarna</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>isaacs</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~isaacs">npmjs.com/~isaacs</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>jdalton</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://github.com/jdalton">github.com/jdalton</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>jshttp</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://github.com/jshttp">github.com/jshttp</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>mbostock</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~mbostock">npmjs.com/~mbostock</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>nodejitsu</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://github.com/nodejitsu">github.com/nodejitsu</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>rwaldron</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~rwaldron">npmjs.com/~rwaldron</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>sindresorhus</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~sindresorhus">npmjs.com/~sindresorhus</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>substack</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~substack">npmjs.com/~substack</link></phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>zkat</simpara></entry>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://npmjs.com/~zkat">npmjs.com/~zkat</link></phrase></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Sélection de modules npm</title>
<simpara>J&#8217;ai compilé une liste de modules utiles pour mieux démarrer
dans vos projets.
Vous la trouverez en <link xl:href="../appendix-a/index.xml">annexe A</link>.</simpara>
</tip>
</section>
<section xml:id="uninstall">
<title>Désinstaller un module</title>
<simpara>L&#8217;utilisation de la commande <literal>npm uninstall</literal> supprime un module npm
et les fichiers qu&#8217;il a installé en toute sécurité.
La commande le retire ensuite de la liste des dépendances
du fichier <literal>package.json</literal>.</simpara>
<screen>$ npm uninstall cowsay
removed 10 packages in 1.963s
found 0 vulnerabilities</screen>
<simpara>Le module <emphasis>cowsay</emphasis> n&#8217;est plus installé.
Que se passe-t-il si nous exécutons à nouveau un l&#8217;exemple <literal>cow.js</literal>&#160;?</simpara>
<screen>$ node cow.js
internal/modules/cjs/loader.js:596
    throw err;
    ^

Error: Cannot find module 'cowsay'</screen>
<simpara>Le chargement du module <emphasis>cowsay</emphasis> a échoué car Node n&#8217;arrive pas à le trouver
—&#160;et c&#8217;est normal.</simpara>
<simpara>Nous devons à nouveau lancer la commande <literal>npm install cowsay</literal>
pour que le script fonctionne à nouveau.</simpara>
</section>
<section xml:id="install">
<title>Depuis un fichier <literal>package.json</literal></title>
<simpara>Jusqu&#8217;à présent, nous avons installé des modules en les ajoutant un par un.
La procédure est légèrement différente quand nous installons le projet de zéro
ou quand le fichier <literal>package.json</literal> a été mis à jour par un·e collègue, par exemple.</simpara>
<simpara>L&#8217;exemple suivante illustre la remise à zéro des modules
utilisés en exemple de ce chapitre&#160;— cf. la notice d&#8217;installation
du module <emphasis>nodebook</emphasis>&#160;:</simpara>
<screen>$ cd $(nodebook dir {chapter-id} --root)
$ rm -rf node_modules
$ npm install
added 164 packages from 583 contributors in 4.781s
found 0 vulnerabilities</screen>
<simpara>Nous nous sommes positionnés dans un répertoire qui contient
un fichier <literal>package.json</literal> puis nous avons supprimé tout ce qui aurait pu
être installé.</simpara>
<simpara>La commande <literal>npm install</literal> s&#8217;utilise de manière systématique quand
nous récupérons du code avec Git pour la première fois (<literal>git clone</literal>)
ou après une mise à jour, par exemple avec <literal>git pull</literal>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> vérifie que la correspondance est bien respectée
entre ce qui est installé dans le répertoire <literal>node_modules</literal> et
les modules listés dans le fichier <literal>package.json</literal>.
La commande <literal>npm install</literal> installe, met à jour et retire les modules nécessaires.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> <literal>npm ci</literal></title>
<simpara>La commande <literal>npm ci</literal> réinstalle un projet de zéro de manière prédictible.
Rendez-vous dans la <link linkend="ci">section <literal>npm ci</literal></link> pour en savoir plus à son sujet.</simpara>
</tip>
</section>
<section xml:id="install.version">
<title>Spécifier une version</title>
<simpara>Par défaut, l&#8217;exécutable <literal>npm</literal> installe la dernière version d&#8217;un module.
Nous avons la liberté d&#8217;en installer d&#8217;autres qui sont antérieures.
C&#8217;est pratique quand des modules npm arrêtent de supporter
des navigateurs web ou des versions de Node alors que nous les utilisons encore.</simpara>
<simpara>Nous allons utiliser le module <emphasis>lodash</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/lodash">npmjs.com/lodash</link></phrase>)
pour illustrer nos allées et venues entre différentes versions.
À l&#8217;heure où j&#8217;écris ces lignes, la version la plus récente <emphasis>lodash</emphasis>
est la <literal>4.17.10</literal>.
C&#8217;est ce que rapporte le résultat de la commande <literal>npm install lodash</literal>&#160;:</simpara>
<screen>$ npm install lodash
+ lodash@4.17.10</screen>
<simpara>L&#8217;utilisation du caractère <literal>@</literal> conjointe à un numéro de version précise
la version à installer&#160;:</simpara>
<screen>$ npm install lodash@3.0.0
+ lodash@3.0.0</screen>
<simpara>Nous avons installé une version précise mais il y a surement des mises à jour
qui ont suivi pour corriger des bugs.
Le problème est qu&#8217;à ce stade, nous ne connaissons pas le numéro de version
à spécifier.
Idéalement, je préfèrerais installer la version la plus récente de la série 3.
Il se trouve que l&#8217;exécutable <literal>npm</literal> sait le faire pour nous et sans effort&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@&lt;i&gt;3.10.1&lt;/i&gt;</screen>
<simpara>Nous pouvons faire la même chose avec la version
la plus récente de la série 3 et de la série 2.2&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@3.10.1
$ npm install lodash@2.2
+ lodash@2.2.1</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître toutes les versions d&#8217;un module</title>
<simpara>La <link linkend="view">commande <literal>npm view</literal></link> affiche les informations d&#8217;un module npm
directement depuis notre terminal.
Elle affiche toutes les versions publiées avec l&#8217;argument <literal>versions</literal>&#160;:</simpara>
<screen>$ npm view lodash &lt;i&gt;versions&lt;/i&gt;
[ '0.1.0',
  '0.2.0',
  ...
  '1.0.0',
  '1.0.1',
  '1.0.2',
  ... ]</screen>
</tip>
<simpara>Revenons à la version la plus récente en réutilisant la
<link linkend="install">commande d&#8217;installation</link> abordée auparavant&#160;:</simpara>
<screen>$ npm install lodash
+ lodash@2.4.2</screen>
<simpara>Quelque chose d&#8217;inattendu s&#8217;est produit&#160;: la version la plus récente
de la série 2 a été installée au lieu de la version 4.17.10.
Nous trouverons un élément de réponse dans le fichier <literal>package.json</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.0",
    "lodash": "<i>^2.4.2</i>"
  }
}</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>npm</literal> respecte la version précisée dans le fichier <literal>package.json</literal>
si elle n&#8217;est pas précisée dans la commande.
Si la dépendance n&#8217;est pas listée, alors l&#8217;exécutable <literal>npm</literal> installe la version
la plus récente.</simpara>
<simpara>L&#8217;étiquette <literal>latest</literal> explicite notre envie d&#8217;installer la version
la plus récente et sans tenir compte du fichier <literal>package.json</literal>&#160;:</simpara>
<screen>$ npm install lodash@&lt;i&gt;latest&lt;/i&gt;
+ lodash@4.17.10</screen>
<simpara>Nous sommes désormais en mesure de choisir entre différentes versions
d&#8217;un module et de manière plus ou moins fine.</simpara>
<simpara>Nous prendrons le temps d&#8217;explorer le mécanisme de numérotation des versions
dans la section suivante afin de mieux comprendre ce qui est renseigné
dans le fichier <literal>package.json</literal>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître les étiquettes d&#8217;un module</title>
<simpara>La <link linkend="view">commande <literal>npm view</literal></link> va à nouveau nous aider.
Elle affiche toutes les versions publiées avec l&#8217;argument <literal>dist-tags</literal>&#160;:</simpara>
<screen>$ npm view lodash dist-tags
{ &lt;i&gt;latest&lt;/i&gt;: '4.17.10' }</screen>
<simpara>Ce mécanisme d&#8217;étiquette sert de raccourci pour associer un numéro de version
(qui change) à un intitulé (qui reste dans le temps).</simpara>
</tip>
</section>
<section xml:id="semver">
<title>Comprendre les numéros de versions (<emphasis>Semantic Versioning</emphasis>)</title>
<simpara>Les numéros de versions ont été utilisées de deux manières dans les
sections précédentes&#160;: avec l&#8217;exécutable <literal>npm</literal> et en observant la liste
de dépendances dans le fichier <literal>package.json</literal>.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> découpe un numéro de version en trois parties&#160;:
<emphasis>majeur</emphasis>, <emphasis>mineur</emphasis> et <emphasis>patch</emphasis>.
Pour le numéro de version <literal>1.2.3</literal>, <literal>1</literal> est le numéro de version majeur,
<literal>2</literal> est le numéro de version mineur tandis que  <literal>3</literal> est le numéro de version patch.</simpara>
<simpara>Si nous devions mettre à jour <literal>lodash@2.2.0</literal>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>vers <literal>lodash@2.2.1</literal>&#160;: mise à jour patch&#160;— des bugs sont corrigés&#160;;</simpara>
</listitem>
<listitem>
<simpara>vers <literal>lodash@2.4.2</literal>&#160;: mise à jour mineure&#160;— des fonctionnalités sont ajoutées,
corrigées ou modifiées et ce, sans affecter notre code&#160;;</simpara>
</listitem>
<listitem>
<simpara>vers <literal>lodash@4.17.10</literal>&#160;: mise à jour majeure&#160;— des fonctionnalités ont
été modifiées, remaniées ou supprimées et peuvent casser notre code qui repose dessus.</simpara>
</listitem>
</itemizedlist>
<simpara>Une mise à jour majeure demande de lire attentivement la documentation du module
pour comprendre le volume de travail à fournir avant de monter en version.
La mise à jour mineure peut occasionnellement demander du travail selon
interprétation des développeurs de modules npm.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Différentes manières d&#8217;exprimer des versions</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="22.2222*"/>
<colspec colname="col_3" colwidth="33.3333*"/>
<colspec colname="col_4" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Symbole</entry>
<entry align="left" valign="top">Version</entry>
<entry align="left" valign="top">Représentation alternative</entry>
<entry align="left" valign="top">Représentation étendue</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara><literal>1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>^</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>^1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>1.x.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=1.0.0 &lt;2.0.0</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>~</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>~1.0.0</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>1.0.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=1.0.0 &lt;1.1.0</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>*</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>*</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>x.x.x</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>&gt;=0.0.1</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Je ne pense pas qu&#8217;il soit nécessaire de se sentir obligé·e de toujours
être positionné·e sur la dernière version majeure.
Les versions patch et mineures sont plus importantes à mes yeux
car elles contiennent des corrections qui peuvent bénéficier à nos applications.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Calculateur de version</title>
<simpara>L&#8217;outil en ligne <phrase role="URL"><link xl:href="https://semver.npmjs.com">semver.npmjs.com</link></phrase> sert à tester
la syntaxe des versions sémantiques avec de véritables modules npm.</simpara>
</tip>
</section>
<section xml:id="update">
<title>Mises à jour</title>
<simpara>Nous avons appris à installer des modules npm dans les versions de notre choix
et à les réinstaller depuis la liste contenue dans le fichier <literal>package.json</literal>.
Comment savoir si ces derniers sont à mettre à jour&#160;?</simpara>
<simpara>L&#8217;utilisation combinée des commandes <literal>npm outdated</literal> et <literal>npm update</literal> va
nous permettre d&#8217;y arriver.
Il sera plus facile de comprendre cette partie si vous vous êtes familiarisé·e
avec la notion de <link linkend="semver">version sémantique</link>.</simpara>
<simpara>Commençons par installer d&#8217;anciennes versions des modules <emphasis>lodash</emphasis> et <emphasis>cowsay</emphasis>&#160;:</simpara>
<screen>$ npm install lodash@2.0.0 cowsay@1.0.0</screen>
<simpara>La commande <literal>npm outdated</literal> affiche les dépendances qui ne sont pas à jour&#160;:</simpara>
<screen>$ npm outdated
Package  Current  Wanted   Latest  Location
cowsay     1.0.0   1.3.0    1.3.0  nodebook.chapter-05
lodash     2.0.0   2.4.2  4.17.10  nodebook.chapter-05</screen>
<simpara>Le numéro de version affiché dans la colonne <literal>Wanted</literal> est celui qui sera atteint
avec la commande <literal>npm update</literal>.</simpara>
<screen>$ npm update
+ cowsay@1.3.0
+ lodash@2.4.2
added 7 packages and updated 3 packages in 2.717s</screen>
<simpara>Observons ce qui a changé dans les résultats de la commande <literal>npm oudated</literal>&#160;:</simpara>
<screen>$ npm outdated
Package  Current  Wanted   Latest  Location
lodash     2.4.2   2.4.2  4.17.10  nodebook.chapter-05</screen>
<simpara>Seul le module <emphasis>lodash</emphasis> est désormais listé.
Les modules <emphasis>cowsay</emphasis> et <emphasis>lodash</emphasis> ont été mis à jour au plus sûr.
Le module <emphasis>lodash</emphasis> peut rester en l&#8217;état si nous n&#8217;avons pas le temps
de rendre notre code compatible avec ses changements.</simpara>
<simpara>Sinon, une <link linkend="install.version">installation manuelle</link> s&#8217;impose
avec l&#8217;étiquette <literal>latest</literal>&#160;:</simpara>
<screen>$ npm install lodash@latest
+ lodash@4.17.10</screen>
<simpara>Un dernier appel à <literal>npm outdated</literal> nous permet d&#8217;en avoir le cœur net&#160;:</simpara>
<screen>$ npm outdated</screen>
<simpara>Si rien ne s&#8217;affiche, c&#8217;est que tout est bon&#160;: nos modules sont à jour&#160;!</simpara>
</section>
</section>
<section xml:id="autres_manières_d_installer_et_d_utiliser_des_modules_npm">
<title>Autres manières d&#8217;installer et d&#8217;utiliser des modules npm</title>
<simpara>Dans la section précédente, nous avons appris à installer des modules
depuis le registre npm.<?asciidoc-br?>
Dans cette section, nous allons apprendre à les installer depuis des sources
variées, uniquement à des fins de développement ou en tant que
commandes exécutables au niveau du système d&#8217;exploitation.</simpara>
<section xml:id="install.git">
<title>Depuis GitHub, GitLab ou un dépôt Git</title>
<simpara>Il arrive que l&#8217;auteur ou autrice d&#8217;un module npm corrige un problème
sans publier le correctif sur le registre npm.
Il arrive aussi qu&#8217;un module npm soit hébergé de manière publique ou privée
sur une plate-forme d&#8217;hébergement Git comme GitLab ou GitHub et ce,
sans passer par le registre npm.</simpara>
<simpara>Le module npm <emphasis>cowsay</emphasis> est publié sur le registre npm mais il est aussi
hébergé sur GitHub à l&#8217;adresse <phrase role="URL"><link xl:href="https://github.com/piuccio/cowsay">github.com/piuccio/cowsay</link></phrase>.
Installons-le depuis cette source&#160;:</simpara>
<screen>$ npm install https://github.com/piuccio/cowsay
+ cowsay@1.3.0
updated 1 package in 5.866s</screen>
<simpara>L&#8217;exéxutable <literal>npm</literal> vérifie qu&#8217;un fichier <literal>package.json</literal> est situé à la racine
du dépôt.
Dans ce cas de figure, il utilise le programme Git pour obtenir le code source
du module npm.</simpara>
<simpara>Une écriture raccourcie existe pour installer un module depuis un hébergement
Git populaire, sans avoir à écrire l&#8217;URL en entier&#160;:</simpara>
<screen>$ npm install github:piuccio/cowsay
+ cowsay@1.3.0
updated 1 package in 4.513s</screen>
<caution>
<title><phrase role="RemarquePreTitre">Considérations</phrase> Performance d&#8217;accès à Git</title>
<simpara>L&#8217;installation est plus lente depuis un dépôt Git que depuis un registre npm.
L&#8217;exécutable <literal>npm</literal> fait appel à l&#8217;exécutable <literal>git</literal> pour cloner l&#8217;historique
du dépôt et de ses dépendances pour extraire la version adéquate
de la copie de travail.</simpara>
<simpara>Le temps de téléchargement sera proportionnel au nombre de <emphasis>commits</emphasis>.</simpara>
</caution>
<simpara>L&#8217;exécutable <literal>npm</literal> sait aussi installer des modules avec le protocole
<emphasis>Secure Shell</emphasis> (<emphasis>SSH</emphasis>) désigné par <literal>git+ssh</literal>&#160;:</simpara>
<screen>$ npm install git+ssh://git@github.com:piuccio/cowsay.git
+ cowsay@1.3.0
updated 1 package in 10.263s</screen>
<simpara>Les clients Git et SSH doivent être configurés au niveau du système pour
être en mesure de s&#8217;authentifier sur l&#8217;hôte distant.<?asciidoc-br?>
C&#8217;est une solution intéressante pour automatiser l&#8217;installation de modules privés.
L&#8217;étape suivante serait de déployer un registre npm privé ou de souscrire
une option payante sur le registre npm principal.</simpara>
</section>
<section xml:id="install.dev">
<title>Dépendance de développement</title>
<simpara>Les dépendances de développement sont des modules npm utilisés
pour <emphasis role="strong">exécuter les tests unitaires</emphasis>.
Les <emphasis role="strong">modules utilisés pour de l&#8217;outillage</emphasis> sont aussi des dépendances de développement.
Ce sont des modules que nous n&#8217;appelons pas directement avec les
fonctions <literal>require()</literal> et <literal>import</literal>.</simpara>
<simpara>Par exemple, le module npm <emphasis>mocha</emphasis> est utilisé pour structurer et exécuter
des tests unitaires pour Node et les navigateurs web.
Il serait donc logique de l&#8217;installer comme dépendance de développement.
L&#8217;option <literal>--save-dev</literal> permet de signaler cette intention à l&#8217;exécutable <literal>npm</literal>&#160;:</simpara>
<screen>$ npm install --save-dev mocha
+ mocha@5.2.0</screen>
<simpara>L&#8217;exécutable <literal>npm</literal> range alors ce module dans une nouvelle section du
fichier <literal>package.json</literal>&#160;— la section <literal>devDependencies</literal>&#160;:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "dependencies": {
    "cowsay": "^1.3.0",
    "lodash": "^4.17.10"
  },
  "<i>devDependencies</i>": {
    "mocha": "^5.2.0"
  }
}</programlisting>
<tip>
<title><phrase role="RemarquePreTitre">Optimisation</phrase> Installer seulement les dépendances de production</title>
<simpara>La <link linkend="install">commande <literal>npm install</literal></link> accepte l&#8217;option <literal>--production</literal>.
Elle installe seulement les dépendances listées dans la section <literal>dependencies</literal>&#160;:</simpara>
<screen>$ npm install --production</screen>
<simpara>Le <emphasis role="strong">poids d&#8217;installation est ainsi réduit</emphasis>.
C&#8217;est l&#8217;idéal dans le cas du déploiement de
<link xl:href="../chapter-06/index.xml#lambda">fonctions événementielles</link>
(cf. <link xl:href="../chapter-06/index.xml">chapitre 6</link>).</simpara>
</tip>
</section>
<section xml:id="install.global">
<title>Exécutable système (installation globale)</title>
<simpara>Certains modules npm s&#8217;installent comme des programmes exécutables.
Ils s&#8217;appellent ensuite dans un terminal, exactement comme nous le faisions
jusqu&#8217;à présent avec l&#8217;exécutable <literal>npm</literal>.</simpara>
<simpara>C&#8217;est le cas du module <emphasis>serve</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/serve">npmjs.com/serve</link></phrase>), par exemple.
Il démarre un serveur web en ligne de commande pour tester le rendu
de fichiers HTML sans avoir à configurer de logiciels comme <emphasis>Apache</emphasis> ou <emphasis>nginx</emphasis>.</simpara>
<simpara>L&#8217;installation est rendue globale&#160;— à l&#8217;échelle du système d&#8217;exploitation
—&#160;avec l&#8217;utilisation de l&#8217;option <literal>--global</literal>&#160;:</simpara>
<screen>$ npm install &lt;i&gt;--global&lt;/i&gt; serve
+ serve@7.2.0</screen>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Comment savoir si un module npm s&#8217;installe comme un exécutable système ?</title>
<simpara>En général, les modules npm qui se prêtent bien au jeu du <literal>npm install --global</literal>
sont ceux qui documentent des exemples de commande à exécuter,
qui se décrivent comme des outils en ligne de commande ou qui
mentionnent explicitement l&#8217;installation globale.</simpara>
</note>
<simpara>L&#8217;exécutable <literal>serve</literal> est disponible suite à l&#8217;installation globale&#160;:</simpara>
<screen>$ serve --version
7.2.0</screen>
<simpara>Le module npm s&#8217;exécute de manière transparente, sans invoquer Node ni
l&#8217;exécutable <literal>npm</literal>&#160;:</simpara>
<screen>$ serve .
INFO: Accepting connections at http://localhost:3000</screen>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> L&#8217;option <literal>--help</literal></title>
<simpara>Par convention, les modules npm qui s&#8217;utilisent en ligne de commande
sont accompagnés d&#8217;une documentation.
Ce manuel décrit des cas d&#8217;usages ainsi que les options à disposition.</simpara>
<formalpara>
<title>Affichage de la documentation du module npm <emphasis>serve</emphasis> depuis la ligne de commande.</title>
<para>
<screen>$ serve --help</screen>
</para>
</formalpara>
</tip>
<simpara>Un module npm installé de manière globale se désinstalle en passant l&#8217;option
<literal>--global</literal> à la <link linkend="uninstall">commande <literal>npm uninstall</literal></link>&#160;:</simpara>
<screen>$ npm uninstall -g serve</screen>
<simpara>Le <link xl:href="../chapter-08/index.xml">chapitre 8</link> sera l&#8217;occasion d&#8217;entrer plus en détails
dans le développement d&#8217;exécutables système écrits en ECMAScript.</simpara>
</section>
</section>
<section xml:id="scripts">
<title>Outiller un projet avec les scripts npm</title>
<simpara>Les scripts npm sont des outils puissants qui <emphasis role="strong">autonomisent l&#8217;outillage projet</emphasis>,
<emphasis role="strong">automatisent des actions</emphasis> manuelles et <emphasis role="strong">simplifient des actions</emphasis> trop
complexes à mémoriser.</simpara>
<simpara>Les scripts npm sont consignés dans la section <literal>scripts</literal> du fichier <literal>package.json</literal>.
Ils se basent sur des scripts Node et des modules npm pour
lancer des actions quand des fichiers sont modifiés,
transformer des feuilles de style, exécuter des tests unitaires ou fonctionnels,
déployer le projet, entre autres.</simpara>
<simpara>Les scripts npm permettent de créer des conventions entre nos projets.
Nous pouvons ainsi réutiliser les mêmes noms et adapter les commandes
au projet en question.</simpara>
<section xml:id="start">
<title>Démarrer l&#8217;application</title>
<simpara>Le script <literal>npm start</literal> concerne les projets dont le script principal
tourne en continu&#160;— une application web par exemple.</simpara>
<simpara>L&#8217;exemple suivant démarre un serveur web sans que nous ayons à connaître
la commande associée pour démarrer le-dit serveur&#160;:</simpara>
<screen>$ npm start

&gt; nodebook.chapter-05@1.0.0 start         <co xml:id="CO142-1"/>
&gt; micro examples/app.js                   <co xml:id="CO142-2"/>

micro: Accepting connections on port 3000</screen>
<calloutlist>
<callout arearefs="CO142-1">
<para>L&#8217;exécutable <literal>npm</literal> affiche le nom du script npm en cours d&#8217;exécution</para>
</callout>
<callout arearefs="CO142-2">
<para><literal>micro examples/app.js</literal> est la commande réellement exécutée par npm</para>
</callout>
</calloutlist>
<simpara>Nous sommes libre de renseigner la valeur du champ <literal>scripts.start</literal>
du fichier <literal>package.json</literal> comme bon nous semble&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "start": "micro examples/app.js"
  },
  "dependencies": {
    "micro": "^9.3.2"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Nous avons utilisé le module npm <emphasis>micro</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/micro">npmjs.com/micro</link></phrase>)
pour démarrer une application web.
Plus exactement, nous avons utilisé l&#8217;exécutable fourni par ce module.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Les modules npm exécutables dans les scripts npm</title>
<simpara>Les <link linkend="install.global">modules npm exécutables</link> sont disponibles au niveau du
système lorsqu&#8217;ils sont installés avec l&#8217;option <literal>--global</literal>.</simpara>
<simpara>Les exécutables des modules npm listés dans <literal>dependencies</literal> et <literal>devDependencies</literal>
sont utilisables dans les scripts npm.</simpara>
<simpara>Nous pouvons ainsi contenir tous les exécutables nécessaires dans les
dépendances du projet.</simpara>
</tip>
<simpara>Nous verrons dans le <link linkend="../chapter-06/index.adoc">chapitre 6</link> que les
plates-formes de service utilisent aussi la valeur du champ <literal>scripts.start</literal>
pour déterminer comment démarrer notre application.</simpara>
</section>
<section xml:id="test">
<title>Exécuter des tests</title>
<simpara>Le script <literal>npm test</literal> concerne tous les projets pour qui nous avons écrit
des tests qu&#8217;ils soient unitaires ou fonctionnels.</simpara>
<simpara>L&#8217;intention de la commande lancée par le script npm est de terminer
en erreur si un des tests n&#8217;aboutit pas au résultat escompté.</simpara>
<simpara>L&#8217;exemple suivant lance un test unitaire qui s&#8217;assure de la cohérence
d&#8217;un des exemples précédents&#160;:</simpara>
<screen>$ npm test

&gt; nodebook.chapter-05@1.0.0 test  <co xml:id="CO143-1"/>
&gt; mocha examples/tests.js         <co xml:id="CO143-2"/>

app.js
  ✓ prints a cow as a response

1 passing</screen>
<calloutlist>
<callout arearefs="CO143-1">
<para>L&#8217;exécutable <literal>npm</literal> affiche le nom du script npm en cours d&#8217;exécution</para>
</callout>
<callout arearefs="CO143-2">
<para><literal>mocha examples/tests.js</literal> est la commande réellement exécutée par npm</para>
</callout>
</calloutlist>
<simpara>Cette fois-ci, nous avons personnalisé la valeur du champ <literal>scripts.test</literal>
du fichier <literal>package.json</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "test": "mocha examples/tests.js"
  },
  "devDependencies": {
    "mocha": "^5.2.0"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Nous avons eu recourt au module npm <emphasis>mocha</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/mocha">npmjs.com/mocha</link></phrase>).
De même qu&#8217;avec le <link linkend="start">script de démarrage</link>, nous avons eu recourt
à l&#8217;exécutable fourni par le module.
En revanche nous l&#8217;avons listé dans la <link linkend="install.dev">section <literal>devDependencies</literal></link>
car il est relatif à l&#8217;outillage du projet.</simpara>
<simpara>Les services d&#8217;intégration continue lancent le script <literal>npm test</literal>
lorsqu&#8217;ils détectent qu&#8217;ils ont affaire à un projet Node.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Scripts définis par npm</title>
<simpara>D&#8217;autres scripts que <literal>test</literal> et <literal>start</literal> sont définis par l&#8217;exécutable <literal>npm</literal>.
Ils sont tous documentés sur <phrase role="URL"><link xl:href="https://docs.npmjs.com/misc/scripts">docs.npmjs.com/misc/scripts</link></phrase>.</simpara>
</note>
</section>
<section xml:id="run">
<title>Créer un script npm personnalisé</title>
<simpara>Les scripts npm personnalisés sont utiles <emphasis role="strong">lorsque nous souhaitons outiller</emphasis>
notre projet sans forcément que ça soit en rapport avec le lancement des tests
ou de l&#8217;application.</simpara>
<simpara>Les scripts personnalisés se démarrent avec <literal>npm run</literal>&#160;:</simpara>
<screen>$ npm &lt;i&gt;run&lt;/i&gt; print-args

&gt; nodebook.chapter-05@1.0.0 print-args
&gt; node examples/print-args.js

Rien à signaler.</screen>
<simpara>Nous avons créé ce script en configurant la valeur du champ <literal>scripts.print-args</literal>
du fichier <literal>package.json</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "print-args": "node examples/print-args.js"
  }
}</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Lister les scripts disponibles</title>
<simpara>La commande <literal>npm run</literal> (sans argument) liste tous les scripts npm du projet.</simpara>
</tip>
<simpara>J&#8217;ai développé ces conventions avec le temps&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>npm run build</literal>&#160;: construit les artéfacts à déployer&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>npm run deploy</literal>&#160;: déploie le projet vers l&#8217;hébergeur&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>npm run lint</literal>&#160;: applique un vérificateur syntaxique au code du projet&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>npm run watch</literal>&#160;: démarre l&#8217;application et la relance à chaque changement.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Passer des arguments à un script npm</title>
<simpara>Une option spéciale nous aide à transmettre des arguments au script en question.
Les arguments doivent être placés à droite de l&#8217;option <literal>--</literal>&#160;:</simpara>
<screen>$ npm run print-args un --test=true
['un']
$ npm run print-args -- un --test=true
['un', '--test=true']</screen>
</tip>
<simpara>Un script npm peut faire appel à d&#8217;autres scripts npm&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "npm run lint <i>&&</i> mocha examples/tests.js"
  }
}</programlisting>
</para>
</formalpara>
<simpara>J&#8217;ai plutôt tendance à découper mes scripts de sorte à ce qu&#8217;ils fassent
tous une chose et une seule.
Je peux ainsi les appeler de manière individuelle pour réduire la boucle
de feedback.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "npm run lint && npm run test:unit",
    "test:unit": "mocha examples/tests.js"
  }
}</programlisting>
</para>
</formalpara>
<simpara>La section suivante va nous aider à orchestrer l&#8217;exécution des scripts
les uns par rapport aux autres.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Accéder aux valeurs du fichier <literal>package.json</literal></title>
<simpara>Toutes les sections du fichier <literal>package.json</literal> sont accessibles depuis
les scripts npm sous forme de
<link xl:href="../chapter-04/index.xml#process.argv">variables d&#8217;environnement</link>.
Leur nom est préfixé par <literal>npm_package</literal> suivi de leur nom "mis à plat".
Ainsi le champ <literal>version</literal> est accessible en tant que <literal>$npm_package_version</literal>
et le champ <literal>config.port</literal> en tant que <literal>$npm_package_config_port</literal>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "<i>config</i>": {
    "<i>port</i>": "4000"
  };
  "scripts": {
    "start": "node server --port $npm_package_<i>config</i>_<i>port</i>",
  }
}</programlisting>
</para>
</formalpara>
</tip>
</section>
<section xml:id="run-pre-post">
<title>Exécuter des commandes avant et après des scripts npm</title>
<simpara>L&#8217;ordre d&#8217;exécution des scripts se contrôle en utilisant les préfixes
<literal>pre</literal> et <literal>post</literal>.
Par exemple, les scripts nommés <literal>pretest</literal> et <literal>posttest</literal> seront exécutés
respectivement avant et après le script <literal>test</literal>.</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  ...
  "scripts": {
    "lint": "eslint ./examples",
    "test": "mocha examples/tests.js",
    "<i>pre</i>test": "npm run lint"
  }
}</programlisting>
</para>
</formalpara>
<simpara>Dans cet exemple de configuration, l&#8217;exécution de la commande <literal>npm test</literal>
lancera d&#8217;abord le script <literal>pretest</literal>, puis le script <literal>lint</literal>
puis enfin le script <literal>test</literal>&#160;:</simpara>
<screen>$ npm test

&gt; nodebook.chapter-05@1.0.0 pretest
&gt; npm run lint
...

&gt; nodebook.chapter-05@1.0.0 lint
&gt; eslint ./examples
...

&gt; nodebook.chapter-05@1.0.0 test
&gt; mocha examples/tests.js
...</screen>
<simpara>Ce mécanisme est utile pour s&#8217;intercaler sur des temps particuliers
du cycle de vie d&#8217;un projet node.
Voici une sélection</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="40*"/>
<colspec colname="col_3" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Script</entry>
<entry align="left" valign="top">Quand</entry>
<entry align="left" valign="top">Pourquoi</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>pretest</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant les tests</simpara></entry>
<entry align="left" valign="top"><simpara>Préparer l&#8217;espace de travail</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>posttest</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Après les tests</simpara></entry>
<entry align="left" valign="top"><simpara>Vérifier les règles de syntaxe de notre code</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>postinstall</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Après installation les dépendances</simpara></entry>
<entry align="left" valign="top"><simpara>Préparation significative du projet (téléchargements supplémentaires, etc.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>prestart</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant de démarrer l&#8217;application</simpara></entry>
<entry align="left" valign="top"><simpara>Préparatifs légers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>prepublishOnly</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Avant de publier le module</simpara></entry>
<entry align="left" valign="top"><simpara>Préparation du projet avant de le distribuer (compilation de fichiers, etc.)</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="run-all">
<title>Automatiser tout l&#8217;outillage projet</title>
<simpara>Les scripts npm suffisent à outiller la majorité des projets.
Cependant ils peuvent devenir difficiles à lire lorsque les
lignes deviennent trop longues.
Il manquerait presque un moyen de les regrouper.</simpara>
<simpara>Le module npm <emphasis>npm-run-all</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/npm-run-all">npmjs.com/npm-run-all</link></phrase>) est un
module qui parallélise l&#8217;exécution des scripts et simplifie l&#8217;appel d&#8217;un groupe
de scripts.</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "scripts": {
    "build": "npm-run-all --parallel 'build:*'", <co xml:id="CO144-1"/>
    "build:front-end": "browserify ...",
    "build:backend": "browserify ...",
    "build:css": "sass ..."
  }
  "devDependencies": {
    "npm-run-all": "*"
  }
}</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO144-1">
<para>Les trois scripts préfixés par <literal>build:</literal> seront appelés en parallèle en exécutant <literal>npm run build</literal>.</para>
</callout>
</calloutlist>
<simpara>Il est aussi possible de déclencher des actions parallèles après une première
action séquentielle&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "scripts": {
    "clean": "rm -rf ./dist",
    "build": "npm-run-all clean --parallel 'build:*'", <co xml:id="CO145-1"/>
    "build:front-end": "browserify ...",
    "build:backend": "browserify ..."
  }
  "devDependencies": {
    "npm-run-all": "*"
  }
}</screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO145-1">
<para><literal>npm-run-all</literal> exécute le script <literal>clean</literal> avant les autres scripts préfixés par <literal>build:</literal>.</para>
</callout>
</calloutlist>
<simpara>Libre à vous d&#8217;orchestrer les scripts en les groupant avec un motif de noms
ainsi qu&#8217;en combinant les options <literal>--parallel</literal> (alias <literal>-p</literal>)
et <literal>--sequential</literal> (alias <literal>-s</literal>) pour activer ou désactiver
le parallélisme d&#8217;exécution.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Pourtant j&#8217;ai entendu parler de Gulp et de Grunt</title>
<simpara>L&#8217;énorme avantage d&#8217;outiller un projet avec la commande <literal>npm run</literal> et
l&#8217;exécutable <literal>npm-run-script</literal> est que nous utilisons directement les outils
dont nous avons besoin.</simpara>
<simpara>Gulp et Grunt introduisent une complexité d&#8217;apprentissage et des couches
d&#8217;abstraction qui augmentent la fragilité de l&#8217;outillage et augmentent
la barrière d&#8217;entrée de nos projets.</simpara>
<simpara>Tant mieux si nous pouvons nous en passer pour façonner nos propres outils.</simpara>
</note>
</section>
</section>
<section xml:id="package.json">
<title>Anatomie du fichier <literal>package.json</literal></title>
<simpara>Le fichier <literal>package.json</literal> est essentiel pour tirer parti de l&#8217;exécutable <literal>npm</literal>.
Tout projet intéressé par l'<link linkend="install">installation de modules npm</link> ou par
l'<link linkend="scripts">outillage des scripts</link> va forcément avoir ce fichier quelque
part dans son arborescence.</simpara>
<simpara>On peut décomposer ce fichier en plusieurs parties&#160;:
les <emphasis role="strong">informations générales</emphasis> qui aident les utilisateurs et utilisatrices
à découvrir le module en <link linkend="registry">effectuant une recherche</link>,
les <emphasis role="strong">points d&#8217;entrée</emphasis> pour inclure ou exécuter le module
et la <emphasis role="strong">configuration projet</emphasis> qui impacte le fonctionnement de l&#8217;exécutable npm.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Informations pour faciliter la découverte et la compréhension</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>version</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="semver">Semver</link></simpara></entry>
<entry align="left" valign="top"><simpara>Avec <link linkend="version"><literal>npm version</literal></link></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>description</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Explique l&#8217;intention du module à une personne qui le découvre</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keywords</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Tableau de texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite sa découverte sur <phrase role="URL">npmjs.com</phrase></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>homepage</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Indique où trouver de la documentation et des exemples d&#8217;utilisation — ça peut être l&#8217;adresse du dépôt GitLab ou GitHub</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>license</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Explicite les conditions de réutilisation du code dans un autre projet</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bugs.url</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite la remontée de bugs</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>repository.type</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>En général la valeur est <literal>git</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>repository.url</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (URL)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Facilite la découverte du code source à l&#8217;origine du module</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="all" rowsep="1" colsep="1">
<title>Points d&#8217;entrée pour utiliser votre module</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Correspond au nom à spécifier aux fonctions <literal>require()</literal> et <literal>import</literal> — Un changement de nom obligera de mettre à jour tous les scripts qui appelle ce module</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>main</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Script qui sera utilisé lors de l&#8217;appel à <literal>require()</literal> et <literal>import</literal> — par défaut <literal>index.js</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bin</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Texte (chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Script qui sera utilisé comme exécutable lors de l&#8217;appel <literal>npx &lt;module&gt;</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bin</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/chemin)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Idem — forme qui permet de déclarer plusieurs exécutables au sein d&#8217;un même module</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="all" rowsep="1" colsep="1">
<title>Configuration projet pour l&#8217;exécutable <literal>npm</literal></title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="28.5714*"/>
<colspec colname="col_5" colwidth="28.5715*"/>
<thead>
<row>
<entry align="left" valign="top">Section</entry>
<entry align="left" valign="top">Obligatoire&#160;?</entry>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Modifiable</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Booléen</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Empêche la publication accidentelle sur le registre npm</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>engines</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Certains hébergeurs utilisent ce champ pour déterminer la version de Node à utiliser</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>dependencies</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>Avec <literal>npm install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <link linkend="install">installer des modules npm</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>devDependencies</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/<link linkend="semver">SemVer</link>)</simpara></entry>
<entry align="left" valign="top"><simpara>Avec <literal>npm install</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <link linkend="install.dev">dépendances de développement</link></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>scripts</literal></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>Objet (nom/commande)</simpara></entry>
<entry align="left" valign="top"><simpara>À la main</simpara></entry>
<entry align="left" valign="top"><simpara>Voir la section <link linkend="scripts">scripts npm</link></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Tout sur le fichier <literal>package.json</literal></title>
<simpara>La page <phrase role="URL"><link xl:href="https://docs.npmjs.com/files/package.json">docs.npmjs.com/files/package.json</link></phrase> documente
de manière exhaustive les sections du fichier <literal>package.json</literal>.</simpara>
<simpara>En la lisant, vous apprendrez l&#8217;existence d&#8217;autres sections qui pourraient
peut-être vous intéresser.</simpara>
</note>
</section>
<section xml:id="commands">
<title>Quelques commandes pour aller plus loin</title>
<simpara>Nous venons de voir les commandes les plus utilisées de l&#8217;exécutable <literal>npm</literal>.
D&#8217;autres commandes complètent son utilisation.
Leur intérêt varie en fonction de vos envies et de vos pratiques de développement.
Pas d&#8217;inquiétude donc si vous ne les utilisez pas toutes&#160;:
j&#8217;en parle pour <emphasis role="strong">éclairer quelques points intéressants à explorer</emphasis>.</simpara>
<section xml:id="view">
<title><literal>npm view</literal> : voir les informations d&#8217;un module</title>
<simpara>La commande <literal>npm view</literal> est une vue synthétique d&#8217;un module npm donné.
Elle est similaire à celle que nous pourrions trouver sur le registre npm
mais condensée pour l&#8217;affichage dans un terminal.</simpara>
<simpara>Nous y retrouvons des informations fournies par les auteurs et autrices du module
ainsi que d&#8217;autres, fournies par le registre npm.</simpara>
<screen>$ npm view nodebook

nodebook@0.9.1 | CC-BY-NC-SA-4.0 | deps: 6 | versions: 21
Node.js — Apprendre par l'exemple

keywords: nodejs, book, french, livre, learn, apprendre

bin: nodebook

dist
.tarball https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz
.shasum: 5ea87e9b85782e23164705a49cb7bd2dc4063775
.integrity: sha512-...
.unpackedSize: 15.0 MB

dependencies:
finalhandler: ^1.1.1  serve-static: ^1.13.2
get-port: ^3.2.0      update-check: ^1.5.2
glob: ^7.1.2          yargs: ^11.1.0

maintainers:
- oncletom

dist-tags:
latest: 0.9.1

published 23 hours ago by oncletom</screen>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Sélection de champs que je trouve intéressants.</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>bin</literal></simpara>
</entry>
<entry>
<simpara>Indique la présence d&#8217;un ou plusieurs <link linkend="install.global">exécutables</link>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dist</literal></simpara>
</entry>
<entry>
<simpara>Informations à propos du fichier téléchargé quand
nous faisons <literal>npm install &lt;module&gt;</literal>.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dependencies</literal></simpara>
</entry>
<entry>
<simpara>Les modules additionnels téléchargés lors de l&#8217;installation.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>dist-tags</literal></simpara>
</entry>
<entry>
<simpara>Les étiquettes définies par les auteurs et autrices, utiles quand nous souhaitons
<link linkend="install.version">jongler entre différentes versions</link> du module.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Nous pouvons aussi zoomer sur une métadonnée.
Par exemple, le champ <literal>dependencies</literal> pour ne lister que les dépendances directes&#160;:</simpara>
<screen>$ npm view nodebook dependencies
{ finalhandler: '^1.1.1',
  'get-port': '^3.2.0',
  glob: '^7.1.2',
  'serve-static': '^1.13.2',
  'update-check': '^1.5.2',
  yargs: '^11.1.0' }</screen>
<simpara>Il est même possible de zoomer sur un niveau plus fin de métadonnée,
avec une annotation similaire à celle d&#8217;un objet ECMAScript&#160;:</simpara>
<screen>$ npm view nodebook dist.<i>unpackedSize</i>
14985184
$ npm view nodebook dist
{ integrity:
   'sha512-...',
  shasum: '5ea87e9b85782e23164705a49cb7bd2dc4063775',
  tarball:
    'https://registry.npmjs.org/nodebook/nodebook-0.9.1.tgz',
  fileCount: 486,
  <i>unpackedSize</i>: 14985184 }</screen>
</section>
<section xml:id="npx">
<title><literal>npx</literal> : exécuter un module sans l&#8217;installer</title>
<simpara>L'<link linkend="install.global">installation globale</link> est idéale pour installer un module
npm sous forme d&#8217;exécutable système.
On peut cependant vite arriver à en installer beaucoup sans vraiment penser à
les enlever quand on n&#8217;en a plus besoin.</simpara>
<simpara>L&#8217;exécutable <literal>npx</literal> (pour <literal>npm executable</literal>) s&#8217;installe automatiquement avec npm.
Il agit comme un raccourci en allantrécupérer le module npm désiré
et l&#8217;exécute en lui passant les arguments souhaités.</simpara>
<screen>$ npx cowsay Magique !
npx: installed 10 in 2.122s
 ___________
&lt; Magique ! &gt;
 -----------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||</screen>
<simpara>C&#8217;est l&#8217;équivalent de ces trois commandes, en quelque sorte&#160;:</simpara>
<screen>$ npm install --global cowsay
$ cowsay Magique !
$ npm uninstall cowsay</screen>
</section>
<section xml:id="home">
<title><literal>npm home</literal> : visiter le site web d&#8217;un module</title>
<simpara>Vous vous demandez où trouver davantage de documentation à propos d&#8217;un
module npm&#160;?
<literal>npm home</literal> ouvre un nouvel onglet de navigateur et dirige ce dernier
vers sur le site web du module de votre choix.</simpara>
<screen>$ npm home lodash
$ npm home micro</screen>
</section>
<section xml:id="audit">
<title><literal>npm audit</literal> : vérifier la sécurité des dépendances</title>
<simpara>La commande <literal>npm audit</literal> part à la recherche de vulnérabilités connues
dans l&#8217;intégralité des dépendances d&#8217;un projet.</simpara>
<simpara><literal>npm install</literal> effectue un audit de manière implicite afin de s&#8217;assurer
que notre projet n&#8217;est pas compromis à notre insu.
Les deux dernières lignes sont issues de la fonctionnalité d&#8217;audit de sécurité&#160;:</simpara>
<screen>$ npm install lodash@3
+ lodash@3.10.1
added 1 package from 5 contributors in 1.95s
found 1 low severity vulnerability
  run `npm audit fix` to fix them, or `npm audit` for details</screen>
<simpara>Un affichage plus détaillé est présenté en exécutant <literal>npm audit</literal>&#160;:</simpara>
<screen>$ npm audit

# Run  npm install lodash@4.17.10  to resolve 1 vulnerability
Recommended action is a potentially breaking change
┌───────────────┬───────────────────────────────────────────┐
│ Low           │ Prototype Pollution                       │
├───────────────┼───────────────────────────────────────────┤
│ Package       │ <i>lodash</i>                                    │
├───────────────┼───────────────────────────────────────────┤
│ Dependency of │ lodash                                    │
├───────────────┼───────────────────────────────────────────┤
│ <i>Path</i>          │ lodash                                    │
├───────────────┼───────────────────────────────────────────┤
│ More info     │ https://nodesecurity.io/advisories/577    │
└───────────────┴───────────────────────────────────────────┘

found 1 low severity vulnerability
  1 vulnerability requires semver-major dependency updates.</screen>
<simpara>Chaque module concerné par une faille connue est listée à l&#8217;écran (champ <literal>Package</literal>).
Le champ <literal>Path</literal> spécifie l&#8217;arbre de dépendances qui mène à la vulnérabilité
—&#160;c&#8217;est utile pour identifier quelle dépendance directe actualiser.</simpara>
<simpara>La commande <literal>npm audit</literal> précise la marche à suivre dès qu&#8217;elle le peut.<?asciidoc-br?>
Ici, elle indique qu&#8217;une <link linkend="semver">mise à jour majeure</link> est
nécessaire pour se débarasser du problème.
Le seul hic est que ça occasionnera peut-être d&#8217;ajuster le code utilisant cette
dépendance sous peine de casser notre application.</simpara>
<simpara>La commande <literal>npm audit fix</literal> corrigera toutes les dépendances pour lesquelles
il est possible de changer la version de manière automatique et sans risque.
Les mises à jour majeures sont toujours manuelles et demandent votre intervention.</simpara>
</section>
<section xml:id="ci">
<title><literal>npm ci</literal> : installer à toute vitesse</title>
<simpara>La commande <literal>npm ci</literal> est destinée à installer les modules listés dans
le fichier <literal>package.json</literal>.
Cette commande vise à s&#8217;exécuter plus rapidement et dans des environnements
qui sont autres que ceux de développement (en intégration continue, en production, etc.).</simpara>
<simpara>Cette commande fait une chose de plus que la <link linkend="install">commande <literal>npm install</literal></link>&#160;:
elle supprime systématiquement le répertoire <literal>node_modules</literal> pour rendre
chaque installation reproductible à l&#8217;identique.
Elle fait aussi une chose de moins&#160;: elle se contente d&#8217;installer les
modules tels que listés dans le <link linkend="package-lock">fichier <literal>package-lock.json</literal></link>.
C&#8217;est ce dernier point qui rend cette commande si rapide&#160;— moins de vérifications,
moins d&#8217;aller-retours, moins de complexité.</simpara>
<formalpara>
<title>travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js
node_js: v10
install: npm ci   <co xml:id="CO146-1"/>
script: npm test
cache: npm        <co xml:id="CO146-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO146-1">
<para>Surcharge la commande par défaut (<literal>npm install</literal>)</para>
</callout>
<callout arearefs="CO146-2">
<para>Les modules npm seront sauvegardés entre deux jobs&#160;— l&#8217;installation ira plus vite si les modules sont obtenus depuis le cache plutôt que depuis le registre npm.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Remettre un projet à zéro</title>
<simpara>La commande <literal>npm ci</literal> est pratique pour remettre un projet à zéro,
en cas de problème d&#8217;installation ou après avoir bidouillé dans le répertoire
<literal>node_modules</literal> par exemple.</simpara>
</tip>
</section>
<section xml:id="doctor">
<title><literal>npm doctor</literal> : vérifier l&#8217;état du système</title>
<simpara><literal>npm doctor</literal> est une commande utilitaire qui vérifie que npm trouve
tout ce qu&#8217;il faut pour bien fonctionner.</simpara>
<simpara>L&#8217;exécutable <literal>npm</literal> inspecte le système à la recherche de Git,
teste la connectivité vers le registre npm et s&#8217;assure qu&#8217;il a accès en écriture
à des répertoires essentiels à son bon fonctionnement.</simpara>
<screen>$ npm doctor
Check                               Value
npm ping                            OK
npm -v                              v6.1.0
node -v                             v10.0.0
npm config get registry             https://registry.npmjs.org
which git                           /usr/local/bin/git
Perms check on cached files         ok
Perms check on global node_modules  ok
Perms check on local node_modules   ok
Verify cache contents               verified 4066 tarballs</screen>
</section>
<section xml:id="config">
<title><literal>npm config</literal> : changer les réglages de l&#8217;exécutable <literal>npm</literal></title>
<simpara>La commande <literal>npm config</literal> est affiche et modifie la configuration
de l&#8217;exécutable <literal>npm</literal>.
Elle se découpe en plusieurs sous-commandes comme en atteste cette tentative
d&#8217;utilisation&#160;:</simpara>
<screen>$ npm config
npm ERR! Usage:
npm ERR! npm config set &lt;key&gt; &lt;value&gt;
npm ERR! npm config get [&lt;key&gt;]
npm ERR! npm config delete &lt;key&gt;
npm ERR! npm config list [--json]
npm ERR! npm config edit</screen>
<simpara>La sous-commande <literal>get</literal> affiche la valeur par défaut d&#8217;une clé de configuration&#160;:</simpara>
<screen>$ npm config get loglevel
notice</screen>
<simpara>Cette configuration reflète la verbosité d&#8217;affichage de l&#8217;exécutable.
Elle agit comme un curseur pour choisir une vue plus ou moins détaillée de
ce qui se trame sous le capot.<?asciidoc-br?>
Augmentons la verbosité d&#8217;affichage avec la sous-commande <literal>set</literal>.
Nous verrons ainsi les tentatives d&#8217;accès à Internet de l&#8217;exécutable <literal>npm</literal>&#160;:</simpara>
<screen>$ npm config set loglevel http</screen>
<simpara>Nous voyons désormais les requêtes HTTP effectuées.
Ici, en rejouant l&#8217;exemple d'<link linkend="install.global">installation globale</link> de module&#160;:</simpara>
<screen>$ npm install --global serve
GET 200 https://registry.npmjs.org/serve 653ms
GET 304 https://registry.npmjs.org/chalk 271ms (from cache)
GET 304 https://registry.npmjs.org/arg 274ms (from cache)
...</screen>
<simpara>La sous-commande <literal>ls</literal> récapitule tous nos changements de configuration.
Elle affiche tous les réglages par défaut en la suffixant de l&#8217;option <literal>--long</literal>&#160;:</simpara>
<screen>$ npm config ls
$ npm config ls --long</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Sauvegarder sa configuration npm</title>
<simpara>Chaque appel à <literal>npm config set</literal> enregistre les changements dans un fichier
de configuration <literal>~/.npmrc</literal>.</simpara>
<simpara>Il est propre à l&#8217;utilisateur actif de notre ordinateur.
Libre à vous de le sauvegardez ou d&#8217;en fournir un spécifique dans le cadre
de votre environnement de production ou d&#8217;intégration continue.</simpara>
</tip>
<simpara>Pour y voir plus clair, j&#8217;ai effectué une petite sélection des éléments
de configuration que vous seriez peut-être amené à modifier sur votre
machine de développement ou sur votre configuration de production&#160;:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="60*"/>
<thead>
<row>
<entry align="left" valign="top">Clé</entry>
<entry align="left" valign="top">Par défaut</entry>
<entry align="left" valign="top">Remarque</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>access</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>restricted</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>public</literal> pour faire en sorte que les modules faisant partie d&#8217;une organisation soient considérés comme publics.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>audit</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;audit automatique à chaque installation de module — cf. <link linkend="audit"><literal>npm audit</literal></link>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cache</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>~/.npm</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Modifiez le chemin pour que le cache des modules npm soit géré ailleurs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>color</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;utilisation des couleurs de npm.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>depth</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Infinity</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Le nombre utilisé limitera la profondeur d&#8217;affichage des commandes <literal>npm ls</literal>, <literal>npm outdated</literal>, etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>git</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>git</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Nom de l&#8217;exécutable ou chemin d&#8217;accès de l&#8217;exécutable <literal>git</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>https-proxy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>``</simpara></entry>
<entry align="left" valign="top"><simpara>Adresse du proxy HTTPS — remplace alors la variable d&#8217;environnement <literal>HTTPS_PROXY</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>loglevel</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>notice</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Change la verbosité d&#8217;affichage des messages — <literal>silent</literal>, <literal>error</literal>, <literal>warn</literal> diminueront la verbosité tandis que <literal>http</literal>, <literal>timing</literal>, <literal>info</literal>, <literal>verbose</literal> ou <literal>silly</literal> augmenteront le niveau de détails.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>offline</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>true</literal> pour que l&#8217;installation des modules npm se fasse sans transiter par le réseau.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>progress</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>false</literal> pour désactiver l&#8217;affichage de la barre de progression.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>proxy</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Adresse du proxy HTTP — remplace alors la variable d&#8217;environnement <literal>HTTP_PROXY</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>registry</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal><link xl:href="https://registry.npmjs.org/">registry.npmjs.org/</link></literal></simpara></entry>
<entry align="left" valign="top"><simpara>Changez cette valeur par celle de votre registre auto-hébergé.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>send-metrics</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Passez à <literal>true</literal> pour envoyer des statistiques d&#8217;utilisation à l&#8217;équipe de npm.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tmp</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>$TMPDIR</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Changez cette valeur pour utiliser un autre répertoire temporaire.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Tout sur <literal>npm config</literal></title>
<simpara>La page <phrase role="URL"><link xl:href="https://docs.npmjs.com/misc/config#config-settings">docs.npmjs.com/misc/config#config-settings</link></phrase> documente
de manière exhaustive toutes les clés de configuration et leur impact sur
l&#8217;exécutable <literal>npm</literal>.</simpara>
</note>
</section>
<section xml:id="publish">
<title><literal>npm publish</literal> : publier un module npm</title>
<simpara>Nous savons comment <link linkend="install">installer des modules</link> depuis le registre
mais nous n&#8217;avions pas encore vu comment contribuer nous-même à cet écosystème.</simpara>
<simpara>L&#8217;option <literal>--dry-run</literal> est peut-être la première option à utiliser avec cette
commande puisqu&#8217;elle fait comme si nous voulions publier le module, mais
sans aller jusqu&#8217;à téléverser le code sur le registre npm.
Je la recommande pour voir de nos propres yeux ce qui serait transmis
et rectifier un problème avant qu&#8217;il ne se produise&#160;— vous n&#8217;avez pas envie
de mettre en ligne un fichier qui contient un mot de passe n&#8217;est-ce pas&#160;?</simpara>
<screen>$ npm publish --dry-run
npm notice
npm notice 📦  nodebook.chapter-05@1.0.0
npm notice === Tarball Contents ===
npm notice 754B    package.json
npm notice 59B     .eslintrc.yaml
npm notice 59.3kB  index.adoc
npm notice 133B    examples/app.js
npm notice 115B    examples/cow.js
npm notice 65B     examples/hello.js
npm notice 138B    examples/print-args.js
npm notice 223B    examples/tests.js
npm notice 46.3kB  images/module-content.png
npm notice 75.6kB  images/npm-package-falchion.png
npm notice 219.5kB images/npm-package-mysql-libmysqlclient.png
npm notice 170.2kB images/npm-package-mysql2.png
npm notice 172.7kB images/npm-registry-search.png
npm notice === Tarball Details ===
npm notice name:          nodebook.chapter-05
npm notice version:       1.0.0
npm notice package size:  656.8 kB
npm notice unpacked size: 745.1 kB
npm notice shasum:        7f2887b8840124cf8d0c2fa72e8d61cd739
npm notice integrity:     sha512-a6yvb8WO[...]yUeLy2jg/viXQ==
npm notice total files:   13</screen>
<tip>
<title><phrase role="RemarquePreTitre">Configuration</phrase> Empêcher un module d&#8217;être publié</title>
<simpara>La section de configuration <literal>private</literal> est à ajouter dans le fichier <literal>package.json</literal>
d&#8217;un module pour empêcher toute publication involontaire.</simpara>
<formalpara>
<title>package.json</title>
<para>
<screen>{
  "name": "...",
  "private": true
}</screen>
</para>
</formalpara>
</tip>
<simpara>La publication d&#8217;un module implique que vous ayiez configuré les sections
<literal>main</literal> ou <literal>bin</literal> du fichier <literal>package.json</literal> pour respectivement indiquer
quel fichier charger avec <literal>require('&lt;nom du module&gt;')</literal>
 ou exécuter avec <link linkend="npx"><literal>npx &lt;nom du module&gt;</literal></link>.<?asciidoc-br?>
Si ça ne vous parle pas du tout, je vous invite à aller lire la section
<link linkend="package.json">anatomie du fichier <literal>package.json</literal></link>.</simpara>
<simpara>La publication d&#8217;un module nécessite de se créer un compte sur le registre
<phrase role="URL"><link xl:href="https://npmjs.com">npmjs.com</link></phrase>.
Si vous publiez un module pour la première fois, l&#8217;exécutable <literal>npm</literal> vous
demandera alors de vous identifier&#160;— le module sera ensuite publié en votre nom.</simpara>
<simpara>Idéalement, je recommande de ne pas publier de module à la main mais de
<emphasis role="strong">préférer l&#8217;utilisation d&#8217;un service d&#8217;intégration continue</emphasis> comme
<emphasis>Travis CI</emphasis> (<phrase role="URL"><link xl:href="https://travisci.com">travisci.com</link></phrase>).
La configuration d&#8217;un tel service permet de publier <link linkend="version">une nouvelle version</link>
seulement si les tests passent au vert.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Ignorer des fichiers à publier</title>
<simpara>L&#8217;exécutable <literal>npm</literal> ignore par défaut les mêmes fichiers que Git.
Il honore la présence des fichiers <literal>.gitignore</literal> et exclut les fichiers
et répertoires concernés de la publication.</simpara>
<simpara>Le fichier <literal>.npmignore</literal> remplace le fichier <literal>.gitignore</literal> dans le cas
où votre besoin de fichiers à versionner est différent de celui de fichiers
à publier sur le registre npm.</simpara>
<formalpara>
<title>.npmignore</title>
<para>
<screen>.DS_Store       <co xml:id="CO147-1"/>
node_modules    <co xml:id="CO147-2"/>

src/*.html      <co xml:id="CO147-3"/>
!src/index.html <co xml:id="CO147-4"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO147-1">
<para>Ignore un fichier nommé <literal>.DS_Store</literal>&#160;— courant sous macOS.</para>
</callout>
<callout arearefs="CO147-2">
<para>Ignore le répertoire <literal>node_modules</literal> et tout ce qu&#8217;il contient.</para>
</callout>
<callout arearefs="CO147-3">
<para>Ignore tous les fichiers <literal>.html</literal> contenus dans le répertoire <literal>src</literal>.</para>
</callout>
<callout arearefs="CO147-4">
<para>À l&#8217;exception du fichier <literal>index.html</literal> contenu dans le répertoire <literal>src</literal>.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="version">
<title><literal>npm version</literal> : déterminer une nouvelle version sans se tromper</title>
<simpara>Nous ne pouvons pas <link linkend="publish">publier</link> deux fois une même version d&#8217;un
module npm.
Nous devons donc à minima modifier la valeur de la section <literal>version</literal>
dans le fichier <literal>package.json</literal>.</simpara>
<simpara>La commande <literal>npm version</literal> automatise le calcul du prochain numéro de version,
reflète cette version dans le champ <literal>version</literal> du fichier <literal>package.json</literal>
et procède à un commit Git, tagué avec cette nouvelle version.
Je trouve cette manière élégante, notamment en complément de la
publication automatique par le biais d&#8217;un service d&#8217;intégration continue.</simpara>
<simpara>La commande <literal>npm version</literal> se complète forcément d&#8217;un argument pour
indiquer la <link linkend="semver">granularité de version sémantique</link> concernée.
Ainsi, si nous voulons mettre à jour la version d&#8217;un module en version <literal>1.0.0</literal>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>npm version patch</literal> la changera en <literal>1.0.1</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>npm version minor</literal> la changera en <literal>1.1.0</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>npm version major</literal> la changera en <literal>2.0.0</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Cette montée en version se complète optionnellement de <link linkend="scripts">scripts npm</link>
pour automatiser d&#8217;autres actions lors d&#8217;une montée en version&#160;:</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Ordre d&#8217;exécution des <link linkend="run">scripts npm</link> lors d&#8217;une montée de version</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>preversion</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version n&#8217;a pas encore été appliqué.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>version</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version est appliqué&#160;— vous pouvez encore ajouter de nouveaux fichiers au commit Git.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>postversion</literal></simpara>
</entry>
<entry>
<simpara>Le nouveau numéro de version est appliqué et un commit a été ajouté à l&#8217;historique Git.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Déterminer la version depuis Git</title>
<simpara>Peut-être que vous gérez vous-même le numéro de version en l&#8217;attribuant
directement avec un <emphasis>tag</emphasis> Git (<literal>git tag &#8230;&#8203;</literal>).</simpara>
<simpara>Dans ce cas, la commande <literal>npm version from-git</literal> reporte le numéro de version
du dernier <emphasis>tag</emphasis> Git dans le fichier <literal>package.json</literal>.</simpara>
</tip>
</section>
</section>
<section xml:id="questions">
<title>Questions et mystères autour de npm</title>
<simpara>L&#8217;exécutable <literal>npm</literal> et le registre du même nom ont accompagné Node quasiment
depuis le début.
Il paraît simple de prime abord et je pense que c&#8217;est normal de se sentir
surpris·e par ses résultats.</simpara>
<simpara>Passons en revue des critiques ou questionnements que j&#8217;entends régulièrement
afin d&#8217;y voir plus clair.</simpara>
<section xml:id="npm.update">
<title>Quand mettre à jour l&#8217;exécutable npm ?</title>
<simpara>L&#8217;exécutable <literal>npm</literal> est mis à jour régulièrement.
Un message s&#8217;affiche dans notre terminal lorsque nous l&#8217;utilisons et qu&#8217;il
détecte qu&#8217;une version plus récente est disponible.</simpara>
<screen>╭─────────────────────────────────────╮
│                                     │
│   Update available 6.0.0 → 6.1.0    │
│     Run npm i -g npm to update      │
│                                     │
╰─────────────────────────────────────╯</screen>
<simpara>Le module qui contient l&#8217;exécutable <literal>npm</literal> suit le principe de
<link linkend="semver">versions sémantiques</link>.
Ainsi, la mise à jour sera sans effort si le numéro majeur de la
nouvelle version reste le même.</simpara>
<simpara>J&#8217;ai tendance à regarder du côté de <phrase role="URL"><link xl:href="https://github.com/npm/npm/releases">github.com/npm/npm/releases</link></phrase>
pour lire tous les <emphasis>Breaking Changes</emphasis> et comprendre en quoi la mise à jour
majeure m&#8217;affecte.</simpara>
</section>
<section xml:id="package-lock">
<title>Je ne vois pas l&#8217;intérêt du fichier <literal>package-lock.json</literal></title>
<simpara>Le fichier <literal>package-lock.json</literal> est créé automatiquement par l&#8217;exécutable <literal>npm</literal>
dès que vous ajoutez votre première dépendance à un projet.</simpara>
<simpara>Jetons un œil à son contenu pour tenter d&#8217;en cerner les contours&#160;:</simpara>
<screen>{
  "name": "nodebook.chapter-05",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "acorn": {
      "version": "5.6.1",
      "resolved":
        "https://registry.npmjs.org/acorn/-/acorn-5.6.1.tgz",
      "integrity": "sha512-...",
      "dev": true
    },
    "cowsay": {
      "version": "1.3.0",
      "resolved":
        "https://registry.npmjs.org/cowsay/-/cowsay-1.3.0.tgz",
      "integrity": "sha512-...",
      "requires": {
        "get-stdin": "^5.0.1",
        "optimist": "~0.6.1",
        "string-width": "~2.1.1",
        "strip-eof": "^1.0.0"
      }
    },
    ...
  }
}</screen>
<simpara>Il ressemble beaucoup au fichier <literal>package.json</literal>.
On notera qu&#8217;il contient exclusivement des données liées aux dépendances
ainsi que <emphasis role="strong">toutes les dépendances des dépendances</emphasis>.</simpara>
<simpara>Si le fichier <literal>package.json</literal> contient une <link linkend="semver">version sémantique</link>,
celui <emphasis role="strong">contient la version exacte</emphasis> de chaque dépendance ainsi que deux
autres types d&#8217;informations&#160;: l&#8217;URL de téléchargement et une signature
qui permet de vérifier si le fichier télécharger est le bon (intégrité).</simpara>
<simpara>La représentation complète de l&#8217;arbre de dépendances dans le fichier <literal>package-lock.json</literal>
traduit deux intentions&#160;:
rendre l&#8217;installation des dépendances possibles en se basant uniquement sur
ce fichier et accélérer le processus d&#8217;installation.</simpara>
<variablelist>
<varlistentry>
<term>Avantages</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Le projet s&#8217;installe encore plus rapidement grâce à la commande <literal>npm ci</literal>.</simpara>
</listitem>
<listitem>
<simpara>Nous pouvons reproduire la même installation sur plusieurs ordinateurs.</simpara>
</listitem>
<listitem>
<simpara>La commande <literal>npm install</literal> installe plus rapidement en présence d&#8217;un fichier <literal>package-lock.json</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Inconvénients</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Nous devons vérifier manuellement s&#8217;il y a des patchs à coup de <literal>npm outdated</literal> et de <literal>npm update</literal>.</simpara>
</listitem>
<listitem>
<simpara>Ça fait un truc de plus à apprendre même si on n&#8217;a pas l&#8217;impression de l&#8217;utiliser.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="bower">
<title>npm c&#8217;est pour le back-end et bower pour le front-end</title>
<simpara><emphasis>bower</emphasis> (<phrase role="URL"><link xl:href="https://bower.io">bower.io</link></phrase>) est un gestionnaire de modules
spécialisé dans le développement front-end.</simpara>
<simpara>Je pense que <emphasis>bower</emphasis> était utile à une époque où l&#8217;outillage front-end disponible
dans Node était encore confidentiel.
Je pense aussi que cette époque est révolue, au sens où l&#8217;outillage dédié à
Node et aux navigateurs web tend à se confondre.</simpara>
<simpara>En apprenant JavaScript, Node et npm, nous gagnons non seulement un outillage
disponible immédiatement mais aussi la capacité à créer le nôtre.
Pour en savoir plus sur comment développer pour le front-end comme on développe
pour Node, je vous invite à lire le <link xl:href="../chapter-09/index.xml">chapitre 9</link>.</simpara>
<variablelist>
<varlistentry>
<term>Avantages</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>On peut installer un projet sans qu&#8217;il possède un fichier <literal>package.json</literal>.</simpara>
</listitem>
<listitem>
<simpara>On n&#8217;a pas nécesairement besoin de s&#8217;outiller pour utiliser les modules bower.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Inconvénients</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Si on utilise déjà un fichier <literal>package.json</literal> pour d&#8217;autres besoins, autant l&#8217;utiliser pour les dépendances front-end, autant utiliser npm.</simpara>
</listitem>
<listitem>
<simpara>Le développement de bower stagne depuis 2015 et je pense que le projet sera arrêté tôt ou tard.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="est_ce_que_je_dois_versionner_le_répertoire_literal_node_modules_literal">
<title>Est-ce que je dois versionner le répertoire <literal>node_modules</literal> ?</title>
<simpara>Le contenu du répertoire <literal>node_modules</literal> se recrée automatiquement
en utilisant l&#8217;exécutable <literal>npm</literal>, que ça soit avec la
<link linkend="install">commande <literal>npm install</literal></link> ou la <link linkend="update">commande <literal>npm update</literal></link>.
Mieux vaut versionner les fichiers <literal>package.json</literal> et
<link linkend="package-lock"><literal>package-lock.json</literal></link> pour être certain·e
de les recréer comme il faut.</simpara>
<simpara>Le répertoire <literal>node_modules</literal> n&#8217;a donc pas besoin d&#8217;être versionné.
Je vous encourage à <emphasis role="strong">ajouter <literal>node_modules</literal> dans le fichier <literal>.gitignore</literal></emphasis>.
Ce fichier texte se situe en général à la racine de votre projet.</simpara>
<variablelist>
<varlistentry>
<term>Avantages</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Je n&#8217;en vois pas.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Inconvénients</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Difficile à versionner avec Git en cas de conflit.</simpara>
</listitem>
<listitem>
<simpara>Ça va exploser si deux personnes utilisent des systèmes d&#8217;exploitation différents&#160;— certaines dépendances génèrent des fichiers en fonction du système.</simpara>
</listitem>
<listitem>
<simpara>Ça va exploser s&#8217;il manque un module quelque part&#160;— et ça sera un problème plus à régler que de <emphasis>ne pas</emphasis> versionner ce répertoire.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="yarn">
<title>Il paraît que Yarn, c&#8217;est mieux</title>
<simpara>L&#8217;application <emphasis>yarn</emphasis> (<phrase role="URL"><link xl:href="https://yarnpkg.com">yarnpkg.com</link></phrase>) se veut être une alternative
à l&#8217;exécutable <literal>npm</literal>.
Le programme vise une installation rapide, hors-ligne et sécurisée.</simpara>
<simpara>npm rattrape régulièrement les fonctionnalités qui "donnent de l&#8217;avance" à <emphasis>yarn</emphasis>.
Le choix tient donc plutôt du goût ou de l&#8217;idéologie.
Essayez donc <emphasis>yarn</emphasis> et gardez-le pour les bonnes raisons&#160;— les vôtres.</simpara>
<variablelist>
<varlistentry>
<term>Avantages</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Le mode <emphasis>workspace</emphasis> permet de lier plusieurs projets entre eux de manière déclarative.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Inconvénients</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Il faudra quand même savoir comment fonctionne npm pour les projets qui n&#8217;utilisent pas <emphasis>yarn</emphasis>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="all-your-base-are-belong-to-us">
<title>npm est lent, il installe la moitié d&#8217;Internet à chaque fois</title>
<simpara>L&#8217;exécutable <literal>npm</literal> passe le plus clair de son temps à faire des aller-retours
vers le registre npm en utilisant votre connexion Internet.
Il téléchargera un module seulement s&#8217;il ne l&#8217;a pas déjà téléchargé à une autre
reprise, sur un autre projet.</simpara>
<simpara>L&#8217;équipe de développement de l&#8217;exécutable <literal>npm</literal> travaille à améliorer
ses performances et sa qualité d&#8217;utilisation.
Cette équipe n&#8217;a pas d&#8217;influence sur les choix faits par les autrices et auteurs
de modules npm.</simpara>
<simpara>Le temps de téléchargement d&#8217;un module npm dépend de deux choses&#160;:
du <emphasis role="strong">nombre de dépendances</emphasis> à installer et de leur <emphasis role="strong">poids respectif</emphasis>.
Le poids d&#8217;un module correspond à la somme du poids de chaque script et
des ressources additionnelles (images, documentation, etc).<?asciidoc-br?>
Dans les deux cas, <emphasis role="strong">plus il y&#8217;en a, plus ça prendra de temps à installer</emphasis>.</simpara>
<simpara>Par exemple, le seul ajout de <emphasis>webpack 4</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/webpack">npmjs.com/webpack</link></phrase>)
augmente le coût de téléchargement de 14Mo lors de <literal>npm install</literal>.
Ce n&#8217;est pas rien et ce n&#8217;est certainement pas la faute à l&#8217;exécutable <literal>npm</literal>.</simpara>
<simpara>Le service en ligne <emphasis>Package Phobia</emphasis> (<phrase role="URL"><link xl:href="https://packagephobia.now.sh">packagephobia.now.sh</link></phrase>)
garde un historique du poids des modules npm.
Celui de <emphasis>webpack</emphasis> se trouve sur
<phrase role="URL"><link xl:href="https://packagephobia.now.sh/result?p=webpack">packagephobia.now.sh/result?p=webpack</link></phrase>.</simpara>
<figure>
<title>Coût d&#8217;installation du module npm <emphasis>webpack</emphasis> (en vert foncé) et de ses dépendances (en vert clair).</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/module-content.png"/>
</imageobject>
<textobject><phrase>module content</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Connaître le coût des dépendances de son projet</title>
<simpara>Le module npm <emphasis>cost-of-modules</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/cost-of-modules">npmjs.com/cost-of-modules</link></phrase>)
calcule la quantité et le poids des dépendances listées
dans un fichier <literal>package.json</literal>.</simpara>
<simpara>Pratique pour identifier quel module remplacer par un autre, plus léger et donc
plus rapide à installer.</simpara>
<screen>$ npx cost-of-modules               <co xml:id="CO148-1"/>
┌───────────┬─────────────┬───────┐
│ name      │ children    │ size  │
├───────────┼─────────────┼───────┤
│ lodash    │ 0           │ 1.34M │
├───────────┼─────────────┼───────┤
│ micro     │ 19          │ 0.67M │
├───────────┼─────────────┼───────┤
│ cowsay    │ 9           │ 0.22M │
├───────────┼─────────────┼───────┤
│ 3 modules │ 28 children │ 2.22M │
└───────────┴─────────────┴───────┘</screen>
<calloutlist>
<callout arearefs="CO148-1">
<para>La <link linkend="npx">commande <literal>npx</literal></link> est un raccourci pour exécuter des modules npm sans les installer.</para>
</callout>
</calloutlist>
</tip>
</section>
<section xml:id="errors">
<title>Que signifient les erreurs affichées pendant <literal>npm install</literal> ?</title>
<simpara>L&#8217;exécutable <literal>npm</literal> est généreux en messages pendant l&#8217;installation
de modules.
C&#8217;est parfois difficile à lire, notamment pour comprendre la raison du message
et la solution à apporter.</simpara>
<simpara>Si <literal>npm WARN</literal> s&#8217;affiche, ce n&#8217;est pas une erreur mais un message
à caractère informatif.<?asciidoc-br?>
Si <literal>npm ERR</literal> débute la ligne, il y a un problème sur lequel nous
avons une action immédiate à mener.</simpara>
<section xml:id="error-deprecated">
<title>Module déprécié</title>
<simpara>Un module est déprécié quand il n&#8217;est plus maintenu par ses auteurs ou autrices,
s&#8217;il est développé sous un nouveau nom ou si nous sommes encouragé·e·s à
<link linkend="install.version">faire une mise à jour majeure</link>.</simpara>
<simpara>Un module déprécié ne nous regarde pas sauf s&#8217;il est listé dans le champ
<literal>dependencies</literal> ou <literal>devDependencies</literal> d&#8217;un fichier <literal>package.json</literal>.</simpara>
<formalpara>
<title>Exemple d&#8217;encouragements à utiliser un autre module.</title>
<para>
<screen>npm WARN deprecated babel-preset-es2017@6.24.1:
  Thanks for using Babel: <i>we recommend using babel-preset-env</i>
  now: please read babeljs.io/env to update!

npm WARN deprecated babel-preset-babili@0.0.10: babili has
  been <i>renamed to babel-minify</i>.
  Please update to babel-preset-minify</screen>
</para>
</formalpara>
<formalpara>
<title>Exemple de module qui n&#8217;est plus maintenu.</title>
<para>
<screen>npm WARN deprecated nomnom@1.6.2: <i>Package no longer supported</i>.
  Contact support@npmjs.com for more info.</screen>
</para>
</formalpara>
<simpara>Un module qui n&#8217;est plus maintenu ne recevra probalement plus de mises à jour.
Il vaut mieux dans ce cas en trouver un autre qui fait plus ou moins la même chose.</simpara>
</section>
<section xml:id="error-skipping">
<title>Problème avec une dépendance optionnelle</title>
<simpara>Certains modules effectuent une opération de compilation&#160;: une partie de leur
code source est écrit dans un autre langage que l&#8217;ECMAScript et ils
font en sorte de créer un pont avec Node.</simpara>
<simpara>Il arrive que l&#8217;opération de compilation n&#8217;aboutisse pas pour diverses raisons
—&#160;il manque un logiciel, incompatibilité avec le système d&#8217;exploitation
ou avec l&#8217;architecture du CPU.</simpara>
<simpara>Le fait qu&#8217;il y ait marqué <literal>SKIPPING</literal> et <literal>OPTIONAL</literal> me laisse penser
que ce n&#8217;est pas grave si l&#8217;opération ne se passe pas comme prévu.</simpara>
<screen>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY:
  Unsupported platform for fsevents@1.1.3:
  wanted {"os":"darwin","arch":"any"}
  (current: {"os":"win32","arch":"x64"})</screen>
</section>
<section xml:id="error-404">
<title>Module introuvable</title>
<simpara>Le module que vous cherchez à installer n&#8217;existe pas.
Il s&#8217;agit peut-être d&#8217;une erreur de frappe ou alors le module a été retiré
de la circulation.</simpara>
<screen>$ npm i aria-roless
npm ERR! code E404
npm ERR! 404 Not Found: aria-roless@latest</screen>
</section>
<section xml:id="error-crlf">
<title>Caractère de fin de ligne sous Windows</title>
<simpara>Les anciennes versions de npm avaient du mal à concilier les caractères de fin
de ligne sous Windows (<literal>\r\n</literal>), caractère différent des autres systèmes Linux (<literal>\n</literal>).</simpara>
<screen>npm error Expected linebreaks to be 'LF' but
  found 'CRLF' linebreak-style</screen>
<simpara><link linkend="npm.update">Mettez à jour npm</link> vers une version plus récente pour
régler le problème.</simpara>
</section>
<section xml:id="error-pkg">
<title>Fichier <literal>package.json</literal> incomplet</title>
<simpara>Les messages suivants s&#8217;affichent quand les champs <literal>description</literal> et
<literal>repository</literal> manquent à l&#8217;appel de notre fichier <literal>package.json</literal>.</simpara>
<screen>npm WARN tmp@1.0.0 No description
npm WARN tmp@1.0.0 No repository field.</screen>
<simpara>Réferrez-vous à la section <link linkend="package.json">anatomie du fichier <literal>package.json</literal></link>
pour savoir comment remplir ces champs manquants.</simpara>
</section>
<section xml:id="error-peer-dependency">
<title>Dépendance complémentaire à installer</title>
<simpara>Certains modules nécessitent un ou plusieurs modules complémentaires pour
fonctionner.
Toutefois ces modules complémentaires sont à installer manuellement.
C&#8217;est la signification du message d&#8217;erreur suivant.</simpara>
<screen>npm WARN <i>react-power-picture</i>@1.0.0 <i>requires</i> a peer of
  <i>react</i>@^15.0.0-0 || ^16.0.0-0 but none is installed.
  You must install peer dependencies yourself.</screen>
<simpara>L&#8217;exemple précédent laisse à penser que nous avons installé le module npm
<emphasis>react-power-picture</emphasis>.
L&#8217;installation du module signale que le module npm complémentaire <emphasis>react</emphasis>
est nécessaire mais que nous ne l&#8217;avons pas installé.</simpara>
<simpara>Si c&#8217;est quelque chose qui vous parle, installez alors <emphasis>react</emphasis>
avec <literal>npm install react</literal>.<?asciidoc-br?></simpara>
<simpara>Si vous pensez que c&#8217;est une erreur ou une incompréhension, désinstallez
le module et cherchez une alternative.
Ça se produit généralement quand on n&#8217;aperçoit pas qu&#8217;un module est dédié
à un certain framework&#160;— et qu&#8217;on ne veut pas utiliser ce framework.</simpara>
</section>
</section>
</section>
<section xml:id="conclusion_5">
<title>Conclusion</title>
<simpara>L&#8217;exécutable <literal>npm</literal> est un outil qui va bien au-delà de la simple installation
de modules&#160;: il va jusqu&#8217;à <emphasis role="strong">créer un outillage autonome</emphasis> pour chacun de nos projets.</simpara>
<simpara>Nous avons appris à <emphasis role="strong">jongler entre les différentes versions d&#8217;un module</emphasis>
pour comprendre la notion de <link linkend="semver">version sémantique</link> et son impact
sur les commandes d&#8217;installation et de mises à jour.</simpara>
<simpara>Nous avons vu que les <emphasis role="strong">scripts npm représentent un outillage à portée de main</emphasis>.
Ils nous facilitent la vie en plus d&#8217;être partagés avec
les personnes impliquées dans un même projet.</simpara>
<simpara>Avec le langage ECMAScript (<link xl:href="../chapter-03/index.xml">chapitre 3</link>),
l&#8217;environnement Node (<link xl:href="../chapter-04/index.xml">chapitre 4</link>)
et maintenant avec npm, nous avons des fondations solides pour
déployer du code (<link xl:href="../chapter-06/index.xml">chapitre 6</link>) et créer toutes
sortes d&#8217;applications entièrement en JavaScript.</simpara>
</section>
</chapter>
<chapter xml:id="déployer_notre_code">
<title>Déployer notre code</title>
<simpara>Le déploiement d&#8217;une application Node nous permettra d&#8217;améliorer la
qualité de notre code en gommant les derniers bugs et en automatisant
la détection des erreurs et des failles de sécurité.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Déployer une application Node</simpara>
</listitem>
<listitem>
<simpara>Choisir son hébergement</simpara>
</listitem>
<listitem>
<simpara>Améliorer la portabilité</simpara>
</listitem>
<listitem>
<simpara>Démarrer automatiquement nos applications</simpara>
</listitem>
<listitem>
<simpara>À quoi penser après la mise en ligne&#160;?</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Ce chapitre nous permettra d&#8217;y voir plus clair du côté de l&#8217;hébergement
et de la mise en ligne d&#8217;une application Node.
Nous pourrons choisir ce qui nous paraît le plus abordable,
que ça soit en termes d&#8217;argent ou de complexité d&#8217;utilisation.</simpara>
<simpara>Nous mettrons en œuvre les
<link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link>
du chapitre 4 pour que nos applications en ligne
fonctionnent de la même manière que sur notre ordinateur.</simpara>
<simpara>Enfin, nous verrons différents types de service pour être tenu·e informé·e
des erreurs applicatives et des failles de sécurité sans effort et sans
être des expert·e.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-06
$ cd $(nodebook dir chapter-06)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="deploy">
<title>Déployer une application Node</title>
<simpara>Le choix de la technique de déploiement dépend de plusieurs facteurs qui se
renvoient à eux-mêmes&#160;: l&#8217;hébergement peut dépendre du déploiement et vice-versa.</simpara>
<simpara>Je vous propose de partir balayer les différentes techniques de déploiement
avec des exemples et de voir quelles seraient les raisons d&#8217;opter pour l&#8217;une
d&#8217;entre elles.</simpara>
<simpara>Le choix est subjectif et vous appartient, en fonction de l&#8217;aisance que vous avez
à vous en emparer.
C&#8217;est un sujet qui prend du temps avant d&#8217;être maitrisé donc n&#8217;hésitez pas
à vous y reprendre à plusieurs fois.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Quelles techniques de déploiement s&#8217;utilisent avec quel type d&#8217;hébergement ?</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><link linkend="hosting.paas"><emphasis>PaaS</emphasis></link></entry>
<entry align="left" valign="top"><link linkend="hosting.shared">Mutualisé</link></entry>
<entry align="left" valign="top"><link linkend="hosting.cloud">Cloud</link></entry>
<entry align="left" valign="top"><link linkend="hosting.lambda">Lambda</link></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.notebook">Notebook Web</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.sftp">SSH/SFTP</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2248;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.github">Import GitHub</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.cli">CLI</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.git"><literal>git push</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.clone">SSH + <literal>git pull</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.recipe">Recette</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.docker"><literal>docker push</literal></link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><link linkend="deploy.ci">Intégration continue</link></simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<section xml:id="deploy.notebook">
<title>En codant dans un navigateur web</title>
<simpara>Le moyen le plus rapide d&#8217;exécuter du code Node sans avoir à se préoccuper
du déploiement est d&#8217;utiliser un service en ligne et de modifier du code
avec un navigateur web.</simpara>
<simpara>Je recommande <emphasis>RunKit</emphasis> (<phrase role="URL"><link xl:href="https://runkit.com/">runkit.com/</link></phrase>) pour créer rapidement
du code qui tient dans un seul fichier, sans installer Node sur sa machine.
Le code est exécuté sur les serveurs de RunKit, le résultat s&#8217;affiche chez nous.
Les <link xl:href="../chapter-05/index.xml#modules">modules npm</link>
(<link xl:href="../chapter-05/index.xml">chapitre 5</link>) sont installés automatiquement dans
leur version la plus récente.</simpara>
<figure>
<title>Exemple de <emphasis>notebook</emphasis> RunKit dans le navigateur Firefox.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/runkit-notebook.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>runkit notebook</phrase></textobject>
</mediaobject>
</figure>
<simpara>RunKit propose aussi un modèle de <link linkend="lambda">fonction éphémère</link> dont le
résultat devient accessible depuis une URL dédiée.
Essayez de copier/coller le code suivant dans un nouveau notebook en vous
rendant sur <phrase role="URL"><link xl:href="https://runkit.com/new">runkit.com/new</link></phrase>&#160;:</simpara>
<formalpara>
<title>runkit-endpoint.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const pokemon = require('pokemon-random-name'); <co xml:id="CO149-1"/>

exports.endpoint = (request, response) =&gt; {     <co xml:id="CO149-2"/>
  response.end(pokemon());
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO149-1">
<para>Le module npm <phrase role="URL"><link xl:href="https://npmjs.com/pokemon-random-name">npmjs.com/pokemon-random-name</link></phrase> exporte une fonction qui retourne un nom aléatoire de Pokémon.</para>
</callout>
<callout arearefs="CO149-2">
<para><literal>exports.endpoint</literal> est spécifique à RunKit et accepte une fonction identique à l&#8217;événement <literal>server.on('request')</literal> du <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link> (<link xl:href="../chapter-04/index.xml">chapitre 4</link>).</para>
</callout>
</calloutlist>
<simpara>Une fois sauvegardé et après avoir cliqué sur le lien <emphasis role="strong">endpoint</emphasis>,
un nouvel onglet s&#8217;ouvre et affiche un nom aléatoire de Pokémon.
C&#8217;est la valeur de retour passé à la réponse, comme on l&#8217;aurait fait
avec le <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>
(<link xl:href="../chapter-04/index.xml">chapitre 4</link>) ou dans une
<link xl:href="../chapter-07/index.xml">application web</link> (<link xl:href="../chapter-07/index.xml">chapitre 7</link>).</simpara>
<simpara>Le service en ligne <emphasis>glitch</emphasis> (<phrase role="URL"><link xl:href="https://glitch.com/">glitch.com/</link></phrase>) permet d&#8217;aller
plus loin en développant, hébergeant et partageant des applications complètes.
Le service redéploie notre application à chaque changement.
Le fichier <literal>.env</literal> stocke les
<link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link> de manière
sécurisée&#160;— nous seul y avons accès.</simpara>
<figure>
<title>Exemple d&#8217;application Node sur glitch.com.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/glitch-app.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>glitch app</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Console web</title>
<simpara>Glitch nous offre même une console web&#160;: un <link linkend="../chapter-04/index.adoc">terminal</link>
entièrement fonctionnel, depuis un navigateur web&#160;!</simpara>
<simpara>Parfait pour <link xl:href="../chapter-08/index.xml">coder un outil en ligne de commande</link>
(<link xl:href="../chapter-08/index.xml">chapitre 8</link>) en travaillant depuis plusieurs
ordinateurs sans avoir à tout réinstaller à chaque fois.</simpara>
</tip>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Remixez les exemples de cet ouvrage</title>
<simpara>Vous pouvez créer votre premier projet sur glitch.
<emphasis>Remixez</emphasis> cet ouvrage en cliquant en vous rendant sur
<phrase role="URL">https://glitch.com/edit/#!/remix/nodebook</phrase>.</simpara>
<simpara>Le contenu et les exemples seront copiés dans un nouveau projet,
exécutable et modifiable selon vos envies.</simpara>
</tip>
</section>
<section xml:id="deploy.sftp">
<title>En transférant des fichiers via SSH</title>
<simpara>Transférer des fichiers est idéal pour débuter et lorsqu&#8217;on n&#8217;utilise pas Git
pour versionner son code.</simpara>
<simpara>Les services d&#8217;hébergement mutualisé, virtualisé ou dédié accordent
un accès à votre espace en ligne par le biais du protocole
SSH (<phrase role="URL"><link xl:href="https://fr.wikipedia.org/wiki/Secure_Shell">fr.wikipedia.org/wiki/Secure_Shell</link></phrase>).
Ce protocole crée une connexion sécurisée&#160;: les commandes saisies dans votre
terminal font effet sur la machine sur laquelle vous êtes connecté·e.</simpara>
<simpara>Des logiciels comme <emphasis>FileZilla Client</emphasis> (<phrase role="URL"><link xl:href="https://filezilla-project.org/">filezilla-project.org/</link></phrase>)
servent d&#8217;interfaces graphiques pour transférer des fichiers de notre machine
vers une machine distante.<?asciidoc-br?>
Les codes d&#8217;accès SSH se trouvent en général dans la section <emphasis>Aide</emphasis> ou <emphasis>Guides</emphasis>
de votre hébergeur.</simpara>
<figure>
<title>Exemple de connexion à un serveur SSH distant avec FileZilla Client sous macOS.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/filezilla-file-transfer.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>filezilla file transfer</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Windows</phrase> WinSCP</title>
<simpara><emphasis>WinSCP</emphasis> (<phrase role="URL"><link xl:href="https://winscp.net">winscp.net</link></phrase>) est une alternative libre à
FileZilla pour Windows.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> <literal>scp</literal> et <literal>rsync</literal></title>
<simpara>Notre terminal peut aussi servir à transférer des fichiers.
Deux programmes se basent sur SSH et sont installés par défaut sur la plupart
des ordinateurs Linux et macOS&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>scp</literal> pour envoyer des fichiers de machine à machine</simpara>
</listitem>
<listitem>
<simpara><literal>rsync</literal> pour n&#8217;envoyer que les fichiers qui ont été modifiés ou supprimés</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="deploy.github">
<title>En important du code depuis GitHub</title>
<simpara>Importer du code depuis GitHub est la manière la plus simple de transférer
tous les fichiers versionnés sans être familier avec Git.</simpara>
<simpara>La plate-forme de <link linkend="deploy.notebook">programmation en ligne</link> glitch
offre une option pour importer n&#8217;importe quel projet GitHub&#160;— à partir du moment
où le dépôt est public.</simpara>
<figure>
<title>Bouton d&#8217;import d&#8217;un dépôt GitHub sur glitch.com.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/glitch-github-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>glitch github import</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un clic sur le bouton <guibutton>Import from GitHub</guibutton> ouvre une invite de saisie
destinée à mentionner le nom du dépôt GitHub à importer.
Le projet en cours sera entièrement remplacé par le contenu du dépôt distant.
C&#8217;est pratique pour récupérer des exercices ou pour apprendre en travaillant
sur du code écrit par quelqu&#8217;un d&#8217;autre.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Importer les exemples de cet ouvrage</title>
<simpara>Récupérez tout le contenu et les exemples de cet ouvrage
en recopiant <literal>oncletom/nodebook</literal> dans l&#8217;invite de saisie.</simpara>
</tip>
<simpara>La <link linkend="paas">plate-forme de services</link> Heroku (<phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase>)
pousse l&#8217;import GitHub un peu plus loin.
Sa fonctionnalité <emphasis>déploie</emphasis> l&#8217;application à chaque nouveau commit.
L&#8217;application redémarre ensuite automatiquement pour prendre les changements en compte.</simpara>
<figure>
<title>Paramétrage de déploiement automatisé depuis un dépôt GitHub sur heroku.com.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-github-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku github import</phrase></textobject>
</mediaobject>
</figure>
<simpara>Une option nous permet de déployer une nouvelle version de l&#8217;application
à la suite d&#8217;une <link linkend="deploy.ci">intégration continue réussie</link>.
Nous réduisons ainsi les risques de déployer une version défectueuse.</simpara>
</section>
<section xml:id="deploy.cli">
<title>Avec l&#8217;outil en ligne de commande de l&#8217;hébergeur</title>
<simpara>L&#8217;outil en ligne de commande d&#8217;un hébergeur permet de gérer les déploiements
<emphasis>et</emphasis> d&#8217;autres aspects de l&#8217;hébergement en même temps.</simpara>
<simpara>La <link linkend="paas">plate-forme de services</link> <emphasis>now</emphasis> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>)
est un exemple de simplicité à ce niveau.</simpara>
<formalpara>
<title>Installation et configuration de l&#8217;outil <literal>now</literal></title>
<para>
<screen>$ npm install -g now
$ now login</screen>
</para>
</formalpara>
<simpara>Dans un terminal, déplacez-vous vers le répertoire de l&#8217;application à déployer.
Il suffit de taper <literal>now</literal> pour transférer les fichiers.
Les dépendances s&#8217;installent et le déploiement est accessible quelques secondes
plus tard&#160;:</simpara>
<screen>$ now
Deploying ~/workspace/dtc-innovation/food-coops-dashboards
&gt; Using Node.js 9.10.1 (requested: `&gt;=8.0.0`)
&gt; https://food-coops-dashboards-okgwzegyus.now.sh
&gt; Synced 1 file (169.84KB) [11s]
&gt; Building...
&gt; ▲ npm install
&gt; ✓ Using "package-lock.json"
&gt; ⧗ Installing 9 main dependencies...
&gt; ▲ npm install
&gt; added 389 packages in 8.609s
&gt; ▲ Snapshotting deployment
&gt; Build completed
&gt; Verifying instantiation in bru1
&gt; ✔ Scaled 1 instance in bru1 [31s]
&gt; Success! Deployment ready</screen>
<simpara>En optant pour l&#8217;offre payante, nous pouvons aussi gérer les noms de domaine et
sous-domaines en leur attribuant l&#8217;URL du déploiement&#160;:</simpara>
<screen>$ now alias food-coops-dashboards-okgwzegyus.now.sh my-domain.com</screen>
<note>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Application de bureau</title>
<simpara>Le client en ligne de commande existe en version graphique.
Un glissé/déposé de fichiers suffit à lancer un déploiement.</simpara>
<simpara>Il se télécharge sur <phrase role="URL"><link xl:href="https://zeit.co/download">zeit.co/download</link></phrase>.</simpara>
</note>
<simpara>L&#8217;outil de la <link linkend="paas">plate-forme de services</link> Heroku suit une approche
légèrement différente.
Il nous informe de l&#8217;état de nos applications et en augmente ou diminue
la quantité de ressources allouée à leur fonctionnement.
Il simplifie la configuration de Git et
<link linkend="deploy.git">délègue le déploiement</link> à ce dernier.
L&#8217;outil se télécharge sur
<phrase role="URL"><link xl:href="https://devcenter.heroku.com/articles/heroku-cli">devcenter.heroku.com/articles/heroku-cli</link></phrase>.</simpara>
<formalpara>
<title>Configuration de l&#8217;outil <literal>heroku</literal></title>
<para>
<screen>$ heroku login</screen>
</para>
</formalpara>
<simpara>La commande <literal>heroku apps:create</literal> crée une nouvelle application chez Heroku.
On peut faire la même chose dans un navigateur web en nous rendant sur
<phrase role="URL"><link xl:href="https://dashboard.heroku.com/new-app">dashboard.heroku.com/new-app</link></phrase>.
La commande <literal>heroku git:remote</literal> associe notre copie locale Git à cette application&#160;:</simpara>
<formalpara>
<title>Configuration de notre dépôt Git pour en faire une application Heroku.</title>
<para>
<screen>$ heroku apps:create --region eu
Creating app... done, ⬢ &lt;i&gt;polar-taiga-61296&lt;/i&gt;, region is eu
https://polar-taiga-61296.herokuapp.com/
https://git.heroku.com/polar-taiga-61296.git
$ heroku git:remote --app &lt;i&gt;polar-taiga-61296&lt;/i&gt;</screen>
</para>
</formalpara>
<simpara>Il ne nous reste plus qu&#8217;à <link linkend="deploy.git">pousser notre code avec Git</link>
pour terminer la mise en ligne.</simpara>
</section>
<section xml:id="deploy.git">
<title>En faisant <literal>git push</literal> depuis sa machine</title>
<simpara>Le déploiement d&#8217;une branche Git est le moyen le plus facile d&#8217;automatiser
tous les aspects d&#8217;un déploiement.</simpara>
<simpara>Cette méthode est privilégiée par les <link linkend="paas">plates-formes de services</link>
comme <emphasis>Heroku</emphasis>, <emphasis>now</emphasis> et <emphasis>Clever Cloud</emphasis>.
Chaque projet d&#8217;application est accessible via un dépôt Git distant
(<emphasis>remote</emphasis>)&#160;: un dépôt est utilisé pour versionner notre code (GitHub par exemple)
tandis qu&#8217;un autre dépôt est utilisé pour réceptionner le code à déployer.</simpara>
<simpara>L&#8217;exemple suivant part du principe que notre terminal est positionné dans un
répertoire qui est un projet Git contenant au moins 1 commit.
Vous avez déjà configuré le dépôt distant à l&#8217;aide de
l'<link linkend="deploy.cli">outil de déploiement</link> Heroku (cf. section précédente).</simpara>
<simpara>Nous pouvons vérifier si le dépôt est bien configuré à l&#8217;aide de la
commande <literal>git remote</literal>&#160;:</simpara>
<formalpara>
<title>Liste des dépôts distants d&#8217;un projet Git configuré pour Heroku.</title>
<para>
<screen>$ git remote -v
&lt;i&gt;heroku&lt;/i&gt;	https://git.heroku.com/mon-application.git (fetch)
&lt;i&gt;heroku&lt;/i&gt;	https://git.heroku.com/mon-application.git (push)
origin	git@github.com:mon-compte/mon-application.git (fetch)
origin	git@github.com:mon-compte/mon-application.git (push)</screen>
</para>
</formalpara>
<simpara>Dans le cas d&#8217;Heroku, la commande <literal>heroku git:remote</literal> crée un <emphasis>remote</emphasis> nommé
<literal>heroku</literal>.
Heroku redéploie notre application dès qu&#8217;on lui envoie du code en faisant
<literal>git push heroku</literal>&#160;:</simpara>
<screen>$ git push heroku
&gt; Counting objects: 4, done.
&gt; Delta compression using up to 4 threads.
&gt; Compressing objects: 100% (4/4), done.
&gt; Writing objects: 100% (4/4), 17.77 KiB | 5.92 MiB/s, done.
&gt; Total 4 (delta 2), reused 0 (delta 0)
&gt; remote: Compressing source files... done.
&gt; remote: Building source:
&gt; remote:
&gt; remote: -----&gt; Node.js app detected
&gt; remote:
&gt; remote: -----&gt; Creating runtime environment
&gt; ...
&gt; remote: -----&gt; Launching...
&gt; remote:        Released v30                     <co xml:id="CO150-1"/>
&gt; remote:        https://mon-application.herokuapp.com/ deployed
&gt; remote:
&gt; remote: Verifying deploy... done.</screen>
<calloutlist>
<callout arearefs="CO150-1">
<para>C&#8217;est le trentième déploiement&#160;— on peut revenir à une version antérieure si nécessaire.</para>
</callout>
</calloutlist>
<simpara>L&#8217;URL de l&#8217;application est rappelée dans les <emphasis>logs</emphasis> du déploiement.<?asciidoc-br?>
En cas d&#8217;erreur, la version précédente de l&#8217;application reste en ligne.
Nous avons ainsi le temps de corriger le problème sans interruption de service.</simpara>
</section>
<section xml:id="deploy.clone">
<title>En faisant <literal>git pull</literal> lors d&#8217;une session SSH</title>
<simpara>La récupération du code source à distance avec Git et SSH est une manière de déployer
similaire à la mise à jour et au démarrage d&#8217;une application sur notre ordinateur.</simpara>
<simpara>Cette technique s&#8217;applique si notre application est placée sur un
<link linkend="hosting.shared">hébergement mutualisé</link>,
<link linkend="hosting.vm">dédié ou virtualisé</link> ou une <link linkend="hosting.cloud">offre <emphasis>cloud</emphasis></link>.</simpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;initialisation d&#8217;un projet via la connexion
SSH à un <link linkend="hosting.shared">hébergement mutualisé</link> chez alwaysdata.</simpara>
<formalpara>
<title>Première récupération d&#8217;un dépôt Git lors d&#8217;une session SSH.</title>
<para>
<screen>$ ssh moncompte@ssh-moncompte.alwaysdata.net
$$ git clone https://github.com/moncompte/monprojet .
$$ npm install</screen>
</para>
</formalpara>
<simpara>Nous avons cloné un projet comme nous aurions pu le faire si on installait
notre projet depuis zéro sur notre ordinateur.</simpara>
<simpara>Dans le cas d&#8217;une mise à jour, nous récupérons les changements depuis le dépôt
distant en faisant <literal>git pull</literal>.
<literal>npm install</literal> mettra à jour les dépendances s&#8217;il y a des différences entre
le contenu du fichier <literal>package.json</literal> et les modules déjà installés
—&#160;voir le <link xl:href="../chapter-05/index.xml">chapitre 5</link>&#160;:</simpara>
<formalpara>
<title>Mise à jour d&#8217;une application lors d&#8217;une session SSH.</title>
<para>
<screen>$ ssh moncompte@ssh-moncompte.alwaysdata.net
$$ git pull
$$ npm install</screen>
</para>
</formalpara>
<simpara>Dans le cas d&#8217;alwaysdata, l&#8217;application se redémarre depuis leur
<link linkend="hosting.shared">interface d&#8217;administration</link>.<?asciidoc-br?>
Dans les autres cas, redémarrez l&#8217;application selon le procédé choisi après
avoir lu la section <link linkend="startup">démarrer automatiquement nos applications</link>.</simpara>
</section>
<section xml:id="deploy.recipe">
<title>Avec une recette de déploiement (<emphasis>Ansible</emphasis>, <emphasis>Chef</emphasis>, etc.)</title>
<simpara>La recette de déploiement est la manière la plus complète de partager et
d&#8217;automatiser un déploiement complexe.</simpara>
<simpara>Cette méthode se place dans la continuité de
<link linkend="deploy.clone"><literal>git pull</literal> lors d&#8217;une session SSH</link>&#160;: nous orchestrons les
actions nécessaires au déploiement en les listant dans un
fichier de configuration, en choisissant dans quel ordre les déclencher
et sur quel(s) serveur(s).</simpara>
<simpara>Nous retrouvons <emphasis>Puppet</emphasis> (<phrase role="URL"><link xl:href="https://puppet.com">puppet.com</link></phrase>),
<emphasis>Chef</emphasis> (<phrase role="URL"><link xl:href="https://www.chef.io">www.chef.io</link></phrase>) et <emphasis>Ansible</emphasis> (<phrase role="URL"><link xl:href="https://ansible.com">ansible.com</link></phrase>)
parmi les outils les plus utilisés et les mieux documentés.
Ils ont chacun une philosophie de configuration et d&#8217;exécution différente
—&#160;l&#8217;idéal est encore d&#8217;essayer d&#8217;écrire une première recette avec chacun d&#8217;entre
eux pour voir celui qui vous semble le plus naturel à utiliser.</simpara>
<simpara>Ma préférence va vers <emphasis>Ansible</emphasis> car le logiciel s&#8217;installe facilement
sur macOS et Linux, se configure avec une syntaxe que je connais déjà (<emphasis>YAML</emphasis>)
et je trouve ses messages d&#8217;erreurs informatifs.</simpara>
<simpara>L&#8217;exemple suivant illustre le déploiement de l&#8217;application Node <emphasis>Slackin</emphasis>
(<phrase role="URL"><link xl:href="https://github.com/rauchg/slackin">github.com/rauchg/slackin</link></phrase>) sur
l'<link linkend="hosting.shared">hébergement mutualisé</link> alwaysdata&#160;:</simpara>
<screen>$ ansible-playbook  -i ansible/inventory.yaml ansible/playbook.yaml

PLAY [webservers] *******************************

TASK [Gathering Facts] **************************
ok: [ssh-moncompte.alwaysdata.net]

TASK [code source via git] **********************
ok: [ssh-moncompte.alwaysdata.net]

TASK [mise à jour des modules npm] **************
ok: [ssh-moncompte.alwaysdata.net]

PLAY RECAP **************************************
ssh-moncompte.alwaysdata.net : ok=3</screen>
<simpara>La commande précédente a eu pour effet de créer des connexions SSH avec les
machines listées dans le fichier <literal>inventory.yaml</literal> puis de jouer les actions
listées dans le fichier <literal>playbook.yaml</literal>.</simpara>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Concepts importants d&#8217;Ansible</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Inventaire</simpara>
</entry>
<entry>
<simpara><emphasis role="strong">Liste de serveurs connus</emphasis> sur lesquels effectuer des déploiements.<?asciidoc-br?>
Les serveurs peuvent être catégorisés (par type, par emplacement)
pour contrôler finement les actions à déclencher.
Par exemple&#160;: uniquement les serveurs web de production,
les bases de données de test, l&#8217;API de la région Europe.</simpara>
</entry>
</row>
<row>
<entry>
<simpara>Playbook</simpara>
</entry>
<entry>
<simpara><emphasis role="strong">Liste des actions possibles</emphasis> en fonction des types de serveurs.<?asciidoc-br?>
Ces actions peuvent être rejouées à l&#8217;infini et de manière prédictible.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Le <emphasis>playbook</emphasis> suivant illustre 2 tâches appliquées uniquement sur
les serveurs étiquetés dans notre <emphasis>inventaire</emphasis> en tant que <literal>webservers</literal>&#160;:</simpara>
<formalpara>
<title>ansible/playbook.yaml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">---
- hosts: webservers
  tasks:
    - name: code source via git
      git:                                            <co xml:id="CO151-1"/>
        repo: "https://github.com/rauchg/slackin.git" <co xml:id="CO151-2"/>
        dest: "{{ ansible_env.HOME }}"
        clone: yes                                    <co xml:id="CO151-3"/>
        update: yes                                   <co xml:id="CO151-4"/>
    - name: mise à jour des modules npm
      npm:                                            <co xml:id="CO151-5"/>
        state: present                                <co xml:id="CO151-6"/>
        path: "{{ ansible_env.HOME }}"
        production: true                              <co xml:id="CO151-7"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO151-1">
<para>Actions Git&#160;— pour en savoir plus <phrase role="URL"><link xl:href="https://docs.ansible.com/ansible/2.5/modules/git_module">docs.ansible.com/ansible/2.5/modules/git_module</link></phrase>.</para>
</callout>
<callout arearefs="CO151-2">
<para>Adresse du dépôt Git à récupérer.</para>
</callout>
<callout arearefs="CO151-3">
<para>Indique de cloner le dépôt s&#8217;il n&#8217;est pas déjà présent.</para>
</callout>
<callout arearefs="CO151-4">
<para>Indique de récupérer les commits du dépôt en faisant <literal>git pull</literal>.</para>
</callout>
<callout arearefs="CO151-5">
<para>Actions npm&#160;— pour en savoir plus <phrase role="URL"><link xl:href="https://docs.ansible.com/ansible/2.5/modules/npm_module">docs.ansible.com/ansible/2.5/modules/npm_module</link></phrase>.</para>
</callout>
<callout arearefs="CO151-6">
<para>Indique d&#8217;installer les dépendances npm en faisant <literal>npm install</literal>.</para>
</callout>
<callout arearefs="CO151-7">
<para>Indique de lancer la mise en jour des modules npm avec l&#8217;option <literal>--production</literal>&#160;— c&#8217;est-à-dire sans les dépendances listées dans le champ <literal>devDependencies</literal>.</para>
</callout>
</calloutlist>
<simpara>Les tâches sont réplicables sur les serveurs listés dans un fichier d&#8217;inventaire&#160;:</simpara>
<formalpara>
<title>ansible/inventory.yaml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">webservers:
  hosts:
    ssh-moncompte.alwaysdata.net</programlisting>
</para>
</formalpara>
<simpara>Nous déployons sur un seul serveur dans ce cas de figure.
Mais nous pourrions tout à fait déployer une même application avec la même
configuration sur une dizaine de serveurs (application à fort trafic)
ou une même application déployée chez plusieurs centaines de clients.
Dans tous les cas, l&#8217;application serait dans un état consistant sur toutes les
machines, avec peu de chances d&#8217;oublier une opération et une plus grande facilité
à revenir en arrière.</simpara>
</section>
<section xml:id="deploy.docker">
<title>En publiant une image Docker</title>
<simpara>Une image Docker est un moyen fiable de reproduire le même environnement
applicatif et ses dépendances sur plusieurs systèmes d&#8217;exploitation
—&#160;y compris Windows, Linux et macOS.</simpara>
<simpara>Un des objectifs de Node est de pouvoir faire fonctionner un script
sur tout système d&#8217;exploitation compatible.
Docker (<phrase role="URL"><link xl:href="https://www.docker.com">www.docker.com</link></phrase>) pousse cette compatibilité plus
loin en empaquetant tout ce qui est nécessaire au bon fonctionnement
de l&#8217;application (dépendances, logiciels système).
Le mécanisme d&#8217;exécution aide à la fois à orchestrer plusieurs conteneurs entre
eux&#160;— y compris bases de données et moteurs de recherche&#160;— et de pouvoir
revenir dans l&#8217;état applicatif initial.</simpara>
<simpara>Le fichier suivant est un exemple fonctionnel d&#8217;image Docker.
Son intention est de créer un environnement Node v10
pour une <link xl:href="../chapter-07/index.xml">application web</link> (cf. chapitre 7)
qui comporte une <link xl:href="../chapter-05/index.xml">dépendance npm</link> (cf. chapitre 5)&#160;:</simpara>
<formalpara>
<title>Dockerfile</title>
<para>
<programlisting language="dockerfile" linenumbering="unnumbered">FROM node:8-alpine

WORKDIR /app

COPY ./app.js ./app.js
COPY ./package.json ./package.json
RUN npm install --production

EXPOSE 4000

CMD ["npm", "start"]</programlisting>
</para>
</formalpara>
<simpara>Nous pouvons constater le choix de l&#8217;environnement Node (<literal>FROM</literal>),
avant de procéder à la copie des fichiers applicatifs vers l&#8217;image (<literal>COPY</literal>).
Suite à ça nous installons aussi les dépendances de l&#8217;application et spécifions
quelle commande effectuer lorsque l&#8217;image Docker est lancée (<literal>CMD</literal>).</simpara>
<simpara>L&#8217;image se construit et le conteneur se démarre sur notre ordinateur comme suit&#160;:</simpara>
<screen>$ docker build -t nodebook/demo .
$ docker run -ti --rm -p 4000:4000 nodebook/demo
$ curl -L http://localhost:4000</screen>
<simpara>Le transfert de l&#8217;image Docker vers un registre comme <emphasis>Docker Hub</emphasis>
(<phrase role="URL"><link xl:href="https://hub.docker.com">hub.docker.com</link></phrase>) garantit l&#8217;exécution de ce même environnement
applicatif, partout.</simpara>
<simpara>Nous avons déjà parlé de l'<link linkend="deploy.cli">outil en ligne de commande</link>
du service <emphasis>now</emphasis> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>) dans la section du même nom.
Il est aussi capable de déployer un conteneur Docker en se basant sur un fichier
<literal>Dockerfile</literal> en rajoutant l&#8217;option <literal>--docker</literal>&#160;:</simpara>
<screen>$ now &lt;i&gt;--docker&lt;/i&gt; --public
&gt; Deploying ~/.../examples under oncletom
&gt; https://examples-zlssezfiej.now.sh [in clipboard] (bru1) [7s]
&gt; Synced 1 file (156B) [7s]
&gt; Building…
&gt; ▲ docker build
&gt; Sending build context to Docker daemon 17.92 kBkB
&gt; ▲ Storing image
&gt; Build completed
&gt; Verifying instantiation in bru1
&gt; ✔ Scaled 1 instance in bru1 [18s]
&gt; Success! Deployment ready</screen>
<simpara>Une autre solution consiste à publier notre image sur <emphasis>Docker Hub</emphasis>,
la plate-forme officielle de partage d&#8217;images Docker.
Docker Hub dispose d&#8217;une fonctionnalité de construction automatique connectée
à GitHub.
Docker Hub construit l&#8217;image à chaque nouveau commit, puis la met à disposition.</simpara>
<figure>
<title>Création d&#8217;un <emphasis>build</emphasis> automatisé à partir d&#8217;un dépôt GitHub.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/docker-automated-build.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>docker automated build</phrase></textobject>
</mediaobject>
</figure>
<simpara>Il ne reste alors plus qu&#8217;à la collecter sur un ordinateur avec la commande
<literal>docker pull</literal>&#160;— que ce soit sur notre machine, chez notre hébergeur
ou par le biais du <link linkend="deploy.ci">service d&#8217;intégration continue</link>.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Avancé</phrase> Amazon Elastic Container Registry</title>
<simpara>Le <link linkend="hosting.cloud">fournisseur <emphasis>cloud</emphasis></link> Amazon Web Services intègre
un registre privé d&#8217;images Docker pour chaque compte client.</simpara>
<simpara><emphasis>Elastic Container Registry</emphasis> (ECR, <phrase role="URL"><link xl:href="https://aws.amazon.com/ecr/">aws.amazon.com/ecr/</link></phrase>)
se connecte à d&#8217;autres services comme <emphasis>Amazon CodeDeploy</emphasis> pour déclencher
des mises à jour d&#8217;infrastructure à chaque nouvelle image Docker.</simpara>
</note>
</section>
<section xml:id="deploy.ci">
<title>En paramétrant un logiciel d&#8217;intégration continue</title>
<simpara>L&#8217;utilisation d&#8217;un logiciel d&#8217;intégration continue est la manière la plus
flexible d&#8217;automatiser tout type de déploiement.</simpara>
<simpara>L&#8217;intégration continue vise à vérifier si des régressions se sont glissées
dans notre code.
L&#8217;idée est de livrer régulièrement du code pour détecter les erreurs au plus tôt.<?asciidoc-br?>
Les services d&#8217;intégration continue automatisent cette pratique.
Ils s&#8217;intègrent avec d&#8217;autres services pour prévisualiser les branches,
compiler la documentation mais aussi pour déployer des artéfacts sur d&#8217;autres
plates-formes&#160;: <link xl:href="../chapter-05/index.xml#publish">registre npm</link>,
GitHub Pages, Heroku ou même <link linkend="hosting.lambda">Amazon Lambda</link>.</simpara>
<simpara>Le logiciel Jenkins (<phrase role="URL"><link xl:href="https://jenkins.io/">jenkins.io/</link></phrase>) s&#8217;installe sur notre propre
infrastructure tandis que des services en ligne comme
Circle CI (<phrase role="URL"><link xl:href="https://circleci.com">circleci.com</link></phrase>), Travis CI (<phrase role="URL"><link xl:href="https://travis-ci.com">travis-ci.com</link></phrase>)
et CodeShip (<phrase role="URL"><link xl:href="https://codeship.com">codeship.com</link></phrase>) mette à disposition leur
infrastructure gratuitement pour les projets <emphasis>open source</emphasis>.
GitLab (<phrase role="URL"><link xl:href="https://www.gitlab.com">www.gitlab.com</link></phrase>) combine l&#8217;hébergement de dépôts Git
et l&#8217;intégration continue.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Windows</phrase> Service AppVeyor</title>
<simpara>J&#8217;utilise AppVeyor (<phrase role="URL"><link xl:href="https://appveyor.com">appveyor.com</link></phrase>) en complément d&#8217;un autre
service d&#8217;intégration continue quand il s&#8217;agit de tester
la <emphasis role="strong">compatibilité du code avec Windows</emphasis>
—&#160;ce qui est le cas des exemples de cet ouvrage.</simpara>
</tip>
<simpara>J&#8217;ai une préférence pour GitLab lorsque le projet y est hébergé.
Le reste du temps, j&#8217;utilise Travis CI car j&#8217;aime la clarté du fichier de configuration,
l&#8217;exhaustivité de leur documentation et la qualité des échanges avec leur support technique.</simpara>
<simpara>Le fichier suivant est un exemple de configuration pour Travis CI.
Il se place à la racine d&#8217;un projet à tester et s&#8217;écrit avec la syntaxe <emphasis>YAML</emphasis>&#160;:</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<screen>language: node_js
node_js: v10

script: npm test

deploy:
  provider: npm
  on:
    tags: true
  email: "$NPM_EMAIL"
  api-key: "$NPM_TOKEN"</screen>
</para>
</formalpara>
<simpara>Cet exemple est structuré en 3 parties&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la <emphasis role="strong">configuration de l&#8217;environnement</emphasis>&#160;— en l&#8217;occurrence Node v10&#160;;</simpara>
</listitem>
<listitem>
<simpara>la <emphasis role="strong">commande de test</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la <emphasis role="strong">configuration du déploiement</emphasis> en cas de succès.</simpara>
</listitem>
</orderedlist>
<simpara>Ici, le déploiement consiste à
<link xl:href="../chapter-05/index.xml#publish">déployer le code sur le registre npm</link>
quand les tests passent lors de la création d&#8217;un tag Git.
Les variables d&#8217;environnement <literal>$NPM_EMAIL</literal> et <literal>$NPM_TOKEN</literal> se configurent de
manière sécurisée sur l&#8217;écran de configuration du projet
(voir illustration ci-après).</simpara>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> .travis.yml</title>
<simpara>Une documentation adaptée aux projets Node est disponible à cette adresse&#160;:
<phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">docs.travis-ci.com/user/languages/javascript-with-nodejs/</link></phrase></simpara>
</note>
<figure>
<title>Écran de configuration des variables d&#8217;environnement sécurisées.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travisci-secrets.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travisci secrets</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;exemple suivant illustre l&#8217;utilisation de
l'<link linkend="deploy.cli">outil en ligne de commande</link> <literal>now</literal> dès qu&#8217;un nouveau commit
est poussé sur la branche <literal>master</literal> et que les tests passent au vert&#160;:</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<screen>language: node_js
node_js: v10

before_deploy: npm install --global now

deploy:
  provider: script
  script: now --token $NOW_TOKEN
  on:
    branch: master</screen>
</para>
</formalpara>
<simpara>Les informations d&#8217;exécution des tests sont consignés au même titre que le statut
du déploiement&#160;— voir image ci-contre.</simpara>
<figure>
<title>Écran illustrant le déploiement automatique d&#8217;une application Node avec la commande <literal>now</literal>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travisci-build.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travisci build</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section xml:id="hosting">
<title>Choisir son hébergement</title>
<simpara>Nous allons nous intéresser aux différentes possibilités d&#8217;hébergement
d&#8217;applications Node.</simpara>
<simpara>Côté tarifs, certaines sont gratuites sous certaines conditions,
d&#8217;autres se paient à l&#8217;heure et d&#8217;autres à l&#8217;année.
Certaines offres sont figées, d&#8217;autres permettent de rajouter des machines
voire même de changer la puissance en cours de route.</simpara>
<section xml:id="hosting.paas">
<title>Plate-forme de services (<emphasis>Platform as a Service</emphasis>, <emphasis>PaaS</emphasis>)</title>
<simpara>Les plates-formes de services <emphasis role="strong">automatisent la configuration et le déploiement</emphasis>
de nos applications Node mais également Ruby, Python et PHP, entre autres.
Elles se spécialisent dans des déploiements rapides, une allocation des
ressources flexible, à la demande et en un clic.</simpara>
<simpara>C&#8217;est le <emphasis role="strong">moyen le plus facile de déployer une application Node</emphasis>, surtout si
on utilise déjà Git pour versionner son code.</simpara>
<simpara>Leur philosophie est de <emphasis role="strong">tout penser en termes de ressources modulaires</emphasis>.
On paie pour une certaine capacité de CPU et de RAM, à la minute ou à l&#8217;heure.
Ces capacités s&#8217;augmentent ou se réduisent en quelques clics et sans changer
une seule ligne de code dans notre application.</simpara>
<simpara>Une application se déploie avec un <link linkend="deploy.cli">outil en ligne de commande</link> ou
en <link linkend="deploy.git">faisant <literal>git push</literal></link>.
Et nous pouvons l&#8217;automatiser avec une <link linkend="deploy.recipe">recette de déploiement</link>
et de l'<link linkend="deploy.ci">intégration continue</link>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs <emphasis>PaaS</emphasis></title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Gratuité</entry>
<entry align="left" valign="top">Tarif</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://zeit.co">zeit.co</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>3 apps</simpara></entry>
<entry align="left" valign="top"><simpara>15$/mois/10 apps</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://clever-cloud.com">clever-cloud.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>git</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>crédit 20€</simpara></entry>
<entry align="left" valign="top"><simpara>5€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://gandi.net/hosting/simple">gandi.net/hosting/simple</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli/git/SSH</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>10 jours</simpara></entry>
<entry align="left" valign="top"><simpara>5€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://scalingo.com">scalingo.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>git/GitHub</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>30 jours</simpara></entry>
<entry align="left" valign="top"><simpara>7€/mois/app</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>cli/git/GitHub/Dropbox</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>1000 heures/mois</simpara></entry>
<entry align="left" valign="top"><simpara>7$/mois/app</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>La startup californienne Zeit (<phrase role="URL"><link xl:href="https://zeit.co">zeit.co</link></phrase>) édite le service
<emphasis>now</emphasis> (<phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase>).
Ce service est focalisé sur l&#8217;hébergement de sites statiques,
d&#8217;applications Node et de conteneurs Docker.</simpara>
<simpara>Sa particularité est de créer une <emphasis role="strong">nouvelle instance d&#8217;application par déploiement</emphasis>.
On ne modifie donc jamais un déploiement déjà existant.
On parle alors de <emphasis role="strong">déploiement immuable</emphasis>.</simpara>
<simpara>C&#8217;est un service que j&#8217;apprécie pour sa simplicité.
C&#8217;est probablement le plus pratique à utiliser pour déployer votre première application,
si vous n&#8217;utilisez pas Git ou si l&#8217;application n&#8217;utilise pas de base de données.</simpara>
<simpara><emphasis>Heroku</emphasis> (<phrase role="URL"><link xl:href="https://heroku.com">heroku.com</link></phrase>) est une autre alternative plus complète,
toujours pour démarrer en douceur et sans sortir la carte bleue.
Des modules optionnels couvrent nos besoins en bases de données comme
<emphasis>MySQL</emphasis>, <emphasis>MariaDB</emphasis>, <emphasis>redis</emphasis> ou <emphasis>postgreSQL</emphasis> par exemple.
D&#8217;autres services gèrent l&#8217;envoi d&#8217;emails,
l&#8217;indexation de contenus, le monitoring, les logs, etc.
La majorité offre un petit espace de stockage gratuit pour tester le produit.</simpara>
<figure>
<title>Ensemble de ressources complémentaires à une application Node hébergée sur Heroku.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-addons.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku addons</phrase></textobject>
</mediaobject>
</figure>
<simpara>S&#8217;il est facile de déployer sur ces infrastructures et de gérer les ressources
allouées à nos applications, à l&#8217;inverse la facture peut vite devenir salée
à mesure qu&#8217;on augmente leur puissance.
Ce coût est tout relatif&#160;: il est surement inférieur à celui de notre temps
passé à gérer les machines si on devait tout faire à la main.</simpara>
</section>
<section xml:id="hosting.shared">
<title>Hébergement mutualisé</title>
<simpara>Les hébergements mutualisés ont l&#8217;avantage d&#8217;être <emphasis role="strong">bon marché et sans entretien</emphasis>.
Cette formule est un excellent compromis prix/services.
Elle demande un peu plus d&#8217;efforts que les <link linkend="hosting.paas">plates-formes de services</link>
car tout le travail d&#8217;automatisation repose sur nos épaules, si on le souhaite.</simpara>
<simpara>Ce modèle est adapté pour l&#8217;hébergement de fichiers statiques ou des sites web
construits avec des langages de scripts comme Python ou PHP.
Rares sont ceux qui ont adapté leur fonctionnement au modèle applicatif de Node.</simpara>
<simpara>Alwaysdata (<phrase role="URL"><link xl:href="https://alwaysdata.com">alwaysdata.com</link></phrase>) fait exception à la règle.
Ce service d&#8217;hébergement indépendant dispose d&#8217;une formule gratuite avec 100Mo
d&#8217;espace disque pour démarrer.</simpara>
<simpara>Le <link linkend="deploy">déploiement</link> de nos applications se fait via
<link linkend="deploy.sftp">SSH ou SFTP</link>, en <link linkend="deploy.clone">utilisant Git</link>,
avec un <link linkend="deploy.ci">service d&#8217;intégration continue</link> ou bien en
<link linkend="deploy.recipe">utilisant une recette</link>.</simpara>
<simpara>L&#8217;interface d&#8217;administration référence une section <emphasis role="strong">Sites</emphasis> dans la barre de
navigation.
Cette section liste les différents sites de notre compte.
Si vous venez juste de créer le vôtre, un site a automatiquement été créé.
Son URL est déterminée à partir du <emphasis role="strong">nom d&#8217;utilisateur</emphasis> que vous avez choisi
lors de la phase d&#8217;inscription.</simpara>
<simpara>Un clic sur le bouton <emphasis role="strong">Modifier</emphasis> nous aidera à changer ses réglages&#160;:</simpara>
<figure>
<title>Liste de nos sites configurés chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-list.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site list</phrase></textobject>
</mediaobject>
</figure>
<simpara>Le nouvel écran mentionne les adresses auxquel le site répond.
En basculant vers un compte payant, on pourra assigner un ou plusieurs domaines
ou sous-domaines à ce même site.</simpara>
<figure>
<title>Écran de configuration d&#8217;un site chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-informations.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site informations</phrase></textobject>
</mediaobject>
</figure>
<simpara>Les réglages liés à Node se trouvent sous les adresses.
Le <emphasis>type</emphasis> de site doit être changé en <literal>Node.js</literal> pour afficher
les champs de configuration qui nous intéressent.</simpara>
<simpara>La <emphasis>commande</emphasis> se configure de la même manière
que l'<link xl:href="../chapter-04/index.xml#script">exécution d&#8217;un script Node</link>
—&#160;cf. <link xl:href="../chapter-04/index.xml">chapitre 4</link>.
On peut aussi faire appel au
<link xl:href="../chapter-05/index.xml#start">script <literal>npm start</literal></link> comme vu pendant
la lecture du <link xl:href="../chapter-05/index.xml">chapitre 5</link>&#160;:</simpara>
<figure>
<title>Écran de configuration de Node.js pour un site chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-site-configuration.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata site configuration</phrase></textobject>
</mediaobject>
</figure>
<simpara>La commande complète devrait apparaître dans la section <emphasis role="strong">Processus</emphasis>
une fois la configuration sauvegardée.</simpara>
<figure>
<title>Liste des processus liés à nos sites chez alwaysdata.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/alwaysdata-process-list.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>alwaysdata process list</phrase></textobject>
</mediaobject>
</figure>
<simpara>En cas de doute, un bouton <emphasis role="strong">Redémarrer</emphasis> est affiché à côté du bouton <emphasis role="strong">Modifier</emphasis>
dans la liste des sites.
L&#8217;application sera alors interrompue et relancée.
Cette opération est nécessaire pour que l&#8217;application prenne en compte
les changements après une mise à jour ou un plantage.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Configuration</phrase> Une application Node par site</title>
<simpara>Alwaysdata nous permet d&#8217;associer un seul processus à un seul site.</simpara>
<simpara>Pour rendre une application Node accessibles sur Internet, il faudra
alors créer un nouveau site et lui associer un autre nom de domaine,
ou un sous-domaine.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Aide</phrase> Forum d&#8217;entraide</title>
<simpara>L&#8217;équipe et la communauté alwaysdata (<phrase role="URL"><link xl:href="https://forum.alwaysdata.com">forum.alwaysdata.com</link></phrase>) sont
sympathiques et à l&#8217;écoute.
C&#8217;est un endroit idéal pour chercher des informations et poser des questions
pour mieux comprendre ce qui empêche votre application de fonctionner
sur leurs services.</simpara>
</tip>
</section>
<section xml:id="hosting.cloud">
<title>Serveur virtualisé, dédié ou cloud</title>
<simpara>La location d&#8217;un serveur dédié revient à payer pour un ordinateur complet,
son entretien physique et son placement dans un <emphasis>datacenter</emphasis>&#160;— un immense
parking à ordinateurs connecté à un réseau haute-capacité.</simpara>
<simpara>Les <emphasis>Virtual Private Servers</emphasis> (<emphasis>VPS</emphasis>) sont des machines virtuelles
(<emphasis>Virtual Machine</emphasis>, <emphasis>VM</emphasis>)&#160;: un serveur dédié dont les ressources sont réparties
en plusieurs unités indépendantes les unes des autres, les VM.</simpara>
<simpara>Les offres <emphasis>cloud</emphasis> sont une version "élastique" des VM&#160;: la puissance de calcul,
la bande-passante et la mémoire allouées sont ajustables sans avoir à
changer de machine, sans avoir à tout réinstaller.
Ces ressources sont considérées comme étant "à la demande"&#160;: elles s&#8217;obtiennent
en quelques secondes et peuvent être mises en pause, réduites, augmentées ou
supprimées à tout moment.</simpara>
<simpara>Leur modèle de facturation s&#8217;adapte à la souplesse d&#8217;allocation des ressources&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>au mois&#160;: VPS, serveur virtualisé, serveur dédié</simpara>
</listitem>
<listitem>
<simpara>à l&#8217;heure&#160;: serveur <emphasis>cloud</emphasis></simpara>
</listitem>
<listitem>
<simpara>à la (milli)seconde&#160;: <link linkend="hosting.lambda">fonction événementielle</link></simpara>
</listitem>
</itemizedlist>
<simpara>Les modes de déploiement adaptés sont l'<link linkend="deploy.clone">utilisation de Git</link>
pour obtenir le code, l'<link linkend="deploy.docker">orchestration d&#8217;applications avec Docker</link>
en combinaison avec des <link linkend="deploy.recipe">recettes de déploiement</link> et de
l'<link linkend="deploy.ci">intégration continue</link>.</simpara>
<simpara>L&#8217;offre de serveurs virtualisés et dédiés (VPS, VM) est adaptée à des
besoins constants et pour héberger plusieurs applications sur une même machine
—&#160;à coût constant.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs de serveur virtualisé et dédié</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Tarif horaire</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/vps/">ovh.com/fr/vps/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>4.00€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://online.net/fr/serveur-dedie">online.net/fr/serveur-dedie</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>14.50€/serveur</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://alwaysdata.com/fr/pricing/#vps">alwaysdata.com/fr/pricing/#vps</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>149.00€/VM</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>L&#8217;offre <emphasis>cloud</emphasis> est plus intéressante si vos besoins sont
singulièrement fluctuants&#160;— par exemple lorsqu&#8217;il y a besoin de doubler le CPU
pendant 2 heures, à heure fixe ou en fonction de la charge mais aussi quand il
s&#8217;agit d&#8217;ajouter 10 serveurs d&#8217;un coup pour traiter un calcul gourmand.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs de serveur <emphasis>cloud</emphasis></title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Add-ons</entry>
<entry align="left" valign="top">Tarif horaire</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://scaleway.com">scaleway.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, SSH, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0.004€</simpara></entry>
<entry align="left" valign="top"><simpara>2.30€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://linode.com">linode.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, Git, API, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0.0075$</simpara></entry>
<entry align="left" valign="top"><simpara>5.00$/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://gandi.net/hosting/iaas">gandi.net/hosting/iaas</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, Git</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0.0081€</simpara></entry>
<entry align="left" valign="top"><simpara>6.00€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/public-cloud/">ovh.com/fr/public-cloud/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>SSH, API, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0.062€</simpara></entry>
<entry align="left" valign="top"><simpara>26.00€/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://digitalocean.com">digitalocean.com</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2718;</simpara></entry>
<entry align="left" valign="top"><simpara>0.007$</simpara></entry>
<entry align="left" valign="top"><simpara>5.00$/VM</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/fr/ec2/">aws.amazon.com/fr/ec2/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API, SSH, Web</simpara></entry>
<entry align="left" valign="top"><simpara>&#x2714;</simpara></entry>
<entry align="left" valign="top"><simpara>0.0132$</simpara></entry>
<entry align="left" valign="top"><simpara>9.67$/VM</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> HashiCorp Terraform</title>
<simpara>Le logiciel <emphasis>Terraform</emphasis> (<phrase role="URL"><link xl:href="https://terraform.io/">terraform.io/</link></phrase>) a pour intention
de documenter une infrastructure (serveurs, DNS, stockage, etc.) sous forme
d&#8217;un fichier de configuration&#160;— versionnable avec Git.</simpara>
<simpara>C&#8217;est un outil idéal pour automatiser le déploiement d&#8217;une infrastructure de zéro
mais pour la faire évoluer d&#8217;une version à une autre.
Nous pouvons ainsi créer une architecture combinant plusieurs fournisseurs
sans gérer la complexité et la non-interopérabilité de leurs API.</simpara>
</tip>
</section>
<section xml:id="hosting.lambda">
<title>Fonction événementielle (<emphasis>Serverless</emphasis>, <emphasis>Lambda</emphasis>)</title>
<simpara>La fonction événementielle est l&#8217;évolution ultime des offres <emphasis>cloud</emphasis>.
Au lieu de payer une machine ou une VM à l&#8217;heure,
<emphasis role="strong">nous payons pour exécuter du code à la milliseconde</emphasis>.
Ce code se déclenche en réaction à événement se produisant ailleurs
sur l&#8217;infrastructure&#160;: une requête HTTP entrante, un nouveau fichier ou encore
un appel de l&#8217;API de l&#8217;hébergeur.</simpara>
<simpara>C&#8217;est le moyen le plus économique pour
<emphasis role="strong">exécuter du code à tout instant sans payer le temps d&#8217;inactivité d&#8217;une machine</emphasis>.
On pourrait comparer ce modèle à celui de la téléphonie mobile lorsqu&#8217;on a à choisir
entre un forfait (coût fixe même si on ne consomme pas tout) et un paiement à la carte
(coût dépendant de la consommation).</simpara>
<simpara>Les applications destinées à être exécutées comme fonction événementielle
ont une architecture un peu différente.
Au lieu de démarrer un serveur web basé sur le
<link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>, nous exposons
une <emphasis role="strong">fonction qui retourne un résultat de manière asynchrone</emphasis>&#160;:</simpara>
<formalpara>
<title>webtask.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const getPokemonName = require('pokemon-random-name');

module.exports = (context, send) =&gt; {     <co xml:id="CO152-1"/>
  return send(null, getPokemonName());
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO152-1">
<para>Le paramètre <literal>context</literal> contient des informations à propos de la requête entrante&#160;— paramètres, corps du message, etc.</para>
</callout>
</calloutlist>
<simpara>Ce code est très similaire à ce que nous pourrions écrire lors de l&#8217;événement
<literal>server.on('request')</literal> du <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>.</simpara>
<simpara>Voyons ça en contexte dans l&#8217;interface web du service Webtask
(<phrase role="URL"><link xl:href="https://webtask.io/make">webtask.io/make</link></phrase>)&#160;:</simpara>
<figure>
<title>Exemple de fonction événementielle et de son historique d&#8217;exécutions avec le service Webtask.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/webtask-make.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>webtask make</phrase></textobject>
</mediaobject>
</figure>
<simpara>Un nom de Pokémon est affiché lorsque nous accédons à l&#8217;URL indiquée en bas
de l&#8217;écran.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Sélection de fournisseurs</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Déploiement</entry>
<entry align="left" valign="top">Gratuité</entry>
<entry align="left" valign="top">Tarif des requêtes</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/lambda">aws.amazon.com/lambda</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>1M requêtes/mois</simpara></entry>
<entry align="left" valign="top"><simpara>0.2$/million</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://webtask.io">webtask.io</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, GitHub, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>1 requête/seconde</simpara></entry>
<entry align="left" valign="top"><simpara>sur devis</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://cloud.google.com/functions/">cloud.google.com/functions/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Web, GitHub, CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>2M requêtes/mois</simpara></entry>
<entry align="left" valign="top"><simpara>0.4$/million</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://zeit.co/now">zeit.co/now</link></phrase> + <literal>micro</literal></simpara></entry>
<entry align="left" valign="top"><simpara>CLI, API</simpara></entry>
<entry align="left" valign="top"><simpara>3 apps</simpara></entry>
<entry align="left" valign="top"><simpara>15$/mois</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Chaque fournisseur de fonction événementielle a sa propre vision des paramètres
qui nous sont donnés mais leur fonctionnement reste très proche.</simpara>
<simpara>Je trouve que Webtask est le service avec la plus faible courbe d&#8217;apprentissage.
Son interface y est pour beaucoup.</simpara>
<simpara>Le service <emphasis>now</emphasis> est intéressant à plus d&#8217;un titre.
Il déploie avec un <link linkend="deploy.cli">outil en ligne de commande minimaliste</link>,
y compris des <link linkend="deploy.docker">conteneurs Docker</link>.
Il se transforme en fonction événementielle avec l&#8217;aide du
<link xl:href="../chapter-05/index.xml#modules">module npm</link>
<emphasis>micro</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/micro">npmjs.com/micro</link></phrase>).</simpara>
<simpara>Le service Amazon Lambda représente une marche d&#8217;apprentissage un peu plus importante.
C&#8217;est un service important de par l&#8217;outillage et la documentation disponibles
à son sujet.
Le service est complet, surtout une fois couplé avec le service
<emphasis>Amazon API Gateway</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Avancé</phrase> <emphasis>Amazon API Gateway</emphasis></title>
<simpara>Les Lambda d&#8217;Amazon ne sont pas accessibles depuis Internet par défaut.</simpara>
<simpara>Pour ce faire, il faut les relier au service  et associer
chaque route à une Lambda.
Le service se charge de transformer le résultat
—&#160;une chaîne de caractère, un tableau ou un objet ECMAScript&#160;—
en une réponse HTTP.</simpara>
</tip>
<note>
<title><phrase role="RemarquePreTitre">Définition</phrase> <emphasis>Serverless</emphasis></title>
<simpara>Ce type d&#8217;infrastructure a été nommé <emphasis>serverless</emphasis> suite à une organisation
du marché pour proposer des alternatives aux Lambda d&#8217;Amazon.</simpara>
<simpara>Quand on entend le mot <emphasis>serverless</emphasis>&#160;— littéralement, sans serveur&#160;— il faut comprendre
"sans serveur à gérer soi-même".
L&#8217;hébergeur dispose quand même de machines pour exécuter le code.
Leurs ressources sont mutualisées au maximum.</simpara>
</note>
</section>
</section>
<section xml:id="améliorer_la_portabilité_applicative">
<title>Améliorer la portabilité applicative</title>
<simpara>Le fonctionnement d&#8217;une application Node peut être impacté suite à son
déploiement en ligne.</simpara>
<simpara>Cette section a pour but de mettre en lumière des
<emphasis role="strong">points importants qui contribuent à la portabilité de l&#8217;application</emphasis>
—&#160;c&#8217;est-à-dire son bon fonctionnement une fois en fonctionnement autre part
que sur un ordinateur de développement et ce,
indépendamment du service d&#8217;hébergement retenu.</simpara>
<section xml:id="node.version">
<title>Utiliser la bonne version de Node</title>
<simpara>Les <link linkend="hosting.paas">plates-formes de services</link> et certains
<link linkend="deploy.ci">services d&#8217;intégration continue</link> utilisent deux mécanismes
pour déterminer notre préférence quant à la version de Node à utiliser&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le fichier <literal>.nvmrc</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la valeur <literal>engines.node</literal> du fichier <literal>package.json</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>Dans les deux cas, cela revient à préciser la version de Node
pour chacun de nos projets.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Conseil</phrase> Une version de Node par application</title>
<simpara>Je trouve qu&#8217;il est plus facile de gérer la version de Node au cas par cas
au lieu de m&#8217;imposer une seule version pour tout le code que j&#8217;écris.</simpara>
<simpara>C&#8217;est très utile quand je reprends le code après plusieurs mois d&#8217;inactivité.</simpara>
</tip>
<simpara>Si vous avez décidé d&#8217;utiliser <link xl:href="../chapter-02/index.xml#nvm">nvm</link>
(cf. <link xl:href="../chapter-02/index.xml">chapitre 2</link>) ou que vous utilisez un service
compatible avec <emphasis>nvm</emphasis>, sachez que cet outil sait s&#8217;adapter à la version
de Node précisée dans le fichier <literal>.nvmrc</literal>.</simpara>
<simpara>Un fichier <literal>.nvmrc</literal> ressemble à ceci&#160;:</simpara>
<formalpara>
<title>.nvmrc</title>
<para>
<screen>v10</screen>
</para>
</formalpara>
<simpara>Avec cette valeur, cela revient au même de faire
<literal>nvm install v10</literal> et <literal>nvm install</literal>.
La commande <literal>nvm use</literal> lit également la version contenue dans <literal>.nvmrc</literal>
et bascule automatiquement vers celle-ci&#160;:</simpara>
<screen>$ nvm install
$ nvm use
$ node --version</screen>
<simpara>Les <link linkend="hosting.paas">plates-formes de services</link> qui ne se basent pas sur <emphasis>nvm</emphasis>
vont en général jeter un œil du côté du fichier <literal>package.json</literal>&#160;:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "my-app",
  "engines": {
    "node": "10.x.x"
  }
}</programlisting>
<simpara>Cette notation signifie "la version la plus récente de Node v10".</simpara>
<simpara>Enfin, la dernière version de Node est utilisée si cette information
ne peut pas être déterminée avec les deux mécanismes précédemment cités.</simpara>
</section>
<section xml:id="port">
<title>L&#8217;application tourne mais elle est injoignable</title>
<simpara>Il est nécessaire de renseigner un <emphasis>port</emphasis> lorsqu&#8217;on démarre un serveur
avec le <link xl:href="../chapter-04/index.xml#http">module <literal>http</literal></link>
(cf. <link xl:href="../chapter-04/index.xml">chapitre 4</link>).<?asciidoc-br?>
Pourtant nous allons faire face à un "problème" si le code suivant est déployé
sur une <link linkend="hosting.paas">plate-forme de services</link>&#160;:</simpara>
<formalpara>
<title>server-port.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const server = require('http').createServer();

server.listen(8000, () =&gt; console.log('localhost:8000'));</programlisting>
</para>
</formalpara>
<simpara>Le déploiement sera considéré comme réussi mais l&#8217;application est injoignable.
C&#8217;est parce que les plates-formes de service choisissent ce port pour nous
et l&#8217;associent à l&#8217;URL de notre application
—&#160;`monapplication.heroku.com` par exemple.</simpara>
<simpara>Le port est exposé au travers d&#8217;une
<link xl:href="../chapter-04/index.xml#process.env">variable d&#8217;environnement</link>
(cf. <link xl:href="../chapter-04/index.xml">chapitre 4</link>).
Par convention, c&#8217;est la variable <literal>PORT</literal> qui est utilisée.</simpara>
<simpara>Nous n&#8217;avons qu&#8217;à adapter le script précédent de cette manière&#160;:</simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>server-port-dynamic.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const server = require('http').createServer();
const {PORT=8000} = process.env;  <co xml:id="CO153-1"/>

server.listen(PORT, () =&gt; console.log(`localhost:${PORT}`));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO153-1">
<para>Extrait la valeur de la variable d&#8217;environnement <literal>process.env.PORT</literal>.</para>
</callout>
</calloutlist>
<simpara>La variable d&#8217;environnement <literal>PORT</literal> sera utilisée si elle existe et sinon,
le port <literal>8000</literal> sera la valeur par défaut&#160;:</simpara>
<screen>$ node server-port-dynamic.js             <co xml:id="CO154-1"/>
$ &lt;i&gt;PORT=4000&lt;/i&gt; node server-port-dynamic.js   <co xml:id="CO154-2"/></screen>
<calloutlist>
<callout arearefs="CO154-1">
<para>Affiche <literal>localhost:8000</literal>.</para>
</callout>
<callout arearefs="CO154-2">
<para>Affiche <literal>localhost:4000</literal>.</para>
</callout>
</calloutlist>
<simpara>C&#8217;est un premier pas pour s&#8217;affranchir des
<link linkend="configuration">éléments de configuration écrits en dur</link>.</simpara>
</section>
<section xml:id="configuration">
<title>S&#8217;affranchir des chemins et configurations écrits "en dur"</title>
<simpara>La <link linkend="port">configuration du port</link> de l&#8217;application n&#8217;est pas le seul
élément contextuel à changer entre notre ordinateur et un autre
—&#160;que ce soit celui d&#8217;une personne contribuant au projet,
au <link linkend="deploy.ci">service d&#8217;intégration continue</link> ou au serveur d&#8217;hébergement.</simpara>
<simpara>Les <link xl:href="../chapter-04/index.xml#process.env">variables d&#8217;environnement</link>
sont à privilégier pour configurer nos applications avec souplesse.
Elles s&#8217;appliquent aux&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">URL</emphasis> d&#8217;accès aux bases de données, à des API distantes&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">clés d&#8217;API</emphasis> pour utiliser des services externes&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">réglages</emphasis> influençant le comportement de l&#8217;application&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">chemins d&#8217;accès</emphasis> vers des fichiers ou répertoires&#160;— stockage, cache, etc&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">environnements d&#8217;exécution</emphasis>&#160;— développement, test, production, etc.</simpara>
</listitem>
</itemizedlist>
<simpara>L&#8217;accès à une base de données est un parfait exemple.
Le nom d&#8217;utilisateur, mot de passe et adresse du serveur
peuvent d&#8217;ailleurs se combiner en une seule variable composée sous forme d&#8217;URL.</simpara>
<simpara>Par exemple, si vous avez connaissance des identifiants et de l&#8217;adresse d&#8217;une
base de données MySQL ou MariaDB, composez l&#8217;URL de configuration comme suit&#160;:</simpara>
<screen>$ MYSQL_URL=mysql://user:password@server/database \
  node sql-connect.js</screen>
<formalpara>
<title>sql-connect.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const mysql = require('mysql2/promise');
const url = process.env.MYSQL_URL;

mysql.createConnection(url).then((connection) =&gt; {  <co xml:id="CO155-1"/>
  console.log('Connexion réussie :-)');             <co xml:id="CO155-2"/>
  connection.end();                                 <co xml:id="CO155-3"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO155-1">
<para>Connexion à la base de données en utilisant la variable d&#8217;environnement <literal>MYSQL_URL</literal>.</para>
</callout>
<callout arearefs="CO155-2">
<para>Affiche <literal>Connexion réussie&#160;:-)</literal> en cas de succès de connexion à la base de données.</para>
</callout>
<callout arearefs="CO155-3">
<para>Clôture de la connexion&#160;— autrement le script ne se terminerait pas sans avoir recours à <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>.</para>
</callout>
</calloutlist>
<simpara>Le script d&#8217;exemple devrait avoir affiché la liste des tables contenues
dans cette base de données ou un message d&#8217;erreur le cas échéant.</simpara>
<simpara>La documentation du <link xl:href="../chapter-05/index.xml#modules">module npm</link>
<emphasis>mysql2</emphasis> (<phrase role="URL"><link xl:href="http://npmjs.com/mysql2">npmjs.com/mysql2</link></phrase>) détaille les différentes fonctions
utilisables pour interagir avec les bases de données compatibles.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Raccourci</phrase> Créer une base de données MySQL avec Docker</title>
<simpara>Docker est un outil utile pour créer une base de données en
une ligne de commande et ce, sans avoir à installer MySQL sur notre ordinateur.</simpara>
<screen>$ docker run -ti --rm -e MYSQL_ROOT_PASSWORD=demo \
  -p 3306:3306 mysql:5</screen>
<simpara>Vous pourrez ainsi utiliser l&#8217;URL <literal>mysql://root:demo@localhost/mysql</literal>
comme variable d&#8217;environnement <literal>MYSQL_URL</literal> avec
le script d&#8217;exemple <literal>sql-connect.js</literal></simpara>
</tip>
<simpara>Certaines variables d&#8217;environnement sont tellement spécifiques à chaque usage
qu&#8217;elles doivent être obligatoirement configurées&#160;— identifiants, URL de la
base de données, etc.
Je trouve pratique de proposer une valeur par défaut pour les autres&#160;— le port
de l&#8217;application ou d&#8217;autres éléments plus "cosmétiques".</simpara>
<simpara>Enfin, j&#8217;ai aussi pris l&#8217;habitude de documenter les variables d&#8217;environnement
dans le fichier <literal>README.md</literal> à la racine de chaque projet.
Nous pouvons ainsi avoir une vue d&#8217;ensemble de la complexité de configuration
en un rapide coup d&#8217;œil&#160;— et ça nous évite de fouiller dans le code applicatif.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Optimisation</phrase> <literal>NODE_ENV=production</literal></title>
<simpara>Certains <link xl:href="../chapter-05/index.xml#modules">modules npm</link> comme <emphasis>express</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/express">npmjs.com/express</link></phrase>) lisent la valeur de <literal>process.env.NODE_ENV</literal>.
Ils s&#8217;en servent pour procéder à des optimisations et masquer des informations
sensibles dans un contexte de production
—&#160;l&#8217;environnement qui fait face à nos utilisateurs.</simpara>
<screen>$ NODE_ENV=production node app.js</screen>
</tip>
</section>
<section xml:id="data-persistence">
<title>Persister les fichiers en dehors de notre application</title>
<simpara>Les fichiers écrits par notre application devraient être persistés en dehors
de son arborescence de fichiers.</simpara>
<simpara>Prenons cet exemple d&#8217;arborescence&#160;:</simpara>
<screen>└── app
    ├── images
    └── uploads
        └── images</screen>
<simpara>Les images sont stockées à deux endroits&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>app/images</literal>&#160;: images statiques affichées par notre application web&#160;— on les versionne avec Git;</simpara>
</listitem>
<listitem>
<simpara><literal>app/uploads/images</literal>&#160;: fichiers enregistrés sur le disque par l&#8217;intermédiaire
de notre application&#160;— on ne les versionne pas avec Git.</simpara>
</listitem>
</itemizedlist>
<simpara>Un inconvénient se présente à nous&#160;: nous perdons tout si nous supprimons
le répertoire <literal>app</literal> pour réinstaller l&#8217;application de zéro.
Je conseille donc d'<emphasis role="strong">écrire tout nouveau fichier dans un répertoire indépendant</emphasis>.
L&#8217;arborescence évoquée ci-dessus se transformerait ainsi&#160;:</simpara>
<screen>├── app
│   └── images
└── uploads
    └── images</screen>
<tip>
<title><phrase role="RemarquePreTitre">Rappel</phrase> Configurer le chemin avec une variable d&#8217;environnement</title>
<simpara>Le chemin d&#8217;accès devient flexible dès lors que nous le rendons configurable
avec une variable d&#8217;environnement.</simpara>
<screen>$ UPLOAD_DIR=/uploads npm start</screen>
<simpara>En savoir plus en lisant la <link linkend="configuration">section précédente</link>.</simpara>
</tip>
<simpara>Ce qui peut sembler être une précaution s&#8217;avère encore plus utile
dès lors que nous utilisons une <link linkend="hosting.paas">plate-forme de services</link>
ou lorsque nous démarrons une nouvelle <link linkend="hosting.cloud">machine virtuelle</link>.
<emphasis role="strong">Chaque nouveau déploiement remet le système de fichiers à zéro</emphasis>.</simpara>
<simpara>Une solution complémentaire s&#8217;offre à nous lorsqu&#8217;il devient compliqué
de partager un même stockage de fichiers entre plusieurs machines ou VM&#160;:
c&#8217;est le <emphasis role="strong">stockage d&#8217;objets</emphasis>.</simpara>
<simpara>Le stockage d&#8217;objets est une solution de stockage élastique où la facturation
est basée sur la quantité de données stockées et téléchargées.
Nous accédons aux ressources stockées et à leur contenu avec des requêtes HTTP.
Les fichiers sont ainsi disponibles à tout moment, sans limite et
pour tous nos contextes applicatifs.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Amazon S3</title>
<simpara>Amazon S3 est le premier service à avoir rendu populaire le stockage d&#8217;objets
en 2006.
C&#8217;était la première fois que nous pouvions stocker des fichiers de manière infinie,
sans limitation de taille de fichiers.</simpara>
<simpara>Son interface d&#8217;accès (API) est même devenue un standard <emphasis>de facto</emphasis>&#160;: il est
utilisé par la plupart des concurrents afin de pouvoir passer d&#8217;un fournisseur
à un autre sans avoir à changer grand-chose à ses applications.</simpara>
</note>
<table frame="all" rowsep="1" colsep="1">
<title>Services de stockage d&#8217;objets compatibles avec l&#8217;API Amazon S3</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">Emplacement(s) du stockage</entry>
<entry align="left" valign="top">Tarif mensuel</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://aws.amazon.com/s3/">aws.amazon.com/s3/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Paris, Europe, Monde</simpara></entry>
<entry align="left" valign="top"><simpara>0.024$/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://ovh.com/fr/public-cloud/storage/">ovh.com/fr/public-cloud/storage/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>France</simpara></entry>
<entry align="left" valign="top"><simpara>0.01€/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://cloud.google.com/storage/">cloud.google.com/storage/</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Europe, Monde</simpara></entry>
<entry align="left" valign="top"><simpara>0.026$/Go</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><phrase role="URL"><link xl:href="https://minio.io">minio.io</link></phrase></simpara></entry>
<entry align="left" valign="top"><simpara>Flexible</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="database-migration">
<title>Versionner les schémas de base de données</title>
<simpara>Le contenu et la structure d&#8217;une application peuvent changer selon qu&#8217;elle tourne
sur notre ordinateur ou sur notre hébergement.
Nous pourrions reporter les changements de structure à la main mais c&#8217;est
sujet à erreurs, difficile à reproduire et difficile à intégrer dans le
<link linkend="deploy">processus de déploiement</link>.</simpara>
<simpara>L&#8217;idéal serait de synchroniser la structure de nos bases de données.
Ou plutôt, l&#8217;idéal est de <emphasis role="strong">reproduire les changements de structure</emphasis>.</simpara>
<simpara>L&#8217;exemple suivant illustre la création d&#8217;un nouveau champ&#160;:</simpara>
<formalpara>
<title>db-migration-step.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = {
  up (database) {                                  <co xml:id="CO156-1"/>
    return database.addColumn('fromages', 'aoc', { <co xml:id="CO156-2"/>
      type: 'boolean',                             <co xml:id="CO156-3"/>
      defaultValue: false,
    });
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO156-1">
<para>Fonction exécutée lors de la migration.</para>
</callout>
<callout arearefs="CO156-2">
<para>Nous ajoutons un champ <literal>aoc</literal> dans la table <literal>fromages</literal>.</para>
</callout>
<callout arearefs="CO156-3">
<para>Ce champ est de type <emphasis>booléen</emphasis> avec <literal>false</literal> comme valeur par défaut.</para>
</callout>
</calloutlist>
<simpara>Ce fichier représente une <emphasis>étape de migration</emphasis>.
L&#8217;idée est de créer une nouvelle étape pour chaque changement de structure
et de les jouer au prochain déploiement.</simpara>
<simpara>Cet exemple de migration se base sur le module npm <emphasis>db-migrate</emphasis>
(<phrase role="URL"><link xl:href="https://npmjs.com/db-migrate">npmjs.com/db-migrate</link></phrase>).
Il se connecte à la base de données de notre choix, charge la liste des
migrations et exécute celles qui n&#8217;ont pas encore été jouées.</simpara>
<simpara>Les migrations ne s&#8217;utilisent pas que pour changer la structure.
Elles s&#8217;utilisent aussi pour <emphasis role="strong">créer la structure de notre base de données</emphasis>&#160;:</simpara>
<formalpara>
<title>db-migration-init.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

module.exports = {
  up (database) {
    return database.createTable('fromages', { <co xml:id="CO157-1"/>
      columns: {
        id: {                                 <co xml:id="CO157-2"/>
          type: 'int',
          primaryKey: true,
          autoIncrement: true
        },
        name: {                               <co xml:id="CO157-3"/>
          type: 'string'
        }
      }
    });
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO157-1">
<para>Création d&#8217;une nouvelle table <literal>fromages</literal> avec 2 colonnes.</para>
</callout>
<callout arearefs="CO157-2">
<para>La première colonne se nomme <literal>id</literal>&#160;— elle est numérique et s&#8217;auto-incrémente à chaque nouvel enregistrement.</para>
</callout>
<callout arearefs="CO157-3">
<para>La seconde colonne se nomme <literal>name</literal>&#160;— c&#8217;est une chaîne de caractères.</para>
</callout>
</calloutlist>
<simpara>Si on met ces deux exemples bout à bout, nous sommes alors en mesure
de créer une table puis d&#8217;y appliquer un changement en ajoutant une nouvelle
colonne.</simpara>
<simpara>Ainsi, nous pouvons répliquer les changements de structures sur d&#8217;autres ordinateurs
et <emphasis role="strong">reproduire l&#8217;évolution du schéma de la base de données en partant de zéro</emphasis>.
Nous avons ainsi rejoué toutes les migrations sur notre outil d&#8217;intégration
continue pour nous assurer de leur robustesse et revenir en arrière si nécessaire.</simpara>
</section>
</section>
<section xml:id="startup">
<title>Démarrer automatiquement une application</title>
<simpara>Jusqu&#8217;à présent, nous avons démarré les scripts de cet ouvrage
avec l&#8217;exécutable <literal>node</literal> ou avec la commande <literal>npm start</literal>.
C&#8217;est un processus manuel qui nécessite de conserver un onglet ouvert
dans notre terminal pour maintenir l&#8217;application en fonctionnement.</simpara>
<simpara>Cette section explore des mécanismes pour <emphasis role="strong">détacher le processus du terminal</emphasis>
et pour <emphasis role="strong">lancer l&#8217;application au démarrage ou redémarrage d&#8217;un ordinateur</emphasis>.</simpara>
<section xml:id="l_hébergeur_s_en_occupe_à_notre_place">
<title>L&#8217;hébergeur s&#8217;en occupe à notre place</title>
<simpara>Les <link linkend="hosting.paas">plates-formes de service</link> automatisent le démarrage de
l&#8217;application.<?asciidoc-br?>
Elles exécutent la <link xl:href="../chapter-05/index.xml#start">commande <literal>npm start</literal></link>
dès que le déploiement est terminé.</simpara>
<simpara>C&#8217;est tout.</simpara>
</section>
<section xml:id="process-manager">
<title>Avec un gestionnaire de processus</title>
<simpara>Un gestionnaire de processus a deux utilités&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">détacher un processus</emphasis> de notre terminal&#160;— si on le ferme, l&#8217;application tourne toujours&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">gérer plusieurs processus par application</emphasis>&#160;— un frontal web et l&#8217;admin par exemple.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis>pm2</emphasis> (<phrase role="URL"><link xl:href="https://pm2.keymetrics.io">pm2.keymetrics.io</link></phrase>) est un gestionnaire de processus
disponible en tant que <link xl:href="../chapter-05/index.xml#modules">module npm</link>
(<phrase role="URL"><link xl:href="https://npmjs.com/pm2">npmjs.com/pm2</link></phrase>).
Il fonctionne sous Linux, Windows et macOS.</simpara>
<simpara>La commande suivante démarre un script et le place aussitôt en tâche de fond&#160;:</simpara>
<screen>$ pm2 start app.js</screen>
<figure>
<title>Exemple de démarrage et d&#8217;affichage de l&#8217;état d&#8217;une application Node avec <emphasis>pm2</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/pm2-start.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>pm2 start</phrase></textobject>
</mediaobject>
</figure>
<simpara>Cette même application s&#8217;arrête avec la commande <literal>pm2 stop</literal> et
se relance pour prendre en compte des changements de code avec <literal>pm2 restart</literal>.</simpara>
<simpara>Les gestionnaires de processus facilitent l&#8217;intégration
d&#8217;une application en tant que <link linkend="system-service">service système</link>
(cf. section suivante).<?asciidoc-br?>
C&#8217;est mon choix de prédilection pour ne pas avoir à apprendre un nouveau
fichier de configuration.</simpara>
<simpara>La commande suivante nous guide dans la configuration de notre système
d&#8217;exploitation&#160;:</simpara>
<screen>$ pm2 startup</screen>
<simpara>Celle-ci sauvegarde les applications démarrées avec le gestionnaire de processus.
Elles seront restaurées au prochain redémarrage de l&#8217;ordinateur&#160;:</simpara>
<screen>$ pm2 save</screen>
<simpara>On peut aussi revenir en arrière et décider de désactiver le démarrage
automatique de nos applications&#160;:</simpara>
<screen>$ pm2 unstartup</screen>
<note>
<title><phrase role="RemarquePreTitre">Windows</phrase> Configurer pm2</title>
<simpara>La commande <literal>pm2 startup</literal> pose problème sous Windows.
Je recommande d&#8217;utiliser le module npm <emphasis>pm2-windows-service</emphasis>
(<phrase role="URL"><link xl:href="https://www.npmjs.com/package/pm2-windows-service">www.npmjs.com/package/pm2-windows-service</link></phrase>) pour simplifier
cette procédure.</simpara>
</note>
</section>
<section xml:id="system-service">
<title>En créant un service système</title>
<simpara>Tous les systèmes d&#8217;exploitation ont un mécanisme pour
démarrer des applications en fonction de certains critères&#160;:
quand le réseau ou une connexion Internet est disponible,
lorsqu&#8217;une session utilisateur s&#8217;est ouverte
ou même quand un autre logiciel est actif.</simpara>
<simpara>Systemd, Upstart et launchd sont des gestionnaires de services système parmi d&#8217;autres.
Ils se configurent avec des fichiers écrits dans des formats différents.</simpara>
<simpara>Voici un exemple de fichier de configuration pour <emphasis>systemd</emphasis>
(<phrase role="URL"><link xl:href="https://doc.ubuntu-fr.org/systemd">doc.ubuntu-fr.org/systemd</link></phrase>).
C&#8217;est le gestionnaire de services des distributions Linux <emphasis>Ubuntu</emphasis>,
 <emphasis>Debian</emphasis>, <emphasis>Fedora</emphasis> et <emphasis>CentOS</emphasis>.</simpara>
<formalpara>
<title>systemd/nodebook.d/app.conf</title>
<para>
<screen>[Unit]
Description="Application Node.js"
After=NetworkManager.service            <co xml:id="CO158-1"/>

[Service]
Restart=on-failure                      <co xml:id="CO158-2"/>
DefaultStartLimitBurst=5
StartLimitIntervalSec=120
User=nobody                             <co xml:id="CO158-3"/>

Environment="NODE_ENV=production"
WorkingDirectory=/usr/local/node-app    <co xml:id="CO158-4"/>
ExecStart=/usr/bin/npm start            <co xml:id="CO158-5"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO158-1">
<para>L&#8217;application démarrera dès que l&#8217;interface réseau sera opérationnelle.</para>
</callout>
<callout arearefs="CO158-2">
<para>L&#8217;application sera relancée en cas de plantage&#160;— maximum 5 fois dans un délai de 120 secondes.</para>
</callout>
<callout arearefs="CO158-3">
<para>Le processus sera démarré au nom de l&#8217;utilisateur système <literal>nobody</literal>.</para>
</callout>
<callout arearefs="CO158-4">
<para>C&#8217;est comme si nous faisions <literal>cd /usr/local/node-app</literal> avant de lancer l&#8217;application&#160;— c&#8217;est la valeur qu&#8217;on retrouve avec <literal>process.cwd()</literal>.</para>
</callout>
<callout arearefs="CO158-5">
<para>Commande à exécuter pour démarrer l&#8217;application.</para>
</callout>
</calloutlist>
<simpara>Le service associé au fichier de configuration précédent peut être démarré
manuellement comme suit&#160;:</simpara>
<screen># Cf. /etc/systemd/&lt;i&gt;nodebook&lt;/i&gt;.d/app.conf
$ sudo systemctl start &lt;i&gt;nodebook&lt;/i&gt;.service</screen>
<simpara>Les commandes <literal>systemctl stop</literal> et <literal>systemctl restart</literal>
arrêtent et relancent un service.</simpara>
<simpara>Dans tous les cas, le service sera lancé automatiquement au prochain
démarrage du système d&#8217;exploitation.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> Et pour Windows ?</title>
<simpara>Le gestionnaire de services Windows est compliqué à utiliser.
Je recommande d&#8217;utiliser le module npm
<emphasis>node-windows</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/node-windows">npmjs.com/node-windows</link></phrase>).</simpara>
</tip>
</section>
<section xml:id="application-manager">
<title>Avec un serveur d&#8217;applications web</title>
<simpara>Un serveur d&#8217;applications web est un logiciel informatique
qui a deux objectifs&#160;: <emphasis role="strong">être toujours disponible</emphasis>
et <emphasis role="strong">répartir le trafic HTTP</emphasis> vers des fichiers et des applications web.
C&#8217;est une sorte de parapluie optimisé et résistant qui se met au-devant
de nos applications.</simpara>
<note>
<title><phrase role="RemarquePreTitre">Question</phrase> Pourquoi utiliser un serveur d&#8217;applications ?</title>
<simpara>Les serveurs d&#8217;applications sont excellents pour gérer la charge des requêtes,
se protéger de failles de sécurité HTTP et être performants dans le
traitement des fichiers statiques.</simpara>
<simpara>Leur capacité à redémarrer une application Node en cas de plantage ou de
nouveau déploiement nous enlève une épine du pied.
Certains ont même des facultés de <emphasis>répartition de charge</emphasis> (<emphasis>load balancing</emphasis>)&#160;:
plusieurs instances de la même application tournent alors en parallèle
—&#160;une par CPU.
Le trafic est réparti vers l&#8217;instance qui a le plus de CPU disponible.</simpara>
</note>
<simpara><emphasis role="strong">Phusion Passenger</emphasis> (<phrase role="URL"><link xl:href="https://phusionpassenger.com/">phusionpassenger.com/</link></phrase>) est un
serveur d&#8217;applications web open source, léger et performant.
Il est compatible avec des applications Ruby, Node et Python.
Il s&#8217;installe de manière autonome ou en complément des serveurs <emphasis>nginx</emphasis>
(<phrase role="URL"><link xl:href="https://nginx.org">nginx.org</link></phrase>) et <emphasis>Apache httpd</emphasis> (<phrase role="URL"><link xl:href="https://httpd.apache.org">httpd.apache.org</link></phrase>).</simpara>
<simpara>Regardons ensemble à quoi ressemble un fichier de configuration <emphasis>nginx</emphasis>
minimaliste&#160;:</simpara>
<formalpara>
<title>nginx/static.conf</title>
<para>
<programlisting language="nginx" linenumbering="unnumbered">server {
  listen 80 default_server;
  server_name _;

  root /var/www;       <co xml:id="CO159-1"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO159-1">
<para>Répertoire racine où <emphasis>nginx</emphasis> va chercher les fichiers.</para>
</callout>
</calloutlist>
<simpara>Si <emphasis>nginx</emphasis> est lancé sur notre ordinateur avec ce fichier de configuration
et que le fichier <literal>image.jpg</literal> est placé dans le répertoire <literal>/var/www</literal>,
alors nous pourrons y accéder dans un navigateur web
sur <literal><link xl:href="http://localhost/image.jpg">localhost/image.jpg</link></literal>.</simpara>
<simpara>Transformons maintenant ce fichier de configuration
après avoir installé le module <emphasis>Phusion Passenger</emphasis> pour <emphasis>nginx</emphasis>
(<phrase role="URL"><link xl:href="https://phusionpassenger.com/library/install/nginx/">phusionpassenger.com/library/install/nginx/</link></phrase>)&#160;:</simpara>
<formalpara>
<title>nginx/phusionwebapp.conf</title>
<para>
<programlisting language="nginx" linenumbering="unnumbered">server {
  listen 80 default_server;
  server_name _;
  root /var/www;

  passenger_enabled on;                             <co xml:id="CO160-1"/>
  passenger_app_type node;                          <co xml:id="CO160-2"/>
  passenger_app_root /var/apps/my-app;              <co xml:id="CO160-3"/>
  passenger_startup_file app.js;                    <co xml:id="CO160-4"/>
  passenger_document_root /var/apps/my-app/public;  <co xml:id="CO160-5"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO160-1">
<para>Activation du module <emphasis>Phusion Passenger</emphasis> pour <emphasis>nginx</emphasis>.</para>
</callout>
<callout arearefs="CO160-2">
<para>Nous indiquons à <emphasis>Phusion Passenger</emphasis> qu&#8217;il s&#8217;agit d&#8217;une application Node.</para>
</callout>
<callout arearefs="CO160-3">
<para>L&#8217;application se trouve dans le répertoire <literal>/var/apps/my-app</literal>.</para>
</callout>
<callout arearefs="CO160-4">
<para>Le script à démarrer est <literal>app.js</literal>&#160;— c&#8217;est-à-dire <literal>/var/apps/my-app/app.js</literal>.</para>
</callout>
<callout arearefs="CO160-5">
<para>Emplacement où <emphasis>Phusion Passenger</emphasis> ira chercher les fichiers statiques.</para>
</callout>
</calloutlist>
<simpara><emphasis>Phusion Passenger</emphasis> démarre l&#8217;application Node pour nous.
Il la maintient en vie en cas de plantage.
Son comportement se configure finement à l&#8217;aide de directives dont la liste
intégrale se trouve sur
<phrase role="URL"><link xl:href="http://phusionpassenger.com/library/config/nginx/reference/">phusionpassenger.com/library/config/nginx/reference/</link></phrase>.</simpara>
</section>
</section>
<section xml:id="monitoring">
<title>À quoi penser après la mise en ligne ?</title>
<simpara>De la programmation au déploiement, nous sommes toujours en mesure
de savoir quand quelque chose ne va pas&#160;: les <emphasis role="strong">erreurs se produisent sous nos yeux</emphasis>.</simpara>
<simpara>Les problèmes commencent à <emphasis role="strong">échapper à notre attention dès la mise en ligne</emphasis>.
Regardons ensemble ce que nous pouvons faire pour intervenir au bon moment.</simpara>
<section xml:id="uptime">
<title>L&#8217;application a planté</title>
<simpara>Que se passe-t-il lorsqu&#8217;une application plante en plein milieu du week-end&#160;?
<emphasis>Rien</emphasis>.
Nous n&#8217;en savons rien tant que nous n&#8217;allons pas sur l&#8217;application en question.
L&#8217;action la plus simple à mettre en œuvre est de <emphasis role="strong">recevoir une alerte</emphasis>
par e-mail ou par SMS.</simpara>
<simpara><emphasis>Pingdom</emphasis> (<phrase role="URL"><link xl:href="https://www.pingdom.com/free">www.pingdom.com/free</link></phrase>) répond exactement à ce besoin.
Il est gratuit pour un site web et payant au-delà.</simpara>
<figure>
<title>Écran de configuration des alertes de sites web avec Pingdom.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/pingdom-uptime.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>pingdom uptime</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>Uptime Robot</emphasis> (<phrase role="URL"><link xl:href="https://uptimerobot.com">uptimerobot.com</link></phrase>) est un service similaire.
Il offre en plus un flux RSS d&#8217;alertes et une intégration avec Slack.</simpara>
</section>
<section xml:id="exceptions">
<title>S&#8217;informer des erreurs applicatives</title>
<simpara>Lorsque nous prenons connaissance d&#8217;un plantage applicatif, comment déterminer
ce qui l&#8217;a causé&#160;?</simpara>
<figure>
<title>Écran affiché par Heroku lorsque l&#8217;application a planté et ne répond plus.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/heroku-app-error.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>heroku app error</phrase></textobject>
</mediaobject>
</figure>
<simpara>S&#8217;il s&#8217;agit d&#8217;une application personnelle ou sans enjeu,
nous pouvons nous contenter de reproduire le problème localement.<?asciidoc-br?>
Dans le cas d&#8217;une application professionnelle,
nous aurons besoin d&#8217;avoir plus de précisions, rapidement.</simpara>
<simpara><emphasis>Sentry</emphasis> (<phrase role="URL"><link xl:href="https://sentry.io">sentry.io</link></phrase>) est un service en ligne qui s&#8217;intègre
dans notre code comme une sonde.
Une fois placée, la sonde transmet les erreurs vers la plate-forme <emphasis>Sentry</emphasis>.
Cette plate-forme affiche les erreurs connues sous forme de tableau de bord&#160;—
leur nature, combien de fois elles se répètent.
Elle nous envoie également une notification par e-mail avec une indication
de sévérité, pour que nous puissions réagir plus ou moins rapidement.</simpara>
<figure>
<title>Écran d&#8217;affichage d&#8217;une erreur analysée par Sentry.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/sentry-error.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>sentry error</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;inclusion d&#8217;une sonde basique revient à insérer 2 lignes dans notre code&#160;:</simpara>
<formalpara>
<title>sentry.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const sentry = require('raven');                  <co xml:id="CO161-1"/>
sentry.config(process.env.SENTRY_DSN).install();  <co xml:id="CO161-2"/>

const express = require('express');
const app = express();

test;                                             <co xml:id="CO161-3"/>

app.get('/', (request, response) =&gt; response.send('OK!'));
app.listen(process.env.PORT || 4000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO161-1">
<para><emphasis>raven</emphasis> est le nom du module npm édité par Sentry pour collecter les erreurs.</para>
</callout>
<callout arearefs="CO161-2">
<para>Configuration du client Sentry&#160;— il collectera et enverra les erreurs auprès du service Sentry.</para>
</callout>
<callout arearefs="CO161-3">
<para>Cette ligne est la source de notre erreur&#160;— la variable n&#8217;est pas définie.</para>
</callout>
</calloutlist>
<simpara><emphasis>Sentry</emphasis> nous communique une clé d&#8217;API pour chaque projet à monitorer.
Quand vous obtenez la vôtre, modifiez la ligne de commande suivante afin
de provoquer l&#8217;erreur, de recevoir l&#8217;e-mail d&#8217;alerte et de la visualiser
en détails sur le tableau de bord&#160;:</simpara>
<screen>$ SENTRY_DSN=https://0c...@sentry.io/1201870 node sentry.js</screen>
<note>
<title><phrase role="RemarquePreTitre">Documentation</phrase> Configurer Sentry</title>
<simpara>Un guide complet (en anglais) documente comment aller plus loin
dans l&#8217;utilisation de Sentry.</simpara>
<simpara>Il se lit sur <phrase role="URL"><link xl:href="https://docs.sentry.io/clients/node/">docs.sentry.io/clients/node/</link></phrase>.</simpara>
</note>
<simpara>Le service <emphasis>New Relic</emphasis> (<phrase role="URL"><link xl:href="https://newrelic.com/nodejs">newrelic.com/nodejs</link></phrase>)
est une alternative à <emphasis>Sentry</emphasis>.
Il mesure également les performances et les sources de ralentissement.
<emphasis>New Relic</emphasis> s&#8217;installe gratuitement et en quelques clics sur la
<link linkend="hosting.paas">plate-forme de services</link> Heroku.
Il devient payant à partir d&#8217;un certain volume de requêtes.</simpara>
</section>
<section xml:id="security.node">
<title>Notre version de Node fait l&#8217;objet d&#8217;une faille de sécurité</title>
<simpara>Certaines versions de Node sortent pour apporter de nouvelles fonctionnalités
ou pour corriger des bugs.
D&#8217;autres sont publiées pour corriger des failles de sécurité.
Ces <emphasis role="strong">failles sont critiques pour nos applications</emphasis>.</simpara>
<simpara>Lorsqu&#8217;une faille est exploitée, la personne à l&#8217;origine de l&#8217;attaque
peut ralentir, faire planter ou extraire des informations confidentielles
de notre application.
En cas de faille critique, l&#8217;attaquant·e peut aussi gagner un accès
à l&#8217;ordinateur et aux bases de données hébergeant l&#8217;application.</simpara>
<simpara>Solution&#160;: <emphasis role="strong">redéployer nos applications</emphasis> avec une version de Node plus récente.</simpara>
<simpara>Je vous encourage à recevoir des alertes par e-mail ou en
vous abonnant au fil RSS pour être prevenu·e au bon moment.</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>E-mail</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://groups.google.com/group/nodejs-sec">groups.google.com/group/nodejs-sec</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Fil RSS</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/en/feed/vulnerability.xml">nodejs.org/en/feed/vulnerability.xml</link></phrase></simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<figure>
<title>Exemple d&#8217;alerte de sécurité envoyée par e-mail.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/node-security-bulletin.png"/>
</imageobject>
<textobject><phrase>node security bulletin</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="security.npm">
<title>Un des modules npm fait l&#8217;objet d&#8217;une faille de sécurité</title>
<simpara>Les modules npm sont aussi affectés par des failles de sécurité.</simpara>
<simpara>Les conséquences de leur exploitation sont similaires aux failles de Node&#160;:
les personnes à l&#8217;origine des attaques peuvent saturer le serveur et
paralyser l&#8217;application.
Elles sont aussi en mesure de subtiliser des informations confidentielles
stockées en base de données ou saisies par les usagers.</simpara>
<simpara><emphasis>Snyk</emphasis> (<phrase role="URL"><link xl:href="https://snyk.io">snyk.io</link></phrase>) est un service de sécurité gratuit pour les
projets open source.
Il scanne les vulnérabilités de nos dépendances et
des dépendances de nos dépendances.
Il nous alerte sur la sévérité des failles décelées dans nos projets.</simpara>
<figure>
<title>Tableau de bord des dépendances vulnérables avec Snyk.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/snyk-dashboard.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>snyk dashboard</phrase></textobject>
</mediaobject>
</figure>
<simpara>Ces failles sont classées en 3 niveaux&#160;: dangereuses, modérées et superficielles.
Mieux vaut mettre à jour les dépendances affectées par une faille dangereuse
le plus rapidement possible.</simpara>
<simpara>Ce n&#8217;est pas grave si nous ne mettons pas à jour un vieux module npm.
Ça peut avoir un impact négatif si cette vieille version est affectée par une faille.</simpara>
<simpara>La capture d&#8217;écran suivante illustre une vulnérabilité décelée dans le module
npm <emphasis>restify</emphasis> dans sa version 4&#160;:</simpara>
<figure>
<title>Affichage d&#8217;une vulnérabilité et d&#8217;un chemin de résolution avec Snyk.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/snyk-vulnerability.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>TIP</phrase></textobject>
</mediaobject>
</figure>
<simpara>La correction du problème implique de passer à la version 5.
Cette action nous demandera surement d&#8217;adapter notre code car nous changeons
de version majeure&#160;— de la version 4 à la version 5.
Ces migrations sont souvent documentées par les auteurs des modules.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Intégrations npm, Heroku, etc.</title>
<simpara>Snyk s&#8217;intègre à d&#8217;autres services que GitHub&#160;: GitLab, Heroku, BitBucket, etc.</simpara>
<simpara>Les applications au code source privé peuvent être vérifiées gratuitement
avec l&#8217;API de Snyk ou son application en ligne de commande.</simpara>
</tip>
<table tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<title>Ressources proposées par Snyk.</title>
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>Base de données</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://snyk.io/vuln/?type=npm">snyk.io/vuln/?type=npm</link></phrase></simpara>
</entry>
</row>
<row>
<entry>
<simpara>Fil RSS</simpara>
</entry>
<entry>
<simpara><phrase role="URL"><link xl:href="https://snyk.io/vuln/feed.xml?type=npm">snyk.io/vuln/feed.xml?type=npm</link></phrase></simpara>
</entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Nous avons parlé de la commande <literal>npm audit</literal> dans
le <link xl:href="../chapter-05/index.xml#audit">chapitre 5</link>.
Elle dispose d&#8217;une option pour mettre à jour automatiquement
les dépendances dangereuses&#160;: <literal>npm audit fix</literal>.</simpara>
<screen>$ npm audit fix
&gt; fixed 20 of 21 vulnerabilities in 1867 scanned packages
&gt;   1 vulnerability required manual review and could not be updated</screen>
<simpara>Rester à l&#8217;écoute des vulnérabilités en combinaison de l&#8217;utilisation
de Snyk ou de <literal>npm audit fix</literal> suffit à prendre des mesures de correction
efficaces sans avoir à trop s&#8217;y connaitre.</simpara>
<simpara>La lecture des rapports de vulnérabilité est un bon moyen de comprendre
comment ces exploits fonctionnent, et comment penser nos applications
pour éviter d&#8217;exposer une surface d&#8217;attaque minimale.</simpara>
</section>
</section>
<section xml:id="conclusion_6">
<title>Conclusion</title>
<simpara>Nous avons désormais <emphasis role="strong">toutes les clés pour partager notre code</emphasis> et le
résultat de son exécution de manière publique.</simpara>
<simpara>Nous avons appris à <emphasis role="strong">choisir un hébergement et un mode de déploiement</emphasis>
adapté à notre temps disponible ainsi qu&#8217;à nos envies.
Nous sommes en mesure d&#8217;aller vite ou de prendre le temps de configurer
une machine pour des besoins très précis.</simpara>
<simpara>La <emphasis role="strong">configuration d&#8217;une application</emphasis> avec des variables d&#8217;environnement
est une des clés pour automatiser le déploiement.</simpara>
<simpara>L'<emphasis role="strong">automatisation du démarrage</emphasis> d&#8217;une application demande d&#8217;investir du temps
pour être à l&#8217;aise.
Ce temps est utile car le principe s&#8217;applique à d&#8217;autres langages
et ouvre la porte de la maîtrise de l&#8217;hébergement applicatif,
quand les <link linkend="hosting.paas">plate-formes de service</link> commencent à nous
coûter trop cher.</simpara>
</section>
</chapter>
<chapter xml:id="créer_une_application_web">
<title>Créer une application web</title>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Créer un serveur HTTP</simpara>
</listitem>
<listitem>
<simpara>Développer rapidement avec un <emphasis>framework</emphasis> web</simpara>
</listitem>
<listitem>
<simpara>Se connecter à une base de données</simpara>
</listitem>
<listitem>
<simpara>Utiliser un moteur de rendu</simpara>
</listitem>
<listitem>
<simpara>Tester son application web</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>TBD.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-07
$ cd $(nodebook dir chapter-07)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="comment_ça_marche_http">
<title>Comment ça marche HTTP ?</title>
<simpara>Une personne qui vient de PHP + Apache
-&#8594; pourquoi lancer un serveur&#160;?
Parce que moi j&#8217;ai Apache qui fait déjà ça pour moi.
J&#8217;ai mon fichier index.php et ensuite Symfony fait le reste.</simpara>
<itemizedlist>
<listitem>
<simpara>la page PHP est interpétée le temps de la requête, puis tout est mis à la poubelle (en termes de  mémoire, donc les valeurs des variables)</simpara>
</listitem>
<listitem>
<simpara>j&#8217;ai apache ou nginx devant, j&#8217;ai pas besoin d&#8217;un serveur web</simpara>
</listitem>
<listitem>
<simpara>modèle Apache + script ou Apache + port</simpara>
</listitem>
<listitem>
<simpara>pourquoi Apache lancerait pas un script Node comme il ferait avec php&#160;?</simpara>
</listitem>
<listitem>
<simpara>on cherche à s&#8217;éloigner du modèle où on recrée et détruit tout à chaque requête</simpara>
</listitem>
<listitem>
<simpara>c&#8217;est rassurant parce que ça encapsule</simpara>
</listitem>
<listitem>
<simpara>mais le coût il est en termes de  perf (charger tous les modules, résoudre les chemins, connecter à la base de données, i/o disque/réseau), pour chaque requête, et donc en termes de  perception de l&#8217;autre côté de la ligne&#160;: le spinner il tourne côté navigateur</simpara>
</listitem>
<listitem>
<simpara>au bout de combien de temps un utilisateur quitte un site web s&#8217;il ne voit rien s&#8217;afficher&#160;?</simpara>
</listitem>
<listitem>
<simpara>stats sur la perception d&#8217;instantanéité (400ms de Halt &amp; Catch Fire), observé en publicité, effondrement du taux de clic</simpara>
</listitem>
<listitem>
<simpara>plus intéressant de servir "à chaud" (réduire les ressources et temps de calcul avant de pouvoir commencer à effectivement traiter la requête)</simpara>
</listitem>
<listitem>
<simpara>quand une requête arrive ça veut dire quoi</simpara>
</listitem>
<listitem>
<simpara>browser&#160;: GET <link xl:href="http://monsite.com">monsite.com</link></simpara>
</listitem>
<listitem>
<simpara>montrer une requête HTTP brute</simpara>
</listitem>
<listitem>
<simpara>surprise&#160;: c&#8217;est que du texte</simpara>
</listitem>
<listitem>
<simpara>c&#8217;est interprété de deux côtés&#160;: par le client (programme qui demande, adresse une requête&#8201;&#8212;&#8201;un navigateur web c&#8217;est un type de client) et le serveur (programme qui reçoit et renvoie des réponses)</simpara>
</listitem>
<listitem>
<simpara>et une réponse ça ressemble à quoi&#160;?</simpara>
</listitem>
<listitem>
<simpara>dans la réponse y&#8217;a un statut (200, etc) (c&#8217;est pour ça 404)</simpara>
</listitem>
<listitem>
<simpara>dans la réponse y&#8217;a un type de contenu (Content-Type)</simpara>
</listitem>
<listitem>
<simpara>le corps de la réponse peut être du texte, qui suit un certain format (HTML, texte, XML, JSON, image/jpg, image/png)</simpara>
</listitem>
<listitem>
<simpara>le client interprète en fonction de ses capacités et d&#8217;hypothèses pragmatiques</simpara>
</listitem>
<listitem>
<simpara>un navigateur web&#160;: il interprète le HTML, l&#8217;affiche, et demande les ressources listées dans les différentes balises (img, video, audio)</simpara>
</listitem>
<listitem>
<simpara>fait autant de requêtes que nécessaire pour les obtenir et les afficher</simpara>
</listitem>
<listitem>
<simpara>attention s&#8217;il y en a trop, ça fait le même effet que retirer un courier à la Poste à la mauvaise heure</simpara>
</listitem>
<listitem>
<simpara>le poids des ressources à transférer a un impact (plus c&#8217;est lourd, plus c&#8217;est gros, plus c&#8217;est long à charger&#160;— c&#8217;est amplifié par la qualité et le débit de la connexion Internet)</simpara>
</listitem>
<listitem>
<simpara>[TIP]&#160;: les WebView ce sont des navigateurs web, genre pour iOS, Android etc.</simpara>
</listitem>
<listitem>
<simpara>un client en ligne de commande (curl, wget)&#160;: il n&#8217;interpète pas, récupère juste</simpara>
</listitem>
<listitem>
<simpara>c&#8217;est utilisé pour faire du scrapping</simpara>
</listitem>
<listitem>
<simpara>c&#8217;est utilisé pour donner ça à d&#8217;autres programmes (enjoliver le résultat, extraire des informations)</simpara>
</listitem>
<listitem>
<simpara>voir au chapitre 8 pour en savoir plus sur le fonctionnement d&#8217;applications en ligne de commande</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="et_si_je_devais_créer_un_serveur_web_comment_ça_se_passe">
<title>Et si je devais créer un serveur web, comment ça se passe ?</title>
<itemizedlist>
<listitem>
<simpara>distingo serveur web/serveur http&#160;? (pas sûr que ça vaille le coup/coût à ce stade là)</simpara>
</listitem>
<listitem>
<simpara>c&#8217;est quoi cette histoire d&#8217;ouvrir un port pour lancer un serveur&#160;?</simpara>
</listitem>
<listitem>
<simpara>dans le cas de formulaire, le client <emphasis>envoie</emphasis> des informations en même temps que la requête</simpara>
</listitem>
<listitem>
<simpara>comme on est dans un format texte, il faut l&#8217;interpréter le parser</simpara>
</listitem>
<listitem>
<simpara>les trucs auxquels il faut faire gaffe</simpara>
</listitem>
<listitem>
<simpara>qu&#8217;est-ce qui occupe de la mémoire&#160;?</simpara>
</listitem>
<listitem>
<simpara>ça a d&#8217;autant plus d&#8217;impact qu&#8217;on est sur des processus longs (aka programme qui tourne en continu&#160;— le serveur web)</simpara>
</listitem>
<listitem>
<simpara>donc si on nettoie pas (ce qu&#8217;on ouvre, si on charge tout d&#8217;un coup), les ressources disponibles diminuent jusqu&#8217;au plantage</simpara>
</listitem>
</itemizedlist>
<section xml:id="express">
<title>Développement rapide avec des <emphasis>frameworks</emphasis> web</title>
<section xml:id="les_emphasis_middlewares_emphasis">
<title>Les <emphasis>middlewares</emphasis></title>
<simpara>TBD.</simpara>
</section>
<section xml:id="router_des_requêtes_vers_des_modules">
<title>Router des requêtes vers des modules</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="sécuriser_une_requête_entrante">
<title>Sécuriser une requête entrante</title>
<simpara>TBD.</simpara>
<simpara>L&#8217;organisme <emphasis>Open Web Application Security Project</emphasis> (<emphasis>OWASP</emphasis>) recueille et diffuse nombre de critères de sécurité à connaître et vérifier pour déjouer au mieux des attaques.
Citons quelques uns de ces critères&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">dépendences logicielles</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">injection de code arbitraire</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">données d&#8217;authentification</emphasis> (vols, interceptions, brute force etc.)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contrôles d&#8217;accès</emphasis> (impersonnification etc.)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">optimisme sécuritaire</emphasis> et <emphasis role="strong">absences de vérifications</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>exposition de <emphasis role="strong">données critiques</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>attaques <emphasis role="strong">CSRF</emphasis> (un script tiers actionne des commandes à notre insu)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">uploads de fichiers</emphasis> (poids limite, formats, chevaux de Troie etc.)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">redirections</emphasis> non-contrôlées.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Ressources</phrase> <phrase role="URL">owasp.org</phrase></title>
<simpara>Le site d&#8217;OWASP offre guides, référentiels, fiches récapitulatives, applications types, outils et tutoriaux pour sensibiliser à la sécurité applicative.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.owasp.org/">www.owasp.org/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodegoat.herokuapp.com/tutorial">nodegoat.herokuapp.com/tutorial</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="authentifier_des_utilisateurs">
<title>Authentifier des utilisateurs</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="database">
<title>Connexion à des bases de données</title>
<section xml:id="quelle_base_de_données_choisir">
<title>Quelle base de données choisir ?</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">en mémoire</emphasis><?asciidoc-br?>
Le stockage est dit <emphasis>éphémère</emphasis> car l&#8217;information est stockée dans la mémoire vive de la machine et disparait dès que l&#8217;application est interrompue&#160;;</simpara>
</listitem>
<listitem>
<simpara>sous forme de <emphasis role="strong">fichiers</emphasis><?asciidoc-br?>
Le stockage est <emphasis>physiquement lié</emphasis> à la machine hébergeant l&#8217;application.
Ce support est davantage adapté à un <emphasis>cache</emphasis> n&#8217;ayant pas besoin d&#8217;être actualisé après l&#8217;initialisation de l&#8217;application&#160;;</simpara>
</listitem>
<listitem>
<simpara>via une <emphasis role="strong">API</emphasis><?asciidoc-br?>
Le stockage est <emphasis>nécessairement dissocié</emphasis> à la machine hébergeant l&#8217;application.
L&#8217;accès à la lecture et à l&#8217;écriture de l&#8217;information se fait au travers d&#8217;une <emphasis>interface de données</emphasis> accessible via HTTPS.<?asciidoc-br?>
Nous pourrions tout à fait envisager d&#8217;utiliser les APIs de GitHub, Kinto, Google Drive ou KeyBase.io pour persister et collecter des données brutes ou transformées&#160;;</simpara>
</listitem>
<listitem>
<simpara>en <emphasis role="strong">base de données</emphasis><?asciidoc-br?>
Le stockage n&#8217;est <emphasis>pas nécessairement lié</emphasis> à la machine hébergeant l&#8217;application.
L&#8217;information persiste si l&#8217;application est interrompue.</simpara>
</listitem>
</itemizedlist>
<simpara>Doit-on nécessairement <emphasis role="strong">utiliser <emphasis>MongoDB</emphasis></emphasis>, une base de données <emphasis>orientée documents</emphasis> ou <emphasis>JSON</emphasis> avec une application Node&#160;?
La réponse est catégorique&#160;: c&#8217;est <emphasis role="strong">non</emphasis>.</simpara>
<simpara><emphasis role="strong">Tout type de base de données s&#8217;interface avec Node</emphasis>, qu&#8217;elle soit <emphasis>relationnelle</emphasis> (Postgres, MariaDB, MySQL), <emphasis>clé/valeur</emphasis> (Redis), en <emphasis>colonnes</emphasis> (Cassandra) ou <emphasis>orientée documents</emphasis> (MongoDB, ElasticSearch).</simpara>
</section>
<section xml:id="modèles_de_données">
<title>Modèles de données</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="affichage_et_templating_de_données">
<title>Affichage et templating de données</title>
<section xml:id="fichiers_statiques">
<title>Fichiers statiques</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="templating_html">
<title>Templating HTML</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="ressources_restful">
<title>Ressources RESTful</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="tester_son_application">
<title>Tester son application</title>
<section xml:id="tests_unitaires">
<title>Tests unitaires</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="tests_fonctionnels">
<title>Tests fonctionnels</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="tests_d_api_rest">
<title>Tests d&#8217;API REST</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="conclusion_7">
<title>Conclusion</title>
<simpara>TBD.</simpara>
</section>
</chapter>
<chapter xml:id="créer_un_outil_en_ligne_de_commande">
<title>Créer un outil en ligne de commande</title>
<simpara>TBD.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>TBD.</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>TBD.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<simpara>install global&#160;: pour quelqu&#8217;un qui n&#8217;a pas besoin de l&#8217;inclure dans un projet.
Être autonome.
En faire un outil système.
Taper la commande sans avoir à se soucier d&#8217;autre chose.</simpara>
<simpara>utilisation&#160;: le nom c&#8217;est le même.
Plus logique.
Plus facile à retenir.
Mais ça peut se changer.</simpara>
<section xml:id="start">
<title>Créer un script exécutable</title>
<section xml:id="script">
<title>Au départ, un simple script Node</title>
<simpara>Dans le répertoire <literal>./bin</literal> parce que c&#8217;est la convention</simpara>
<blockquote>
<simpara>Il faudra faire le lien avec le package.json</simpara>
</blockquote>
<screen>$ node bin/fichier.js</screen>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-08
$ cd $(nodebook dir chapter-08)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
</section>
<section xml:id="permissions">
<title>Modifier les permissions du script</title>
<simpara>pour le rendre exécutable (Linux et macOS)</simpara>
<screen>$ chmod +x bin/fichier.js</screen>
<simpara>Warning&#160;: +x pour tout le monde</simpara>
</section>
<section xml:id="shebang">
<title>Préciser le contexte d&#8217;exécution (<emphasis>shebang</emphasis>)</title>
<simpara>Il faut parler à bash. <literal>#!</literal> sert à ça.</simpara>
<simpara>Chemin absolu vers exécutable.
<literal>/usr/bin/env</literal> vs <literal>which</literal> vs <literal>/usr/bin/node</literal>&#160;?</simpara>
<blockquote>
<simpara>Runs a program in a modified environment.
(chercher plus sur pourquoi env)</simpara>
</blockquote>
</section>
<section xml:id="package.json">
<title>Faire le lien avec un module npm</title>
<simpara>Champ <literal>bin</literal></simpara>
</section>
<section xml:id="install">
<title>Tester une installation globale, localement</title>
<screen>$ npm i -g .</screen>
<simpara>Prend en compte les changements locaux.</simpara>
</section>
<section xml:id="interface">
<title>Vers un code testable et réutilisable</title>
<simpara>Obtenir la surface la plus faible possible entre son code et la lecture
des arguments.</simpara>
<simpara>réduire le plus possible ce qu&#8217;il y a dans un fichier exécutable
pour tester le plus facilement</simpara>
<simpara><indexterm><primary>exemple inDir outDir&#8201;&#8212;&#8201;réutiliser du code métier</primary></indexterm>exemple inDir outDir&#8201;&#8212;&#8201;réutiliser du code métier</simpara>
<simpara>idéalement ce qui est dans le <literal>main</literal> est consommé par le <literal>bin</literal></simpara>
</section>
</section>
<section xml:id="interactive">
<title>Du script au programme interactif</title>
<section xml:id="options">
<title>Utiliser des options et arguments</title>
<simpara><literal>process.argv</literal></simpara>
<simpara>Tableau qui contient toutes les chaines de caractère utilisées pour lancer la commande.</simpara>
<simpara>(héritage UNIX).</simpara>
<simpara><literal>process.argv.slice(2)</literal></simpara>
<simpara>Créer des variables explicites au lieu de <literal>process.argv[2]</literal>.</simpara>
<simpara>Et la mémoire&#160;?
Le script utilisera la mémoire disponible, à concurrence des autres applications qui tournent sur la même machine
Sur un Raspberry Pi, y&#8217;a moins de mémoire donc on peut atteindre plus rapidement des limites si les fichiers dépassent les capacités (centaine de Mo&#160;— vs. plus Go sur des ordinateurs modernes)</simpara>
</section>
<section xml:id="colours">
<title>Améliorer la lisibilité grâce aux couleurs</title>
<itemizedlist>
<listitem>
<simpara>chalk</simpara>
</listitem>
<listitem>
<simpara>un autre module plus fonctionnel</simpara>
</listitem>
<listitem>
<simpara>ANSI (sous Windows c&#8217;est différent je crois)</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="questions">
<title>Demander une série d&#8217;informations</title>
<itemizedlist>
<listitem>
<simpara>demand</simpara>
</listitem>
<listitem>
<simpara>&lt;insérer un module npm qui fait ça bien&gt;</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="progress">
<title>Informer de la progression</title>
<itemizedlist>
<listitem>
<simpara>readline</simpara>
</listitem>
<listitem>
<simpara>spinner</simpara>
</listitem>
<listitem>
<simpara>progressbar</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="update">
<title>Inviter à mettre à jour le module</title>
<itemizedlist>
<listitem>
<simpara>update-check</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="tests">
<title>Tester son code</title>
<section xml:id="tests.interface">
<title>Seulement l&#8217;interface</title>
<simpara>avec les outils habituels</simpara>
</section>
<section xml:id="tests.cli">
<title>Tester l&#8217;exécutable</title>
<simpara>plus dur, plus de code à écrire</simpara>
<itemizedlist>
<listitem>
<simpara>à la main avec spawn/exec</simpara>
</listitem>
<listitem>
<simpara>tape-spawn</simpara>
</listitem>
<listitem>
<simpara>cli-tester</simpara>
</listitem>
<listitem>
<simpara>coffee</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="advanced">
<title>Aller plus loin</title>
<section xml:id="application">
<title>Utilisation d&#8217;un framework d&#8217;application en ligne de commande</title>
<simpara>ça fait beaucoup de choses qu&#8217;on a fait bout par bout
pratique si on a besoin de tout utiliser en même temps
équivalent des express &amp; co pour le web (cf. chapitre 7)</simpara>
<itemizedlist>
<listitem>
<simpara>yargs</simpara>
</listitem>
<listitem>
<simpara>commander</simpara>
</listitem>
<listitem>
<simpara>un autre truc plus léger</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="streaming">
<title>Lire et écrire des données en continu</title>
<simpara>utilisation des streams</simpara>
</section>
<section xml:id="packaging">
<title>Rendre le programme indépendant de Node</title>
<simpara>packager l&#8217;application (<link xl:href="https://www.npmjs.com/package/pkg">www.npmjs.com/package/pkg</link>).</simpara>
</section>
<section xml:id="declarative">
<title>Templating et interfaces déclaratives</title>

</section>
</section>
<section xml:id="conclusion_8">
<title>Conclusion</title>
<simpara>TBD.</simpara>
</section>
</chapter>
<chapter xml:id="créer_une_application_front_end">
<title>Créer une application front-end</title>
<simpara>La popularité de Node s&#8217;est établie également pour la profusion d&#8217;outillage apportée au développement web <emphasis>front-end</emphasis>.</simpara>
<simpara>Ce chapitre nous apprendra le rôle de Node en tant qu&#8217;extension au développement <emphasis>front-end</emphasis>.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>Polyfills et compatibilité <emphasis>ECMASCript</emphasis></simpara>
</listitem>
<listitem>
<simpara>Importer des modules <emphasis>npm</emphasis> pour le web</simpara>
</listitem>
<listitem>
<simpara>Créer du code modulaire, avec ou sans <emphasis>framework</emphasis></simpara>
</listitem>
<listitem>
<simpara>Échanges de données en temps-réel</simpara>
</listitem>
<listitem>
<simpara>Outillage utile au quotidien</simpara>
</listitem>
<listitem>
<simpara>Tester son code et la compatibilité avec les navigateurs web</simpara>
</listitem>
</itemizedlist>
</informalexample>
<abstract>
<simpara>Avant l&#8217;apparition de Node, rare était l&#8217;outillage n&#8217;imposant pas une ou plusieurs plates-formes de développement&#160;: <emphasis>YUICompressor</emphasis> demandait Java, <emphasis>Google Closure Compiler</emphasis> demandait Java, <emphasis>sprockets</emphasis> Ruby et <emphasis>pngquant</emphasis> quelques dépendances système comme <emphasis>libpng</emphasis>.</simpara>
<simpara>L&#8217;existence de Node et du registre <emphasis>npm</emphasis> a favorisé le développement d&#8217;un écosystème orienté <emphasis>front-end</emphasis> plus simple à appréhender.
Cela s&#8217;étend de la découverte au téléchargement des librairies tierces ainsi qu&#8217;à la compilation, l&#8217;optimisation et l&#8217;exécution des tests des applications web côté client.</simpara>
<simpara>Cet <emphasis role="strong">écosystème rend l&#8217;écriture de code moderne normale</emphasis>&#160;; un code anticipant les futurs standards d'<emphasis>ECMAScript</emphasis> et <emphasis>HTML5</emphasis>, sur les navigateurs actuels et anciens.</simpara>
</abstract>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<section xml:id="quel_rapport_entre_node_et_les_navigateurs_web">
<title>Quel rapport entre Node et les navigateurs web ?</title>
<simpara>Ce chapitre peut sembler confus au premier abord.
Si Node s&#8217;exécute au niveau du système d&#8217;exploitation&#160;— "côté serveur"&#160;— en quoi est-il lié au développement <emphasis>front-end</emphasis>&#160;— "côté client"&#160;?
Est-ce parce que du code écrit pour Node peut aussi fonctionner dans un navigateur web&#160;?
<emphasis>Quid</emphasis> de l&#8217;utilisation de <literal>require('fs')</literal> pour accéder au système de fichiers&#160;?</simpara>
<simpara>La réponse <emphasis>courte</emphasis> est&#160;: <emphasis role="strong">nous n&#8217;exécutons pas Node dans un navigateur web</emphasis>.</simpara>
<simpara>Et la réponse <emphasis>longue</emphasis>&#160;: <emphasis role="strong">Node est utilisé pour assembler du code</emphasis>, le <emphasis>transformer</emphasis> et le rendre fonctionnel dans une paire de balises <literal>&lt;script&gt;&lt;/script&gt;</literal>.<?asciidoc-br?>
Ce code peut être aussi bien fourni par des <emphasis role="strong">librairies tierces</emphasis> installées via <emphasis>npm</emphasis> (<emphasis>jQuery</emphasis>, <emphasis>React</emphasis> ou <emphasis>d3</emphasis> par exemple) que par de l'<emphasis role="strong">outillage</emphasis> (optimiseurs, suite de tests, orchestration de tâches, etc.) ou encore par le <emphasis role="strong">code réutilisable</emphasis> de notre propre application web.</simpara>
<simpara>Il faut également bien comprendre qu&#8217;il y a plusieurs "problèmes" cachés sous une même question&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Les navigateurs web et Node utilisent différentes machines virtuelles JavaScript, avec différents niveaux de complétion dans l&#8217;implémentation d'<emphasis>ECMAScript</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>Les navigateurs web et Node n&#8217;ont pas accès aux mêmes APIs&#160;– Node accède à <literal>fs</literal> et <literal>http</literal> tandis que les navigateurs ont <literal>File</literal> et <literal>fetch</literal>/<literal>XmlHttpRequest</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>Les navigateurs web et Node ne gèrent pas le chargement de modules de la même manière&#160;– voir la section <link linkend="managing-dependencies">gestion des dépendances</link>&#160;;</simpara>
</listitem>
<listitem>
<simpara>L&#8217;implémentation même d'<emphasis>ECMAScript</emphasis> va différer selon les versions de Node employées&#160;– un navigateur moderne et Node 6 comprendraient l&#8217;objet natif <literal>Promise</literal> mais pas Node 0.12.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce processus n&#8217;est <emphasis>pas magique</emphasis> et nous verrons graduellement au cours des prochaines sections comment tout ceci fonctionne.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install chapter-09
$ cd $(nodebook dir chapter-09)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
</section>
<section xml:id="écrire_dès_à_présent_le_code_du_futur">
<title>Écrire dès à présent le code du futur</title>
<simpara>Transformer du code ECMAScript a pendant longtemps été chose pénible.
Je pense par exemple à de la minification de code (pour réduire les temps de transfert sur les antiques lignes ADSL 128K) ou à de la conversion automatique de code <emphasis>ECMAScript 3</emphasis> en <emphasis>ECMAScript 5</emphasis>.
Cela nécessitait systématiquement l&#8217;utilisation d&#8217;un autre environnement qu&#8217;ECMAScript lui-même: <emphasis>Rhino</emphasis> nécessitait Java, <emphasis>Spidermonkey</emphasis> nécessitait C++ et <emphasis>Trident</emphasis> nécessitait un environnement Windows en plus de C++.</simpara>
<simpara><emphasis role="strong">esprima</emphasis> chamboule les règles du jeu en décembre 2011&#160;: ce parseur <emphasis>ECMAScript</emphasis>&#160;— lui-même écrit en <emphasis>ECMAScript</emphasis>&#160;– exporte une compréhension de code sous forme d&#8217;arbre syntaxique abstrait (<emphasis>abstract syntax tree</emphasis>, <emphasis>AST</emphasis>).
Cet arbre est lui-même analysable par de <emphasis role="strong">nouveaux outils émergents</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>les <emphasis>source maps</emphasis> pour associer le code transformé au code d&#8217;origine, notamment dans les outils de développement des navigateurs web&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis>minifieurs</emphasis> plus efficaces et ayant connaissance des portions de code exécutées&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis>analyseurs de code</emphasis> pour informer le développeur d&#8217;erreurs de syntaxe, de non-respect de styles de développement, etc.&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis>convertisseurs de code</emphasis> pour passer d'<emphasis>ECMAScript</emphasis> vers <emphasis>CoffeeScript</emphasis>, de modules <emphasis>CommonJS</emphasis> vers des modules <emphasis>ECMAScript 2015</emphasis>, etc.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Annonce d'<emphasis>esprima</emphasis></title>
<simpara><emphasis>Aryia Hidayat</emphasis> introduit esprima dans un billet de blog.
Il y présente notamment des comparatifs de performances d&#8217;exécution sur différentes VM ECMAScript et face à d&#8217;autres parseurs.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://ariya.io/2011/12/introducing-esprima">ariya.io/2011/12/introducing-esprima</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<section xml:id="la_fin_de_l_approche_par_le_dénominateur_commun">
<title>La fin de l&#8217;approche par le dénominateur commun</title>
<simpara>Qui n&#8217;a pas déjà entamé un projet en posant la question à un client, en regardant les statistiques de trafic ou en se posant une question à soi-même&#160;: quelle est la liste des versions de navigateurs avec lequel notre site ou application web doit être compatible&#160;?</simpara>
<simpara>La version de navigateur la plus ancienne ou la moins conforme aux standards était celle qui donnait le <emphasis>la</emphasis> (qui a prononcé <emphasis>Internet Explorer 7</emphasis> dans la salle&#160;?).<?asciidoc-br?>
Cela voulait dire se priver de techniques modernes, standardisées ou en cours de standardisation.
Cela voulait dire des <emphasis>hacks</emphasis> dans ses CSS, dans son code <emphasis>ECMAScript</emphasis> et dans ses ressources graphiques.</simpara>
</section>
<section xml:id="transpilation">
<title>Écrire au plus proche des standards</title>
<simpara>Fort heureusement l&#8217;arrivée d'<emphasis>esprima</emphasis> change la donne et permet d&#8217;écrire un code proche des standards qui résiste au temps.
Son existence facilite l'<emphasis role="strong">émergence d&#8217;outils automatisant les transformations de code</emphasis> pour satisfaire nos besoins spécifiques.</simpara>
<simpara>Il y a plusieurs éléments à prendre en compte concernant la standardisation de nouvelles versions d'<emphasis>ECMAScript</emphasis> et les évolutions de sa syntaxe&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>la <emphasis role="strong">cadence de standardisation</emphasis> a été revue pour devenir prédictible&#160;– une volonté d&#8217;une fois par an&#160;;</simpara>
</listitem>
<listitem>
<simpara>les <emphasis role="strong">fonctionnalités et éléments de syntaxe sont implémentés un par un</emphasis>, à des vitesses différentes par les différents navigateurs web&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis>deux tiers</emphasis> de navigateurs fonctionnent sur des <emphasis role="strong">rythmes de mises à jour en cycle court</emphasis> (de six à neuf semaines)&#160;– le <emphasis>tiers</emphasis> restant est cadencé à <emphasis role="strong">une seule mise à jour par an</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>Il vaut mieux <emphasis role="strong">parier sur les standards comme stratégie à long terme</emphasis> si on tient compte du <emphasis>temps de développement</emphasis> et du <emphasis>temps de maintenance</emphasis> d&#8217;une base de code.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Question</phrase> Standards, quels standards ?</title>
<simpara>Il y a plusieurs organismes prenant part à la standardisation de langages et d&#8217;API lorsque l&#8217;on touche aux navigateurs web&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>Pour le <emphasis>langage HTML</emphasis>&#160;: WHATWG (<phrase role="URL"><link xl:href="https://html.spec.whatwg.org/">html.spec.whatwg.org/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>Pour l'<emphasis>API DOM</emphasis>&#160;: WHATWG (<phrase role="URL"><link xl:href="https://dom.spec.whatwg.org/">dom.spec.whatwg.org/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>Pour le <emphasis>langage CSS</emphasis>&#160;: W3C (<phrase role="URL"><link xl:href="https://www.w3.org/standards/techs/css">www.w3.org/standards/techs/css</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>Pour le <emphasis>langage ECMAScript</emphasis>&#160;: TC39 (<phrase role="URL"><link xl:href="https://github.com/tc39">github.com/tc39</link></phrase>)&#160;;</simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Lorsque nous écrivons du code, nous pouvons rencontrer quatre cas de figure&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">élément de syntaxe non-implémenté</emphasis>&#160;: transformer le code pour l&#8217;adapter aux navigateurs cibles&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">élément de syntaxe partiellement implémenté</emphasis>&#160;: utiliser l&#8217;implémentation native des navigateurs et à défaut, transformer le code pour l&#8217;adapter aux autres navigateurs&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">élément de syntaxe totalement implémenté</emphasis>&#160;: utiliser l&#8217;implémentation native des navigateurs.</simpara>
</listitem>
</itemizedlist>
<simpara>Il arrive que certains éléments de syntaxe soient <emphasis role="strong">abandonnés</emphasis> pendant le processus de standardisation&#160;– ou que leur implémentation change beaucoup (on pensera à <literal>Object.observe</literal>).</simpara>
<simpara>La question qui nous taraude est&#160;: <emphasis role="strong">comment transformer le code</emphasis> pour satisfaire à la fois les navigateurs compatibles et les autres&#160;?<?asciidoc-br?>
<emphasis role="strong">Babel</emphasis> est un outil de choix  pour parvenir à ces fins d&#8217;écriture de code résistant au(x standards du) temps.</simpara>
<simpara>Ce module convertit de manière sélective toute syntaxe <emphasis>ECMAScript 2015</emphasis>&#160;– ainsi que <emphasis>ECMAScript 2016</emphasis>, etc.&#160;– vers de l'<emphasis>ECMAScript 5</emphasis>, compréhensible par les <emphasis>navigateurs web modernes</emphasis>.
L&#8217;intérêt de sa <emphasis>sélectivité</emphasis> fait que l&#8217;on peut progressivement arrêter de convertir les éléments de syntaxe couverts par 100% des navigateurs web modernes.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Histoire</phrase> Traceur</title>
<simpara><emphasis>Traceur</emphasis> est un des premiers transpilateurs <emphasis>ECMAScript 2015</emphasis> vers <emphasis>ECMAScript 5</emphasis> à avoir émergé dans l&#8217;écosystème Node.</simpara>
<simpara>Il a permis de commencer à <emphasis role="strong">écrire des modules en <emphasis>ECMAScript 2015</emphasis> bien avant que la spécification ne soit entièrement terminée</emphasis>.
Et donc de pouvoir anticiper son apprentissage tout en mettant le langage à l&#8217;épreuve avant sa finalisation.</simpara>
</tip>
<simpara>L&#8217;exemple suivant illustre un code utilisant des éléments de syntaxe d'<emphasis>ECMAScript 2015</emphasis>.</simpara>
<formalpara>
<title>babel-es2015.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const getOS = userAgent =&gt; {
  const [, os, version] = userAgent.match(/\(([^;]+)\s?;\s?([^)]+)\)/);
  return {os, version};
};

const {userAgent} = window.navigator; <co xml:id="CO162-1"/>

console.log(getOS(userAgent)); <co xml:id="CO162-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO162-1">
<para>Nous déstructurons l'<emphasis>agent utilisateur</emphasis> du navigateur&#160;– à noter que ce même code exécuté par Node lancerait une exception car <literal>window</literal> n&#8217;existe pas dans cet environnement.</para>
</callout>
<callout arearefs="CO162-2">
<para>Affiche un objet content le <emphasis>nom</emphasis> de votre système d&#8217;exploitation ainsi que sa <emphasis>version</emphasis>.</para>
</callout>
</calloutlist>
<simpara>Ce code représente l'<emphasis role="strong">idéal de ce que l&#8217;on souhaite écrire</emphasis>.
Le seul obstacle consiste à <emphasis>traduire</emphasis> ce code pour l&#8217;ensemble des navigateurs web compatibles avec <emphasis>ECMAScript 5</emphasis>.</simpara>
<simpara>Exécutons cette commande&#160;:</simpara>
<screen>$ npm run babel -- --no-babelrc examples/babel-es2015.js</screen>
<simpara>La sortie affichée correspond <emphasis>exactement</emphasis> à notre code d&#8217;origine.
C&#8217;est parce que sans configuration, <emphasis>babel</emphasis> ne transforme rien.<?asciidoc-br?>
L&#8217;ouvrage contient un fichier de configuration <literal>.babelrc</literal>.
Nous expliquerons son contenu après en avoir observé son impact&#160;:</simpara>
<screen>$ npm run babel -- examples/babel-es2015.js</screen>
<simpara>La sortie a changé et renvoie un code totalement fonctionnel sur des navigateurs web ne supportant pas <emphasis>ECMAScript 2015</emphasis>&#160;:</simpara>
<formalpara>
<title>babel-es2015ified.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">var getOS = function getOS(userAgent) {
  var _userAgent$match = userAgent.match(/\(([^;]+)\s?;\s?([^)]+)\)/),
      os = _userAgent$match[1],
      version = _userAgent$match[2];

  return { os: os, version: version };
};

var userAgent = window.navigator.userAgent;


console.log(getOS(userAgent));</programlisting>
</para>
</formalpara>
<simpara>Il existe de nombreuses règles de transformation.
Chacune d&#8217;entre elles cible une fonctionnalité spécifique d&#8217;une version d'<emphasis>ECMAScript</emphasis>.
Les <emphasis role="strong"><emphasis>presets</emphasis> des modules <emphasis>npm</emphasis> faisant office de groupes logiques</emphasis>.</simpara>
<simpara>Les <emphasis>presets</emphasis> suivants nous aideront à convertir chaque édition de spécification <emphasis>ECMAScript</emphasis> vers <emphasis>ECMASCript 5</emphasis>.
Le <emphasis role="strong">dernier <emphasis>preset</emphasis> est le plus simple à utiliser</emphasis>, car il se base sur les parts de marché des navigateurs web pour déterminer les règles de conversion&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>preset-es2015</literal> (<phrase role="URL"><link xl:href="https://babeljs.io/docs/plugins/preset-es2015/">babeljs.io/docs/plugins/preset-es2015/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>preset-es2016</literal> (<phrase role="URL"><link xl:href="https://babeljs.io/docs/plugins/preset-es2016/">babeljs.io/docs/plugins/preset-es2016/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>preset-es2017</literal> (<phrase role="URL"><link xl:href="https://babeljs.io/docs/plugins/preset-es2017/">babeljs.io/docs/plugins/preset-es2017/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>preset-latest</literal> (<phrase role="URL"><link xl:href="https://babeljs.io/docs/plugins/preset-latest/">babeljs.io/docs/plugins/preset-latest/</link></phrase>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>preset-env</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/babel-preset-env">npmjs.com/babel-preset-env</link></phrase>).</simpara>
</listitem>
</itemizedlist>
<simpara>Ils sont à placer dans un fichier de configuration nommé <literal>.babelrc</literal>.
L&#8217;exemple suivant illustre la <emphasis>combinaison</emphasis> de deux <emphasis>presets</emphasis> pour convertir la syntaxe <emphasis>ECMAScript 2015</emphasis> et <emphasis>ECMAScript 2016</emphasis> vers <emphasis>ECMAScript 5</emphasis>&#160;:</simpara>
<formalpara>
<title>.babelrc</title>
<para>
<screen>{
  "presets": [
    "es2015",
    "es2016"
  ]
}</screen>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Lien</phrase> Documentation de <emphasis>babel</emphasis></title>
<simpara>Toutes les options de configuration sont documentées sur le site officiel de <emphasis>babel</emphasis>.
Une autre page explique où placer et quoi mettre dans les fichiers <literal>.babelrc</literal>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://babeljs.io/docs/usage/api/#options">babeljs.io/docs/usage/api/#options</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://babeljs.io/docs/usage/babelrc/">babeljs.io/docs/usage/babelrc/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="polyfills">
<title>Combler les manques avec des <emphasis>polyfills</emphasis></title>
<simpara>Des outils comme <emphasis>babel</emphasis> nous permettent d&#8217;écrire avec une <emphasis role="strong">syntaxe moderne</emphasis>.
Les <emphasis role="strong">polyfills</emphasis> sont des bouts de code qui nous permettent de <emphasis role="strong">combler les fonctionnalités manquantes</emphasis>&#160;– leur implémentation.</simpara>
<simpara>Un <emphasis role="strong">polyfill harmonise la présence d&#8217;une fonctionnalité</emphasis> au sein d&#8217;une variété de navigateurs web et d&#8217;environnements JavaScript.
Cela se fera au détriment de <emphasis role="strong">quelques kilo-octets de code</emphasis> à charger en plus dans nos applications.
L&#8217;appel à un service de polyfill externe entrainera un <emphasis role="strong">léger ralentissement du chargement</emphasis> de notre page.</simpara>
<simpara>Prenons le bloc de code suivant&#160;:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

Promise.resolve('ok');</programlisting>
<simpara>Comprenons que&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>cette <emphasis role="strong">syntaxe est valide</emphasis> dans toutes les versions d'<emphasis>ECMAScript</emphasis> (<emphasis>babel</emphasis> ne changera rien à ce code)&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;objet global <literal>Promise</literal> existe dans un navigateur moderne&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;objet global <literal>Promise</literal> n&#8217;existe pas dans <emphasis>Internet Explorer 11</emphasis>, entre autres.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce code fonctionnerait donc sur un navigateur moderne mais pas dans <emphasis>IE11</emphasis>.
L&#8217;inclusion d&#8217;un <emphasis>polyfill</emphasis> de <literal>Promise</literal> résoudrait le problème.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Bonne pratique</phrase> Quand inclure les <emphasis>polyfills</emphasis> ?</title>
<simpara><emphasis role="strong">Un polyfill se charge toujours en premier</emphasis>.
On incluera tous les polyfills d&#8217;un coup <emphasis role="strong">avant notre propre code</emphasis>.</simpara>
<simpara>Nous garantissons ainsi une <emphasis role="strong">cohérence et stabilité de comportement</emphasis> au sein de notre application, peu importe l&#8217;ordre d&#8217;exécution de nos scripts.</simpara>
</tip>
<simpara>Parlons maintenant des méthodes d&#8217;inclusion des <emphasis>polyfills</emphasis> pour mieux comprendre comment procéder.</simpara>
<simpara>Le <emphasis role="strong">service polyfill.io</emphasis> est de loin la méthode la plus simple à utiliser.
Il suffit d&#8217;inclure un script dans toutes vos pages web.
<emphasis>polyfill.io</emphasis> déterminera les <emphasis>polyfills</emphasis> à charger en fonction de la compatibilité du navigateur chargeant la page&#160;:</simpara>
<formalpara>
<title>polyfill.io.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Example polyfill.io&lt;/title&gt;
    &lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      Promise.resolve('ok')
        .then(msg =&gt; console.log(msg));
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> polyfill.io</title>
<simpara><emphasis>polyfill.io</emphasis> possède une documentation très complète.
Elle nous aidera à configurer finement le service en fonction de nos besoins.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://qa.polyfill.io/v2/docs/">qa.polyfill.io/v2/docs/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Nous pouvons déduire <emphasis role="strong">deux règles</emphasis> de l&#8217;exemple précédent&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>inclure les <emphasis>polyfills</emphasis> en <emphasis role="strong">tout premier</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>inclure les <emphasis>polyfills</emphasis> <emphasis role="strong">en dehors</emphasis> de notre code.</simpara>
</listitem>
</orderedlist>
<simpara>La deuxième méthode est d'<emphasis role="strong">embarquer les polyfills</emphasis> dans notre base de code.
L&#8217;avantage est de maitriser notre base de code et de ne pas dépendre d&#8217;un service externe.
L&#8217;inconvénient est que nous chargeons du code qui sera inutile dans les navigateurs et environnements disposant déjà de ces fonctionnalités&#160;:</simpara>
<formalpara>
<title>polyfill-import.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exemple polyfill custom&lt;/title&gt;
    &lt;script type="module"&gt;
      import 'es6-promise/auto';        <co xml:id="CO163-1"/>
      import 'core-js/fn/number/is-nan';<co xml:id="CO163-2"/>
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      Promise.resolve(Number.isNaN(NaN))
        .then(msg =&gt; console.log(msg));
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO163-1">
<para>Nous verrons <link linkend="modules">comment importer des modules</link> ci-après.</para>
</callout>
<callout arearefs="CO163-2">
<para>On importe un deuxième <emphasis>polyfill</emphasis>, celui de la méthode <literal>Number.isNaN</literal>.</para>
</callout>
</calloutlist>
<simpara>Le module <emphasis>npm</emphasis> <literal>core-js</literal> est une librairie exhaustive de <emphasis>polyfills</emphasis> pouvant être inclus un à un ou par versions d'<emphasis>ECMAScript</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <literal>core-js</literal></title>
<simpara>La documentation en ligne de <literal>core-js</literal> liste l&#8217;ensemble des <emphasis>polyfills</emphasis> supportés par ainsi que des exemples d&#8217;utilisation.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/core-js">npmjs.com/core-js</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara><emphasis>babel</emphasis> et son <emphasis>preset</emphasis> <literal>babel-preset-env</literal> nous facilitent l&#8217;inclusion de <emphasis>polyfills</emphasis> selon la compatibilité navigateurs que l&#8217;on souhaite maintenir au sein de notre application. Le fichier <literal>.babelrc</literal> suivant configure l&#8217;inclusion des <emphasis>polyfills</emphasis> à l&#8217;aide des clés <literal>useBuiltIns</literal> et <literal>targets</literal>&#160;:</simpara>
<formalpara>
<title>.babelrc</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  "comments": false,
  "presets": [
    "react",
    [
      "env", {
        "loose": true,
        "useBuiltIns": true,
        "targets": {
          "ie": 9,
          "browsers": [
            "&gt; 5%"
          ]
        }
      }
    ]
  ]
}</programlisting>
</para>
</formalpara>
<simpara>Cette configuration illustre un souhait de compatibilité avec <emphasis>Internet Explorer 9</emphasis> et les navigateurs web disposant d&#8217;une part de marché supérieure à 5%.</simpara>
<caution>
<title><phrase role="RemarquePreTitre">Attention</phrase> Performance et duplication</title>
<simpara>Il faut veiller à ne pas alourdir inutilement une application.</simpara>
<simpara>Laissons la responsabilité de <emphasis>polyfiller</emphasis> aux utilisateurs de notre code&#160;; particulièrement si celui-ci est <emphasis role="strong">redistribué</emphasis> en tant que module <emphasis>npm</emphasis> public.</simpara>
<simpara>Si plusieurs scripts nécessitent des polyfills, mieux vaut inclure ces derniers <emphasis>en une fois</emphasis>&#160;:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="polyfills.js"&gt;&lt;/script&gt;
&lt;script src="script-a.js"&gt;&lt;/script&gt;
&lt;script src="script-b.js"&gt;&lt;/script&gt;</programlisting>
</caution>
<simpara>Enfin, une dernière méthode est d'<emphasis role="strong">importer la fonction de <emphasis>polyfill</emphasis> sans réécrire les objets globaux</emphasis>.
Cette pratique a l&#8217;avantage de <emphasis>ne pas entrainer d&#8217;effets secondaires</emphasis> et de garantir le <emphasis>même comportement</emphasis> dans tous les navigateurs web.
L&#8217;inconvénient est qu&#8217;on n&#8217;utilise pas la fonctionnalité native des navigateurs lorsqu&#8217;elle est présente.
Nous nous retrouvons tributaires de la qualité d&#8217;implémentation du <emphasis>polyfill</emphasis>.</simpara>
<formalpara>
<title>polyfill-require.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {Promise as PromisePolyfill} from 'es6-promise';

PromisePolyfill.resolve('ok').then(msg =&gt; console.log(msg));

console.log('Promise' in window);                <co xml:id="CO164-1"/>
console.log(PromisePolyfill === window.Promise); <co xml:id="CO164-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO164-1">
<para>Affiche <literal>true</literal> si le navigateur implémente l&#8217;API <emphasis>Promise</emphasis>&#160;– sinon affiche <literal>false</literal> et l&#8217;utilisation d&#8217;un <emphasis>polyfill</emphasis> prend tout son sens.</para>
</callout>
<callout arearefs="CO164-2">
<para>Affiche <literal>false</literal>, car le <emphasis>polyfill</emphasis> de <emphasis>Promise</emphasis> est une function strictement différente de <literal>window.Promise</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Bonnes pratiques constatées</title>
<simpara>De bons usages des <emphasis>polyfills</emphasis> ainsi les risques liés à leur utilisation sont compilés dans un guide édité par le W3C.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://w3ctag.github.io/polyfills/">w3ctag.github.io/polyfills/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
</section>
<section xml:id="modules">
<title>Importer des modules</title>
<simpara>Importer des modules est une pratique courante avec Node.
Ça l&#8217;est en revanche beaucoup moins dans l&#8217;univers du web puisqu&#8217;il n&#8217;existait rien de <emphasis>natif</emphasis> avant les <link linkend="modules-es2015">modules ECMAScript 2015</link>.</simpara>
<simpara>Auparavant, on aura vu débarquer les modules <emphasis>AMD</emphasis> (<emphasis>Asynchronous Module Definition</emphasis>) pour gérer les dépendances <emphasis>entre scripts</emphasis>.
Les librairies <emphasis>Dojo</emphasis>, <emphasis>RequireJS</emphasis> et <emphasis>YUI</emphasis> ont popularisé ce motif de conception.
Un désir d&#8217;universalité a ensuite émergé avec le gain de popularité croissant de Node avec les modules <emphasis>UMD</emphasis>, conciliant modules <emphasis>AMD</emphasis> et <emphasis>CommonJS</emphasis>.</simpara>
<simpara>Les modules <emphasis>ECMAScript 2015</emphasis> ont émergé de ce bouillonnement.</simpara>
<section xml:id="modules-script">
<title>La balise <literal>&lt;script&gt;</literal></title>
<simpara>Rappelons-le, la méthode incontournable pour charger du code dans un navigateur web est l&#8217;utilisation de la base <literal>&lt;script&gt;</literal>.
Le chargement puis l&#8217;évaluation et l&#8217;exécution du script bloque le temps nécessaire le rendu d&#8217;un document HTML.</simpara>
<formalpara>
<title>import/script.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="global-dom-log.js"&gt;&lt;/script&gt;
&lt;script src="script.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Les différents <emphasis>scripts</emphasis> partagent le même espace mémoire, permettant ainsi à <literal>script.js</literal> d&#8217;avoir accès à la fonction <literal>log</literal> définie dans <literal>global-dom-log.js</literal>.</simpara>
<formalpara>
<title>import/global-dom-log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">// eslint-disable-next-line no-unused-vars
const log = (message) =&gt; {
  document.querySelector('#logs').textContent = String(message).trim();
};</programlisting>
</para>
</formalpara>
<formalpara>
<title>import/script.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/* global log */
window.addEventListener('load', () =&gt; {
  log('OK');<co xml:id="CO165-1"/>
});

log('KO');  <co xml:id="CO165-2"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO165-2">
<para>Affiche une erreur car <literal>&lt;div id="logs"&gt;</literal> n&#8217;existe pas encore dans le document à ce stade de l&#8217;exécution.</para>
</callout>
<callout arearefs="CO165-1">
<para>Cette ligne est exécutée une fois le document chargé&#160;– <literal>&lt;div id="logs"&gt;</literal> contient désormais le texte <literal>OK</literal>.</para>
</callout>
</calloutlist>
<simpara>S&#8217;il est facile d&#8217;ajouter du code dans le navigateur, on constate plusieurs problèmes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>partager du code entre scripts repose sur une <emphasis role="strong">attente explicite</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le partage de variables entre scripts peut entrainer des <emphasis role="strong">collisions</emphasis> (par exemple, deux variables du même nom définies dans des scripts différents)&#160;;</simpara>
</listitem>
<listitem>
<simpara>il n&#8217;y a pas de moyen évident de rendre des bouts de code <emphasis>privé</emphasis> au sein de chaque script.</simpara>
</listitem>
</itemizedlist>
<simpara>Le développement front-end basé sur de l&#8217;outillage Node va justement nous aider à <emphasis role="strong">solidifier et renforcer la réutilisabilité de notre code</emphasis>.</simpara>
</section>
<section xml:id="modules-es2015">
<title>Les modules <emphasis>ECMAScript 2015</emphasis></title>
<simpara>Nous avons évoqué les <link xl:href="../chapter-03/index.xml#primitives">primitives <emphasis>ECMAScript 2015</emphasis></link> dans le Chapitre 3.
Les modules font partie des fonctionnalités tant attendues.</simpara>
<figure>
<title>Utilisation des modules <emphasis>ECMAScript 2015</emphasis> dans un navigateur web (ici, Safari pour macOS).</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/module-import.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>module import</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;attribut <literal>type="module"</literal> a été introduit pour maintenir une compatibilité entre scripts classiques et les modules <emphasis>ECMAScript 2015</emphasis>.
Ce mécanisme de modules introduit plusieurs concepts importants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">toute variable est privée</emphasis> sauf si elle est <emphasis>exportée</emphasis> avec l&#8217;opérateur <literal>export</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>les <emphasis role="strong">modules sont explicitement inclus</emphasis> avec l&#8217;opérateur <literal>import</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>les <emphasis role="strong">variables globales</emphasis> définies par l&#8217;utilisateur ne sont pas accessibles depuis un module.</simpara>
</listitem>
</itemizedlist>
<simpara>Retravaillons le document HTML de la section précédente&#160;:</simpara>
<formalpara>
<title>import/import.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script&gt;const pro = 'test';&lt;/script&gt;
&lt;script type="module" src="script-import.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Nous voulons maintenant (sa)voir si la variable <literal>pro</literal> définie avant l&#8217;inclusion du module <literal>script-import.js</literal> est constatée.
Nous voulons également savoir si la syntaxe d&#8217;import de la fonction <literal>log</literal> fonctionne&#160;:</simpara>
<formalpara>
<title>import/script-import.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {log} from './dom-log.js';

console.log(typeof pro);    <co xml:id="CO166-1"/>
console.log(typeof log);    <co xml:id="CO166-2"/>
console.log(typeof window); <co xml:id="CO166-3"/>

window.addEventListener('load', () =&gt; {
  log('OK');
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO166-1">
<para>Affiche <literal>undefined</literal>.</para>
</callout>
<callout arearefs="CO166-2">
<para>Affiche <literal>function</literal>.</para>
</callout>
<callout arearefs="CO166-3">
<para>Affiche <literal>object</literal>.</para>
</callout>
</calloutlist>
<simpara>De même que nous avons utilisé <literal>import</literal> pour importer de manière sélective une fonction du module <literal>dom-log.js</literal>, l&#8217;opérateur <literal>export</literal> nous aide à exposer des objets, fonctions et variables&#160;:</simpara>
<formalpara>
<title>import/dom-log.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export function log (message, target = '#logs') {
  document.querySelector(target).textContent = String(message).trim();
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="browserify">
<title>Importer des modules <emphasis>npm</emphasis> pour le web</title>
<simpara>Qu&#8217;en est-il alors des modules <emphasis>npm</emphasis>&#160;?
Nous pouvons transpiler et importer du code, ce serait très utile si nous pouvions également importer du <emphasis>code tiers</emphasis>.
Cela nous éviterait de réinventer la roue, d&#8217;avoir accès à du code bien testé et trop coûteux à écrire nous-mêmes.</simpara>
<simpara>Nous avons vu comment <link xl:href="../chapter-05/index.xml#modules">charger des modules <emphasis>npm</emphasis></link>
dans le chapitre 5.
Intéressons-nous à leur utilisation dans le contexte d&#8217;une application front-end.
Pour cela, adaptons l&#8217;exemple de la section précédente&#160;:</simpara>
<formalpara>
<title>import/script-import-jquery.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import $ from 'jquery';

console.log($.fn.jquery);  <co xml:id="CO167-1"/>

$(document).ready(() =&gt; {
  $('#logs').text('OK');   <co xml:id="CO167-2"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO167-1">
<para><literal>$.fn.jquery</literal> contient le numéro de version de jQuery.</para>
</callout>
<callout arearefs="CO167-2">
<para>Substitut jQuery pour remplacer le texte dans <literal>&lt;div id="logs"&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Le document HTML chargeant ce module est en tout point similaire au précédent exemple&#160;:</simpara>
<formalpara>
<title>import/import-jquery.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script type="module" src="script-import-jquery.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
<simpara>Le seul <emphasis>hic</emphasis>, c&#8217;est que <emphasis role="strong">cela ne fonctionne pas</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le navigateur <emphasis>ne peut pas savoir</emphasis> où se trouve la dépendance demandée&#160;;</simpara>
</listitem>
<listitem>
<simpara>rien ne garantit que <literal>jquery</literal> expose son code en tant que module <emphasis>ECMAScript 2015</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>on n&#8217;a certainement pas envie d&#8217;exposer publiquement le répertoire <literal>node_modules</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>C&#8217;est alors qu&#8217;entre en jeu <emphasis role="strong">browserify</emphasis>.
<emphasis>browserify</emphasis> est un outil générique de transformation de code.
Il peut être utilisé en ligne de commande, via son API Node mais aussi par le biais de plugins pour d&#8217;autres outils (comme Gulp, Grunt, etc.).</simpara>
<simpara><emphasis>browserify</emphasis> a été initialement créé pour transformer du code écrit pour Node en code fonctionnel dans les navigateurs web.
Il expose notamment un concept d&#8217;intégrations (les <emphasis>transforms</emphasis>) afin d&#8217;effectuer des remplacements ligne à ligne.</simpara>
<simpara>Là où <emphasis>babel</emphasis> cherche uniquement à traduire un langage vers un autre, <emphasis>browserify</emphasis> est le couteau suisse pour effectuer des remplacements majeurs dans le code&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>portage de la fonction <literal>require()</literal> et inclusion du code des modules sous-jacents&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression de code conditionnel&#160;;</simpara>
</listitem>
<listitem>
<simpara>remplacement d&#8217;API spécifiques à Node par des polyfills pour le web&#160;;</simpara>
</listitem>
<listitem>
<simpara>extraction de CSS&#160;;</simpara>
</listitem>
<listitem>
<simpara>etc.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>browserify</emphasis> est intéressant au sens où il nous apprend à nous constituer nous-mêmes notre outillage, pour nos propres besoins.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Utiliser browserify</title>
<simpara><emphasis>browserify</emphasis> est un outil extrêmement versatile, modulaire et puissant.
Son apprentissage progressif peut faire de lui un allié de choix dans tous vos projets Node et web.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/browserify">npmjs.com/browserify</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/substack/browserify-handbook">github.com/substack/browserify-handbook</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Revenons maintenant à notre code auquel il manque la compréhension des modules <emphasis>npm</emphasis>.
Nous allons maintenant chercher à transformer le fichier <literal>script-import-jquery.js</literal> pour à la fois rendre la syntaxe <literal>import</literal> intelligible  (c&#8217;est le rôle de <emphasis>babel</emphasis>) mais aussi pour faire le lien avec les modules <emphasis>npm</emphasis>&#160;:</simpara>
<screen>$ npm run browserify -- \
  -t babelify \
  -e examples/import/script-import-jquery.js \
  -o examples/import/script-import-jquery-browserify.js</screen>
<simpara>Cette commande exécute trois choses&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>-t babelify</literal> indique d&#8217;utiliser une intégration <emphasis>babel</emphasis> (un <emphasis>transform</emphasis>) pour transformer la syntaxe <emphasis>ECMAScript 2015</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>-e &#8230;&#8203;</literal> indique le script d&#8217;entrée à transformer&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>-o &#8230;&#8203;</literal> indique où stocker le script transformé.</simpara>
</listitem>
</orderedlist>
<simpara>Il en résultera un fichier nommé <literal>script-import-jquery-browserify.js</literal> compatible <emphasis>ECMAScript 5</emphasis> et qui inclut désormais le code source de jQuery.<?asciidoc-br?>
Il ne nous reste plus qu&#8217;à charger le fichier transformé dans notre page web pour voir le résultat&#160;:</simpara>
<formalpara>
<title>import/import-jquery-browserify.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;script src="script-import-jquery-browserify.js"&gt;&lt;/script&gt;

&lt;div id="logs"&gt;&lt;/div&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="récapitulatif">
<title>Récapitulatif</title>
<simpara>En résumé, nous avons besoin de nous baser sur <emphasis>deux ou trois outils</emphasis> pour écrire un code modulaire et compatible avec n&#8217;importe quel type de syntaxe&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">babel</emphasis> pour transformer la syntaxe&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis role="strong">polyfills</emphasis> pour harmoniser les fonctionnalités&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">browserify</emphasis> pour l&#8217;intégration avec les modules <emphasis>npm</emphasis>.</simpara>
</listitem>
</itemizedlist>
<simpara>Ceux-ci ont l&#8217;avantage d&#8217;être <emphasis>faciles</emphasis> à prendre en main, <emphasis>modulaires</emphasis> et <emphasis>évolutifs</emphasis>.
Nous pourrons aussi nous tourner vers d&#8217;autres outils de transformation de code pour explorer d&#8217;autres horizons&#160;– et il en existe énormément&#160;: <emphasis>webpack</emphasis>, <emphasis>rollup</emphasis>, <emphasis>broccoli</emphasis>, etc.</simpara>
</section>
</section>
<section xml:id="conception_modulaire">
<title>Conception modulaire</title>
<simpara>Un autre paradigme change avec la mise à disposition des modules et de l&#8217;outillage à disposition&#160;: le code que l&#8217;on écrit dépend surtout d'<emphasis>ECMAScript</emphasis> et de l&#8217;environnement dans lequel on l&#8217;exécute, à savoir Node ou un navigateur web.</simpara>
<simpara>La section suivante s&#8217;intéresse à l'<emphasis role="strong">évolution de l&#8217;écriture du code</emphasis>, autrefois dirigée par la <emphasis role="strong">structure du document</emphasis> HTML vers un monde de <emphasis role="strong">fonctions consommant des données</emphasis>, transformées pour un type d&#8217;affichage, que ce soit HTML ou autre.</simpara>
<simpara>Nous illustrerons cette évolution au travers d&#8217;un exemple relativement simple&#160;: une balise HTML affichant l&#8217;heure dont nous actualisons le contenu toutes les secondes.</simpara>
<figure>
<title>Résultat de l&#8217;exemple développé dans les sections suivantes.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/modules-time.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>modules time</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>jQuery</emphasis></title>
<simpara>Les exemples suivants se basent sur l&#8217;utilisation de la librairie <emphasis>jQuery</emphasis>.
Elle facilite la manipulation du <emphasis>DOM</emphasis> tout en gérant les incompatibilités des différents navigateurs web.
Son utilisation est devenue moins dominante du fait d&#8217;une nette amélioration de la qualité de ces derniers.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://api.jquery.com/">api.jquery.com/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://learn.jquery.com/using-jquery-core/">learn.jquery.com/using-jquery-core/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<section xml:id="le_syndrome_du_plugin_emphasis_jquery_emphasis">
<title>Le syndrome du plugin <emphasis>jQuery</emphasis></title>
<simpara>Ce que j&#8217;appelle le "syndrome du plugin <emphasis>jQuery</emphasis>", c&#8217;est une combinaison des éléments suivants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>création de <emphasis role="strong">code métier inutilisable</emphasis> en dehors de <emphasis>jQuery</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">mélange de la présentation</emphasis> des données et de l&#8217;organisation du code métier&#160;;</simpara>
</listitem>
<listitem>
<simpara>un code <emphasis>aveugle</emphasis> car <emphasis role="strong">éloigné de la structure HTML</emphasis> nécessaire à son fonctionnement&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">fragilité</emphasis> du code en cas de changement de la structure HTML associée&#160;;</simpara>
</listitem>
<listitem>
<simpara>en général, un code <emphasis role="strong">difficilement testable</emphasis>&#160;– difficile de ne pas aboutir à une interface boguée.</simpara>
</listitem>
</itemizedlist>
<simpara>Voici un exemple de document HTML <emphasis>fragile</emphasis> et <emphasis>mélangeant</emphasis> tous les concepts en même temps.
Il est parfaitement valide mais illustre un ensemble de pratiques courantes que nous allons chercher à <emphasis>désapprendre</emphasis>.</simpara>
<formalpara>
<title>modules/jquery-plugin.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;time datetime="" data-interval="1000"&gt;---&lt;/time&gt;

  &lt;script src="../../node_modules/jquery/dist/jquery.js"&gt;&lt;/script&gt;
  &lt;script src="jquery-plugin.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Maintenant que la structure HTML est définie, nous devons désormais écrire le code affichant l&#8217;heure dans un élément HTML toutes les secondes&#160;:</simpara>
<formalpara>
<title>modules/jquery-plugin.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">/* global jQuery */

($ =&gt; {
  $.fn.displaySeconds = function displaySeconds() {
    this.each((i, dateElement) =&gt; {
      setInterval(() =&gt; {                  <co xml:id="CO168-1"/>
        const now = new Date();            <co xml:id="CO168-2"/>
        const seconds = now.getSeconds();

        $(dateElement)                     <co xml:id="CO168-3"/>
          .removeClass(seconds % 2 ? 'pair': 'impair')
          .addClass(seconds % 2 ? 'impair': 'pair')
          .attr('datetime', now.toISOString())
          .text(now.toLocaleTimeString());
      }, $(dateElement).data('interval')); <co xml:id="CO168-4"/>
    });

    return this;
  };

  $(document).ready(() =&gt; {      <co xml:id="CO168-5"/>
    $('time').displaySeconds();  <co xml:id="CO168-6"/>
  });
})(jQuery);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO168-1">
<para>Ce bloc de code est exécuté toutes les secondes.</para>
</callout>
<callout arearefs="CO168-2">
<para>La donnée de <emphasis>temps</emphasis> est obtenue chaque seconde par notre <emphasis>plugin jQuery</emphasis>.</para>
</callout>
<callout arearefs="CO168-3">
<para>Certaines décisions métier sont mélangées avec l&#8217;affichage de la donnée <emphasis>temps</emphasis>.</para>
</callout>
<callout arearefs="CO168-4">
<para>L&#8217;intervalle est déterminé par la <emphasis>valeur de l&#8217;attribut "data-interval"</emphasis>.</para>
</callout>
<callout arearefs="CO168-5">
<para>Ce bloc de code est exécuté dès que le document HTML est prêt&#160;— toute sa structure HTML est disponible.</para>
</callout>
<callout arearefs="CO168-6">
<para>Le <emphasis>plugin jQuery</emphasis> est appliqué à toutes les occurrences de <literal>&lt;time&gt;</literal> dans lequel le <emphasis>plugin</emphasis> est exécuté.</para>
</callout>
</calloutlist>
<simpara>Certains motifs illustrés dans la section <link linkend="modules">Importer des modules</link> refont surface&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>variables globales&#160;: que faire si <literal>jQuery</literal> n&#8217;existe pas&#160;?</simpara>
</listitem>
<listitem>
<simpara>connaissance implicite du document&#160;: que faire si une personne tierce remplace la balise <literal>&lt;time&gt;</literal> par une autre balise&#160;?</simpara>
</listitem>
<listitem>
<simpara>code JavaScript piloté par le document&#160;: que faire si une personne tierce exprime l&#8217;intervalle en secondes et non en millisecondes&#160;?</simpara>
</listitem>
</itemizedlist>
<simpara>La faute n&#8217;est pas vraiment celle de <emphasis>jQuery</emphasis> mais plutôt la nôtre&#160;— enfin, la <emphasis>mienne</emphasis> <inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/smile-o.png"/>
</imageobject>
<textobject><phrase>smile o</phrase></textobject>
</inlinemediaobject>.
Nous avons <emphasis role="strong">mélangé règles de fonctionnement</emphasis> (contenu de balise, classe CSS à ajouter/enlever) et données (date courante, parité des secondes, événement de mise à jour <literal>setInterval</literal>).</simpara>
</section>
<section xml:id="vers_une_approche_emphasis_jquery_emphasis_composite">
<title>Vers une approche <emphasis>jQuery</emphasis> composite</title>
<simpara>Nous allons maintenant reprendre les concepts appris précédemment et conserver le même outil, à savoir <emphasis>jQuery</emphasis>.
Certains outils encouragent de bons <emphasis>motifs de conception</emphasis> et donnent la sensation de résoudre des problèmes.
Apprendre ces motifs et à capitaliser sur les outils que nous connaissons déjà peuvent nous emmener tout aussi loin.</simpara>
<formalpara>
<title>modules/jquery-app.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;time datetime=""&gt;---&lt;/time&gt;

  &lt;script src="jquery-app-browserify.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Le changement majeur réside dans la réorganisation du code applicatif&#160;:</simpara>
<formalpara>
<title>modules/jquery-app.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import $ from 'jquery';
import timerFn from './timer.js';                              <co xml:id="CO169-1"/>

const displaySeconds = (tickData, dateElement) =&gt; {            <co xml:id="CO169-2"/>
  const {className, now} = tickData;

  $(dateElement)                                               <co xml:id="CO169-3"/>
    .attr('class', className)
    .attr('datetime', now.toISOString())
    .text(now.toLocaleTimeString());
};

$(document).ready(() =&gt; {
  const dateElements = $('time').get();                        <co xml:id="CO169-4"/>
  const onTick = tickData =&gt; {
    dateElements.forEach(el =&gt; displaySeconds(tickData, el));  <co xml:id="CO169-5"/>
  };

  timerFn({ interval: 1000, onTick });                         <co xml:id="CO169-6"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO169-4">
<para>Nous sélectionnons les éléments de la page à actualiser chaque seconde.</para>
</callout>
<callout arearefs="CO169-5">
<para>Nous définissons quoi faire avec les données transmises chaque seconde.</para>
</callout>
<callout arearefs="CO169-6">
<para>Nous démarrons un minuteur.</para>
</callout>
<callout arearefs="CO169-1">
<para>Le minuteur est une fonction externe, dont le comportement n&#8217;est pas régi par <emphasis>jQuery</emphasis> ou une autre librairie.</para>
</callout>
<callout arearefs="CO169-2">
<para>Cette fonction est responsable de l&#8217;affichage de <emphasis>données</emphasis> dans un <emphasis>élément HTML</emphasis>.</para>
</callout>
<callout arearefs="CO169-3">
<para>Cette fois-ci, nous nous contentons de seulement mettre à jour attributs et contenus&#160;– la logique métier a été déplacée dans le module <literal>timer.js</literal>.</para>
</callout>
</calloutlist>
<simpara>Le code a été divisé en deux sections distinctes&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>celui qui décrit la <emphasis role="strong">réaction à une donnée</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">celui qui intègre</emphasis> le minuteur avec les éléments du <emphasis>DOM</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>Nous n&#8217;avons pas réellement besoin de savoir comment fonctionne le minuteur à ce niveau&#160;– nous avons juste besoin de pouvoir compter sur les données qu&#8217;il nous fournit.</simpara>
<formalpara>
<title>modules/timer.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const tick = () =&gt; {              <co xml:id="CO170-1"/>
  const now = new Date;

  return {                        <co xml:id="CO170-2"/>
    now,
    className: now.getSeconds() % 2 ? 'impair': 'pair'
  }
};

module.exports = function timer ({ onTick, interval }) {  <co xml:id="CO170-3"/>
  setInterval(() =&gt; onTick(tick()), interval);            <co xml:id="CO170-4"/>

  return tick();                  <co xml:id="CO170-5"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO170-1">
<para>Cette fonction (privée) est responsable de décrire le <emphasis>temps présent</emphasis> sous forme d&#8217;une <emphasis role="strong">structure de données</emphasis>.</para>
</callout>
<callout arearefs="CO170-2">
<para>Cette <emphasis>structure de données</emphasis> pourra retourner de nouvelles clés/valeurs sans remettre en cause le fonctionnement du code y ayant recours.</para>
</callout>
<callout arearefs="CO170-3">
<para>Le paramètre <literal>onTick</literal> est une fonction passée en argument qui sera appelée à chaque nouvel intervalle de temps.</para>
</callout>
<callout arearefs="CO170-4">
<para>La responsabilité de <literal>timer</literal> est de communiquer une nouvelle <emphasis>structure de données</emphasis> à un intervalle de temps donné.</para>
</callout>
<callout arearefs="CO170-5">
<para>On retourne immédiatement une structure de données par commodité et de manière synchrone.</para>
</callout>
</calloutlist>
<simpara>Pour un résultat identique, nous avons désormais séparé notre code en trois <emphasis role="strong">domaines distincts</emphasis>&#160;: le <emphasis>minuteur</emphasis>, l'<emphasis>intégration</emphasis> du minuteur, la <emphasis>représentation</emphasis> du minuteur sous forme HTML.
Cerise sur le gâteau, cette <emphasis>distinction se constate visuellement</emphasis>, au premier coup d&#8217;œil.</simpara>
<simpara>Tout n&#8217;est pas parfait, car nous sommes encore liés à la structure du document HTML.</simpara>
</section>
<section xml:id="partager_le_code_métier_avec_node">
<title>Partager le code métier avec Node</title>
<simpara>Cette <emphasis>séparation de principes</emphasis> (<emphasis>separation of concerns</emphasis>) va au-delà du plaisir de l&#8217;esthète.
Nous venons sans le savoir de créer du <emphasis role="strong">code <emphasis>ECMAScript</emphasis> universel</emphasis>.</simpara>
<simpara>Pourquoi <emphasis>universel</emphasis>&#160;?
Parce que nous pouvons tout aussi bien l&#8217;inclure et l&#8217;exécuter dans Node que dans un navigateur web&#160;:</simpara>
<formalpara>
<title>modules/node-timer.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const timerFn = require('./timer.js');

timerFn({ interval: 1000, onTick: console.log });</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exécution du script <literal>node-timer.js</literal> afficherait quelque chose du genre dans votre terminal&#160;:</simpara>
<screen>$ node examples/modules/node-timer.js
{ now: 2017-02-17T11:07:29.752Z, className: 'impair' }
{ now: 2017-02-17T11:07:30.762Z, className: 'pair' }
{ now: 2017-02-17T11:07:31.768Z, className: 'impair' }
{ now: 2017-02-17T11:07:32.770Z, className: 'pair' }
{ now: 2017-02-17T11:07:33.775Z, className: 'impair' }
{ now: 2017-02-17T11:07:34.779Z, className: 'pair' }
^C</screen>
<simpara>Chaque seconde, la fonction <literal>console.log</literal> est appelée et affiche la <emphasis>structure de données</emphasis> de notre minuteur dans la <emphasis>sortie standard</emphasis> du terminal.</simpara>
<simpara>Nous pourrions dès à présent utiliser le minuteur dans d&#8217;autres applications, côté client, côté serveur et pourquoi pas un jour, le publier sur le <emphasis>registre npm</emphasis>.</simpara>
</section>
<section xml:id="séparation_du_fond_et_de_la_forme_données_rendu_et_interactions">
<title>Séparation du fond et de la forme : données, rendu et interactions</title>
<simpara>Les praticien·ne·s de l&#8217;intégration web nous le dirons souvent&#160;: il faut <emphasis role="strong">séparer le fond de la forme</emphasis>.
Il en est de même dans notre code&#160;– et pas que pour le développement <emphasis>front-end</emphasis>.</simpara>
<simpara>Un code maintenable n&#8217;a pas besoin d&#8217;être complexe.
Un code maintenable a surtout besoin de bien <emphasis>isoler</emphasis> ses périmètres d&#8217;intervention.</simpara>
<simpara>Les exemples précédents nous ont permis de déceler trois périmètres phares&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">données</emphasis>&#160;: des structures prédictibles, obtenues ou modifiées&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">rendu</emphasis>&#160;: la représentation des données en <emphasis>contexte</emphasis>, que ce soit une page HTML, un terminal ou un fichier CSV&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">interactions</emphasis>&#160;: des événements déclenchés par les utilisateurs, par des facteurs externes ou des règles métier&#160;– ils impactent les <emphasis>données</emphasis> et leur <emphasis>représentation</emphasis>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="react">
<title>Rapprocher données, rendu et interactions avec <emphasis>React</emphasis></title>
<simpara><emphasis>React</emphasis> a atteint un pic de popularité certain en 2015 et 2016.
Pas seulement parce qu&#8217;il s&#8217;agit d&#8217;un outil bien conçu mais justement parce qu&#8217;il encourage cette pratique de la <emphasis role="strong">représentation des données</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> API React</title>
<simpara>Les exemples suivants se basent sur la librairie <emphasis>React</emphasis>.
Sa documentation offre de bons exemples pour se familiariser avec son utilisation.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://facebook.github.io/react/">facebook.github.io/react/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://facebook.github.io/react/docs/thinking-in-react.html">facebook.github.io/react/docs/thinking-in-react.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Notre code HTML n&#8217;est qu&#8217;un <emphasis role="strong">résultat</emphasis> exposant des <emphasis role="strong">surfaces d&#8217;interaction</emphasis>.
Notre code se structure en <emphasis role="strong">composants</emphasis>.
Un <emphasis>composant</emphasis> est responsable de deux choses&#160;: la <emphasis role="strong">représentation de données</emphasis> et la <emphasis role="strong">réaction à des événements</emphasis>.</simpara>
<simpara>Cela se traduira par un changement de taille&#160;: l&#8217;exemple que nous avons fait évoluer ne fait plus mention de balise <literal>&lt;time&gt;</literal> mais expose une balise dédiée à contenir notre <emphasis>composant minuteur</emphasis>&#160;:</simpara>
<formalpara>
<title>modules/react-app.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;body&gt;
  &lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;

  &lt;div id="app"&gt;&lt;/div&gt;

  &lt;script src="react-app-browserify.js"&gt;&lt;/script&gt;
&lt;/body&gt;</programlisting>
</para>
</formalpara>
<simpara>Notre code applicatif est réduit à son plus strict minimum&#160;:</simpara>
<formalpara>
<title>modules/react-app.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import ReactDOM from 'react-dom';
import DateInterval from './date-interval.jsx';

ReactDOM.render(                                  <co xml:id="CO171-1"/>
  createElement(DateInterval, {interval: 1000}),  <co xml:id="CO171-2"/>
  document.querySelector('#app')                  <co xml:id="CO171-3"/>
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO171-1">
<para>Méthode responsable du rendu HTML de notre composant <literal>TimeInterval</literal> dans l&#8217;élément <literal>&lt;div id="app"&gt;</literal>.</para>
</callout>
<callout arearefs="CO171-2">
<para>Création de notre composant minuteur avec un intervalle de mise à jour de 1000 millisecondes.</para>
</callout>
<callout arearefs="CO171-3">
<para>Indication que le rendu du composant sera effectué <emphasis>dans</emphasis> l&#8217;élément <literal>&lt;div id="app"&gt;</literal>.</para>
</callout>
</calloutlist>
<simpara>Cela ressemble fortement au contenu de nos précédentes invocations de <literal>$(document).ready()</literal> mais sans avoir à se soucier du fonctionnement interne du minuteur.</simpara>
<simpara>La représentation et le fonctionnement du minuteur sont désormais regroupés dans un seul composant&#160;:</simpara>
<formalpara>
<title>modules/date-interval.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React, { Component } from 'react';
import timerFn from './timer.js';

export default class DateInterval extends Component {        <co xml:id="CO172-1"/>
  constructor(props) {                                       <co xml:id="CO172-2"/>
    super(props);

    const {interval} = props;
    this.onTick = this.onTick.bind(this);

    this.state = {
      tickData: timerFn({ interval, onTick: this.onTick })   <co xml:id="CO172-3"/>
    };
  }

  onTick (tickData) {
    this.setState({ tickData });                   <co xml:id="CO172-4"/>
  }

  render() {                                       <co xml:id="CO172-5"/>
    const {className, now} = this.state.tickData;  <co xml:id="CO172-6"/>

    return (&lt;time className={className} dateTime={now.toISOString()}&gt;
      {now.toLocaleTimeString()}
    &lt;/time&gt;);
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO172-1">
<para>Nous exportons un composant <emphasis>React</emphasis> grâce à l&#8217;opérateur <emphasis>ECMAScript 2015</emphasis> <literal>extends</literal>&#160;– cf. la <link xl:href="../chapter-03/index.xml#primitive-class">section Class du Chapitre 3</link>.</para>
</callout>
<callout arearefs="CO172-2">
<para>Le <literal>constructor</literal> est exécuté quand le composant est rendu dans le document.</para>
</callout>
<callout arearefs="CO172-3">
<para>La propriété <literal>interval</literal> nous est fournie dans <literal>react-app.js</literal> et nous stockons la <emphasis>structure de donnée</emphasis> retournée par le minuteur tout en déclenchant son actualisation toutes les 1000 millisecondes.</para>
</callout>
<callout arearefs="CO172-4">
<para>À chaque intervalle, nous mettons à jour la valeur <literal>tickData</literal> de l&#8217;état interne du composant (<literal>this.state</literal>).</para>
</callout>
<callout arearefs="CO172-5">
<para>La méthode <literal>render()</literal> est exécutée quand le composant est inséré dans un document pour la première fois et dès que l&#8217;état interne (<literal>this.state</literal>) change.</para>
</callout>
<callout arearefs="CO172-6">
<para>Nous déstructurons la valeur connue de <literal>tickData</literal> pour effectuer une opération qui nous rappelle les différents appels à <literal>.attr('class')</literal> et <literal>.text()</literal> de <emphasis>jQuery</emphasis>.</para>
</callout>
</calloutlist>
<simpara><emphasis>React</emphasis> introduit quatre concepts au sein des composants&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>un <emphasis role="strong">cycle de vie</emphasis> basé sur des <emphasis>propriétés</emphasis> (<emphasis>props</emphasis>) et un <emphasis>état interne</emphasis> (<emphasis>state</emphasis>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>des <emphasis role="strong">propriétés immuables</emphasis> pour le paramétrage initial&#160;;</simpara>
</listitem>
<listitem>
<simpara>un <emphasis role="strong">état interne mutable</emphasis> pour contenir les changements et demander une actualisation de leur représentation dans le document.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>React</emphasis> détermine les opérations à effectuer dans le document HTML en fonction de la lourdeur des opérations&#160;: (re)création complète de <literal>&lt;time&gt;</literal> dans le nœud parent, simple mise à jour d&#8217;un ou plusieurs attributs ou encore déplacement du composant ailleurs dans le document HTML, etc.</simpara>
<simpara>L&#8217;intelligence d&#8217;une librairie comme <emphasis>React</emphasis> est d&#8217;encourager à décrire les données et leur rendu pour se charger des opérations d&#8217;écriture dans le DOM.
Cela permet de créer des composants faciles à isoler, à réutiliser et à tester.</simpara>
<simpara>Cette approche nous a permis de réutiliser notre minuteur simplement en adaptant son utilisation.
<emphasis>React</emphasis> nous permet de <emphasis role="strong">diriger l&#8217;affichage</emphasis> du document plutôt que d&#8217;en dépendre.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Outil</phrase> React Developer Tools</title>
<simpara>Cette extension pour le navigateur Chrome détaille l&#8217;arborescence des composants montés dans le document HTML ainsi qu&#8217;une vue de leurs propriétés respectives.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/react-devtools.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>react devtools</phrase></textobject>
</mediaobject>
</informalfigure>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi">chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
</section>
<section xml:id="io">
<title>Des requêtes AJAX au temps-réel</title>
<simpara>Les technologies web offrent un panel de fonctionnalités créatives et versatiles.
Le boom du <emphasis>Web 2.0</emphasis> a coïncidé avec la redécouverte de <literal>XMLHttpRequest</literal>, une API initialement créée par Microsoft pour <emphasis role="strong">transférer des données entre client et serveur</emphasis>, de <emphasis>manière non-bloquante</emphasis>.
Cette fonctionnalité a permis de basculer vers un monde de pages dynamiques et rapides à charger.
Des applications web comme Google Maps, Gmail ou la recherche instantanée de Google ont parachevé la popularisation de cette technique.</simpara>
<simpara>Toutefois son API est peu intuitive et est unidirectionnelle, dirigée <emphasis role="strong">du client vers le serveur</emphasis>.
Le terme <literal>XMLHttpRequest</literal> est parfois nommé <literal>AJAX</literal> ou <literal>xhr</literal>.</simpara>
<simpara>Un même exemple côté client sera développé et successivement adapté aux technologies <literal>fetch()</literal>, <emphasis>EventSource</emphasis> puis <emphasis>WebSocket</emphasis>.
Il nous permettra d&#8217;en faire émerger les principes, leurs cas d&#8217;usage ainsi que leur possible intégration avec Node.<?asciidoc-br?>
L&#8217;implémentation côté serveur est basée sur un serveur <link xl:href="../chapter-07/index.xml#express">Express.js</link> dont l&#8217;usage est expliqué au chapitre 7.</simpara>
<figure>
<title>Résultat attendu dans les exemples des sections suivantes.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/io-example.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>io example</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Node, mais pas que.</title>
<simpara><literal>fetch()</literal>, <emphasis>EventSource</emphasis> et <emphasis>WebSocket</emphasis> reposent sur le protocole HTTP/1 et ses extensions.
Il est important de comprendre que leur contrepartie "côté serveur" existe aussi dans d&#8217;autres langages et environnements comme Ruby, Python et PHP.</simpara>
<simpara>Il se trouve que la nature asynchrone même de Node rend cette intégration relativement aisée et triviale, aussi et en grande partie grâce à l&#8217;écosystème <emphasis>npm</emphasis>.</simpara>
</tip>
<section xml:id="io-fetch">
<title>Échange ponctuel de données avec <literal>fetch()</literal></title>
<simpara><literal>fetch()</literal> offre une interface très simple pour appeler une ressource HTTP.
Le résultat est retourné sous forme de <emphasis>promesse</emphasis> (voir la <link xl:href="../chapter-03/index.xml#promise">section <emphasis>Promise</emphasis></link> du Chapitre 3).
Cette fonction sert aussi bien à obtenir des ressources avec des requêtes de type <literal>GET</literal> et <literal>HEAD</literal> qu&#8217;à en créer et modifier avec des requêtes de type <literal>POST</literal>, <literal>PUT</literal>, <literal>DELETE</literal> et <literal>PATCH</literal>.</simpara>
<simpara>L&#8217;exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/fetch.html">localhost:4000/examples/io/fetch.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <literal>fetch()</literal> sur <phrase role="URL"><link xl:href="http://caniuse.com#feat=fetch">caniuse.com#feat=fetch</link></phrase>.</simpara>
<simpara>Le déroulé d&#8217;exécution d&#8217;un appel à <literal>fetch()</literal> est le suivant&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>construction de la <emphasis role="strong">requête</emphasis> (<emphasis>URL</emphasis> ou objet <literal>Request</literal>, options)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">réception</emphasis> des entêtes de la <emphasis>réponse</emphasis> (objet <literal>Response</literal>)&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">décodage</emphasis> de la <emphasis>réponse</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>Plusieurs <emphasis>décodeurs de réponse</emphasis> sont fournis nativement&#160;: texte (<literal>response.text()</literal>), JSON (<literal>response.json()</literal>), ArrayBuffer (<literal>response.arrayBuffer()</literal>), Blob (<literal>response.blob()</literal>) et FormData (<literal>response.formData()</literal>).</simpara>
<formalpara>
<title>io/fetch-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const userList = document.querySelector('#user-list');

setInterval(() =&gt; {
  fetch('/new-users')                    <co xml:id="CO173-1"/>
    .then(response =&gt; response.text())   <co xml:id="CO173-2"/>
    .then(data =&gt; {                      <co xml:id="CO173-3"/>
      const li = document.createElement('li');
      li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;

      userList.prepend(li);
    })
}, 2000);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO173-1">
<para>Exécution de la requête HTTP <emphasis>GET</emphasis> vers <literal>/new-users</literal> depuis le navigateur web courant.</para>
</callout>
<callout arearefs="CO173-2">
<para>Décodage progressif de la réponse.</para>
</callout>
<callout arearefs="CO173-3">
<para>Une fois le décodage terminé, le résultat de la requête HTTP est mis à disposition&#160;– ici, sous forme de chaîne de caractères.</para>
</callout>
</calloutlist>
<figure>
<title>Traces réseau d&#8217;appels successifs à <literal>fetch()</literal> ; chacun résultant en une nouvelle requête HTTP.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/fetch-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>fetch frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation d&#8217;une ressource HTTP côté serveur s&#8217;effectue simplement en retournant une <emphasis>réponse</emphasis> lors d&#8217;une <emphasis>requête</emphasis> HTTP&#160;:</simpara>
<formalpara>
<title>io/fetch-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const chance = require('chance').Chance();

module.exports = (app) =&gt; {
  app.get('/new-users', (req, res) =&gt; {
    res.send(chance.name());
  });
};</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Guide</phrase> Collection d&#8217;exemples</title>
<simpara>Le guide communautaire <emphasis>MDN</emphasis> met à disposition une dizaine d&#8217;exemples pour illustrer différents cas d&#8217;utilisation de <literal>fetch()</literal>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://github.com/mdn/fetch-examples">github.com/mdn/fetch-examples</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>En <emphasis>résumé</emphasis>, <literal>fetch()</literal> est idéal pour des demandes ponctuelles de données, du client vers le serveur.
Le module <emphasis>npm</emphasis> <literal>node-fetch</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/node-fetch">npmjs.com/node-fetch</link></phrase>) est une implémentation de <literal>fetch()</literal> pour Node tandis que <literal>whatwg-fetch</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/whatwg-fetch">npmjs.com/whatwg-fetch</link></phrase>) s&#8217;adresse uniquement à polyfiller les navigateurs web.</simpara>
</section>
<section xml:id="io-eventsource">
<title>Approche unidirectionnelle avec <emphasis>EventSource</emphasis></title>
<simpara><emphasis>EventSource</emphasis> est un mécanisme moins connu que <literal>fetch()</literal> ou <emphasis>WebSocket</emphasis> mais tire ses origines de la technologie <emphasis>Comet</emphasis>.
On peut l&#8217;assimiler à une inversion de <literal>fetch()</literal>&#160;: le client appelle une ressource serveur, maintient une connexion de longue durée et attend un ou plusieurs <emphasis>messages</emphasis> dudit serveur.</simpara>
<simpara>Chaque connexion est ouverte en faisant appel à la construction d&#8217;un objet <literal>EventSource</literal>.
Cet objet émet alors plusieurs types d&#8217;événements en fonction des actions&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>open</literal>&#160;: lorsque le client a effectué une connexion au serveur&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>message</literal>&#160;: lorsque le serveur émet des données à destination du client&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>close</literal>&#160;: lorsque la connexion est fermée par le serveur&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>error</literal>&#160;: lorsque la connexion est accidentellement interrompue.</simpara>
</listitem>
</itemizedlist>
<simpara>Ce modèle de connexion permet tout aussi bien d&#8217;avoir un canal de données unique avec chaque utilisateur ou encore d&#8217;émettre les mêmes données en temps réel à destination de tous les usagers.</simpara>
<simpara>L’exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/eventsource.html">localhost:4000/examples/io/eventsource.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <emphasis>EventSource</emphasis> sur <phrase role="URL"><link xl:href="http://caniuse.com#feat=eventsource">caniuse.com#feat=eventsource</link></phrase>.</simpara>
<formalpara>
<title>io/eventsource-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const connection = new EventSource('/new-users');      <co xml:id="CO174-1"/>
const userList = document.querySelector('#user-list');

connection.addEventListener('message', ({data}) =&gt; {   <co xml:id="CO174-2"/>
  const li = document.createElement('li');
  li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;

  userList.prepend(li);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO174-1">
<para>Nous ouvrons une nouvelle connexion <emphasis>Event Source</emphasis> de longue durée depuis le navigateur web courant.</para>
</callout>
<callout arearefs="CO174-2">
<para>Fonction appelée à chaque fois que le serveur transmet un message au client.</para>
</callout>
</calloutlist>
<figure>
<title>Plusieurs messages peuvent être transmis par le biais d&#8217;une seule connexion HTTP avec <emphasis>EventSource</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/eventsource-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>eventsource frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation d'<emphasis>EventSource</emphasis> demande un peu d&#8217;efforts côté serveur mais ne nécessite pas de <emphasis>framework</emphasis> particulier.
La complexité réside dans le maintien d&#8217;une transmission de données dédiée à chaque client ainsi qu&#8217;à la libération de la connexion lorsque le client se déconnecte.</simpara>
<formalpara>
<title>io/eventsource-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const WebSocket = require('faye-websocket');
const {EventSource} = WebSocket;

const chance = require('chance').Chance();

module.exports = (app) =&gt; {
  app.get('/new-users', (req, res, next) =&gt; {
    if (!EventSource.isEventSource(req)) {      <co xml:id="CO175-1"/>
      return next();
    }

    let es = new EventSource(req, res);         <co xml:id="CO175-2"/>
    const loop = setInterval(() =&gt; {
      es.send(chance.name());                   <co xml:id="CO175-3"/>
    }, 2000);

    es.on('close', () =&gt; {
      clearInterval(loop);
      es = null;
      next();
    });
  });
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO175-1">
<para>Une connexion <emphasis>EventSource</emphasis> s&#8217;effectue (presque) comme une requête HTTP classique&#160;– il convient de vérifier qu&#8217;elle s&#8217;annonce en tant que telle.</para>
</callout>
<callout arearefs="CO175-2">
<para>Création d&#8217;un canal unique entre le client et le serveur.</para>
</callout>
<callout arearefs="CO175-3">
<para>Chaque appel à <literal>es.send</literal> enverra un nouveau message au client.</para>
</callout>
</calloutlist>
<simpara>Le serveur est responsable de la gestion des connexions demandées par les différents clients.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> EventSource</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur EventSource.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/Server-sent_events">developer.mozilla.org/docs/fr/Server-sent_events</link>
</simpara>
</note>
<simpara>En résumé, <emphasis>EventSource</emphasis> est idéal pour maintenir une connexion avec le serveur et souscrire à des mises à jour en continu.
Chaque connexion <emphasis>EventSource</emphasis> devrait concerner qu&#8217;un seul et même type d&#8217;événement.</simpara>
</section>
<section xml:id="io-websocket">
<title>Échanges en temps-réel avec <emphasis>WebSocket</emphasis></title>
<simpara><emphasis>WebSocket</emphasis> est une technologie web favorisant les échanges bidirectionnels entre client et serveur.</simpara>
<simpara>À l&#8217;inverse du protocole HTTP/1, tout message envoyé par le client ou par le serveur n&#8217;appelle pas à une réponse de la part du receveur.
Cet élément ainsi que le maintien d&#8217;une connexion permanente expliquent la rapidité du protocole en comparaison avec le modèle requête/réponse.</simpara>
<simpara>L’exemple associé est accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/io/websocket.html">localhost:4000/examples/io/websocket.html</link></phrase>.
Nous pouvons vérifier la compatibilité navigateur de <emphasis>WebSocket</emphasis> sur <phrase role="URL"><link xl:href="http://caniuse.com#feat=websocket">caniuse.com#feat=websocket</link></phrase>.</simpara>
<formalpara>
<title>io/websocket-client.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">let ws = new WebSocket('ws://localhost:4000/users');    <co xml:id="CO176-1"/>
const userList = document.querySelector('#user-list');
let interval;

ws.addEventListener('open', () =&gt; {
  interval = setInterval(() =&gt; {
    ws.send(JSON.stringify({ action: 'getName' }));     <co xml:id="CO176-2"/>
  }, 2000);
});

ws.addEventListener('message', ({data}) =&gt; {            <co xml:id="CO176-3"/>
  const li = document.createElement('li');
  li.textContent = `${new Date().toLocaleTimeString()} : ${data}`;

  userList.prepend(li);
});

ws.addEventListener('close', () =&gt; {
  ws = null;
  clearInterval(interval);
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO176-1">
<para>Nous ouvrons une connexion <emphasis>WebSocket</emphasis> depuis le navigateur web courant.</para>
</callout>
<callout arearefs="CO176-2">
<para>Émission d&#8217;un message à destination du serveur.</para>
</callout>
<callout arearefs="CO176-3">
<para>Réaction à un message émis par le serveur.</para>
</callout>
</calloutlist>
<figure>
<title>Trame de messages envoyés par le client (sur fond vert) et par le serveur.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/websocket-frames.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>websocket frames</phrase></textobject>
</mediaobject>
</figure>
<simpara>L&#8217;implémentation côté serveur est légèrement plus compliquée qu&#8217;avec <emphasis>EventSource</emphasis> pour la simple et bonne raison que <emphasis>Websocket</emphasis> est une surcouche du protocole <literal>ws</literal>.
HTTP n&#8217;est utilisé que comme canal de communication pour établir un lien avec le serveur <literal>ws</literal>.
HTTP sert de tunnel tandis que le dialogue entre client et serveur s&#8217;effectue dans un dialecte compréhensible uniquement de clients <emphasis>WebSocket</emphasis>.</simpara>
<simpara>Il est nécessaire d&#8217;utiliser un module <emphasis>npm</emphasis> <emphasis>WebSocket</emphasis> comme <emphasis>faye</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/faye-websocket">npmjs.com/faye-websocket</link></phrase>) ou <emphasis>socket.io</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/socket.io">npmjs.com/socket.io</link></phrase>) à moins de vouloir réimplémenter le protocole soi-même.
Le motif de conception est similaire à <emphasis>EventSource</emphasis>, à la différence près qu&#8217;il faut aussi écouter les messages transmis par le client.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Remarque</phrase> HTTP et le statut <literal>101 Switching Protocols</literal></title>
<simpara>Voici ce qui se passe lorsqu&#8217;un client <emphasis>WebSocket</emphasis> se connecte sur <literal>ws://example.com</literal>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>requête HTTP <literal><link xl:href="http://example.com">example.com</link></literal> standard contenant les entêtes <literal>Upgrade: websocket</literal> et <literal>Connection: Upgrade</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le serveur HTTP répond avec un statut <literal>101 Switching Protocols</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le serveur <emphasis>WebSocket</emphasis> prend le relais dans le dialogue client/serveur&#160;;</simpara>
</listitem>
<listitem>
<simpara>client et serveur communiquent désormais via le protocole <literal>ws</literal> au sein de la connexion HTTP initiale.</simpara>
</listitem>
</orderedlist>
</tip>
<simpara>Par extension et de par la nature même du protocole <literal>ws</literal>, il serait tout à fait possible que <emphasis>et</emphasis> clients <emphasis>et</emphasis> serveur soient des agents Node.
Autrement dit, un client <emphasis>WebSocket</emphasis> n&#8217;a pas nécessairement à être un navigateur web.</simpara>
<formalpara>
<title>io/websocket-server.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const WebSocket = require('faye-websocket');
const chance = require('chance').Chance();

module.exports = (server) =&gt; {
  server.on('upgrade', (req, socket, body, next) =&gt; {  <co xml:id="CO177-1"/>
    if (!WebSocket.isWebSocket(req)) {           <co xml:id="CO177-2"/>
      return next();
    }

    let ws = new WebSocket(req, socket, body);   <co xml:id="CO177-3"/>

    ws.on('message', event =&gt; {                  <co xml:id="CO177-4"/>
      const data = JSON.parse(event.data);

      if (data.action === 'getName') {
        ws.send(chance.name());                  <co xml:id="CO177-5"/>
      }
    });

    ws.on('close', () =&gt; {
      ws = null;
    });
  });
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO177-1">
<para>Le serveur HTTP vient de répondre avec un statut <literal>101 Switching Protocols</literal> et délègue désormais la responsabilité du dialogue client/serveur.</para>
</callout>
<callout arearefs="CO177-2">
<para>Nous vérifions que le changement de protocole concerne le protocole <literal>ws</literal>.</para>
</callout>
<callout arearefs="CO177-3">
<para>La connexion réseau (<literal>socket</literal>) est transmise au serveur <emphasis>WebSocket</emphasis> pour amorcer le dialogue client/serveur avec le protocole <literal>ws</literal>.</para>
</callout>
<callout arearefs="CO177-4">
<para>Réaction à la réception d&#8217;un message client.</para>
</callout>
<callout arearefs="CO177-5">
<para>Émission d&#8217;un message à destination d&#8217;un client.</para>
</callout>
</calloutlist>
<simpara>Là aussi, le serveur est responsable de la gestion des connexions demandées par les différents clients.</simpara>
<note role="info">
<title><phrase role="RemarquePreTitre">Documentation</phrase> WebSockets</title>
<simpara>
Rendez-vous sur <emphasis>MDN web docs</emphasis> pour en savoir plus sur WebSockets.<?asciidoc-br?>
<link xl:href="https://developer.mozilla.org/docs/fr/WebSockets">developer.mozilla.org/docs/fr/WebSockets</link>
</simpara>
</note>
<simpara>En résumé, <emphasis>WebSocket</emphasis> est idéal pour maintenir une connexion en temps-réel et pour relayer plusieurs messages à l&#8217;initiative du serveur et de tout client connecté&#160;– qu&#8217;il s&#8217;agisse d&#8217;un navigateur web ou d&#8217;un agent Node.
Chaque connexion <emphasis>WebSocket</emphasis> peut encapsuler plusieurs types de messages.</simpara>
</section>
</section>
<section xml:id="développer_au_quotidien">
<title>Développer au quotidien</title>
<simpara>Nous avons beaucoup parlé de nouvelles techniques et de modularisation.
Cela peut sembler rebutant, notamment par l&#8217;introduction d&#8217;outils auxquels nous ne sommes pas encore familiers.</simpara>
<simpara>L&#8217;écosystème Node fournit énormément d&#8217;outils qui devraient nous faire <emphasis role="strong">gagner du temps</emphasis>, en nous aidant à exécuter des actions <emphasis role="strong">lorsqu&#8217;un fichier est modifié</emphasis>, en nous aidant à <emphasis role="strong">organiser notre travail</emphasis> mais aussi en <emphasis role="strong">actualisant automatiquement notre application web</emphasis> au fil du développement (fini les appuis répétés sur la touche <keycap>F5</keycap>) ou encore en <emphasis role="strong">optimisant nos fichiers graphiques</emphasis>.</simpara>
<section xml:id="watchify">
<title>Reconstruire en continu avec <literal>watchify</literal></title>
<simpara>L&#8217;utilisation de <link linkend="browserify">browserify</link> nous apporte le confort de pouvoir inclure des modules <emphasis>npm</emphasis> dans les navigateurs web.
En revanche, ça nous demande de générer des artéfacts&#160;– des <emphasis>bundles</emphasis>&#160;– à chaque modification pour consolider ces changements.</simpara>
<simpara>C&#8217;est à ce moment qu&#8217;intervient le module <emphasis>watchify</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/watchify">npmjs.com/watchify</link></phrase>).
Il fonctionne <emphasis role="strong">exactement comme <emphasis>browserify</emphasis></emphasis> mais au lieu de compiler une seule fois, il compilera dès qu&#8217;un changement sera détecté&#160;– où que ce soit dans l&#8217;arbre de dépendances du point d&#8217;entrée (paramètre <literal>-e</literal>, <literal>--entrypoint</literal>).</simpara>
<simpara>La commande suivante compilerait le fichier <literal>examples/modules/react-app.js</literal> une fois et une seule&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js</screen>
<simpara>Il suffit de remplacer <literal>browserify</literal> par <literal>watchify</literal>&#160;– le programme garde la main et indique chaque nouvelle compilation sur une nouvelle ligne&#160;:</simpara>
<screen>$ ./node_modules/.bin/watchify -dv -t babelify -e examples/modules/react-app.js -o examples/modules/react-app-browserify.js
1840601 bytes written to examples/modules/react-app-browserify.js (2.58 seconds) at 4:44:28 PM
352482 bytes written to examples/modules/react-app-browserify.js (0.10 seconds) at 4:45:09 PM
1840605 bytes written to examples/modules/react-app-browserify.js (0.25 seconds) at 4:45:15 PM</screen>
<simpara><emphasis>watchify</emphasis> utilise un mécanisme dit de <emphasis role="strong">compilation incrémentale</emphasis>&#160;: <emphasis>watchify</emphasis> ne recompile pas tout mais uniquement les différences depuis le dernier changement.
C&#8217;est beaucoup plus rapide et tout aussi efficace.</simpara>
<simpara>Trois arguments sont utiles à <emphasis>watchify</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>-v</literal> (<literal>--verbose</literal>)&#160;: force la création du fichier compilé au lancement de la commande&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>-o</literal> (<literal>--outfile</literal>)&#160;: spécifie le chemin d&#8217;enregistrement du fichier compilé&#160;– il est impossible d&#8217;utiliser la <link xl:href="../chapter-04/index.xml#stdio">sortie standard</link> (cf. Chapitre 4)&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>-d</literal> (<literal>--debug</literal>)&#160;: (lire <link linkend="browserify-sourcemaps"><emphasis>Source Maps</emphasis></link> dans ce même chapitre).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="livereload">
<title>Changements en temps-réel dans le navigateur</title>
<simpara>Modifier un fichier. Changer de fenêtre. Recharger. Changer de fenêtre. Re-modifier un fichier. Changer de fenêtre. Recharger. <emphasis>Là</emphasis> c&#8217;est bon.<?asciidoc-br?>
La quantité d&#8217;outils à disposition et leurs différentes opinions sur notre manière de travailler nous obligent à prendre des postures de travail qui ne vont <emphasis role="strong">pas nécessairement dans le sens de la productivité</emphasis>.</simpara>
<simpara>L&#8217;intégration de Node avec le système d&#8217;exploitation va nous aider à déclencher des actions lorsqu&#8217;un ou plusieurs fichiers sont modifiés.
Ces modifications peuvent être de notre fait, directement ou par le biais d&#8217;un autre logiciel (un optimiseur d&#8217;images ou la <link linkend="node-sass">compilation d&#8217;un fichier <emphasis>Sass</emphasis></link> par exemple).</simpara>
<simpara>Nous allons explorer <emphasis>deux stratégies</emphasis> d&#8217;actualisation&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>le <emphasis role="strong">rafraichissement automatique du navigateur</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis role="strong">remplacement de modules à chaud</emphasis> (<emphasis>Hot Module Replacement</emphasis>, <emphasis>HMR</emphasis>).</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>browser-sync</emphasis> est un outil formidable de développement pour <emphasis role="strong">rafraichir automatiquement une page web</emphasis> si son contenu ou une des ressources associées change.
Il offre également la possibilité de <emphasis role="strong">propager les changements sur plusieurs fenêtres et terminaux</emphasis>&#160;– y compris les clics, <emphasis>scrolls</emphasis> et toute interaction avec des formulaires.</simpara>
<simpara><emphasis>browser-sync</emphasis> maintient la position du scroll lors d&#8217;un rechargement de contenu.
L&#8217;outil se lance soit de manière autonome, soit en <emphasis>proxy</emphasis> entre l&#8217;utilisateur et tout autre serveur web.
Il ne nécessite pas non plus de <emphasis>plugin</emphasis> ou d&#8217;extension navigateur pour fonctionner, le rendant idéal pour du prototypage, de la recherche utilisateur ou du développement local.</simpara>
<formalpara>
<title>Lancement d&#8217;un serveur web autonome avec synchronisation sur le port 4000.</title>
<para>
<screen>$ ./node_modules/.bin/browser-sync start --server --port 4000 .</screen>
</para>
</formalpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;intégration de <emphasis>browser-sync</emphasis> avec le serveur web exposant les exemples de ce chapitre (voir le détail dans le fichier <literal>server.js</literal>)&#160;:</simpara>
<formalpara>
<title>livereload/server-sync.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const browserSync = require('browser-sync');

module.exports = (server) =&gt; {             <co xml:id="CO178-1"/>
  return port =&gt; {                         <co xml:id="CO178-2"/>
    const PUBLIC_PORT = 4000;              <co xml:id="CO178-3"/>
    const bs = browserSync.create();

    server.listen(port);                   <co xml:id="CO178-4"/>

    bs.init({                              <co xml:id="CO178-5"/>
      files: ['./examples'],
      port: PUBLIC_PORT,
      open: false,
      logPrefix: 'nodebook',
      proxy: {
        target: `http://localhost:${port}`,<co xml:id="CO178-6"/>
        ws: true,
      }
    });
  };
};</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO178-1">
<para>On passe un serveur http en argument (obtenu via <literal>http.createServer()</literal> par exemple).</para>
</callout>
<callout arearefs="CO178-2">
<para>Ce port sera assigné au serveur web mais ne sera pas voué à être public.</para>
</callout>
<callout arearefs="CO178-3">
<para>Ce port, lui, est celui qui sera public.</para>
</callout>
<callout arearefs="CO178-4">
<para>Démarrage du serveur web sur le port privé.</para>
</callout>
<callout arearefs="CO178-5">
<para>Initialisation de <emphasis>browser-sync</emphasis>.</para>
</callout>
<callout arearefs="CO178-6">
<para>Interfaçage avec le serveur web créé au point 4.</para>
</callout>
</calloutlist>
<simpara>La synchronisation peut être activée avec tous les exemples du chapitre en suffixant la commande <literal>npm start</literal>&#160;:</simpara>
<screen>$ nodebook chapter 4
$ npm start -- --with-sync</screen>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>browser-sync</emphasis></title>
<simpara><emphasis>browser-sync</emphasis> est richement documenté et illustré, y compris ses intégrations avec les outils <emphasis>gulp</emphasis> et <emphasis>grunt</emphasis>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://browsersync.io/">browsersync.io/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/browser-sync">npmjs.com/browser-sync</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara><emphasis>browser-sync</emphasis> a beau maintenir la position du <emphasis>scroll</emphasis>, il n&#8217;en reste pas moins que <emphasis role="strong">chaque changement remet à zéro</emphasis> l&#8217;espace mémoire de la page.
C&#8217;est là qu&#8217;entre en jeu le <emphasis role="strong">remplacement des modules à chaud</emphasis>.</simpara>
<simpara>Le <emphasis role="strong">remplacement des modules à chaud</emphasis> (<emphasis>Hot Module Replacement</emphasis> ou <emphasis>HMR</emphasis>) est une technique basée sur le remplacement de fonctions ou d&#8217;objets tout en assurant le maintien de leurs variables ou états internes.
Cette technique a notamment été popularisée par la combinaison de la librairie <emphasis>React</emphasis> et de l&#8217;outil d&#8217;assemblage <emphasis>Webpack</emphasis>.
Il est toutefois possible de procéder à du <emphasis>remplacement à chaud</emphasis> sans <emphasis>React</emphasis> et sans <emphasis>Webpack</emphasis>.</simpara>
<simpara>Quatre actions sont effectuées&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>un <emphasis role="strong">serveur de remplacement à chaud</emphasis> est démarré localement&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;outil d&#8217;assemblage (<emphasis>browserify</emphasis>, <emphasis>Webpack</emphasis>, etc.) <emphasis role="strong">insère du code client</emphasis> permettant d&#8217;établir un lien entre la page web et le serveur de remplacement à chaud&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;outil d&#8217;assemblage <emphasis role="strong">déclare les fichiers modifiés</emphasis>, transmis par le serveur de remplacement à chaud vers le navigateur web&#160;;</simpara>
</listitem>
<listitem>
<simpara>le <emphasis role="strong">code client remplace les modules</emphasis> et maintient leur état interne.</simpara>
</listitem>
</orderedlist>
<simpara>Le <emphasis>plugin browserify</emphasis> nommé <emphasis>livereactload</emphasis> est très certainement le plus facile à mettre en place pour remplacer des modules <emphasis>React</emphasis> à la volée.
Il nécessite une ligne de configuration côté <emphasis>browserify</emphasis> et ne nécessite aucun changement de code côté client.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>livereactload</emphasis></title>
<simpara>Des aides à l&#8217;installation du module <emphasis>livereactload</emphasis> sont disponibles dans son fichier README.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/livereactload">npmjs.com/livereactload</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Le remplacement à chaud n&#8217;est possible que lorsque nous sommes dans un état de reconstruction en continu, par exemple avec <link linkend="watchify">watchify</link>.</simpara>
<simpara>Nous pouvons constater les effets du remplacement à chaud avec un des exemples de ce chapitre accessible sur <phrase role="URL"><link xl:href="http://localhost:4000/examples/livereload/react-app-hmr.html">localhost:4000/examples/livereload/react-app-hmr.html</link></phrase>.
La commande <literal>npm run watch</literal> de ce chapitre démarre un serveur web et reconstruit en continu le fichier <literal>./examples/livereload/react-app-hmr.js</literal>&#160;:</simpara>
<screen>$ nodebook chapter 4
$ npm run watch</screen>
<simpara>Qui n&#8217;est autre qu&#8217;un équivalent de&#160;:</simpara>
<screen>$ watchify -dv \
  -t babelify \
  -p livereactload \
  -e ./examples/livereload/react-app-hmr.js \
  -o ./examples/livereload/react-app-hmr-browserify.js</screen>
<simpara>Dans cet exemple, le <emphasis>transform</emphasis> (<literal>-t</literal>) modifie le code source à la volée&#160;—
ici, adapter le code écrit dans une syntaxe compréhensible par la majorité
des navigateurs web grâce à l&#8217;outil <link linkend="transpilation">Babel</link>.</simpara>
<simpara>Le <emphasis>plugin</emphasis> (<literal>-p</literal>) ne transforme pas le code mais le fonctionnement de
<emphasis>watchify</emphasis> pour y ajouter des fonctionnalités&#160;— ici, refléter les
changements du fichier source vers le navigateur en temps réel.</simpara>
<simpara>Il faudra ensuite modifier l&#8217;un des deux fichiers suivants&#160;– en décommentant les lignes concernées par exemple&#160;– pour constater les changements dans notre navigateur.</simpara>
<formalpara>
<title>livereload/react-app-hmr.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import ReactDOM from 'react-dom';
import ButtonCount from './button-count.jsx';

ReactDOM.render(
  createElement('div', {}, [
    createElement(ButtonCount),
    createElement(ButtonCount),
    // createElement(ButtonCount),
  ]),
  document.querySelector('#app')
);</programlisting>
</para>
</formalpara>
<simpara>Chaque instance du composant <literal>livereload/button-count.jsx</literal> gère un état interne indépendant des autres instances de même type.
Nous aurions perdu cet état interne en cas d&#8217;utilisation de <emphasis>browser-sync</emphasis>, sans <emphasis>remplacement à chaud</emphasis>&#160;:</simpara>
<formalpara>
<title>livereload/button-count.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React, { Component } from 'react';

export default class ButtonCount extends Component {
  constructor(props) {
    super(props);

    this.handleClick = this.handleClick.bind(this);

    this.state = {
      clickCount: 0                                           <co xml:id="CO179-1"/>
    };
  }

  handleClick () {
    this.setState({ clickCount: this.state.clickCount + 1 }); <co xml:id="CO179-2"/>
  }

  render() {
    let style = {};
    // style = {
    //   fontFamily: 'monospace',
    //   fontWeight: 'bold',
    //   textTransform:' uppercase',
    // };

    return (&lt;button style={style} onClick={this.handleClick}&gt;
      Clics : {this.state.clickCount}
    &lt;/button&gt;);
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO179-1">
<para>Initialisation du compteur de clics propre à chaque instance de <literal>ButtonCount</literal>.</para>
</callout>
<callout arearefs="CO179-2">
<para>Incrémentation du compteur de clics en réaction à un clic sur le composant <literal>ButtonCount</literal>.</para>
</callout>
</calloutlist>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> <emphasis>ud</emphasis> et <emphasis>browserify-hmr</emphasis></title>
<simpara>Deux modules sont à disposition pour respectivement déclarer des modules remplaçables et pour démarrer un serveur de remplacement à chaud minimaliste.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/ud">npmjs.com/ud</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/browserify-hmr">npmjs.com/browserify-hmr</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="node-sass">
<title>Modulariser ses feuilles de style avec <emphasis>Sass</emphasis></title>
<simpara>La modularité et l&#8217;écriture d&#8217;un code isolé facilitent sa réutilisation et préviennent les effets de bord.<?asciidoc-br?>
Dans le cas des feuilles de style CSS, cela peut aider à éviter de faire <emphasis>déborder</emphasis> la cascade&#160;– si l&#8217;on peut dire.</simpara>
<simpara>Avec le <emphasis>langage Sass</emphasis> (<phrase role="URL"><link xl:href="http://sass-lang.com">sass-lang.com</link></phrase>), nous pourrions songer à générer des blocs de code selon des <emphasis role="strong">listes</emphasis> (idéal pour des thèmes de couleurs, des rubriques produits, etc.), à concevoir des <emphasis role="strong">composants comme des fonctions</emphasis> ou à bénéficier de fonctions de <emphasis role="strong">calcul de couleurs</emphasis> ou d&#8217;unités de mesure.</simpara>
<simpara>Le langage <emphasis>Sass</emphasis> est originaire du monde Ruby mais il a été depuis rendu accessible nativement à l&#8217;écosystème Node par le biais de <emphasis>node-sass</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/node-sass">npmjs.com/node-sass</link></phrase>)– et par extension, par la librairie C <emphasis>libsass</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Lecture</phrase> CSS maintenables avec Sass et Compass</title>
<simpara>Je recommande la lecture de cet ouvrage de référence écrit par <emphasis>Kaelig Deloumeau-Prigent</emphasis> aux éditions <emphasis>Eyrolles</emphasis>.
Il décrit très bien les tenants et aboutissants de Sass ainsi que de bonnes méthodes d&#8217;organisation du code et de maintenabilité au sein d&#8217;une équipe de travail.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://editions-eyrolles.com/Livre/9782212136401">editions-eyrolles.com/Livre/9782212136401</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara><emphasis>node-sass</emphasis> offre un outil en ligne de commande pour compiler un fichier Sass, plusieurs fichiers Sass ou encore une arborescence de répertoires contenant des fichiers Sass vers des fichiers CSS compréhensibles par les navigateurs web.</simpara>
<formalpara>
<title>ui/buttons.scss</title>
<para>
<programlisting language="sass" linenumbering="unnumbered">$sizes: (                             <co xml:id="CO180-1"/>
  small: .8,
  regular: 1,
  large: 1.2
);

.btn {
  @each $size, $factor in $sizes {    <co xml:id="CO180-2"/>
    &amp;.btn--#{$size} {                 <co xml:id="CO180-3"/>
      font-size: $factor * 1em;       <co xml:id="CO180-4"/>
    }
  }

  &amp;.btn--icon {                       <co xml:id="CO180-5"/>
    svg {
      height: 16px;
      width: 16px;
      margin-right: .5em;
    }
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO180-1">
<para>Définition d&#8217;une <literal>Map</literal> nommée <literal>$sizes</literal> (ensemble clé/valeur) décrivant des tailles et leur facteur multiplicateur.</para>
</callout>
<callout arearefs="CO180-2">
<para>Itération et extraction des clés/valeurs de <literal>$sizes</literal>.</para>
</callout>
<callout arearefs="CO180-3">
<para>Interpolation d&#8217;une variable pour composer un sélecteur CSS (<literal>.btn&#8212;&#8203;small</literal>, <literal>.btn&#8212;&#8203;regular</literal> etc.).</para>
</callout>
<callout arearefs="CO180-4">
<para>Calcul de la taille de la police de caractères (<literal>.8em</literal>, <literal>1em</literal> etc.).</para>
</callout>
<callout arearefs="CO180-5">
<para>Composition d&#8217;un sélecteur de classe à partir du sélecteur courant (<literal>.btn.btn&#8212;&#8203;icon</literal>).</para>
</callout>
</calloutlist>
<simpara>La compilation des fichiers s&#8217;effectue très simplement&#160;:</simpara>
<screen>$ ./node_modules/.bin/node-sass -o ./examples ./examples/buttons.scss</screen>
<simpara>La compilation générera le fichier CSS <literal>button.css</literal>, lisible par tout navigateur web&#160;:</simpara>
<formalpara>
<title>ui/buttons.css</title>
<para>
<programlisting language="css" linenumbering="unnumbered">.btn.btn--small {
  font-size: 0.8em; }

.btn.btn--regular {
  font-size: 1em; }

.btn.btn--large {
  font-size: 1.2em; }

.btn.btn--icon svg {
  height: 16px;
  width: 16px;
  margin-right: .5em; }</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Astuce</phrase> Oublions les <emphasis>vendor prefix</emphasis></title>
<simpara>Les navigateurs évoluent plus vite que le cycle de vie de nos projets.
Certaines propriétés CSS sont abritées derrière des préfixes (<literal>-moz</literal>, <literal>-webkit</literal> etc.) avant d&#8217;être standardisées.</simpara>
<simpara>Ces deux modules nous facilitent la vie en préfixant et réécrivant automatiquement les attributs en fonction de nos exigences de compatibilité navigateurs.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/autoprefixer">npmjs.com/autoprefixer</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/postcss">npmjs.com/postcss</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="ui-bundling">
<title>Lier composants visuels et feuilles de style</title>
<simpara>Souvenons-nous de la section expliquant le <link linkend="react">rapprochement entre données, rendu et interactions avec <emphasis>React</emphasis></link> de ce même chapitre.
Finalement nous avons presque tout rapproché, exception faite de la présentation avec <emphasis>Sass</emphasis> ou CSS.</simpara>
<simpara>En suivant la logique de notre approche modulaire, nous pourrions imaginer un <emphasis>transform browserify</emphasis> pour compiler et/ou extraire notre code <emphasis>Sass</emphasis> ou CSS depuis nos composants <emphasis>CommonJS</emphasis> ou <emphasis>ECMAScript 2015</emphasis>.</simpara>
<simpara>C&#8217;est exactement la proposition du module <emphasis>sassify</emphasis>.
Il intègre <emphasis>node-sass</emphasis> en tant que <emphasis>transform browserify</emphasis> et le transforme le code à la volée durant la phase de compilation.
Il se charge lui-même d&#8217;ajouter les styles dans le document HTML ou expose le code CSS compilé via la fonction <literal>require()</literal>.</simpara>
<simpara>Une saine stratégie serait de charger des CSS de base dans une feuille de style en tête de <literal>&lt;head&gt;</literal> puis de laisser les composants graphiques injecter leurs feuilles CSS respectives après coup.</simpara>
<simpara>L&#8217;exemple suivant expose deux composants <emphasis>React</emphasis>, regroupés dans une thématique de composants de boutons HTML.
Une feuille de style est importée à même le module afin de <emphasis role="strong">gérer à un même niveau, présentation, rendu et interactions</emphasis>&#160;:</simpara>
<formalpara>
<title>ui/Buttons.jsx</title>
<para>
<programlisting language="jsx" linenumbering="unnumbered">import React from 'react';
import './buttons.scss';          <co xml:id="CO181-1"/>

const Icon = (props) =&gt; (&lt;svg aria-hidden="true"&gt;
  &lt;use xlinkHref={'symbols.svg#' + props.id} /&gt;
&lt;/svg&gt;);

export const BaseButton = (props) =&gt; (
  &lt;button className={'btn btn--' + props.variant}&gt;{props.children}&lt;/button&gt;
);

export const IconButton = (props) =&gt; (
  &lt;button className="btn btn--icon"&gt;
    &lt;Icon id={props.icon} /&gt;
    {props.children}
  &lt;/button&gt;
);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO181-1">
<para>Import d&#8217;un fichier <emphasis>Sass</emphasis> qui sera par la suite compilé en CSS par le <emphasis>transform sassify</emphasis>.</para>
</callout>
</calloutlist>
<simpara>Sans surprise, le module <emphasis>sassify</emphasis> se charge comme la majorité des <emphasis>transform browserify</emphasis> comme vu dans la section <link linkend="browserify">Importer des modules npm pour le web</link> dans ce même chapitre&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify \
  -t sassify \
  -t babelify \
  -e ./examples/Buttons.jsx \
  -o ./examples/Button-browserify.js</screen>
<simpara>La commande suivante injectera automatiquement les feuilles de style compilées dans le document HTML lors de son exécution dans un navigateur web&#160;:</simpara>
<screen>$ ./node_modules/.bin/browserify \
  -t [ sassify --auto-inject ] \
  -t babelify \
  -e ./examples/Buttons.jsx \
  -o ./examples/Button-browserify.js</screen>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> CSS Modules</title>
<simpara>Une autre philosophie émergente est de continuer à transformer son code <emphasis>Sass</emphasis> ou CSS en styles en ligne, à leur adjoindre un préfixe unique et à les insérer directement dans le code HTML.<?asciidoc-br?>
Elle demande moins d&#8217;outillage et s&#8217;applique pleinement à des composants visuels modulaires&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/css-modules">npmjs.com/css-modules</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/css-modulesify">npmjs.com/css-modulesify</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="optimiser_ses_ressources_graphiques">
<title>Optimiser ses ressources graphiques</title>
<simpara>Node est un outil de choix lorsque l&#8217;on souhaite s&#8217;atteler au développement <emphasis>front-end</emphasis> et ce n&#8217;est pas sans raison.
Outre l&#8217;outillage lié à la réécriture du code&#160;– comme <link linkend="babel">Babel</link> et <link linkend="browserify">browserify</link> évoqués ci-avant&#160;– Node regorge de modules <emphasis>npm</emphasis> réduisant les tâches manuelles répétitives et possiblement sujettes à erreur.</simpara>
<simpara>Nous retrouvons l'<emphasis role="strong">optimisation des ressources graphiques</emphasis> parmi cet ensemble de tâches rébarbatives.
Quand j&#8217;écris <emphasis>ressources graphiques</emphasis>, j&#8217;entends par là le redimensionnement ou la création de vignettes d&#8217;images, l&#8217;optimisation de leur poids, la fusion de fichiers SVG sous forme de symboles, la création de piles de polices de caractère et même l&#8217;encodage audio/vidéo&#160;– via des <emphasis>bindings</emphasis> avec des logiciels spécialisés comme <emphasis>ffmpeg</emphasis> ou <emphasis>lame</emphasis>.</simpara>
<simpara>L&#8217;outil en ligne de commande <emphasis>imagemin-cli</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/imagemin-cli">npmjs.com/imagemin-cli</link></phrase>) est le module de référence pour optimiser les fichiers graphiques.
Il est basé sur la librairie <emphasis>imagemin</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/imagemin">npmjs.com/imagemin</link></phrase>) et se chargera de réduire le poids de nos images JPEG, PNG mais aussi GIF (animés et statiques) ainsi que le format vectoriel SVG.</simpara>
<screen>$ ./node_modules/.bin/imagemin images/* --out-dir images
8 images minified</screen>
<tip>
<title><phrase role="RemarquePreTitre">Glossaire</phrase> Compression destructive et non-destructive</title>
<simpara>Il existe deux types de compression&#160;: avec et sans perte (<emphasis>lossless</emphasis>).
Elles ont toutes deux des caractéristiques distinctes&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">destructive</emphasis>&#160;: poids réduit au maximum, possibles artéfacts visuels, destruction potentielle de couleurs dans le cas d&#8217;images complexes&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">sans perte</emphasis>&#160;: poids réduit, les couleurs supprimées ne sont pas perceptibles à l&#8217;œil nu.</simpara>
</listitem>
</itemizedlist>
<simpara>Il vaut mieux privilégier la <emphasis>compression sans perte</emphasis> pour éviter les artéfacts visuels et respecter fidèlement la création d&#8217;origine.</simpara>
</tip>
<simpara>Le <emphasis role="strong">redimensionnement d&#8217;images</emphasis> est une autre de ces tâches courantes et récurrentes qui tombe rapidement aux oubliettes de par sa gourmandise en temps.
On voudra par exemple redimensionner des photos depuis des fichiers originaux, générer des <emphasis role="strong">vignettes</emphasis> ou encore <emphasis role="strong">générer différentes tailles d&#8217;images</emphasis> adaptées aux différentes dispositions d&#8217;un site web <emphasis>responsive</emphasis>.</simpara>
<simpara><emphasis>sharp-cli</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sharp-cli">npmjs.com/sharp-cli</link></phrase>) répond exactement à ce cahier des charges.
Ce module en ligne de commande est basé sur <emphasis>sharp</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/sharp">npmjs.com/sharp</link></phrase>), une librairie Node de modification d&#8217;images écrite en <emphasis>ECMAScript</emphasis> et <emphasis>C++</emphasis>.
<emphasis>sharp</emphasis> nous aidera entre autres à redimensionner, découper, retourner, recentrer, assembler et appliquer des effets graphiques de manière prédictible.</simpara>
<screen>$ ./node_modules/.bin/sharp resize 500 \
  --min \
  -i images/*.png \
  --output ./images/thumbs</screen>
<simpara>La commande précédente illustre une <emphasis role="strong">opération de redimensionnement d&#8217;images</emphasis>&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>d&#8217;une dimension de <emphasis role="strong">500 pixels de largeur</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">minimum</emphasis> (donc respecte)&#160;– sans cet attribut les images seraient des carrés de 500 pixels de large et de 500 pixels de haut&#160;;</simpara>
</listitem>
<listitem>
<simpara>ciblant toutes les <emphasis role="strong">images PNG</emphasis> du répertoire <literal>images</literal>&#160;;</simpara>
</listitem>
<listitem>
<simpara>puis <emphasis role="strong">exportées dans le répertoire</emphasis> <literal>images/thumbs</literal>.</simpara>
</listitem>
</orderedlist>
<screen>$ ./node_modules/.bin/sharp grayscale \
  -i images/*.png \
  --output ./images/square</screen>
<simpara>À l&#8217;inverse, la commande précédente illustre la conversion en noir et blanc d&#8217;images ainsi que leur export dans un répertoire différent.</simpara>
<simpara>L&#8217;interface en ligne de commande de <emphasis>sharp-cli</emphasis> ne permet pas de créer d&#8217;opérations composites (redimensionner et convertir en niveaux de gris par exemple).
Il faudra recourir à l&#8217;API Node de <emphasis>sharp</emphasis> et chaîner les opérations en s&#8217;aidant des exemples documentés sur <phrase role="URL"><link xl:href="http://sharp.dimens.io/">sharp.dimens.io/</link></phrase>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> gm</title>
<simpara>Le module <emphasis>gm</emphasis> est le module <emphasis>classique</emphasis> de redimensionnement dans l&#8217;écosystème Node.
Il s&#8217;interface avec le programme <emphasis>GraphicsMagick</emphasis> et <emphasis>ImageMagick</emphasis>&#160;– et nécessite donc leur présence sur le système d&#8217;exploitation.
Cela rend l&#8217;utilisation de <emphasis>gm</emphasis> légèrement moins triviale que celle de <emphasis>sharp</emphasis> mais la quantité de ressources et la qualité du module en font une bonne alternative à considérer.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/gm">npmjs.com/gm</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://aheckmann.github.io/gm/">aheckmann.github.io/gm/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>L&#8217;utilisation d&#8217;un <link xl:href="../chapter-05/index.xml#npm-scripts">script npm</link>
(cf. chapitre 5) est idéale pour décrire les différentes actions d&#8217;optimisation.
Les <emphasis>scripts</emphasis> sont alors à invoquer manuellement, sur un <emphasis>crochet git</emphasis>
(<emphasis>git hook</emphasis>) ou automatiquement lors du déploiement avec un
<link xl:href="../chapter-06/index.xml#deploy.ci">service d&#8217;intégration continue</link>, par exemple.</simpara>
</section>
</section>
<section xml:id="testing">
<title>Tester son code</title>
<simpara>C&#8217;est bien connu que lorsqu&#8217;on produit du code de qualité, écrire des tests est amplement superflu et ne sert qu&#8217;à nous ralentir.</simpara>
<simpara>La réalité est toute autre et suit un paradigme très simple&#160;: <emphasis role="strong">plus il y a de lignes de code, plus il y a de chances de faire des erreurs</emphasis>.
Cela vaut aussi bien pour du HTML que du CSS ou encore de l'<emphasis>ECMAScript</emphasis>.</simpara>
<simpara>Cette ultime et dernière section de ce chapitre nous aidera à comprendre quoi et comment tester pour <emphasis role="strong">diminuer le coût de maintenance de nos applications</emphasis>.</simpara>
<section xml:id="testing-101">
<title>Que tester ?</title>
<simpara>L&#8217;idée d&#8217;écrire des tests pour améliorer la qualité de son code est attrayante mais quand on en sait pas quoi tester et ni à qui demander pour se lancer, il est évident qu&#8217;on ne va pas s&#8217;y mettre pour s&#8217;assurer que 1+1 valent bien <phrase role="line-through">3</phrase> 2.</simpara>
<simpara>Je pense à ces <emphasis>trois règles</emphasis> lorsque je souhaite écrire des tests&#160;:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>qu&#8217;est-ce qui est <emphasis role="strong">public/exporté</emphasis>&#160;?</simpara>
</listitem>
<listitem>
<simpara>qu&#8217;est-ce qui crée des <emphasis role="strong">branches dans mon code</emphasis>&#160;?</simpara>
</listitem>
<listitem>
<simpara>qu&#8217;est-ce qui <emphasis role="strong">vient du monde extérieur</emphasis>&#160;?</simpara>
</listitem>
</orderedlist>
<simpara>La syntaxe de modules <emphasis>ECMAScript 2015</emphasis> est idéale pour visualiser les segments de code qui sont exportés par nos différents fichiers.
Élément marquant&#160;: ce code est simple et devrait arriver à compter le nombre de mots mais nous n&#8217;avons aucune idée s&#8217;il fera correctement le travail sans l&#8217;exécuter dans une application.</simpara>
<formalpara>
<title>test-export.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const isWord = (word) =&gt; {
  return /^[\w\s.,\-?!;+]{2,}$/.test(word) &amp;&amp; Number.isNaN(Number(word));
};

export default function countWords (sentence) { <co xml:id="CO182-1"/>
  return sentence
    .split(' ')
    .filter(isWord)
    .length;
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO182-1">
<para>La fonction <literal>countWords</literal> le seul élément exporté par notre module et devrait donc être le seul sujet de nos tests.</para>
</callout>
</calloutlist>
<simpara>Une <emphasis>branche</emphasis> est une portion de <emphasis role="strong">code qui s&#8217;exécute de manière ponctuelle</emphasis>.
Ces sections de code s&#8217;activent ou non selon l&#8217;état d&#8217;une structure de données.
Il faut <emphasis role="strong">prévoir <emphasis>au moins autant</emphasis> de tests que de branches</emphasis> pour valider les attentes.</simpara>
<formalpara>
<title>test-branches.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export default function isOdd (number) {
  if (typeof number !== 'number' || Number.isNaN(number)) { <co xml:id="CO183-1"/>
    throw new Error('number devrait être un nombre')
  }

  if (number % 2) { <co xml:id="CO183-2"/>
    return true;
  }
  else {            <co xml:id="CO183-3"/>
    return false;
  }
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO183-1">
<para>Première branche activée dans <emphasis>deux</emphasis> cas de figure.</para>
</callout>
<callout arearefs="CO183-2">
<para>Seconde branche.</para>
</callout>
<callout arearefs="CO183-3">
<para>Troisième branche.</para>
</callout>
</calloutlist>
<simpara>Enfin, l'<emphasis role="strong">accès à toute donnée externe</emphasis> est susceptible de mal fonctionner sans que nous puissions maitriser l&#8217;origine des problèmes.
En revanche l&#8217;écriture de tests nous aidera à <emphasis role="strong">accepter ce cas de figure</emphasis> et à le signaler à nos applications.</simpara>
<formalpara>
<title>test-outside-world.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">export default function getLinkElementContent (linkElement) {
  const {href} = linkElement;           <co xml:id="CO184-1"/>

  return fetch(href)                    <co xml:id="CO184-2"/>
    .then(response =&gt; response.json())  <co xml:id="CO184-3"/>
    .then(pkg =&gt; pkg.dependencies);
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO184-1">
<para><literal>linkElement</literal> peut ne pas être un lien hypertexte (<literal>document.querySelector</literal> retourne <literal>null</literal>).</para>
</callout>
<callout arearefs="CO184-2">
<para>Ici tout peut arriver&#160;: <literal>href</literal> n&#8217;est pas une URL valide (balise <literal>href</literal> vide), serveur indisponible etc.</para>
</callout>
<callout arearefs="CO184-3">
<para>Et là, le fichier JSON peut être mal formé ou la réponse est exprimée dans un autre format que JSON.</para>
</callout>
</calloutlist>
<simpara>Nous savons désormais à peu près tout ce qu&#8217;il faut <emphasis>flairer</emphasis> pour renforcer nos applications en écrivant quelques tests.</simpara>
</section>
<section xml:id="s_outiller_pour_écrire_des_assertions">
<title>S&#8217;outiller pour écrire des assertions</title>
<simpara>Avant de nous lancer directement dans la conception et l&#8217;écriture des tests, intéressons-nous à comprendre comment l&#8217;outillage se structure.</simpara>
<itemizedlist>
<listitem>
<simpara>l'<emphasis role="strong">assertion</emphasis><?asciidoc-br?>
C&#8217;est la <emphasis>vérification</emphasis> d&#8217;une vérité, d&#8217;une attente, du résultat d&#8217;une opération.
Une <emphasis>assertion</emphasis> couvre <emphasis>une branche</emphasis> de code.</simpara>
</listitem>
<listitem>
<simpara>le <emphasis role="strong">test</emphasis><?asciidoc-br?>
C&#8217;est un <emphasis>regroupement d&#8217;assertions</emphasis> couvrant toutes les <emphasis>branches</emphasis> des fonctionnalités <emphasis>publiques</emphasis> de notre code.</simpara>
</listitem>
<listitem>
<simpara>la <emphasis role="strong">suite de tests</emphasis><?asciidoc-br?>
C&#8217;est un <emphasis>ensemble de tests</emphasis> couvrant un aspect logique d&#8217;un code applicatif.
Une application peut comporter plusieurs suites selon sa complexité&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>tests <emphasis role="strong">unitaires</emphasis> pour s&#8217;assurer du fonctionnement de l&#8217;interface de code&#160;;</simpara>
</listitem>
<listitem>
<simpara>tests <emphasis role="strong">fonctionnels</emphasis> pour s&#8217;assurer du fonctionnement de scénarios d&#8217;utilisation d&#8217;une application&#160;;</simpara>
</listitem>
<listitem>
<simpara>tests d'<emphasis role="strong">intégration</emphasis> pour s&#8217;assurer du fonctionnement d&#8217;une application en relation avec d&#8217;autres applications lui fournissant données et services&#160;;</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>l'<emphasis role="strong">exécuteur de tests</emphasis><?asciidoc-br?>
C&#8217;est le logiciel responsable de créer l&#8217;environnement d&#8217;exécution d&#8217;une <emphasis>suite de tests</emphasis>.
Ils expriment une opinion sur la structuration des tests ainsi que sur des automatismes à fournir pour accélérer l&#8217;écriture des tests.</simpara>
</listitem>
</itemizedlist>
<simpara>L&#8217;outillage varie selon chacun de ces niveaux.
Certains outils offrent une écriture d&#8217;assertion plus fluide, d&#8217;autres proposent une écriture plus spécifiquement adaptée.</simpara>
<simpara>Les sections suivantes sont complémentaires.
J&#8217;ai favorisé des approches itératives et modulaires pour faciliter l&#8217;ajout ou le retrait de tout outil de notre outillage&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la librairie <emphasis>chai</emphasis> pour les <emphasis>assertions</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la librairie <emphasis>mocha</emphasis> pour les <emphasis>tests</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>la librairie <emphasis>mocha</emphasis> pour la <emphasis>suite de tests</emphasis> exécutable par Node&#160;;</simpara>
</listitem>
<listitem>
<simpara>l'<emphasis>exécuteur de tests</emphasis> nommé  <emphasis>karma</emphasis> pour faire fonctionner la <emphasis>suite de tests</emphasis> dans les navigateurs web.</simpara>
</listitem>
</itemizedlist>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>chai</emphasis>, <emphasis>mocha</emphasis> et <emphasis>karma</emphasis></title>
<simpara>Ces trois librairies disposent d&#8217;une documentation en ligne expliquant leurs options respectives ainsi que des exemples d&#8217;utilisation.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://chaijs.com/api/bdd/">chaijs.com/api/bdd/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://mochajs.org/">mochajs.org/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://karma-runner.github.io/">karma-runner.github.io/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>Exemple d&#8217;assertion avec la librairie <emphasis>chai</emphasis></title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import {expect} from 'chai';

expect(2+2).to.equal(4);</programlisting>
</para>
</formalpara>
<formalpara>
<title>Exemple de test avec la librairie <emphasis>mocha</emphasis></title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">describe('functionName', () =&gt; {
  it('should succeed with parameter cheese', () =&gt; {
    // ...
  });

  it('should throw an error with parameter meat', () =&gt; {
    // ...
  });
});</programlisting>
</para>
</formalpara>
<formalpara>
<title>Exemple d&#8217;exécution de suites de tests avec <emphasis>mocha</emphasis> et <emphasis>karma</emphasis></title>
<para>
<screen>$ mocha tests/**/*.js
$ karma start</screen>
</para>
</formalpara>
<simpara>L&#8217;exécuteur de tests <emphasis>karma</emphasis> se configure par le biais d&#8217;un fichier <literal>karma.conf.js</literal>.
Nous en trouverons un à la racine du répertoire des ressources de ce chapitre 4.</simpara>
</section>
<section xml:id="tester_ses_composants_react_sans_navigateur_web">
<title>Tester ses composants React sans navigateur web</title>
<simpara>Un des points forts de <link linkend="react">React</link> évoqué dans ce chapitre est la <emphasis>description de son rendu</emphasis> à même le composant.
Nous bénéficions ainsi du résultat final (son HTML par exemple) ainsi que d&#8217;un arbre représentant une structure de sous-éléments et de propriétés.</simpara>
<simpara>Nous disposons de deux stratégies pour tester un composant <emphasis>React</emphasis> afin d&#8217;en tester les différents comportements&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">tester le rendu</emphasis> en comparant des chaînes de caractères&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">tester l&#8217;état</emphasis> en validant la présence d&#8217;attributs ou le déclenchement de certaines méthodes du composant.</simpara>
</listitem>
</itemizedlist>
<simpara>La librairie <emphasis>Enzyme</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/enzyme">npmjs.com/enzyme</link></phrase>) s&#8217;occupe très bien des deux, en plus de s&#8217;intégrer avec n&#8217;importe quelle librairie de tests.
Dans tous les cas, elle nous permettra de monter nos composants soit de manière isolée, soit dans un véritable arbre DOM soit en rendu HTML.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>Enzyme</emphasis></title>
<simpara>L&#8217;équipe d&#8217;Airbnb offre une documentation exhaustive ainsi que des exemples complets d&#8217;intégration avec des outils comme <emphasis>mocha</emphasis>, <emphasis>webpack</emphasis>, <emphasis>tape</emphasis> ou encore <emphasis>ava</emphasis>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://airbnb.io/enzyme/">airbnb.io/enzyme/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="http://airbnb.io/enzyme/docs/api/">airbnb.io/enzyme/docs/api/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Nous allons nous baser sur le composant créé dans la section <link linkend="react">rapprocher données, rendu et interactions avec React</link> pour s&#8217;assurer de son comportement <emphasis>avant même de l&#8217;inclure</emphasis> dans notre application.</simpara>
<formalpara>
<title>tests/date-interval.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { createElement } from 'react';
import { expect } from 'chai';
import { shallow } from 'enzyme';
import DateInterval from '../modules/date-interval.jsx';    <co xml:id="CO185-1"/>

describe('&lt;DateInterval /&gt;', () =&gt; {
  it('should render a time element', () =&gt; {                <co xml:id="CO185-2"/>
    const component = shallow(createElement(DateInterval)); <co xml:id="CO185-3"/>

    expect(component.find('time')).to.have.length(1);       <co xml:id="CO185-4"/>
  });

  it('should populate props.tickData with now+className properties', () =&gt; {
    const component = shallow(createElement(DateInterval)); <co xml:id="CO185-5"/>
    const {tickData} = component.state();                   <co xml:id="CO185-6"/>

    expect(tickData.now.getTime()).to.be.closeTo(Date.now(), 3);  <co xml:id="CO185-7"/>
    expect(tickData.className).to.be.oneOf(['pair', 'impair']);   <co xml:id="CO185-8"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO185-1">
<para>Import du module <literal>DateInterval</literal>.</para>
</callout>
<callout arearefs="CO185-2">
<para>Création d&#8217;un <emphasis>test</emphasis> destiné à vérifier la nature de la balise HTML à générer.</para>
</callout>
<callout arearefs="CO185-3">
<para>Création du composant isolé (<emphasis>shallow</emphasis>)&#160;– aucun élément DOM ne sera créé ni inséré dans le document.</para>
</callout>
<callout arearefs="CO185-4">
<para>On écrit une <emphasis>assertion</emphasis> garantissant que l&#8217;on retourne un élément <literal>&lt;time&gt;</literal>.</para>
</callout>
<callout arearefs="CO185-5">
<para>Création d&#8217;un second composant isolé dont l&#8217;état est indépendant du premier.</para>
</callout>
<callout arearefs="CO185-6">
<para>Récupération de l&#8217;état (<emphasis>state</emphasis>) du composant.</para>
</callout>
<callout arearefs="CO185-7">
<para>Assertion vérifiant que la date utilisée par le composant est proche de la date courante (à quelques millisecondes près).</para>
</callout>
<callout arearefs="CO185-8">
<para>Assertion vérifiant qu&#8217;une propriété de l&#8217;état ne peut être qu&#8217;une des deux valeurs parmi <literal>pair</literal> et <literal>impair</literal>.</para>
</callout>
</calloutlist>
<simpara>En complément à ceci, la librairie <emphasis>chai-enzyme</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/chai-enzyme">npmjs.com/chai-enzyme</link></phrase>) étend le vocabulaire de <emphasis>chai</emphasis> pour ajouter des assertions de composants.
C&#8217;est une question de goût plus qu&#8217;une nécessité.<?asciidoc-br?>
L&#8217;exemple suivant reprend le composant créé dans la section <link linkend="livereload">changements en temps-réel dans le navigateur</link> et illustre une assertion suite à un clic sur le bouton&#160;:</simpara>
<formalpara>
<title>tests/button-count.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import React from 'react';
import chai, { expect } from 'chai';
import chaiEnzyme from 'chai-enzyme';
import { shallow } from 'enzyme';
import ButtonCount from '../livereload/button-count.jsx';

chai.use(chaiEnzyme());

describe('&lt;ButtonCount /&gt;', () =&gt; {
  it('should increment state on click', () =&gt; {       <co xml:id="CO186-1"/>
    const component = shallow(&lt;ButtonCount /&gt;);
    component.simulate('click');                      <co xml:id="CO186-2"/>

    expect(component).to.have.state('clickCount', 1); <co xml:id="CO186-3"/>
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO186-1">
<para>Le libellé du test décrit le résultat attendu dans les assertions.</para>
</callout>
<callout arearefs="CO186-2">
<para>Simulation du clic sur le composant.</para>
</callout>
<callout arearefs="CO186-3">
<para>L&#8217;état interne a bien été changé et correspond à la valeur attendue.</para>
</callout>
</calloutlist>
<simpara>Le fichier <literal>package.json</literal> des ressources du chapitre 4 contient une tâche exécutant les tests exécutables dans un environnement Node uniquement.
Elle se lance de la manière suivante&#160;:</simpara>
<screen>$ npm run test:node</screen>
<figure>
<title>Extrait de la sortie de la commande <literal>npm run test:node</literal></title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mocha-react.png" contentwidth="80%" align="center"/>
</imageobject>
<textobject><phrase>mocha react</phrase></textobject>
</mediaobject>
</figure>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> <emphasis>jest</emphasis></title>
<simpara><emphasis>jest</emphasis> est un exécuteur de tests moderne et rapide particulièrement adapté au test de composants côté serveur.
Au moment d&#8217;écrire cet ouvrage, il n&#8217;était pas encore possible de l&#8217;exécuter dans un navigateur web.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/jest">npmjs.com/jest</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://facebook.github.io/jest/">facebook.github.io/jest/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Il est intéressant de retenir que les tests navigateurs ne sont pas indispensables pour s&#8217;assurer du bon fonctionnement de nos composants.
Des librairies comme <emphasis>React</emphasis> sont déjà solidement testées.
Cela nous laisse l&#8217;opportunité de nous concentrer uniquement sur notre logique métier.</simpara>
<simpara>Les tests navigateurs sont en revanche utiles pour tester la compatibilité navigateurs, que ce soit au niveau de la syntaxe <emphasis>ECMAScript</emphasis> ou du rendu CSS.</simpara>
</section>
<section xml:id="tester_code_et_composants_dans_les_navigateurs_web">
<title>Tester code et composants dans les navigateurs web</title>
<simpara>C&#8217;est bien beau de tester uniquement l&#8217;interface de composants <emphasis>React</emphasis> (ou autre technologie) mais comment faire lorsqu&#8217;on a besoin de tester avec un vrai DOM ou dans plusieurs navigateurs web&#160;?</simpara>
<simpara>On a besoin de tester dans un ou plusieurs navigateurs web pour&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>s&#8217;assurer de la <emphasis role="strong">compatibilité de notre code</emphasis> avec les variations d&#8217;implémentation de navigateurs web&#160;;</simpara>
</listitem>
<listitem>
<simpara>valider notre choix de <emphasis>polyfills</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">tester fidèlement</emphasis> contre des APIs de navigateurs ou du DOM (comme <emphasis>Web Audio</emphasis>, <emphasis>Service Workers</emphasis>, etc.).</simpara>
</listitem>
</itemizedlist>
<simpara>Autrement dit, nous avons besoin d&#8217;un <emphasis role="strong">exécuteur de tests</emphasis> qui les fasse fonctionner dans l&#8217;environnement d&#8217;un navigateur web.
Idéalement, nous voulons que cet <emphasis>exécuteur de tests</emphasis> n&#8217;influent pas sur l&#8217;outillage employé pour écrire nos tests et donc nous permette d&#8217;utiliser <emphasis>mocha</emphasis> et <emphasis>chai</emphasis> comme dans la section précédente.</simpara>
<simpara><emphasis>karma</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/karma">npmjs.com/karma</link></phrase>) est l&#8217;outil phare de l&#8217;écosystème Node dédié aux tests dans les navigateurs web.
Il a été créé en 2012 pour faciliter l&#8217;exécution des suites de tests de la librairie <emphasis>Angular</emphasis> et s&#8217;exécute en <emphasis role="strong">ligne de commande</emphasis>, assez simplement.</simpara>
<simpara>Les fonctionnalités de <emphasis>karma</emphasis> s&#8217;étendent à l&#8217;aide de modules <emphasis>npm</emphasis>&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">intégrations</emphasis> avec des <emphasis>suites de tests</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">lanceurs</emphasis> de navigateurs web&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">préprocesseurs</emphasis> pour transformer des fichiers, les servir et/ou les inclure dans l&#8217;environnement de tests.</simpara>
</listitem>
</itemizedlist>
<simpara>Le pilotage de <emphasis>karma</emphasis> se fait via un fichier de configuration <literal>karma.conf.js</literal>.
Il est possible de surcharger ultérieurement cette configuration avec des arguments de la ligne de commande.</simpara>
<formalpara>
<title>Initialisation automatique d&#8217;un fichier de configuration <literal>karma.conf.js</literal></title>
<para>
<screen>$ ./node_modules/.bin/karma init</screen>
</para>
</formalpara>
<simpara><emphasis>karma</emphasis> fonctionne avec des navigateurs installés sur notre machine de développement tout comme avec des services distants comme <emphasis>SauceLabs</emphasis> ou <emphasis>BrowserStack</emphasis> (voir <link linkend="ci">intégration continue et compatibilité navigateurs</link>).
Les navigateurs doivent déjà être disponibles sur la machine de test (Firefox et Chrome par exemple) et nous devons en parallèle installer les <emphasis role="strong">lanceurs</emphasis> (<literal>karma-firefox-launcher</literal> et <literal>karma-chrome-launcher</literal> respectivement).</simpara>
<simpara>Les navigateurs lancés par défaut lors des tests sont listés dans l&#8217;option <literal>browsers</literal>&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L82</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">browsers: ['Chrome'],</programlisting>
</para>
</formalpara>
<simpara><emphasis>karma</emphasis> se charge d'<emphasis role="strong">inclure les fichiers JavaScript</emphasis> ou de <emphasis role="strong">servir des fichiers statiques</emphasis> en fonction de <emphasis>motifs</emphasis> de chemins.
Ces fichiers peuvent être locaux (de préférence) ou distants et même être de types différents comme JSON ou HTML&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L17-23</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">files: [
  //'https://cdn.polyfill.io/v2/polyfill.min.js',           <co xml:id="CO187-1"/>
  'examples/tests-browser/**/*.js',                         <co xml:id="CO187-2"/>
  'examples/tests/**/*.js',
  'examples/tests-browser/**/*.html',                       <co xml:id="CO187-3"/>
  { pattern: 'package.json', served: true, included: false }<co xml:id="CO187-4"/>
],</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO187-1">
<para>Il suffirait de décommenter cette ligne pour inclure les <link linkend="polyfills"><emphasis>polyfills</emphasis> de navigateurs web</link> sans toucher à notre code.</para>
</callout>
<callout arearefs="CO187-2">
<para>Inclusion des fichiers de tests spécifiques aux navigateurs web.</para>
</callout>
<callout arearefs="CO187-3">
<para>Inclusion de fichiers HTML, sans effet à moins.</para>
</callout>
<callout arearefs="CO187-4">
<para>Mise à disposition du fichier <literal>package.json</literal>, accessible via une requête HTTP vers <literal>/base/package.json</literal>.</para>
</callout>
</calloutlist>
<simpara>Des <emphasis>intégrations</emphasis> doivent être déclarés pour augmenter les fonctionnalités de base de <emphasis>karma</emphasis>.
Les fonctionnalités de base de <emphasis>karma</emphasis> se résument à charger des fichiers <emphasis>ECMAScript</emphasis> dans une balise <literal>&lt;script&gt;</literal>.</simpara>
<simpara>L&#8217;extrait de configuration suivant illustre le chargement des <emphasis>plugins</emphasis> pour <emphasis>browserify</emphasis> (modules <emphasis>CommonJS</emphasis> et transpilation), <emphasis>mocha</emphasis> (<emphasis>suites de tests</emphasis>) et <emphasis>fixture</emphasis> (données représentant des cas d&#8217;utilisation)&#160;– respectivement les modules <emphasis>npm</emphasis> <literal>karma-browserify</literal>, <literal>karma-mocha</literal> et <literal>karma-fixture</literal>&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L13</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">frameworks: ['browserify', 'mocha', 'fixture'],</programlisting>
</para>
</formalpara>
<simpara>Une fois encore des <emphasis>motifs de chemins</emphasis> sont utilisés pour indiquer aux <emphasis>plugins</emphasis> leur responsabilité de prise en charge.</simpara>
<formalpara>
<title>karma.conf.js#L33-37</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">preprocessors: {
  'examples/tests/**/*.js': ['browserify'],                 <co xml:id="CO188-1"/>
  'examples/tests-browser/**/*.js': ['browserify'],
  'examples/tests-browser/**/*.html': ['html2js'],          <co xml:id="CO188-2"/>
},</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO188-1">
<para>Ces fichiers seront transpilés par <emphasis>browserify</emphasis> avant d&#8217;être chargés dans les tests de navigateurs web.</para>
</callout>
<callout arearefs="CO188-2">
<para>Ces fichiers seront pris en charge par le <emphasis>préprocesseur</emphasis> nommé <emphasis>html2js</emphasis>, utilisé par <literal>karma-fixture</literal> pour transformer du HTML en arbre DOM.</para>
</callout>
</calloutlist>
<simpara>Nous avons vu un exemple de code reposant sur un élément du DOM dans la section <link linkend="testing-101">que tester&#160;?</link> de ce chapitre.
Nous allons nous intéresser à une manière possible de tester la fonction exportée <literal>getLinkElementContent</literal> en se basant sur un <emphasis role="strong">véritable appel HTTP</emphasis> et un <emphasis role="strong">véritable élément du DOM</emphasis>, créé à partir du fichier de <emphasis>fixture</emphasis> suivant&#160;:</simpara>
<formalpara>
<title>tests-browser/fixtures/link-package.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;a href="/base/package.json"&gt;Test&lt;/a&gt;</programlisting>
</para>
</formalpara>
<simpara>Ce fichier de <emphasis>fixture</emphasis> est chargé dans le DOM par le <emphasis>plugin</emphasis> <literal>karma-fixture</literal> pour prouver que l&#8217;on peut récupérer les dépendances exposées par le fichier <literal>package.json</literal> des ressources de ce chapitre&#160;:</simpara>
<formalpara>
<title>tests-browser/test-outside-world.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">import { expect } from 'chai';
import getLinkElementContent from '../test-outside-world.js';

describe('getLinkElementContent', () =&gt; {
  before(() =&gt; fixture.setBase('examples/tests-browser/fixtures')); <co xml:id="CO189-1"/>

  it('follows an HTML link to a package.json and get its dependencies', () =&gt; {
    const [link] = fixture.load('link-package.html');               <co xml:id="CO189-2"/>

    return getLinkElementContent(link).then(deps =&gt; {               <co xml:id="CO189-3"/>
      expect(deps).to.contain.all.keys('babel', 'react', 'enzyme'); <co xml:id="CO189-4"/>
    });
  });
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO189-1">
<para><literal>before()</literal> indique à <emphasis>mocha</emphasis> d&#8217;exécuter ce bloc de code avant tout <emphasis>test</emphasis>.</para>
</callout>
<callout arearefs="CO189-2">
<para>Appel du <emphasis>plugin</emphasis> de <emphasis>fixture</emphasis> pour obtenir l&#8217;élément du DOM nécessaire à la fonction <literal>getLinkElementContent</literal>.</para>
</callout>
<callout arearefs="CO189-3">
<para>Appel réel de la fonction <literal>getLinkElementContent</literal>, résolu comme une <link xl:href="../chapter-03/index.xml#promise">promesse</link> et dont nous testons le résultat à la ligne suivante.</para>
</callout>
<callout arearefs="CO189-4">
<para><emphasis>Assertion</emphasis> vérifiant que le résultat contient bien des clés de dépendances <emphasis>npm</emphasis> attendues&#160;– nous avons bien récupéré le bon fichier et le bon contenu&#160;!.</para>
</callout>
</calloutlist>
<simpara>L&#8217;invocation de <emphasis>karma</emphasis> se fait en invoquant <literal>./node_modules/.bin/karma start</literal>.
Par mesure de simplicité, cette commande a été abstraite en tant que <link xl:href="../chapter-05/index.xml#npm-scripts">script <emphasis>npm</emphasis></link>&#160;:</simpara>
<formalpara>
<title>Exécution ponctuelle de <emphasis>karma</emphasis>.</title>
<para>
<screen>$ npm run test:browser</screen>
</para>
</formalpara>
<simpara>Les tests peuvent être relancés en continu&#160;– dès qu&#8217;un fichier change&#160;– en désactivant l&#8217;exécution unique (<emphasis>single run</emphasis>).
C&#8217;est idéal lorsque les tests sont écrits en parallèle de l&#8217;implémentation du code ou que des ajustements fréquents ont lieu en phase de développement&#160;:</simpara>
<formalpara>
<title>Exécution continue de <emphasis>karma</emphasis>.</title>
<para>
<screen>$ npm run test:browser -- --no-single-run</screen>
</para>
</formalpara>
<simpara>Comme tout process de longue durée, il s&#8217;interrompt à l&#8217;aide de la combinaison de touches <keycombo><keycap>CTRL</keycap><keycap>C</keycap></keycombo>.</simpara>
<simpara>Nous en savons désormais suffisamment pour <emphasis role="strong">tester dans les conditions des navigateurs web</emphasis> avec du <emphasis role="strong">code modulaire et réutilisable</emphasis>.</simpara>
<simpara>La question qui se pose désormais est la suivante&#160;: <emphasis role="strong">comment faire pour tester plusieurs versions d&#8217;un même navigateur</emphasis>, pour tester sur un système d&#8217;exploitation que l&#8217;on n&#8217;a pas ou encore plusieurs <emphasis role="strong">terminaux mobiles</emphasis> de type <emphasis>smartphone</emphasis> ou tablette.</simpara>
</section>
<section xml:id="ci">
<title>Intégration continue et compatibilité navigateurs</title>
<simpara>Plusieurs cas de figure se posent en complément de la section précédente&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>la <emphasis role="strong">difficulté d&#8217;accès</emphasis> à certaines combinaisons <emphasis>navigateur web</emphasis> + <emphasis>système d&#8217;exploitation</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;envie d'<emphasis role="strong">automatiser les tests</emphasis> de navigateurs web.</simpara>
</listitem>
</itemizedlist>
<simpara>En étant sous <emphasis>Windows</emphasis>, il nous sera difficile de tester <emphasis>Safari pour macOS</emphasis>.
Inversement, en étant sous <emphasis>macOS</emphasis> il nous sera difficile de tester <emphasis>Internet Explorer pour Windows XP</emphasis> ou <emphasis>Edge pour Windows 10</emphasis>.
Que dire d&#8217;anciennes versions de navigateurs Android dont la rapidité de développement et donc la compatibilité est bien en deçà des versions de Chrome pour ordinateur ou mobile.</simpara>
<simpara>L&#8217;écosystème de modules <emphasis>npm</emphasis> liés à <emphasis>karma</emphasis> s&#8217;est déjà penché sur la question.
C&#8217;est le cas notamment du produit <emphasis>BrowserStack</emphasis> qui offre une intégration pour déléguer l&#8217;exécution des tests sur leur plate-forme commerciale.
Il s&#8217;agit du module <literal>karma-browserstack-launcher</literal> (<phrase role="URL"><link xl:href="https://npmjs.com/karma-browserstack-launcher">npmjs.com/karma-browserstack-launcher</link></phrase>).</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>BrowserStack</emphasis></title>
<simpara>La documentation de <emphasis>BrowserStack</emphasis> décrit les différents systèmes d&#8217;exploitation à disposition ainsi que les navigateurs web compatibles, pour PC, Mac, iOS et Android.
L&#8217;intégration avec Node est également documentée au cas où vous souhaiteriez effectuer des tests sans passer par <emphasis>karma</emphasis>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.browserstack.com/automate/node">www.browserstack.com/automate/node</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://www.browserstack.com/list-of-browsers-and-platforms">www.browserstack.com/list-of-browsers-and-platforms</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara><emphasis>BrowserStack</emphasis> n&#8217;est pas un navigateur en soi mais offre un accès à une multitude de navigateurs.
Il faut donc créer de nouvelles configurations de navigateurs dans la propriété de configuration <literal>customLaunchers</literal>.
L&#8217;extrait de configuration suivant illustre la création d&#8217;un navigateur <emphasis>Safari</emphasis> pour <emphasis>iPhone 4S</emphasis> sous <emphasis>iOS 5.1</emphasis>&#160;:</simpara>
<formalpara>
<title>karma.conf.js#L84-91</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">customLaunchers: {
  iphone4: {
    base: 'BrowserStack',
    device: 'iPhone 4S',
    os: 'ios',
    os_version: '5.1'
  },
},</programlisting>
</para>
</formalpara>
<simpara>L&#8217;utilisation de <emphasis>BrowserStack</emphasis> nécessite un compte et l&#8217;obtention d&#8217;une clé d&#8217;API afin d&#8217;utiliser leur service.
Notre <emphasis>npm d&#8217;utilisateur</emphasis> et la <emphasis>clé d&#8217;API</emphasis> doivent être renseignés en tant que <emphasis role="strong">variables d&#8217;environnement</emphasis> pour établir une connexion au service et démarrer notre bon vieil iPhone 4&#160;:</simpara>
<screen>$ export BROWSER_STACK_USERNAME=...
$ export BROWSER_STACK_ACCESS_KEY=...
$ npm run test:browser -- --browsers iphone4</screen>
<simpara><emphasis>BrowserStack</emphasis> peut être configuré plus finement selon vos besoins.
Le réglage suivant s&#8217;assure de faire transiter les données HTTP (scripts, HTML, etc.) via la connexion sécurisée entre notre ordinateur et <emphasis>BrowserStack</emphasis>.
C&#8217;est un réglage utile en cas de <emphasis role="strong">proxy exigeant</emphasis> ou de <emphasis role="strong">réglages de connexion à Internet</emphasis> bien spécifiques.</simpara>
<formalpara>
<title>karma.conf.js#L52-54</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">browserStack: {
  forcelocal: true,
},</programlisting>
</para>
</formalpara>
<tip>
<title><phrase role="RemarquePreTitre">Alternative</phrase> <emphasis>Sauce Labs</emphasis></title>
<simpara><emphasis>Sauce Labs</emphasis> est un concurrent de <emphasis>BrowserStack</emphasis> et offre des fonctionnalités similaires.
Il est gratuit pour les projets <emphasis>open source</emphasis>.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://saucelabs.com">saucelabs.com</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<simpara>Indépendamment de <emphasis>BrowserStack</emphasis>, l'<emphasis role="strong">intégration continue</emphasis> est un mécanisme permettant l'<emphasis role="strong">exécution automatique</emphasis> des tests, de manière <emphasis role="strong">reproductible</emphasis> et dans un <emphasis role="strong">environnement systématiquement propre</emphasis>&#160;– sans trace d&#8217;exécution d&#8217;un précédent test.</simpara>
<simpara>Cela a deux avantages indéniables&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>exécuter les <emphasis role="strong">tests pour tout changement de code</emphasis>, peu importe qui en est l&#8217;auteur&#160;;</simpara>
</listitem>
<listitem>
<simpara>s&#8217;assurer de l'<emphasis role="strong">exécution systématique des tests</emphasis>&#160;;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">mettre en commun</emphasis> la logique d&#8217;exécution de tests.</simpara>
</listitem>
</itemizedlist>
<simpara>On évite ainsi les <emphasis>oublis</emphasis> tout en enlevant le coût de mise en place de l&#8217;infrastructure de tests chez des personnes contribuant de manière occasionnelle.
Cerise sur le gâteau, on prévient en partie les régressions&#160;– changement qui casse le fonctionnement attendu d&#8217;une fonctionnalité.</simpara>
<simpara>Le service <emphasis>Travis CI</emphasis> (<phrase role="URL"><link xl:href="https://travis-ci.org">travis-ci.org</link></phrase>) est un service d&#8217;intégration continue (<emphasis>Continuous Integration</emphasis>, <emphasis>CI</emphasis>) parmi d&#8217;autres mais qui a été rendu populaire pour son intégration avec <emphasis>GitHub</emphasis>.
Il est gratuit pour les projets <emphasis>open source</emphasis>.</simpara>
<simpara>Un service d&#8217;intégration continue est configuré pour définir ce qui est exécuté <emphasis>avant</emphasis>, <emphasis>pendant</emphasis> et <emphasis>après</emphasis> les tests.
Il a donc l&#8217;avantage de faciliter l&#8217;automatisation des tests de navigateurs web à même la <emphasis>machine virtuelle</emphasis> (<emphasis>Virtual Machine</emphasis>, <emphasis>VM</emphasis>) de test ou bien vers des plates-formes comme <emphasis>BrowserStack</emphasis>.
Son mécanisme de <emphasis role="strong">variables d&#8217;environnement cryptées</emphasis> nous évitera de donner accès à notre compte au premier venu.</simpara>
<simpara>Un fichier de configuration minimal au format YAML est nécessaire.
Des services comme <emphasis>GitHub</emphasis> facilitent la connexion avec <emphasis>Travis CI</emphasis> et déclenchent automatiquement l&#8217;exécution des tests à chaque commit ou <emphasis>pull request</emphasis>.</simpara>
<formalpara>
<title>.travis.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">language: node_js             <co xml:id="CO190-1"/>
node_js: v10                   <co xml:id="CO190-2"/>

addons:
  firefox: latest             <co xml:id="CO190-3"/>

env:
  - MOZ_HEADLESS=1            <co xml:id="CO190-4"/>

script: npm run test:browser -- --browsers Firefox

env:
  BROWSER_STACK_USERNAME: "$BROWSER_STACK_USERNAME"       <co xml:id="CO190-5"/>
  BROWSER_STACK_ACCESS_KEY: "$BROWSER_STACK_ACCESS_KEY"</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO190-1">
<para>Configuration de la <emphasis>VM</emphasis> pour utiliser <emphasis>Node</emphasis>.</para>
</callout>
<callout arearefs="CO190-2">
<para>Configuration de la <emphasis>VM</emphasis> pour utiliser la version la plus récente de Node v10.</para>
</callout>
<callout arearefs="CO190-3">
<para>Installation de la dernière version stable de <emphasis>Firefox</emphasis>.</para>
</callout>
<callout arearefs="CO190-4">
<para>La variable d&#8217;environnement <literal>MOZ_HEADLESS</literal> indique à Firefox de démarrer sans afficher d&#8217;interface graphique à l&#8217;écran.</para>
</callout>
<callout arearefs="CO190-5">
<para>J&#8217;ai paramétré la clé d&#8217;accès à <emphasis>BrowserStack</emphasis> dans les réglages de <link linkend="travis-ci">Travis CI</link> (voir encadré ci-après).</para>
</callout>
</calloutlist>
<tip xml:id="travis-ci">
<title><phrase role="RemarquePreTitre">Documentation</phrase> <emphasis>Travis CI</emphasis></title>
<simpara>Des services comme <emphasis>Travis CI</emphasis> sont puissants et amplement configurable pour de nombreux besoins, y compris la connexion à des bases de données Postgres ou MariaDB.</simpara>
<figure>
<title>Écran de paramétrage des variables d&#8217;environnement secrètes sur Travis CI.</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/travis-ci-encrypted-env.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>travis ci encrypted env</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/">docs.travis-ci.com/user/languages/javascript-with-nodejs/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/gui-and-headless-browsers/">docs.travis-ci.com/user/gui-and-headless-browsers/</link></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://docs.travis-ci.com/user/firefox/">docs.travis-ci.com/user/firefox/</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
</section>
<section xml:id="conclusion_9">
<title>Conclusion</title>
<simpara>Nous sommes désormais en mesure d'<emphasis role="strong">exécuter des tests unitaires</emphasis> impliquant des <emphasis role="strong">navigateurs web</emphasis> sur notre machine, sur des <emphasis role="strong">services distants</emphasis> mais également de manière automatique avec des services d'<emphasis role="strong">intégration continue</emphasis> comme <emphasis>Travis CI</emphasis>.</simpara>
<simpara>Le recours aux modules <emphasis>npm</emphasis> combinés aux modules <emphasis>ECMAScript</emphasis> facilite le <emphasis role="strong">design et la maintenance de code testable et réutilisable</emphasis>.</simpara>
<simpara>Ces pratiques de modularisation&#160;– jusqu&#8217;au rendu intermédiaire de <emphasis>React</emphasis>&#160;– encouragent une <emphasis role="strong">rigueur ayant un impact positif</emphasis> sur la qualité de notre code et notre confiance à le déployer en production.</simpara>
</section>
</chapter>
<appendix xml:id="sélection_de_modules_npm">
<title>Sélection de modules npm</title>
<simpara>L&#8217;écosystème npm regorge de modules.<?asciidoc-br?>
Comment choisir parmi les centaines de milliers de modules à disposition&#160;?</simpara>
<simpara>Cette annexe est une sélection subjective de modules npm&#160;: vous pouvez
les utiliser les yeux fermés et apprendre à jouer avec Node en toute
confiance.</simpara>
<informalexample>
<itemizedlist>
<title>Sommaire</title>
<listitem>
<simpara>TBD.</simpara>
</listitem>
</itemizedlist>
</informalexample>
<note>
<title><phrase role="RemarquePreTitre">Remarque</phrase> Versions de Node et npm</title>
<simpara>Le contenu de ce chapitre utilise les versions <emphasis role="strong">Node v10</emphasis> et <emphasis role="strong">npm v6</emphasis>.
Ce sont les versions stables recommandées en 2018.
J&#8217;explique comment les installer au <link xl:href="../chapter-02/index.xml#install">chapitre 2</link>.</simpara>
</note>
<tip>
<title><phrase role="RemarquePreTitre">Pratique</phrase> Jouer avec les exemples dans un terminal</title>
<simpara>Les exemples titrés d&#8217;un nom de fichier peuvent être installés sur votre ordinateur.
Exécutez-les dans un terminal et amusez-vous à les modifier en parallèle de
votre lecture pour voir ce qui change.</simpara>
<formalpara>
<title>Installation des exemples via le module npm <literal>nodebook</literal>.</title>
<para>
<screen>$ npm install --global nodebook
$ nodebook install appendix-a
$ cd $(nodebook dir appendix-a)</screen>
</para>
</formalpara>
<simpara>La commande suivante devrait afficher un résultat qui confirme que vous êtes
au bon endroit&#160;:</simpara>
<screen>$ node hello.js</screen>
<simpara>Suivez à nouveau les installations d&#8217;instruction pour rétablir les exemples
dans leur état initial.</simpara>
</tip>
<section xml:id="modules_de_sécurité_applicative">
<title>Modules de sécurité applicative</title>
<tip>
<title><phrase role="RemarquePreTitre">Module npm</phrase> retire.js</title>
<simpara><emphasis>retire.js</emphasis> est un module npm permettant de scanner soi-même des vulnérabilités connues dans le code JavaScript de son choix.
Il fonctionne aussi bien pour du JavaScript interprété par un navigateur web que dans Node.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/retire">npmjs.com/retire</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
</section>
<section xml:id="vérification_syntaxique">
<title>Vérification syntaxique</title>
<simpara>La vérification syntaxique est un mécanisme s&#8217;assurant que votre code respecte la grammaire du langage associé.
Elle peut autant révéler des anomalies fondamentales (balise mal fermée, expression inconnue etc.) que renforcer des pratiques de programmation réduisant les erreurs potentielles lors de l&#8217;exécution du-dit code.</simpara>
<simpara>Il s&#8217;agit d&#8217;une excellente première étape avant d&#8217;introduire des tests unitaires ou fonctionnels.
C&#8217;est aussi une pratique rapide à mettre en œuvre&#160;— de préférence dès le début du projet&#160;— et poussant à harmoniser les pratiques de développement au sein d&#8217;un group d&#8217;individus.</simpara>
<simpara>Les modules à disposition dans npm vous permettront de couvrir vos fichiers CSS, HTML et ECMAScript bien sûr&#160;!</simpara>
<simpara><emphasis role="strong">htmlhint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/htmlhint">npmjs.com/htmlhint</link></phrase>) est un outil en ligne de commande vérifiant la structure de vos documents HTML.
Il rapporte les doublons d&#8217;attributs <literal>id</literal>, la présence de paires de balises mal formées, l&#8217;absence de balise fermante ou encore l&#8217;existance de chaînes de caractère non-imprimables dans des attributs critiques, entre autres.</simpara>
<simpara>Prenons en exemple le document suivant&#160;:</simpara>
<formalpara>
<title>sample.html</title>
<para>
<programlisting language="html" linenumbering="unnumbered">&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" href="sample.css"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;button id="btn" class="btn btn-primary"&gt;OK&lt;/button&gt;

  &lt;button id="btn" class="btn"&gt;KO&lt;/button&gt;

  &lt;BUTTON class='btn__primary--curent btn--active'&gt;&lt;/BUTTON&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<simpara>Une lecture distraite pourrait nous faire passer à côté des erreurs mais également des inconsistances de programmation.
Sur un document plus réaliste et donc volumineux, avec de fréquents changements, autant oublier la vérification manuelle.</simpara>
<simpara>L&#8217;exécution de <emphasis role="strong">htmlhint</emphasis> avec ses règles par défaut remontera les alertes suivantes&#160;:</simpara>
<screen>$ npm run lint-html
sample.html:
line 1, col 1: Doctype must be first.
line 8, col 10: Id redefinition of [ btn ].
line 10, col 3: Tagname [ BUTTON ] must be lower case.
line 10, col 10: The value of attribute [ class ] must closed by double quotes.
line 10, col 52: Tagname [ BUTTON ] must be lower case.</screen>
<simpara>Si elle peuvent paraître opiniatres, sachez qu&#8217;elles n&#8217;ont pour seul but que de décider une bonne fois pour toute quelle attitude adopter&#160;: tout ou rien en miniscule, guillemets simples ou doubles, doctype explicite etc.</simpara>
<section xml:id="eslint">
<title>eslint</title>
<simpara><emphasis role="strong">eslint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/eslint">npmjs.com/eslint</link></phrase>) est l&#8217;outil de vérification syntaxique pour ECMAScript le plus <emphasis role="strong">complet et modulaire</emphasis>.
Il offre un niveau de souplesse extrême au niveau de la configuration des règles à appliquer (utilisation systématique de <literal>use strict</literal>, nombre maximum de paramètres de fonctions, objets non-déclarés, variables inconnues etc.).<?asciidoc-br?>
Il expose également une API relativement simple afin de créer vos propres règles métier.
Un autre mécanisme permet d&#8217;inclure et d&#8217;étendre un ou plusieurs  fichiers de configuration afin de les réutiliser dans différents projets.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Bon à savoir</phrase> Règles par défaut</title>
<simpara><emphasis role="strong">eslint</emphasis> n&#8217;applique aucune règle par défaut.
Ses premières utilisations nécessiteront donc de prendre connaissance des
règles à disposition ou d&#8217;opter pour un module <emphasis>npm</emphasis> définissant une
configuration <emphasis>à votre goût</emphasis>.</simpara>
<simpara>En effet si certaines règles nous alertent de dangers potentiels,
d&#8217;autres sont totalement subjectives et sujettes à des préférences
purement personnelles.</simpara>
</tip>
<simpara><emphasis role="strong">eslint</emphasis> lit la section <literal>eslintConfig</literal> du fichier <literal>package.json</literal> pour adapter son comportement.<?asciidoc-br?></simpara>
<simpara>L&#8217;exemple suivant illustre une configuration d'<emphasis>eslint</emphasis> renforçant la déclaration du mode strict au niveau global, l&#8217;emploi des égalités strictes, l&#8217;interdiction de l&#8217;utilisation de variables non déclarées, la cohérence d&#8217;utilisation des accolades ainsi que l&#8217;utilisation de guillemets simples uniquement&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "nodebook.chapter-04",
  "private": true,
  "dependencies": {
    "eslint": "^1.10.3"
  },
  "...": "...",
  "eslintConfig": {
    "env": {
      "node": true,
      "es6": true
    },
    "rules": {
      "strict": [2, "global"],
      "quotes": [2, "single"],
      "no-undef": 2,
      "curly": 2,
      "eqeqeq": 2
    }
  }
}</programlisting>
</para>
</formalpara>
<simpara>Le niveau de sévérité de chaque règle peut être configuré à l&#8217;aide d&#8217;un nombre entier&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>0</literal>&#160;: règle désactivée&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>1</literal>&#160;: affiche un avertissement&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>2</literal>&#160;: affiche une erreur (le processus se terminera avec un code d&#8217;erreur).</simpara>
</listitem>
</itemizedlist>
<simpara>Certaines règles demandent ou acceptent des arguments supplémentaires.
Ces arguments sont documentés dans le répertoire <literal>lib/rules</literal> de la librairie <emphasis>eslint</emphasis> ainsi que sur le site web du projet (<phrase role="URL"><link xl:href="http://eslint.org/docs/rules/">eslint.org/docs/rules/</link></phrase>).</simpara>
<simpara>Il serait fastidieux de répéter ou copier/coller la configuration de projet en projet.
Ça tombe bien, <emphasis>eslint</emphasis> fournit un mécanisme d&#8217;extension.
Ce mécanisme accepte aussi bien des chemins relatifs vers un fichier de configuration mais aussi vers des modules npm.</simpara>
<simpara>L&#8217;exemple suivant illustre l&#8217;utilisation combinée de deux configurations <emphasis>eslint</emphasis>&#160;:</simpara>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "name": "nodebook",
  "private": true,
  "dependencies": {
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^3.1.0",
    "eslint-plugin-react": "^3.15.0"
  },
  "...": "...",
  "eslintConfig": {
    "extends": [
      "airbnb/base",
      "airbnb/rules/react"
    ]
  }
}</programlisting>
</para>
</formalpara>
<simpara>Il y a deux éléments combinés dans le précédent exemple&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>l&#8217;utilisation d&#8217;un module <emphasis>npm</emphasis> pour obtenir de nouvelles règles&#160;— spécifiques à l&#8217;analyse syntaxique d&#8217;applications React&#160;;</simpara>
</listitem>
<listitem>
<simpara>l&#8217;utilisation d&#8217;un module <emphasis>npm</emphasis> (<emphasis>eslint-config-airbnb</emphasis>) pour configurer <emphasis>eslint</emphasis>, à la fois pour du code à destination de Node, des navigateurs web et de React.</simpara>
</listitem>
</itemizedlist>
<simpara>Le détail des règles de configuration mises en application sont disponible simplement en parcourant l&#8217;arborescence du dépôt de code disponible sur <phrase role="URL"><link xl:href="https://github.com/airbnb/javascript">github.com/airbnb/javascript</link></phrase>.</simpara>
<simpara><emphasis role="strong">csslint</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csslint">npmjs.com/csslint</link></phrase>) est un outil de vérification syntaxique de feuilles de style CSS.
Il a été créé par deux anciens ingénieurs de <emphasis>Yahoo!</emphasis>.
Leurs anciens travaux dans le domaine de la performance ont influencé l&#8217;architecture et le choix des règles par défaut.
Celles-ci peuvent d&#8217;ailleurs être étendues, moins aisément que pour <emphasis role="strong">eslint</emphasis> certes, mais suffisamment pour adapter l&#8217;outil aux besoins modernes, notamment ceux du web mobile.</simpara>
<simpara><emphasis role="strong">csslint</emphasis> fournit les mécanismes de vérification adéquats pour alerter de possibles effets de bord de <emphasis>box model</emphasis>, de déclaration incompatible de <literal>@font-face</literal>, de <emphasis>vendor prefix</emphasis> dépréciés (voir plus loin la section <emphasis>Optimisation du code</emphasis>) ou encore de combinaisons de propriétés connues pour casser l&#8217;affichage dans certains navigateurs.</simpara>
<simpara>Prenons par exemple le fichier CSS suivant&#160;:</simpara>
<formalpara>
<title>sample.css</title>
<para>
<programlisting language="css" linenumbering="unnumbered">.btn {
  background: white;
  color: black;
  border: 0px solid black;
  height: 20px;
  padding: 10px;
}
.btn__primary {
  background-color: blue;
  color: white;
  font-size: 1.3em;
  transition: font-weight 0.2s ease;
}
.btn__primary--current {
  color: gray;
}
.btn__primary--current.btn--active {
  font-weight: 700;
}</programlisting>
</para>
</formalpara>
<simpara><emphasis role="strong">csslint</emphasis> génèrera trois alertes en lisant le fichier <literal>sample.css</literal> et ce, même si celui-ci est syntaxiquement parfaitement valide&#160;:</simpara>
<screen>$ csslint sample.css

csslint: There are 3 problems in sample.css.

sample.css
1: warning at line 4, col 11
Values of 0 shouldn't have units specified.
  border: 0px solid black;

sample.css
2: warning at line 4, col 3
Using height with border can sometimes make elements larger than you expect.
  border: 0px solid black;

sample.css
3: warning at line 6, col 3
Using height with padding can sometimes make elements larger than you expect.
  padding: 10px;</screen>
<simpara>Si la présence d&#8217;une mesure en pixels n&#8217;est qu&#8217;une affaire de micro-optimisation, les deux autres erreurs sont nettement plus problématiques car elles impliquent un manque de consistance d&#8217;affichage, selon le navigateur effectuant le rendu.<?asciidoc-br?>
Éviter l&#8217;utilisation de ces cas limites évite également d&#8217;avoir à empiler des couches de CSS pouvant accentuer encore peu plus l&#8217;instabilité d&#8217;affichage.</simpara>
<simpara><emphasis role="strong">doiuse</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/doiuse">npmjs.com/doiuse</link></phrase>) est un utilitaire qui se repose sur la base de données de <phrase role="URL">caniuse.com</phrase>.
Il vous alerte des possibles incompatibilités de syntaxe en fonction de la compatibilité désirée avec une liste de navigateurs web définie par vos soins.
Cette liste peut aussi bien concerner des versions spécifiques ou encore cibler en fonction leurs parts de marché.</simpara>
<simpara>L&#8217;exemple suivant illustre les alertes relevées par <emphasis>doiuse</emphasis> dans le cas d&#8217;une recherche de compatibilité avec Internet Explorer 6 et Internet Explorer 7&#160;:</simpara>
<screen>$ doiuse -b 'ie &lt; 8' sample.css
sample.css:1:1: CSS 2.1 selectors not supported by: IE (6)
sample.css:8:1: CSS 2.1 selectors not supported by: IE (6)
sample.css:12:1: CSS3 Transitions not supported by: IE (6,7)
sample.css:14:1: CSS 2.1 selectors not supported by: IE (6)</screen>
</section>
</section>
<section xml:id="outillage_de_développement">
<title>Outillage de développement</title>
<section xml:id="debug">
<title>debug</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="nodemon">
<title>nodemon</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="minification_du_code">
<title>Minification du code</title>
<simpara>Commentaires, indentations ou encore noms de variables&#160;: tout ça occupe de la place, donc des caractères textuels et donc des octets de bande passante.</simpara>
<simpara>Sans outillage, l&#8217;optimisation repose littéralement entre les mains des développeurs.
Ces derniers doivent alors compromettre lisibilité et maintenabilité au profit de quelques kilo-octets.<?asciidoc-br?>
Ce que nous chercherons à tout prix à ne pas sacrifier.</simpara>
<simpara>Les minifieurs mettent en œuvre différentes techniques pour réduire cette occupation d&#8217;espace&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>suppression des commentaires et caractères non-significatifs&#160;;</simpara>
</listitem>
<listitem>
<simpara>renommage de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>factorisation d&#8217;occurrences multiples similaires&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression des instructions relatives au débogage/développement&#160;;</simpara>
</listitem>
<listitem>
<simpara>suppression de code mort.</simpara>
</listitem>
</itemizedlist>
<simpara>Ces différentes techniques de minification chercherons à préserver l&#8217;intégrité du fonctionnement ou de l&#8217;apparence de vos programmes.
Un avertissement vous préviendra du contraire le cas échéant.</simpara>
<simpara><emphasis role="strong">cssmin</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/cssmin">npmjs.com/cssmin</link></phrase>) est un portage ECMAScript du compresseur CSS <emphasis>YUICompressor</emphasis> développé par la compagnie <emphasis>Yahoo!</emphasis> à la fin des années 2000.<?asciidoc-br?>
L&#8217;approche de <emphasis role="strong">cssmin</emphasis> consiste principalement à supprimer les caractères et commentaires non-significatifs.
Il ne cherche pas à faire davantage que son homologue originel.</simpara>
<simpara><emphasis role="strong">cssmin</emphasis> est donc un outil simple, exposant un exécutable système ainsi qu&#8217;un module Node.
Il ne fournit en revanche aucun support pour les <emphasis>Source Maps</emphasis>. Il vous faudra reposer sur l&#8217;outillage proposé par les navigateurs web modernes pour le débogage (reformatage du code, inspection des propriétés etc.).</simpara>
<formalpara>
<title>Exemples d&#8217;utilisation de <emphasis role="strong">cssmin</emphasis></title>
<para>
<screen>$ cssmin sample.css &gt; sample.min.css <co xml:id="CO191-1"/>

$ cat sample.css | cssmin | wc -c | awk '{print $1}' <co xml:id="CO191-2"/></screen>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO191-1">
<para>Exporte le résultat de la minification dans le fichier <literal>sample.min.css</literal>.</para>
</callout>
<callout arearefs="CO191-2">
<para>Utilisation des <emphasis role="strong">pipes</emphasis> UNIX pour afficher le nombre de caractères d&#8217;une version minifiée de <literal>sample.css</literal>.</para>
</callout>
</calloutlist>
<simpara><emphasis role="strong">UglifyJS</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/uglify-js2">npmjs.com/uglify-js2</link></phrase>) est un des premiers compresseurs à utiliser une  représentation syntaxique en arbre (<emphasis>Abstract Syntax Tree</emphasis>&#160;— <emphasis>AST</emphasis>) en lieu et place des classiques optimisations à coups d&#8217;expressions régulières.</simpara>
<simpara>Cette méthode permet d&#8217;élargir les perspectives de la compression via de la réécriture de code&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>hoisting</emphasis> des variables (remontée de leur déclaration en début de <emphasis>scope</emphasis>)&#160;;</simpara>
</listitem>
<listitem>
<simpara>combinaison des déclarations de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>factorisation des valeurs de variables&#160;;</simpara>
</listitem>
<listitem>
<simpara>réécriture partielle d&#8217;expressions&#160;;</simpara>
</listitem>
<listitem>
<simpara>injection en ligne du contenu de variables.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">UglifyJS</emphasis> s&#8217;utilise de manière autonome, en ligne de commande ou via son API ECMAScript, mais aussi par le biais de plugins grunt, gulp et <link linkend="browserify">browserify</link> (uglifyify et minifyify).</simpara>
</section>
<section xml:id="optimisation_du_code">
<title>Optimisation du code</title>
<simpara>Parce qu&#8217;optimiser le poids ne suffit pas, certains outils et compresseurs proposent de réécrire une partie de votre code.
Ces optimisations seraient souvent complexes à imaginer et couteuses en temps, à répéter le geste et en maintenance.</simpara>
<simpara>La majorité des optimiseurs suggérés vous inciteront à suivre la voie des standards.
Vous écrivez du code orienté vers le long terme et les outils se chargent du fardeau de la compatibilité avec le quotidien.<?asciidoc-br?>
De ce fait, ils ajouteront des instructions relatives à une plus grande compatibilité ou à l&#8217;inverse, ils retireront des portions inutilisées.</simpara>
<simpara>Quoiqu&#8217;il advienne, en complément des compresseurs ou non, votre code source d&#8217;origine reste intact.
Il est d&#8217;autant plus aisé de les tester, de les activer et de les désactiver quand bon vous semble.</simpara>
<simpara><emphasis role="strong">autoprefixer</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/autoprefixer">npmjs.com/autoprefixer</link></phrase>) est <emphasis>le</emphasis> module qui vous épargnera l&#8217;écriture de centaines de lignes en ajoutant automatiquement les bons préfixes aux bons endroits.
Travail d&#8217;autant plus ingrat si vous n&#8217;avez pas envie ni le loisir de recourir à des <emphasis>mixins</emphasis> Less ou Sass.<?asciidoc-br?>
<emphasis>autoprefixer</emphasis> expose une API ECMAScript, un exécutable système ainsi qu&#8217;une API de <emphasis>streaming</emphasis> permettant une intégration sans plugin avec <link linkend="browserify">browserify</link>, entre autres.</simpara>
<formalpara>
<title>Exemple d&#8217;utilisation d'<emphasis>autoprefixer</emphasis> en fonction des besoins en compatibilité navigateur</title>
<para>
<screen>$ autoprefixer -o - sample.css | grep transition
  -webkit-transition: font-weight 0.2s ease;
          transition: font-weight 0.2s ease;

$ autoprefixer -b 'firefox &gt; 8' -o - sample.css | grep transition
  -webkit-transition: font-weight 0.2s ease;
     -moz-transition: font-weight 0.2s ease;
          transition: font-weight 0.2s ease;</screen>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent illustre comment la propriété <literal>transition</literal> a été préfixée pour couvrir les navigateurs ayant plus de 1% de part de marché, puis en incluant les versions supérieures à Firefox 8&#160;— assez obsolètes il faut se l&#8217;avouer.<?asciidoc-br?>
L&#8217;utilisation du paramètre <literal>-o -</literal> (<emphasis>o</emphasis> pour <emphasis>output</emphasis>) suivi du caractère <emphasis>trait d&#8217;union</emphasis> redirige le code réécrit en <emphasis>sortie standard</emphasis> au lieu de modifier le fichier originel.</simpara>
<simpara><emphasis role="strong">uncss</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/uncss">npmjs.com/uncss</link></phrase>) est le pendant inverse d'<emphasis>autoprefixer</emphasis>
puisqu&#8217;il se charge de supprimer le code inutilisé.
Pour se faire, <emphasis>uncss</emphasis> charge une ou plusieurs pages de référence et fait la
différence entre les règles CSS utilisées et celles qui ne le sont pas.
Libre à vous de mentionner une liste blanche de règles à ne jamais supprimer
pour éviter qu&#8217;elles soient écrémées par mégarde.</simpara>
<simpara>Si le monde de l&#8217;optimisation ECMAScript a explosé depuis l&#8217;apparition d'<emphasis role="strong">esprima</emphasis>,
il en est de même pour CSS avec <emphasis role="strong">PostCSS</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/postcss">npmjs.com/postcss</link></phrase>).<?asciidoc-br?>
Cet outil est construit autour du triptyque suivant&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara>un parseur CSS&#160;;</simpara>
</listitem>
<listitem>
<simpara>un arbre syntaxique&#160;;</simpara>
</listitem>
<listitem>
<simpara>un compilateur texte.</simpara>
</listitem>
</itemizedlist>
<simpara>Cette combinaison rend possible la production de <emphasis>Source Maps</emphasis> mais aussi la
construction d&#8217;une multitude d&#8217;outils destinés à faciliter la vie des développeurs.
Ces outils se greffent sur le parseur, l&#8217;arbre ou le compilateur pour parvenir
à leurs fins.<?asciidoc-br?>
Avec une ou plusieurs extensions, vous avez ainsi accès à <emphasis role="strong">autoprefixer</emphasis>, à
votre nettoyeur de code mort ou même à votre propre réimplémentation de Sass
entièrement en ECMAScript&#160;!</simpara>
<simpara>Enfin, il est bon de savoir que d&#8217;autres outils existent, complètent voire remplacent les compresseurs et optimiseurs précédemment cités&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Google Closure Compiler</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/closurecompiler">npmjs.com/closurecompiler</link></phrase>)<?asciidoc-br?>
Un autre compilateur ECMAScript plus poussé qu'<emphasis>UglifyJS</emphasis> mais imposant un style d&#8217;écriture plus strict, voire plus contraignant selon votre style d&#8217;écriture.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">csswring</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csswring">npmjs.com/csswring</link></phrase>)<?asciidoc-br?>
Une alternative plus moderne que <emphasis>cssmin</emphasis>.
Cet outil s&#8217;interface optionnellement avec <emphasis>PostCSS</emphasis> et offre un support des <emphasis>Source Maps</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">csso</emphasis> (<phrase role="URL"><link xl:href="https://npmjs.com/csso">npmjs.com/csso</link></phrase>)<?asciidoc-br?>
Une autre alternative à <emphasis>cssmin</emphasis> et <emphasis>csswring</emphasis> écrite par l&#8217;équipe derrière la méthodologie BEM (<phrase role="URL"><link xl:href="https://en.bem.info">en.bem.info</link></phrase>), moins bien documentée mais plus efficace en terme d&#8217;optimisations.
<emphasis>csso</emphasis> ira jusqu&#8217;à réécrire les codes couleurs, les <literal>margin</literal> et <literal>padding</literal> et factorisera les sélecteurs similaires.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="manipulations_diverses">
<title>Manipulations diverses</title>
<simpara>Ces librairies adressent des besoins quotidiens en termes de  manipulation de chaînes ou de dates.
Elles vous permettront aussi d&#8217;organiser votre code en exécutant des fonctions de manière séquentielle, parallèle ou en boucles asynchrones.</simpara>
<section xml:id="lodash">
<title>lodash</title>
<simpara><emphasis>lodash</emphasis> est une excellente librairie de manipulation de tableaux, d&#8217;objets, de fonctions et de chaînes.</simpara>
<simpara>Vous pourrez ainsi boucler, filtrer, extraire et composer sans vous soucier de la compatibilité de l&#8217;environnement d&#8217;exécution.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/lodash">npmjs.com/lodash</link></phrase></simpara>
<formalpara>
<title>npm/lodash.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const { intersection, first } = require('lodash');
const DC = ['Batman', 'Brainiac', 'Thor'];
const Marvel = ['Spiderman', 'Thor'];

const result = first(intersection(DC, Marvel));
console.log(result);</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="">
<para>Affiche <literal>['A', 'B', 'C', 'D']</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="string_2">
<title>string</title>
<simpara><emphasis>string</emphasis> est un utilitaire de manipulation de chaînes de caractère.
Le module fournit des méthodes pour échapper, nettoyer, tronquer, remplacer,
compter, entre autres.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/string">npmjs.com/string</link></phrase></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>npm/string.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const S = require('string');
const title = S('Blog Post');

console.log(title.slugify().s);                   <co xml:id="CO193-1"/>
console.log(title.wrapHTML('h1').s);              <co xml:id="CO193-2"/>
console.log(title.wrapHTML('h1').escapeHTML().s); <co xml:id="CO193-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO193-1">
<para>Affiche <literal>blog-post</literal>.</para>
</callout>
<callout arearefs="CO193-2">
<para>Affiche <literal>&lt;h1&gt;Blog Post&lt;/h1&gt;</literal>.</para>
</callout>
<callout arearefs="CO193-3">
<para>Affiche <literal>&amp;lt;h1&amp;gt;Blog Post&amp;lt;/h1&amp;gt;</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="moment">
<title>moment</title>
<simpara><emphasis>moment</emphasis> est une librairie de gestion de temps.
Elle simplifie énormément le <emphasis>parsing</emphasis> des chaînes, l&#8217;ajout/soustraction de durées et propose des utilitaires de formatage d&#8217;affichage qui vous feront gagner un temps précieux.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/moment">npmjs.com/moment</link></phrase></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>npm/moment.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const moment = require('moment');
moment.locale('fr');

const date = moment('11 septembre 2014', 'DD MMMM YYYY');

console.log(date.toISOString());            <co xml:id="CO194-1"/>

date.add(2, 'days').add(5, 'hours');

console.log(date.format('D/MM/YY'));        <co xml:id="CO194-2"/>
console.log(date.from('2014-09-11', true)); <co xml:id="CO194-3"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO194-1">
<para>Affiche <literal>2014-09-10T23:00:00.000Z</literal>.</para>
</callout>
<callout arearefs="CO194-2">
<para>Affiche <literal>13/09/14</literal>.</para>
</callout>
<callout arearefs="CO194-3">
<para>Affiche <literal>2 jours</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="eventemitter3">
<title>eventemitter3</title>
<simpara><emphasis>eventemitter3</emphasis> est une librairie performante de gestion d&#8217;événements.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/eventemitter3">npmjs.com/eventemitter3</link></phrase></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>npm/eventemitter3.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const EventEmitter = require('eventemitter3');
const emitter = new EventEmitter();

emitter.on('ping', pingData =&gt; console.log('on: %s', pingData));
emitter.once('ping', pingData =&gt; console.log('once: %s', pingData));

console.log(emitter.listeners('ping')); <co xml:id="CO195-1"/>

emitter.emit('ping', ['ping', 'ping']); <co xml:id="CO195-2"/>
emitter.emit('ping', ['pong']);         <co xml:id="CO195-3"/>

emitter.removeListener('ping');
emitter.emit('ping', ['pong']);         <co xml:id="CO195-4"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO195-1">
<para>Affiche <literal>[ [Function], [Function] ]</literal>.</para>
</callout>
<callout arearefs="CO195-2">
<para>Affiche <literal>on: ping,ping\nonce: ping,ping</literal>.</para>
</callout>
<callout arearefs="CO195-3">
<para>Affiche <literal>on: ping,ping</literal>.</para>
</callout>
<callout arearefs="CO195-4">
<para>N&#8217;affiche rien, l&#8217;événement étant désormais déconnecté.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="système_de_fichier">
<title>Système de fichier</title>
<simpara>Ces librairies adressent des besoins quotidiens de manipulation de fichiers, que ce soit leur création, suppression mais aussi leur sélection ou l&#8217;écoute d&#8217;événements liés à ces activités.</simpara>
<section xml:id="mkdirp">
<title>mkdirp</title>
<simpara><emphasis>mkdirp</emphasis> est identique à la commande UNIX <literal>mkdir -p</literal>.
C&#8217;est-à-dire que les répertoires seront créés récursivement s&#8217;ils n&#8217;existent pas au préalable.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/mkdirp">npmjs.com/mkdirp</link></phrase></simpara>
<simpara>L&#8217;exemple précédent illustre l&#8217;écriture de la date courante dans un fichier.
Ce fichier n&#8217;est écrit que lorsque l&#8217;arborescence est préalablement créée.</simpara>
</section>
<section xml:id="rimraf">
<title>rimraf</title>
<simpara><emphasis>rimraf</emphasis> se situe dans la lignée de  <emphasis>mkdirp</emphasis>&#160;: il supprime une arborescence de manière récursive&#160;— équivalent de la commande <literal>rm -rf</literal>.
Encore une fois, sans la complexité d&#8217;avoir à gérer un enchevêtrement de fonctions asynchrones.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/rimraf">npmjs.com/rimraf</link></phrase></simpara>
</section>
<section xml:id="glob">
<title>glob</title>
<simpara><emphasis>glob</emphasis> est un utilitaire très pratique pour filtrer une recherche récursive au sein du système de fichiers.</simpara>
<simpara>Sa syntaxe équivalente à ce qui se fait dans le monde UNIX évite une écriture de code complexe reposant sur l&#8217;API <literal>fs</literal>.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/glob">npmjs.com/glob</link></phrase></simpara>
<formalpara role="interactive interactive--javascript interactive--runtime--node-v10">
<title>npm/glob.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">const glob = require('glob');

glob('*.js', (err, files) =&gt; {
  if (err) {
    return console.error(err);
  }

   console.log(files); <co xml:id="CO196-1"/>
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO196-1">
<para>Affiche un tableau contenant la liste des fichiers du répertoire courant.</para>
</callout>
</calloutlist>
</section>
<section xml:id="fs_extra">
<title>fs-extra</title>
<simpara><emphasis>fs-extra</emphasis> complète <emphasis>rimraf</emphasis> et <emphasis>mkdirp</emphasis> et ajoute d&#8217;autres fonctions utilitaires telles que la copie et le déplacement récursifs.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/fs-extra">npmjs.com/fs-extra</link></phrase></simpara>
</section>
<section xml:id="graceful_fs">
<title>graceful-fs</title>
<simpara><emphasis>graceful-fs</emphasis> n&#8217;apporte aucune API supplémentaire à l&#8217;API native Node <literal>fs</literal>.
Sous le capot la librairie simplifie l&#8217;écriture de notre code en tentant plusieurs fois d&#8217;accéder à un fichier si celui-ci n&#8217;est pas disponible.
Un module qui vous sera utile si l&#8217;activité de lecture et d&#8217;écriture sur disque dépasse les capacités du système.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/graceful-fs">npmjs.com/graceful-fs</link></phrase></simpara>
</section>
<section xml:id="chokidar">
<title>chokidar</title>
<simpara><emphasis>chokidar</emphasis> normalise l&#8217;observation du système de fichiers pour une très grande majorité de systèmes d&#8217;exploitation.
La librairie ajoute quelques fonctionnalités de filtre, de persistance d&#8217;observation et permet de dynamiquement ajouter ou retirer des fichiers de l&#8217;observation.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/chokidar">npmjs.com/chokidar</link></phrase></simpara>
</section>
</section>
<section xml:id="base_de_données">
<title>Base de données</title>
<simpara>Node supporte un vaste ensemble de bases de données grâce aux modules npm.
Favorisez toujours les modules faisant état de <emphasis>driver</emphasis> natif/binaire&#160;: la communication vers la base de données n&#8217;en sera que plus rapide.</simpara>
<section xml:id="knex">
<title>knex</title>
<simpara><emphasis>knex</emphasis> est une librairie de manipulation de base de données SQL.
Elle est notamment compatible avec PostgreSQL, MariaDB, MySQL et SQLite.
Son API fluide basée sur des <emphasis>callbacks</emphasis> et des <emphasis>promesses</emphasis> vous sera précieuse pour ne pas écrire de requête à la main.</simpara>
<simpara>Les auteurs de <emphasis>knex</emphasis> ont également créé la surcouche <emphasis>bookshelf</emphasis> pour la partie ORM et donc gérer des modèles de données au lieu de requêtes SQL.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/knex">npmjs.com/knex</link></phrase> et <phrase role="URL"><link xl:href="https://npmjs.com/bookshelf">npmjs.com/bookshelf</link></phrase>.</simpara>
<formalpara>
<title>npm/knex.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const db = require('knex')({
  client: 'sqlite3',
  connection: {
    // filename: path.join(__dirname, '..', '..', 'db.sqlite')
    filename: ':memory:'
  }
});

db.schema.dropTableIfExists('books')
  .then(() =&gt; {
    return db.schema.createTable('books', table =&gt; {
      table.increments('id').primary();

      table.string('title');
      table.timestamp('created_at').defaultTo(db.raw('CURRENT_TIMESTAMP'));
    });
  })
  .then(() =&gt; {
    return Promise.all([
      db.insert({ title: 'Node.js '}).into('books'),
      db.insert({ title: 'CSS maintenables '}).into('books'),
      db.insert({ title: 'Open Sky'}).into('books')
    ])
  })
  .then(() =&gt; db('books').where('title', 'like', '%Node%'))
  .then(rows =&gt; console.log(rows))
  .then(db.destroy.bind(db));</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="">
<para>Affiche <literal>[ { id: 1, title: 'Node.js ', created_at: '2015-10-09 16:06:17' } ]</literal>.</para>
</callout>
</calloutlist>
<simpara>L&#8217;exemple précédent se charge de créer une table dans une base de données SQLite, puis y insère trois nouveaux enregistrements.</simpara>
</section>
<section xml:id="mongoose">
<title>mongoose</title>
<simpara><emphasis>mongoose</emphasis> est un <emphasis>ODM</emphasis> (<emphasis>Object Document Model</emphasis>) pour MongoDB.
Il vous aidera à composer vos modèles, gérer la connexion à la base de données mais aussi à définir des comportements annexes comme des mixins ou des <emphasis>accesseurs</emphasis> dynamiques.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/mongoose">npmjs.com/mongoose</link></phrase></simpara>
<formalpara>
<title>npm/mongoose.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

// docker run -ti --rm -p 0.0.0.0:27017:27017 mongo:3.1
// MONGODB_URL=mongodb://192.168.59.103:27017/nodebook node npm-mongoose.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const MONGODB_URL = process.env.MONGODB_URL;

mongoose.connect(MONGODB_URL || 'mongodb://localhost:27017/nodebook');

const BookSchema = new Schema({
  id: Schema.ObjectId,
  title: String,
  created_at: { type: Date, default: Date.now }
});

BookSchema.path('title').set(title =&gt; title.trim());

const Book = mongoose.model('Book', BookSchema);

Promise.all([
  new Book({ title: 'Node.js' }).save(),
  new Book({ title: 'CSS maintenables' }).save(),
  new Book({ title: 'Open Sky' }).save()
])
.then(records =&gt; {
  console.log('%d enregistrements créés.', records.length);   <co xml:id="CO198-1"/>
  mongoose.disconnect();
});</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO198-1">
<para>Affiche <literal>3 enregistrements créés</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="levelup">
<title>levelup</title>
<simpara><emphasis>LevelDB</emphasis> est un système de base de données clé/valeur extrêmement modulaire, avec un stockage sur disque par défaut mais qui peut évoluer vers du stockage en mémoire (module <literal>memdown</literal>).
Et encore mieux, cette base de données fonctionne aussi dans un navigateur web&#160;!</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/levelup">npmjs.com/levelup</link></phrase></simpara>
<formalpara>
<title>npm/levelup.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const levelup = require('levelup');
const memdown = require('memdown');
const uuid = require('uuid').v4;

const db = levelup(memdown());

db.batch()
  .put(uuid(), { title: 'Node.js' }, { valueEncoding: 'json' })
  .put(uuid(), { title: 'CSS maintenables' }, { valueEncoding: 'json' })
  .put(uuid(), { title: 'Open Sky' }, { valueEncoding: 'json' })
  .write((err) =&gt; {
    if (err) {
      return console.error(err);
    }

    console.log('Enregistrements créés en mémoire.');
  });</programlisting>
</para>
</formalpara>
</section>
<section xml:id="redis">
<title>redis</title>
<simpara><emphasis>redis</emphasis> est une autre base de données clé/valeur focalisée sur la performance et la distribution sur de multiples serveurs.</simpara>
<simpara><emphasis>hiredis</emphasis> est un <emphasis>driver</emphasis> C++ pouvant être utilisé par le module Node <emphasis>redis</emphasis>.
Il permet de travailler directement avec des buffers plutôt qu&#8217;avec des conversions JSON, ce qui accélère le processus de conversion/déconversion depuis la base de données.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/redis">npmjs.com/redis</link></phrase> et
<phrase role="URL"><link xl:href="https://npmjs.com/hiredis">npmjs.com/hiredis</link></phrase></simpara>
<formalpara>
<title>npm/redis.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const client = require('redis').createClient();
const Promise = require('bluebird');
const uuid = require('uuid').v4;

Promise.promisifyAll(client);

Promise.all([
  client.hset(`book:${uuid()}`, 'title', 'Node.js'),
  client.hset(`book:${uuid()}`, 'title', 'CSS maintenables'),
  client.hset(`book:${uuid()}`, 'title', 'Open Sky')
])
.then(() =&gt; {
  console.log('Enregistrements créés.');
  client.end();
});</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="ligne_de_commande">
<title>Ligne de commande</title>
<simpara>Nous l&#8217;avions déjà entraperçu dans le chapitre 2 mais Node nous révèle un outillage facilitant les interactions dans un environnement <emphasis>bash</emphasis>.</simpara>
<section xml:id="yargs">
<title>yargs</title>
<simpara><emphasis>yargs</emphasis> est une librairie de <emphasis>parsing</emphasis> et de validation d&#8217;arguments.
Elle vous aidera à gérer les valeurs par défaut, à rejeter toute option inconnue ou encore à accumuler les valeurs d&#8217;options identiques.</simpara>
<simpara>Si seul le <emphasis>parsing</emphasis> vous intéresse, optez pour <emphasis>minimist</emphasis>.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/yargs">npmjs.com/yargs</link></phrase></simpara>
<simpara>Référez-vous à la section <emphasis>Approche modulaire</emphasis> de ce même chapitre pour un exemple plus détaillé de cette librairie.</simpara>
</section>
<section xml:id="chalk">
<title>chalk</title>
<simpara><emphasis>chalk</emphasis> est un simple outil de colorisation et de mise en forme de texte dans un terminal.
Oubliez les code ANSI, <emphasis>chalk</emphasis> ne vous demandera que deux appels de fonction pour afficher un texte en bleu, italique et souligné&#160;!</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/chalk">npmjs.com/chalk</link></phrase></simpara>
<formalpara>
<title>npm/chalk.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const chalk = require('chalk');

const Blue = chalk.blue;
const White = chalk.white;
const Red = chalk.red;

console.log(Blue('Node.js'), White('c\'est'), Red('fantastique !'));</programlisting>
</para>
</formalpara>
<simpara>Ce script produira l&#8217;affichage suivant&#160;:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./images/npm-chalk.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>npm chalk</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="table">
<title>table</title>
<simpara><emphasis>table</emphasis> est un utilitaire qui transforme un tableau d&#8217;objets ECMAScript
en un tableau visuel ASCII.
dans le terminal.</simpara>
<simpara>Des options vous permettent de gérer la largeur des colonnes, les alignements
de texte et les troncatures, entre autres.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/table">npmjs.com/table</link></phrase></simpara>
<formalpara>
<title>npm/table.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const {table} = require('table');
const chalk = require('chalk');

const data = Object.entries(process.versions);
const header = [
  chalk.bold.white('Software'),
  chalk.bold.white('Version')
];

console.log(table([ header, ...data ]));</programlisting>
</para>
</formalpara>
</section>
<section xml:id="inquirer">
<title>inquirer</title>
<simpara><emphasis>inquirer</emphasis> est le composant qu&#8217;il vous faut pour gérer l&#8217;interactivité avec un utilisateur dans le terminal&#160;: questions à choix multiple, validation de saisie, texte libre multiple etc.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/inquirer">npmjs.com/inquirer</link></phrase></simpara>
<formalpara>
<title>npm/inquirer.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const inquirer = require('inquirer');
const sanitize = require('sanitize-filename');

inquirer.prompt({
  name: 'fav-module',
  message: 'Quel module natif Node souhaitez-vous mieux maitriser ?',
  filter: (input) =&gt; sanitize(input),
  validate: (input) =&gt; {
    try {
      // eslint-disable-next-line global-require
      require(sanitize(input));
      return true;
    }
    catch (e){
      return false;
    }
  }
});</programlisting>
</para>
</formalpara>
<simpara>Le programme précédent tente de charger le module Node saisi par l&#8217;utilisateur et rejette la réponse s&#8217;il n&#8217;existe pas.</simpara>
<simpara>La saisie est préalablement nettoyée pour éviter que le chargement d&#8217;un module local puisse aboutir.</simpara>
</section>
</section>
<section xml:id="http_et_api">
<title>HTTP et API</title>
<simpara>Une majorité d&#8217;articles et de tutoriaux pour Node ont pour habitude d&#8217;illustrer la création d&#8217;un serveur HTTP.
S&#8217;il est vrai que Node rend les interactions réseaux aisées grâce à leur gestion non-bloquante, créer un serveur respectant réellement la spécification du protocole HTTP est une autre paire de manches.</simpara>
<simpara>La plupart des modules n&#8217;imposant pas de choix d&#8217;architecture, vous aurez souvent à composer vous-même votre application HTTP en fonction de vos besoins.</simpara>
<section xml:id="express_2">
<title>express</title>
<simpara><emphasis>express</emphasis> est probablement la librairie la plus populaire.
Elle gère le routage HTTP et la passation de données vers le moteur de rendu de votre choix.
Son système de <emphasis>middlewares</emphasis></simpara>
<simpara>Peu d&#8217;aspects de sécurité sont pris en charge.
Il est fortement recommandé de lui adjoindre <emphasis>helmet</emphasis> ou d&#8217;opter pour <emphasis>kraken</emphasis>, une surcouche d'<emphasis>express</emphasis> configurée dans cette optique.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/express">npmjs.com/express</link></phrase>, <phrase role="URL"><link xl:href="https://npmjs.com/helmet">npmjs.com/helmet</link></phrase> et <phrase role="URL"><link xl:href="https://npmjs.com/kraken-js">npmjs.com/kraken-js</link></phrase></simpara>
<simpara>Référez-vous à la section <emphasis>Approche modulaire</emphasis> de ce même chapitre pour un exemple plus détaillé de cette librairie.</simpara>
</section>
<section xml:id="passport">
<title>passport</title>
<simpara><emphasis>passport</emphasis> est une librairie de gestion d&#8217;authentification.
De nombreux modules complémentaires permettent de gérer une authentification par mot de passe, par OAuth, par compte Google Apps etc.</simpara>
<simpara>Elle fonctionne particulièrement bien puisqu&#8217;elle n&#8217;impose pas de mécanisme de persistence d&#8217;utilisateurs ni de session.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/passport">npmjs.com/passport</link></phrase></simpara>
<simpara>Référez-vous à sa documentation pour des exemples détaillés d&#8217;utilisation et d&#8217;implémentation au sein de votre application.</simpara>
</section>
<section xml:id="restify">
<title>restify</title>
<simpara><emphasis>restify</emphasis> est une alternative à <emphasis>express</emphasis> si votre application n&#8217;a pour seul but que d&#8217;exposer une API REST, sans rendu HTML ou nécessitant un templating particulier.</simpara>
<simpara>Elle rend possible le débogage complet à partir de <emphasis>dtrace</emphasis>, la gestion des versions d&#8217;API et expose un client permettant de consommer des données sur d&#8217;autres API REST.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/restify">npmjs.com/restify</link></phrase></simpara>
<formalpara>
<title>npm/restify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const restify = require('restify');
const {NotFoundError} = require('restify-errors');
const server = restify.createServer();
const countries = require('i18n-iso-countries');

const responseV1 = (request, response, next) =&gt; {
  const codes = countries.getNames('en');

  if (codes[request.params.code] === undefined) {
    return next(new NotFoundError('Country not found'));
  }

  response.send(200, codes[request.params.code]);

  next();
};

server.get({ path: '/countries/:code', version: '1.0.0' }, responseV1);

server.listen(8080, () =&gt; console.log('Serveur accessible sur %s', server.url));</programlisting>
</para>
</formalpara>
<simpara>L&#8217;exemple précédent expose une même route permettant d&#8217;obtenir des informations sur les déclarations de versions d&#8217;un fichier <literal>package.json</literal>.</simpara>
<simpara>Par défaut, la version 2 de l&#8217;API est utilisée&#160;:</simpara>
<screen>$ curl http://localhost:8080/modules/express
{"modules":[{"name":"express","version":"4.9.5"}]}</screen>
<simpara>Une version obsolète de l&#8217;API peut toutefois être utilisée si l&#8217;on mentionne explicitement cette information&#160;:</simpara>
<screen>$ curl -H 'Accept-version: ~1' http://localhost:8080/modules/express
"^4.9.5"</screen>
</section>
<section xml:id="faye">
<title>faye</title>
<simpara><emphasis>faye</emphasis> est à la fois un serveur et un client de communication en temps réel entre un client et un serveur.
Il utilisera WebSocket, Ajax ou JSON-P selon les capacités technologiques du client.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/faye">npmjs.com/faye</link></phrase> et <phrase role="URL"><link xl:href="https://npmjs.com/socket.io">npmjs.com/socket.io</link></phrase></simpara>
<formalpara>
<title>npm/faye.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const http = require('http');
const faye = require('faye');

const ws = new faye.NodeAdapter({ mount: '/realtime', timeout: 10 });

const server = http.createServer((req, res) =&gt; {
  res.writeHead(200, { 'Content-Tyoe': 'text/plain' });
  res.end('Contenu non temps réel');
});

ws.attach(server);
server.listen(3000);</programlisting>
</para>
</formalpara>
<simpara>Ce serveur extrêmement minimaliste expose un point d&#8217;entrée qui peut être accédé via le client <emphasis>Faye</emphasis>, dans un navigateur web ou via un autre script Node.</simpara>
<simpara>Tout message émit par un client sera relayé auprès des autres clients connectés.
Un mécanisme de canaux et d&#8217;authentification vous permettra de canaliser les messages en fonction des besoins de votre application.</simpara>
</section>
</section>
<section xml:id="préprocesseurs">
<title>Préprocesseurs</title>
<simpara>Les préprocesseurs sont des outils de productivité transformant un langage vers un autre langage, en général compatible avec une majorité de navigateurs.</simpara>
<simpara>Certains vous permettront même de compiler du code Node vers du code compatible avec un navigateur Web.</simpara>
<section xml:id="less">
<title>less</title>
<simpara><emphasis>less</emphasis> est un préprocesseur permettant de compiler vers du code CSS.
Ses atouts résident dans la gestion des variables, de <emphasis>mixins</emphasis> et de fonctions encourageant une écriture modulaire, plus logique et plus succincte.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/less">npmjs.com/less</link></phrase></simpara>
<formalpara>
<title>stylesheet.less</title>
<para>
<screen>@warning-color: red;
@base-font-size: 18px;

.btn {
  border: 1px solid black;
  border-radius: @base-font-size / 6;
  font-size: @base-font-size;

  &amp;--large {
    font-size: @base-font-size * 1.5;
  }

  &amp;--warning {
    border-color: fadeout(@warning-color, 10%);
    color: @warning-color;
  }
}</screen>
</para>
</formalpara>
<simpara>L&#8217;exécutable <literal>lessc</literal> compile le fichier LESS:</simpara>
<screen>$ lessc stylesheet.less</screen>
<simpara>La sortie de la commande précédente génère ce résultat&#160;:</simpara>
<programlisting language="css" linenumbering="unnumbered">.btn {
  border: 1px solid black;
  border-radius: 3px;
  font-size: 18px;
}
.btn--large {
  font-size: 27px;
}
.btn--warning {
  border-color: rgba(255, 0, 0, 0.9);
  color: #ff0000;
}</programlisting>
</section>
<section xml:id="sass">
<title>sass</title>
<simpara>Sass est un autre préprocesseur populaire issu du monde Ruby.
Un portage en C++ est disponible via le module <emphasis>node-sass</emphasis> et ne requiert pas l&#8217;installation de Ruby.</simpara>
<simpara>Compatible Node.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/node-sass">npmjs.com/node-sass</link></phrase> et <phrase role="URL"><link xl:href="http://sass-lang.com/libsass">sass-lang.com/libsass</link></phrase></simpara>
</section>
<section xml:id="browserify_2">
<title>browserify</title>
<simpara><emphasis>browserify</emphasis> transforme des modules CommonJS et des appels aux API Node en un code ECMAScript capable d&#8217;être exécuté dans un navigateur Web.</simpara>
<simpara>Un puissant mécanisme de <emphasis>transforms</emphasis> introduit des remplacements de modules à la volée ou le mélange de modules AMD et CommonJS.</simpara>
<simpara>Une alternative à <emphasis>browserify</emphasis> est <emphasis>webpack</emphasis>.
Aux fonctionnalités précédemment listées s&#8217;ajoutent une prise en charge plus aisée de multiples modules ainsi que la compilation de fichiers CSS ou Less.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/browserify">npmjs.com/browserify</link></phrase> et <phrase role="URL"><link xl:href="https://npmjs.com/webpack">npmjs.com/webpack</link></phrase></simpara>
<formalpara>
<title>npm/browserify.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const $ = require('cheerio');

const $list = $('&lt;ul/&gt;');

$list.append('&lt;li&gt;Node.js&lt;/li&gt;');
$list.append('&lt;li&gt;CSS maintenables&lt;/li&gt;');
$list.append('&lt;li&gt;Open Sky&lt;/li&gt;');

console.log($list.find('li:last-child').text()); <co xml:id="CO199-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO199-1">
<para>Affiche <literal>Open Sky</literal>.</para>
</callout>
</calloutlist>
<formalpara>
<title>package.json</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  "browser": {
    "cheerio": "jquery"
  },
  "dependencies": {
    "cheerio": "^0.17.0",
    "jquery": "^2.1.1",
  },
  "devDependencies": {
    "browserify": "^5.0.0"
  }
}</programlisting>
</para>
</formalpara>
<simpara>La commande <literal>browserify</literal> remplacera l&#8217;appel au module <emphasis>cheerio</emphasis> par un appel au module <emphasis>jquery</emphasis>&#160;:</simpara>
<screen>$ browserify npm/browserify.js -o npm/browserify.bundle.js</screen>
<simpara>Inclus dans un navigateur Web, le fichier <literal>npm/browserify.bundle.js</literal> affichera le même résultat que l&#8217;interpréteur Node.</simpara>
</section>
<section xml:id="uglify_js">
<title>uglify-js</title>
<simpara><emphasis>uglify-js</emphasis> compile de l&#8217;ECMAScript en ECMAScript mais en plus de concaténer plusieurs fichiers en un seul, il peut également minifier voire supprimer le code inutilisé par votre application.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/uglify-js">npmjs.com/uglify-js</link></phrase></simpara>
<simpara><emphasis>ufglify-js</emphasis> s&#8217;utilise via son exécutable, son API Node ou encore via des outils comme Grunt, Gulp ou <emphasis>browserify</emphasis>.
Certaines options vous seront très utiles, comme par exemple&#160;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>--mangle</literal>&#160;: compresse le code de manière plus agressive en renommant les déclarations pour gagner de la place&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>--compress</literal>&#160;: définit des options de compression supplémentaires telles que la suppression des appels à <literal>console.log</literal> et la suppression du code non-utilisé&#160;;</simpara>
</listitem>
<listitem>
<simpara><literal>--source-map</literal>&#160;: produit un fichier <emphasis>Source Maps</emphasis> facilitant le débogage du code minifié .</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="templating">
<title>Templating</title>
<simpara>Les librairies de templating proposent chacune à leur manière d&#8217;associer une structure de données à une logique de présentation.</simpara>
<simpara>Node n&#8217;y échappe pas bien sûr, mais a l&#8217;avantage de disposer de langages de templating fonctionnant aussi bien dans un environnement Node que dans des navigateurs Web.</simpara>
<simpara>Tous les exemples suivant généreront cette sortie HTML&#160;:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Template demo&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
&lt;li&gt;CSS maintenables&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Open Sky&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
<section xml:id="nunjucks">
<title>nunjucks</title>
<simpara><emphasis>nunjucks</emphasis> est un portage de <emphasis>Jinja</emphasis>, librairie bien connue par
les personnes développant en Python.
Sa syntaxe inclut des fonctionnalités comme les filtres, les blocs ou l&#8217;héritage de gabarit.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/nunjucks">npmjs.com/nunjucks</link></phrase></simpara>
<formalpara>
<title>template.html</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ title | default('Template demo') | capitalize }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% set items = ['Node.js', 'CSS maintenables', 'Open Sky'] -%}
&lt;ul&gt;
{% for item in items|sort -%}
  &lt;li&gt;{{ item }}&lt;/li&gt;
{% endfor -%}
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="handlebars">
<title>handlebars</title>
<simpara><emphasis>handlebars</emphasis> et son prédécesseur <emphasis>mustache</emphasis> sont les vétérans du templating Node.
Leur parti pris est de proposer le minimum de logique afin que celle-ci reste au plus près des données.</simpara>
<simpara><emphasis>handlebars</emphasis> compile ou précompile les gabarits en des fonctions ECMAScript.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/handlebars">npmjs.com/handlebars</link></phrase></simpara>
<formalpara>
<title>template.hbs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{#if title}}{{title}}{{else}}Template demo{{/if}}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
  {{#each items}}
  &lt;li&gt;{{.}}&lt;/li&gt;
  {{/each}}
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
<simpara>Cela présuppose que les données adéquates soient passées à la fonction de template <literal>Handlebars.template['template.hbs']</literal>.</simpara>
</section>
<section xml:id="pug">
<title>pug</title>
<simpara><emphasis>pug</emphasis> s&#8217;inspire de <emphasis>yaml</emphasis> en optant pour un parti pris à base d&#8217;indentation et d&#8217;un balisage dépourvu de chevron.
Son mécanisme de blocs facilite la réutilisation de logiques d&#8217;affichage au sein de votre application.</simpara>
<simpara>Compatible Node et navigateurs Web .<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/pug">npmjs.com/pug</link></phrase></simpara>
<formalpara>
<title>template.pug</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">doctype html
html
  head
    title= title || 'Template demo'
  body
    ul
      each item in ['Node.js', 'CSS maintenables', 'Open Sky']
        li= item</programlisting>
</para>
</formalpara>
</section>
<section xml:id="ejs">
<title>ejs</title>
<simpara><emphasis>ejs</emphasis> part du principe qu&#8217;il n&#8217;y a pas besoin d&#8217;un langage de templating autre qu&#8217;ECMAScript.
Donc c&#8217;est tout simplement ce qui vous sera proposé, impliquant de ce fait une faible courbe d&#8217;apprentissage.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/ejs">npmjs.com/ejs</link></phrase></simpara>
<formalpara>
<title>template.ejs</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;%= typeof title === 'string' ? title : 'Template demo' %&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
  &lt;% ['Node.js', 'CSS maintenables', 'Open Sky'].forEach((item) =&gt; { -%&gt;
  &lt;li&gt;&lt;%= item %&gt;&lt;/li&gt;
  &lt;% }); -%&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="react_2">
<title>react</title>
<simpara><emphasis>react</emphasis> est une librairie de présentation essentiellement connue pour son approche efficace du côté des navigateurs Web.
Ce qui est moins connu en revanche est sa capacité à pouvoir également générer du balisage côté Node et de servir de moteur de rendu pour des <emphasis>frameworks</emphasis> comme <emphasis>express</emphasis>.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/react">npmjs.com/react</link></phrase></simpara>
<formalpara>
<title>template.jsx</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const React, { Component } = require('react');

class BookList extends Component {
  render() {
    return (&lt;ul&gt;
      {this.props.books.map((bookName, i) =&gt; (
        &lt;li key={i}&gt;{bookName}&lt;/li&gt;
      ))}
    &lt;/ul&gt;);
  }
}

BookList.defaultProps = {
  books: [],
};

BookList.propTypes = {
  books: React.PropTypes.array,
};

const App = (props) =&gt; {
  return (
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;{props.title || 'Template demo'}&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;BookList books={props.books} /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
};

module.exports = App;</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="tests_2">
<title>Tests</title>
<simpara>L&#8217;outillage permettant de tester vos applications est également richement fourni.
Il y a bien sûr de quoi couvrir les tests unitaires, générer des couverture de code, exécuter les tests dans différents navigateurs, tester vos API HTTP ou encore créer des <emphasis>stubs</emphasis> et des <emphasis>mocks</emphasis>.</simpara>
<tip>
<title><phrase role="RemarquePreTitre">Remarque</phrase> require('assert')</title>
<simpara>Node dispose de sa propre API d&#8217;assertion&#160;: vous pouvez donc vous lancer dans vos premiers tests simplement en exécutant un module Node faisant appel à ce module natif.</simpara>
<simpara>Une exception sera levée à chaque fois qu&#8217;une assertion ne sera pas satisfaite.</simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://nodejs.org/api/assert.html">nodejs.org/api/assert.html</link></phrase></simpara>
</listitem>
</itemizedlist>
</tip>
<section xml:id="tape">
<title>tape</title>
<simpara><emphasis>tape</emphasis> est probablement la librairie d&#8217;exécution de tests et d&#8217;assertion la plus simple qui soit.
Extrêmement simpliste, elle se base sur la sortie de <literal>console.log</literal> pour s&#8217;assurer de l&#8217;état global d&#8217;exécution des tests.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/tape">npmjs.com/tape</link></phrase></simpara>
<formalpara>
<title>npm/tape.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');

test('Date test', (t) =&gt; {
  t.plan(1);

  t.ok(Date.now() &gt; new Date('2013-03-24').getTime());
});</programlisting>
</para>
</formalpara>
</section>
<section xml:id="sinon">
<title>sinon</title>
<simpara><emphasis>sinon</emphasis> est votre compagnon idéal pour gérer <emphasis>spys</emphasis>, <emphasis>stubs</emphasis> et <emphasis>mocks</emphasis>.
En d&#8217;autres termes, vous prenez la main sur des portions de votre propre API pour vérifier que leur <emphasis>comportement</emphasis> répond comme prévu aux signaux de leur environnement.</simpara>
<simpara><emphasis>sinon</emphasis> peut étendre <emphasis>chai</emphasis> via le module <emphasis>sinon-chai</emphasis> ou être utilisé directement avec le <emphasis>framework</emphasis> de tests <emphasis>buster</emphasis>.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/sinon">npmjs.com/sinon</link></phrase></simpara>
<formalpara>
<title>npm/sinon.js</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">'use strict';

const test = require('tape');
const sinon = require('sinon');

test('Date', (t) =&gt; {
  t.plan(3);

  const d = Date;
  const stub = sinon.stub(d, 'now');
  stub.returns(9999999999999);

  d.now();
  t.equal(stub.calledOnce, true);
  t.equal(stub.returnValues[0] &gt; new Date('1983-03-24').getTime(), true);

  stub.returns(100);
  d.now();

  t.equal(stub.returnValues[0] &gt; new Date('1983-03-24').getTime(), true);
});</programlisting>
</para>
</formalpara>
</section>
<section xml:id="nyc">
<title>nyc</title>
<simpara><emphasis>nyc</emphasis> génère une couverture de code en inspectant le code exécuté par vos tests unitaires.
Les portions de votre applications ignorées par vos tests sont signalées et une exception peut être lancée si un seuil de couverture n&#8217;est pas atteint.</simpara>
<figure>
<title>Résultat de couverture visualisée dans le terminal</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nyc-cli.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>nyc cli</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis>nyc</emphasis> se greffe sur n&#8217;importe quel librairie d&#8217;exécution de tests et se base sur la librairie <emphasis>istanbul</emphasis> pour calculer la couverture de code.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/nyc">npmjs.com/nyc</link></phrase><?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/istanbul">npmjs.com/istanbul</link></phrase></simpara>
<figure>
<title>Résultat de couverture visualisée dans un navigateur web</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/nyc-web.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>nyc web</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="karma">
<title>karma</title>
<simpara><emphasis>karma</emphasis> est un utilitaire d&#8217;exécution de tests unitaires dans un contexte de navigateur Web.
Ces navigateurs peuvent tout aussi bien être ceux présents sur votre machine, que des navigateurs résidant dans une VM ou exécutés à distance via des services comme SauceLabs ou BrowserStack.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/karma">npmjs.com/karma</link></phrase></simpara>
<figure>
<title>Exemple d&#8217;exécution continues de tests avec Karma</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/karma.png" contentwidth="85%"/>
</imageobject>
<textobject><phrase>karma</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="supertest">
<title>supertest</title>
<simpara><emphasis>supertest</emphasis> est une librairie de tests pour API HTTP.
Autrement dit, au lieu de tester directement le code de votre application, vous testez le comportement de votre API au travers des codes HTTP et des structures de données exposées.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/supertest">npmjs.com/supertest</link></phrase></simpara>
</section>
<section xml:id="eslint_2">
<title>eslint</title>
<simpara><emphasis>eslint</emphasis> teste la qualité de votre code et signale des pratiques de programmation à risque.</simpara>
<simpara>Disponible via une invocation en ligne de commande, libre à vous de paramétrer le comportement du <emphasis>linter</emphasis> selon vos propres règles ou selon des règles pré-établies, partagées sur le registre <emphasis>npm</emphasis>.</simpara>
<simpara>C&#8217;est un excellent moyen d&#8217;éviter des bugs tout en uniformisant vos pratiques de codage au sein de vos applications.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/eslint">npmjs.com/eslint</link></phrase></simpara>
</section>
</section>
<section xml:id="automatisation">
<title>Automatisation</title>
<simpara>L&#8217;automatisation de tâches et leur inclusion dans vos projets sont d&#8217;excellents moyens pour rendre explicite votre outillage tout en le rendant reproductible et vérifiable.</simpara>
<section xml:id="npm-run-all">
<title>npm-run-all</title>
<simpara><emphasis>npm-run-all</emphasis> est mon outil favori pour composer avec les <emphasis>scripts npm</emphasis>.
Il a l&#8217;avantage d&#8217;être versatile, de permettre de régler finement ce qui doit être exécuté en parallèle ou en série et transfère les options aux sous-scripts.</simpara>
<formalpara>
<title>package.npm-run-all.json</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
  "scripts": {
    "build": "npm-run-all --parallel 'build:*' --serial start",
    "build:css": "echo 'build css' &amp;&amp; sleep 1",
    "build:js": "echo 'build js' &amp;&amp; sleep 2",
    "start": "echo 'start http server'"
  },
  "dependencies": {
    "npm-run-all": "^4.0.1"
  }
}</programlisting>
</para>
</formalpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/npm-run-all">npmjs.com/npm-run-all</link></phrase></simpara>
</section>
</section>
<section xml:id="internet_of_things">
<title>Internet of Things</title>
<section xml:id="nitrogen">
<title>nitrogen</title>
<simpara><emphasis>nitrogen</emphasis> est une plateforme permettant de gérer les interactions entre différents périphériques, sur un même réseau local et à travers Internet.</simpara>
<simpara>La librairie se base sur un mécanisme déclaratif de fonctionnalités et de terminaux ainsi que la publication de messages.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/nitrogen">npmjs.com/nitrogen</link></phrase></simpara>
</section>
<section xml:id="serialport">
<title>serialport</title>
<simpara><emphasis>serialport</emphasis> est une librairie pour communiquer avec tout appareil bénéficiant d&#8217;un port série et relié à un périphérique via un port USB.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/serialport">npmjs.com/serialport</link></phrase></simpara>
</section>
<section xml:id="firmata">
<title>firmata</title>
<simpara><emphasis>firmata</emphasis> est un <emphasis>firmware</emphasis>, un protocole de communication ainsi qu&#8217;une librairie de communication pour microcontrôleur Arduino.
Le module Node permet de communiquer via ce protocole avec un Arduino préalablement flashé avec Firmata.</simpara>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/firmata">npmjs.com/firmata</link></phrase></simpara>
</section>
<section xml:id="johnny_five">
<title>johnny-five</title>
<simpara><emphasis>johnny-five</emphasis> est une librairie haut niveau pour Arduino, Raspberry Pi et autres microcontrôleurs.
Son API expose des fonctionnalités de manipulations avancées pour simplifier les interactions avec des moteurs, des servo-contrôleurs, des capteurs etc.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/johnny-five">npmjs.com/johnny-five</link></phrase></simpara>
</section>
<section xml:id="cylon">
<title>cylon</title>
<simpara><emphasis>cylon</emphasis> est une autre librairie haut niveau orientée vers la programmation d&#8217;interactions pour robots.
Son interface est particulièrement adaptée pour manipuler et réagir plusieurs robots entre eux.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/cylon">npmjs.com/cylon</link></phrase></simpara>
</section>
<section xml:id="node_red">
<title>node-red</title>
<simpara><emphasis>node-red</emphasis> est une interface visuelle de programmation d&#8217;objets connectés.
Le module Node démarre un serveur web dont l&#8217;interface a pour but de relier des sources de données, des interactions possibles ainsi que les objets devant recevoir les instructions.</simpara>
<simpara>Compatible Node et navigateurs Web.<?asciidoc-br?>
<phrase role="URL"><link xl:href="https://npmjs.com/node-red">npmjs.com/node-red</link></phrase></simpara>
</section>
</section>
<section xml:id="optimisation_des_images">
<title>Optimisation des images</title>
<itemizedlist>
<listitem>
<simpara>génération de sprites</simpara>
</listitem>
<listitem>
<simpara>réduction du poid des fichiers</simpara>
</listitem>
<listitem>
<simpara>génération de vignettes</simpara>
</listitem>
<listitem>
<simpara>SVG <phrase role="URL"><link xl:href="https://www.npmjs.com/svgo">www.npmjs.com/svgo</link></phrase></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="optimisation_des_fontes">
<title>Optimisation des fontes</title>
<itemizedlist>
<listitem>
<simpara>optimisation des chemins</simpara>
</listitem>
<listitem>
<simpara>iconfontes</simpara>
</listitem>
<listitem>
<simpara><phrase role="URL"><link xl:href="https://npmjs.com/connect-fonts">npmjs.com/connect-fonts</link></phrase></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="accessibilité">
<title>Accessibilité</title>
<itemizedlist>
<listitem>
<simpara>a11y</simpara>
</listitem>
<listitem>
<simpara>chai-a11y</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="livereload_2">
<title>Livereload</title>
<itemizedlist>
<listitem>
<simpara>watcher</simpara>
</listitem>
<listitem>
<simpara>livereload</simpara>
</listitem>
<listitem>
<simpara>HMR (Hot Module Replacement)</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="rendu_graphique">
<title>Rendu graphique</title>
<section xml:id="rendu_2d">
<title>Rendu 2D</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="rendu_3d">
<title>Rendu 3D</title>
<simpara>TBD.</simpara>
</section>
</section>
<section xml:id="rendu_sonore">
<title>Rendu sonore</title>
<section xml:id="codecs">
<title>Codecs</title>
<simpara>TBD.</simpara>
</section>
<section xml:id="web_audio">
<title>Web Audio</title>
<simpara>TBD.</simpara>
</section>
</section>
</appendix>
</book>